import TObjectHashingStrategy = require('nashorn/gnu/trove/TObjectHashingStrategy');
import TObjectIntIterator = require('nashorn/gnu/trove/TObjectIntIterator');
import Object = require('nashorn/java/lang/Object');
import TObjectProcedure = require('nashorn/gnu/trove/TObjectProcedure');
import TIntProcedure = require('nashorn/gnu/trove/TIntProcedure');
import TObjectIntProcedure = require('nashorn/gnu/trove/TObjectIntProcedure');
import TIntFunction = require('nashorn/gnu/trove/TIntFunction');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import TObjectHash = require('nashorn/gnu/trove/TObjectHash');

declare class TObjectIntHashMap<K> {
	values : number[];
	constructor();
	constructor(arg1 : number);
	constructor(arg1 : number, arg2 : number);
	constructor(arg1 : TObjectHashingStrategy<K>);
	constructor(arg1 : number, arg2 : TObjectHashingStrategy<K>);
	constructor(arg1 : number, arg2 : number, arg3 : TObjectHashingStrategy<K>);
	iterator() : TObjectIntIterator<K>;
	put(arg1 : K, arg2 : number) : number;
	get(arg1 : K) : number;
	remove(arg1 : K) : number;
	getValues() : number[];
	keys() : Object[];
	containsValue(arg1 : number) : boolean;
	containsKey(arg1 : K) : boolean;
	forEachKey(arg1 : TObjectProcedure<K>) : boolean;
	forEachValue(arg1 : TIntProcedure) : boolean;
	forEachEntry(arg1 : TObjectIntProcedure<K>) : boolean;
	retainEntries(arg1 : TObjectIntProcedure<K>) : boolean;
	transformValues(arg1 : TIntFunction) : void;
	increment(arg1 : K) : boolean;
	adjustValue(arg1 : K, arg2 : number) : boolean;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface TObjectIntHashMap<K> extends TObjectHash<K> {}

declare module TObjectIntHashMap {
	class EqProcedure<K> {
		static eq(arg1 : number, arg2 : number) : boolean;
	}


	interface EqProcedure<K> extends TObjectIntProcedure<K> {}}

export = TObjectIntHashMap
