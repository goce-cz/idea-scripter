import TObjectHashingStrategy = require('nashorn/gnu/trove/TObjectHashingStrategy');
import Map = require('nashorn/java/util/Map');
import TObjectProcedure = require('nashorn/gnu/trove/TObjectProcedure');
import TObjectObjectProcedure = require('nashorn/gnu/trove/TObjectObjectProcedure');
import TObjectFunction = require('nashorn/gnu/trove/TObjectFunction');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import TObjectHash = require('nashorn/gnu/trove/TObjectHash');
import Set = require('nashorn/java/util/Set');
import THashIterator = require('nashorn/gnu/trove/THashIterator');

declare class THashMap<K, V> {
	constructor();
	constructor(arg1 : TObjectHashingStrategy<K>);
	constructor(arg1 : number);
	constructor(arg1 : number, arg2 : TObjectHashingStrategy<K>);
	constructor(arg1 : number, arg2 : number);
	constructor(arg1 : number, arg2 : number, arg3 : TObjectHashingStrategy<K>);
	constructor(arg1 : Map<K, V>);
	constructor(arg1 : Map<K, V>, arg2 : TObjectHashingStrategy<K>);
	forEachKey(arg1 : TObjectProcedure<K>) : boolean;
	forEachValue(arg1 : TObjectProcedure<V>) : boolean;
	forEachEntry(arg1 : TObjectObjectProcedure<K, V>) : boolean;
	retainEntries(arg1 : TObjectObjectProcedure<K, V>) : boolean;
	transformValues(arg1 : TObjectFunction<V, V>) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface THashMap<K, V> extends TObjectHash<K>, Map<K, V> {}

declare module THashMap {
	class Entry {
		key : K;
		value : V;
	}


	interface Entry extends Map.Entry<K, V> {}	class KeyView {
	}


	interface KeyView extends THashMap.MapBackedView<K> {}	class MapBackedView<E> {
		empty : boolean;
		removeElement(arg1 : E) : boolean;
		containsElement(arg1 : E) : boolean;
	}


	interface MapBackedView<E> extends Set<E> {}	class EntryView {
		valueForEntry(arg1 : Map.Entry<K, V>) : V;
		keyForEntry(arg1 : Map.Entry<K, V>) : K;
	}


	interface EntryView extends THashMap.MapBackedView<Map.Entry<K, V>> {}

	module EntryView {
		class EntryIterator {
		}


		interface EntryIterator extends THashIterator<Map.Entry<K, V>> {}	}
	class ValueView {
	}


	interface ValueView extends THashMap.MapBackedView<V> {}	class EqProcedure<K, V> {
	}


	interface EqProcedure<K, V> extends TObjectObjectProcedure<K, V> {}	class HashProcedure {
		hashCode : number;
		getHashCode() : number;
	}


	interface HashProcedure extends TObjectObjectProcedure<K, V> {}}

export = THashMap
