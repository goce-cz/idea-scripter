import TIntFunction = require('nashorn/gnu/trove/TIntFunction');
import Random = require('nashorn/java/util/Random');
import TIntProcedure = require('nashorn/gnu/trove/TIntProcedure');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Serializable = require('nashorn/java/io/Serializable');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class TIntArrayList {
	empty : boolean;
	constructor();
	constructor(arg1 : number);
	constructor(arg1 : number[]);
	ensureCapacity(arg1 : number) : void;
	size() : number;
	isEmpty() : boolean;
	trimToSize() : void;
	add(arg1 : number) : void;
	add(arg1 : number[]) : void;
	add(arg1 : number[], arg2 : number, arg3 : number) : void;
	insert(arg1 : number, arg2 : number) : void;
	insert(arg1 : number, arg2 : number[]) : void;
	insert(arg1 : number, arg2 : number[], arg3 : number, arg4 : number) : void;
	get(arg1 : number) : number;
	getQuick(arg1 : number) : number;
	set(arg1 : number, arg2 : number) : void;
	getSet(arg1 : number, arg2 : number) : number;
	set(arg1 : number, arg2 : number[]) : void;
	set(arg1 : number, arg2 : number[], arg3 : number, arg4 : number) : void;
	setQuick(arg1 : number, arg2 : number) : void;
	clear() : void;
	clear(arg1 : number) : void;
	reset() : void;
	resetQuick() : void;
	remove(arg1 : number) : number;
	remove(arg1 : number, arg2 : number) : void;
	transformValues(arg1 : TIntFunction) : void;
	reverse() : void;
	reverse(arg1 : number, arg2 : number) : void;
	shuffle(arg1 : Random) : void;
	swap(arg1 : number, arg2 : number) : void;
	toNativeArray() : number[];
	toNativeArray(arg1 : number, arg2 : number) : number[];
	toNativeArray(arg1 : number[], arg2 : number, arg3 : number) : void;
	forEach(arg1 : TIntProcedure) : boolean;
	forEachDescending(arg1 : TIntProcedure) : boolean;
	sort() : void;
	sort(arg1 : number, arg2 : number) : void;
	fill(arg1 : number) : void;
	fill(arg1 : number, arg2 : number, arg3 : number) : void;
	binarySearch(arg1 : number) : number;
	binarySearch(arg1 : number, arg2 : number, arg3 : number) : number;
	indexOf(arg1 : number) : number;
	indexOf(arg1 : number, arg2 : number) : number;
	lastIndexOf(arg1 : number) : number;
	lastIndexOf(arg1 : number, arg2 : number) : number;
	contains(arg1 : number) : boolean;
	grep(arg1 : TIntProcedure) : TIntArrayList;
	inverseGrep(arg1 : TIntProcedure) : TIntArrayList;
	max() : number;
	min() : number;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface TIntArrayList extends Serializable, Cloneable {}
export = TIntArrayList
