import Map = require('nashorn/java/util/Map');
import Set = require('nashorn/java/util/Set');
import ZoneRules = require('nashorn/java/time/zone/ZoneRules');
import ZoneOffset = require('nashorn/java/time/ZoneOffset');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import TextStyle = require('nashorn/java/time/format/TextStyle');
import Locale = require('nashorn/java/util/Locale');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Object = require('nashorn/java/lang/Object');
import DataOutput = require('nashorn/java/io/DataOutput');
import Serializable = require('nashorn/java/io/Serializable');

declare class ZoneId {
	static SHORT_IDS : Map<string, string>;
	static availableZoneIds : Set<string>;
	id : string;
	rules : ZoneRules;
	static systemDefault() : ZoneId;
	static getAvailableZoneIds() : Set<string>;
	static of(arg1 : string, arg2 : Map<string, string>) : ZoneId;
	static of(arg1 : string) : ZoneId;
	static ofOffset(arg1 : string, arg2 : ZoneOffset) : ZoneId;
	static of(arg1 : string, arg2 : boolean) : ZoneId;
	static ofWithPrefix(arg1 : string, arg2 : number, arg3 : boolean) : ZoneId;
	static from(arg1 : TemporalAccessor) : ZoneId;
	getId() : string;
	getDisplayName(arg1 : TextStyle, arg2 : Locale) : string;
	toTemporal() : TemporalAccessor;
	getRules() : ZoneRules;
	normalized() : ZoneId;
	readObject(arg1 : ObjectInputStream) : void;
	writeReplace() : Object;
	write(arg1 : DataOutput) : void;
}


declare interface ZoneId extends Serializable {}
export = ZoneId
