import Clock = require('nashorn/java/time/Clock');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import CharSequence = require('nashorn/java/lang/CharSequence');
import TemporalUnit = require('nashorn/java/time/temporal/TemporalUnit');
import ZoneOffset = require('nashorn/java/time/ZoneOffset');
import OffsetDateTime = require('nashorn/java/time/OffsetDateTime');
import ZoneId = require('nashorn/java/time/ZoneId');
import ZonedDateTime = require('nashorn/java/time/ZonedDateTime');
import Object = require('nashorn/java/lang/Object');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import DataOutput = require('nashorn/java/io/DataOutput');
import DataInput = require('nashorn/java/io/DataInput');
import Temporal = require('nashorn/java/time/temporal/Temporal');
import TemporalAdjuster = require('nashorn/java/time/temporal/TemporalAdjuster');
import Comparable = require('nashorn/java/lang/Comparable');
import Serializable = require('nashorn/java/io/Serializable');

declare class Instant {
	static EPOCH : Instant;
	static MIN : Instant;
	static MAX : Instant;
	epochSecond : number;
	nano : number;
	static now() : Instant;
	static now(arg1 : Clock) : Instant;
	static ofEpochSecond(arg1 : number) : Instant;
	static ofEpochSecond(arg1 : number, arg2 : number) : Instant;
	static ofEpochMilli(arg1 : number) : Instant;
	static from(arg1 : TemporalAccessor) : Instant;
	static parse(arg1 : CharSequence) : Instant;
	static create(arg1 : number, arg2 : number) : Instant;
	getEpochSecond() : number;
	getNano() : number;
	truncatedTo(arg1 : TemporalUnit) : Instant;
	plusSeconds(arg1 : number) : Instant;
	plusMillis(arg1 : number) : Instant;
	plusNanos(arg1 : number) : Instant;
	plus(arg1 : number, arg2 : number) : Instant;
	minusSeconds(arg1 : number) : Instant;
	minusMillis(arg1 : number) : Instant;
	minusNanos(arg1 : number) : Instant;
	nanosUntil(arg1 : Instant) : number;
	secondsUntil(arg1 : Instant) : number;
	atOffset(arg1 : ZoneOffset) : OffsetDateTime;
	atZone(arg1 : ZoneId) : ZonedDateTime;
	toEpochMilli() : number;
	isAfter(arg1 : Instant) : boolean;
	isBefore(arg1 : Instant) : boolean;
	writeReplace() : Object;
	readObject(arg1 : ObjectInputStream) : void;
	writeExternal(arg1 : DataOutput) : void;
	static readExternal(arg1 : DataInput) : Instant;
}


declare interface Instant extends Temporal, TemporalAdjuster, Comparable<Instant>, Serializable {}
export = Instant
