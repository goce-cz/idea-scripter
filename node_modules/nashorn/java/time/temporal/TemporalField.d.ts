import Object = require('nashorn/java/lang/Object');
import TemporalUnit = require('nashorn/java/time/temporal/TemporalUnit');
import Locale = require('nashorn/java/util/Locale');
import ValueRange = require('nashorn/java/time/temporal/ValueRange');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import Temporal = require('nashorn/java/time/temporal/Temporal');
import Map = require('nashorn/java/util/Map');
import ResolverStyle = require('nashorn/java/time/format/ResolverStyle');

declare class TemporalField extends Object {
	baseUnit : TemporalUnit;
	rangeUnit : TemporalUnit;
	dateBased : boolean;
	timeBased : boolean;
	getDisplayName(arg1 : Locale) : string;
	getBaseUnit() : TemporalUnit;
	getRangeUnit() : TemporalUnit;
	range() : ValueRange;
	isDateBased() : boolean;
	isTimeBased() : boolean;
	isSupportedBy(arg1 : TemporalAccessor) : boolean;
	rangeRefinedBy(arg1 : TemporalAccessor) : ValueRange;
	getFrom(arg1 : TemporalAccessor) : number;
	adjustInto<R extends Temporal>(arg1 : R, arg2 : number) : R;
	resolve(arg1 : Map<TemporalField, number>, arg2 : TemporalAccessor, arg3 : ResolverStyle) : TemporalAccessor;
}

export = TemporalField
