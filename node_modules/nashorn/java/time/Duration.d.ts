import List = require('nashorn/java/util/List');
import TemporalUnit = require('nashorn/java/time/temporal/TemporalUnit');
import TemporalAmount = require('nashorn/java/time/temporal/TemporalAmount');
import CharSequence = require('nashorn/java/lang/CharSequence');
import Temporal = require('nashorn/java/time/temporal/Temporal');
import Object = require('nashorn/java/lang/Object');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import DataOutput = require('nashorn/java/io/DataOutput');
import DataInput = require('nashorn/java/io/DataInput');
import Comparable = require('nashorn/java/lang/Comparable');
import Serializable = require('nashorn/java/io/Serializable');

declare class Duration {
	static ZERO : Duration;
	units : List<TemporalUnit>;
	zero : boolean;
	negative : boolean;
	seconds : number;
	nano : number;
	static ofDays(arg1 : number) : Duration;
	static ofHours(arg1 : number) : Duration;
	static ofMinutes(arg1 : number) : Duration;
	static ofSeconds(arg1 : number) : Duration;
	static ofSeconds(arg1 : number, arg2 : number) : Duration;
	static ofMillis(arg1 : number) : Duration;
	static ofNanos(arg1 : number) : Duration;
	static of(arg1 : number, arg2 : TemporalUnit) : Duration;
	static from(arg1 : TemporalAmount) : Duration;
	static parse(arg1 : CharSequence) : Duration;
	static parseNumber(arg1 : CharSequence, arg2 : string, arg3 : number, arg4 : string) : number;
	static parseFraction(arg1 : CharSequence, arg2 : string, arg3 : number) : number;
	static create(arg1 : boolean, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : Duration;
	static between(arg1 : Temporal, arg2 : Temporal) : Duration;
	static create(arg1 : number, arg2 : number) : Duration;
	isZero() : boolean;
	isNegative() : boolean;
	getSeconds() : number;
	getNano() : number;
	withSeconds(arg1 : number) : Duration;
	withNanos(arg1 : number) : Duration;
	plus(arg1 : Duration) : Duration;
	plus(arg1 : number, arg2 : TemporalUnit) : Duration;
	plusDays(arg1 : number) : Duration;
	plusHours(arg1 : number) : Duration;
	plusMinutes(arg1 : number) : Duration;
	plusSeconds(arg1 : number) : Duration;
	plusMillis(arg1 : number) : Duration;
	plusNanos(arg1 : number) : Duration;
	plus(arg1 : number, arg2 : number) : Duration;
	minus(arg1 : Duration) : Duration;
	minus(arg1 : number, arg2 : TemporalUnit) : Duration;
	minusDays(arg1 : number) : Duration;
	minusHours(arg1 : number) : Duration;
	minusMinutes(arg1 : number) : Duration;
	minusSeconds(arg1 : number) : Duration;
	minusMillis(arg1 : number) : Duration;
	minusNanos(arg1 : number) : Duration;
	multipliedBy(arg1 : number) : Duration;
	dividedBy(arg1 : number) : Duration;
	toSeconds() : number;
	static create(arg1 : number) : Duration;
	negated() : Duration;
	abs() : Duration;
	toDays() : number;
	toHours() : number;
	toMinutes() : number;
	toMillis() : number;
	toNanos() : number;
	writeReplace() : Object;
	readObject(arg1 : ObjectInputStream) : void;
	writeExternal(arg1 : DataOutput) : void;
	static readExternal(arg1 : DataInput) : Duration;
}


declare interface Duration extends TemporalAmount, Comparable<Duration>, Serializable {}

declare module Duration {
	class DurationUnits extends Object {
	}
}

export = Duration
