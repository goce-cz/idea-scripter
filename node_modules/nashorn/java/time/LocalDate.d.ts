import IsoChronology = require('nashorn/java/time/chrono/IsoChronology');
import Era = require('nashorn/java/time/chrono/Era');
import Month = require('nashorn/java/time/Month');
import DayOfWeek = require('nashorn/java/time/DayOfWeek');
import ZoneId = require('nashorn/java/time/ZoneId');
import Clock = require('nashorn/java/time/Clock');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import CharSequence = require('nashorn/java/lang/CharSequence');
import DateTimeFormatter = require('nashorn/java/time/format/DateTimeFormatter');
import TemporalField = require('nashorn/java/time/temporal/TemporalField');
import LocalDateTime = require('nashorn/java/time/LocalDateTime');
import OffsetTime = require('nashorn/java/time/OffsetTime');
import OffsetDateTime = require('nashorn/java/time/OffsetDateTime');
import ZonedDateTime = require('nashorn/java/time/ZonedDateTime');
import Object = require('nashorn/java/lang/Object');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import DataOutput = require('nashorn/java/io/DataOutput');
import DataInput = require('nashorn/java/io/DataInput');
import Temporal = require('nashorn/java/time/temporal/Temporal');
import TemporalAdjuster = require('nashorn/java/time/temporal/TemporalAdjuster');
import ChronoLocalDate = require('nashorn/java/time/chrono/ChronoLocalDate');
import Serializable = require('nashorn/java/io/Serializable');

declare class LocalDate {
	static MIN : LocalDate;
	static MAX : LocalDate;
	chronology : IsoChronology;
	era : Era;
	year : number;
	monthValue : number;
	month : Month;
	dayOfMonth : number;
	dayOfYear : number;
	dayOfWeek : DayOfWeek;
	leapYear : boolean;
	static now() : LocalDate;
	static now(arg1 : ZoneId) : LocalDate;
	static now(arg1 : Clock) : LocalDate;
	static of(arg1 : number, arg2 : Month, arg3 : number) : LocalDate;
	static of(arg1 : number, arg2 : number, arg3 : number) : LocalDate;
	static ofYearDay(arg1 : number, arg2 : number) : LocalDate;
	static ofEpochDay(arg1 : number) : LocalDate;
	static from(arg1 : TemporalAccessor) : LocalDate;
	static parse(arg1 : CharSequence) : LocalDate;
	static parse(arg1 : CharSequence, arg2 : DateTimeFormatter) : LocalDate;
	static create(arg1 : number, arg2 : number, arg3 : number) : LocalDate;
	static resolvePreviousValid(arg1 : number, arg2 : number, arg3 : number) : LocalDate;
	get0(arg1 : TemporalField) : number;
	getProlepticMonth() : number;
	getYear() : number;
	getMonthValue() : number;
	getMonth() : Month;
	getDayOfMonth() : number;
	getDayOfYear() : number;
	getDayOfWeek() : DayOfWeek;
	withYear(arg1 : number) : LocalDate;
	withMonth(arg1 : number) : LocalDate;
	withDayOfMonth(arg1 : number) : LocalDate;
	withDayOfYear(arg1 : number) : LocalDate;
	plusYears(arg1 : number) : LocalDate;
	plusMonths(arg1 : number) : LocalDate;
	plusWeeks(arg1 : number) : LocalDate;
	plusDays(arg1 : number) : LocalDate;
	minusYears(arg1 : number) : LocalDate;
	minusMonths(arg1 : number) : LocalDate;
	minusWeeks(arg1 : number) : LocalDate;
	minusDays(arg1 : number) : LocalDate;
	daysUntil(arg1 : LocalDate) : number;
	monthsUntil(arg1 : LocalDate) : number;
	atTime(arg1 : number, arg2 : number) : LocalDateTime;
	atTime(arg1 : number, arg2 : number, arg3 : number) : LocalDateTime;
	atTime(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : LocalDateTime;
	atTime(arg1 : OffsetTime) : OffsetDateTime;
	atStartOfDay() : LocalDateTime;
	atStartOfDay(arg1 : ZoneId) : ZonedDateTime;
	compareTo0(arg1 : LocalDate) : number;
	writeReplace() : Object;
	readObject(arg1 : ObjectInputStream) : void;
	writeExternal(arg1 : DataOutput) : void;
	static readExternal(arg1 : DataInput) : LocalDate;
}


declare interface LocalDate extends Temporal, TemporalAdjuster, ChronoLocalDate, Serializable {}
export = LocalDate
