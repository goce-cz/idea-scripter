import Month = require('nashorn/java/time/Month');
import DayOfWeek = require('nashorn/java/time/DayOfWeek');
import LocalTime = require('nashorn/java/time/LocalTime');
import ZoneOffset = require('nashorn/java/time/ZoneOffset');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Object = require('nashorn/java/lang/Object');
import DataOutput = require('nashorn/java/io/DataOutput');
import DataInput = require('nashorn/java/io/DataInput');
import ZoneOffsetTransition = require('nashorn/java/time/zone/ZoneOffsetTransition');
import Serializable = require('nashorn/java/io/Serializable');
import LocalDateTime = require('nashorn/java/time/LocalDateTime');
import Enum = require('nashorn/java/lang/Enum');

declare class ZoneOffsetTransitionRule {
	month : Month;
	dayOfMonthIndicator : number;
	dayOfWeek : DayOfWeek;
	localTime : LocalTime;
	midnightEndOfDay : boolean;
	timeDefinition : ZoneOffsetTransitionRule.TimeDefinition;
	standardOffset : ZoneOffset;
	offsetBefore : ZoneOffset;
	offsetAfter : ZoneOffset;
	static of(arg1 : Month, arg2 : number, arg3 : DayOfWeek, arg4 : LocalTime, arg5 : boolean, arg6 : ZoneOffsetTransitionRule.TimeDefinition, arg7 : ZoneOffset, arg8 : ZoneOffset, arg9 : ZoneOffset) : ZoneOffsetTransitionRule;
	readObject(arg1 : ObjectInputStream) : void;
	writeReplace() : Object;
	writeExternal(arg1 : DataOutput) : void;
	static readExternal(arg1 : DataInput) : ZoneOffsetTransitionRule;
	getMonth() : Month;
	getDayOfMonthIndicator() : number;
	getDayOfWeek() : DayOfWeek;
	getLocalTime() : LocalTime;
	isMidnightEndOfDay() : boolean;
	getTimeDefinition() : ZoneOffsetTransitionRule.TimeDefinition;
	getStandardOffset() : ZoneOffset;
	getOffsetBefore() : ZoneOffset;
	getOffsetAfter() : ZoneOffset;
	createTransition(arg1 : number) : ZoneOffsetTransition;
}


declare interface ZoneOffsetTransitionRule extends Serializable {}

declare module ZoneOffsetTransitionRule {
	class TimeDefinition {
		static UTC : ZoneOffsetTransitionRule.TimeDefinition;
		static WALL : ZoneOffsetTransitionRule.TimeDefinition;
		static STANDARD : ZoneOffsetTransitionRule.TimeDefinition;
		createDateTime(arg1 : LocalDateTime, arg2 : ZoneOffset, arg3 : ZoneOffset) : LocalDateTime;
	}


	interface TimeDefinition extends Enum<ZoneOffsetTransitionRule.TimeDefinition> {}}

export = ZoneOffsetTransitionRule
