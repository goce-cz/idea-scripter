import List = require('nashorn/java/util/List');
import ZoneOffsetTransition = require('nashorn/java/time/zone/ZoneOffsetTransition');
import ZoneOffsetTransitionRule = require('nashorn/java/time/zone/ZoneOffsetTransitionRule');
import ZoneOffset = require('nashorn/java/time/ZoneOffset');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Object = require('nashorn/java/lang/Object');
import DataOutput = require('nashorn/java/io/DataOutput');
import DataInput = require('nashorn/java/io/DataInput');
import Instant = require('nashorn/java/time/Instant');
import LocalDateTime = require('nashorn/java/time/LocalDateTime');
import Duration = require('nashorn/java/time/Duration');
import Serializable = require('nashorn/java/io/Serializable');

declare class ZoneRules {
	fixedOffset : boolean;
	transitions : List<ZoneOffsetTransition>;
	transitionRules : List<ZoneOffsetTransitionRule>;
	static of(arg1 : ZoneOffset, arg2 : ZoneOffset, arg3 : List<ZoneOffsetTransition>, arg4 : List<ZoneOffsetTransition>, arg5 : List<ZoneOffsetTransitionRule>) : ZoneRules;
	static of(arg1 : ZoneOffset) : ZoneRules;
	readObject(arg1 : ObjectInputStream) : void;
	writeReplace() : Object;
	writeExternal(arg1 : DataOutput) : void;
	static readExternal(arg1 : DataInput) : ZoneRules;
	isFixedOffset() : boolean;
	getOffset(arg1 : Instant) : ZoneOffset;
	getOffset(arg1 : LocalDateTime) : ZoneOffset;
	getValidOffsets(arg1 : LocalDateTime) : List<ZoneOffset>;
	getTransition(arg1 : LocalDateTime) : ZoneOffsetTransition;
	getOffsetInfo(arg1 : LocalDateTime) : Object;
	findOffsetInfo(arg1 : LocalDateTime, arg2 : ZoneOffsetTransition) : Object;
	findTransitionArray(arg1 : number) : ZoneOffsetTransition[];
	getStandardOffset(arg1 : Instant) : ZoneOffset;
	getDaylightSavings(arg1 : Instant) : Duration;
	isDaylightSavings(arg1 : Instant) : boolean;
	isValidOffset(arg1 : LocalDateTime, arg2 : ZoneOffset) : boolean;
	nextTransition(arg1 : Instant) : ZoneOffsetTransition;
	previousTransition(arg1 : Instant) : ZoneOffsetTransition;
	findYear(arg1 : number, arg2 : ZoneOffset) : number;
	getTransitions() : List<ZoneOffsetTransition>;
	getTransitionRules() : List<ZoneOffsetTransitionRule>;
}


declare interface ZoneRules extends Serializable {}
export = ZoneRules
