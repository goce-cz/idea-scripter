import Instant = require('nashorn/java/time/Instant');
import LocalDateTime = require('nashorn/java/time/LocalDateTime');
import ZoneOffset = require('nashorn/java/time/ZoneOffset');
import Duration = require('nashorn/java/time/Duration');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Object = require('nashorn/java/lang/Object');
import DataOutput = require('nashorn/java/io/DataOutput');
import DataInput = require('nashorn/java/io/DataInput');
import List = require('nashorn/java/util/List');
import Comparable = require('nashorn/java/lang/Comparable');
import Serializable = require('nashorn/java/io/Serializable');

declare class ZoneOffsetTransition {
	instant : Instant;
	dateTimeBefore : LocalDateTime;
	dateTimeAfter : LocalDateTime;
	offsetBefore : ZoneOffset;
	offsetAfter : ZoneOffset;
	duration : Duration;
	gap : boolean;
	overlap : boolean;
	static of(arg1 : LocalDateTime, arg2 : ZoneOffset, arg3 : ZoneOffset) : ZoneOffsetTransition;
	readObject(arg1 : ObjectInputStream) : void;
	writeReplace() : Object;
	writeExternal(arg1 : DataOutput) : void;
	static readExternal(arg1 : DataInput) : ZoneOffsetTransition;
	getInstant() : Instant;
	toEpochSecond() : number;
	getDateTimeBefore() : LocalDateTime;
	getDateTimeAfter() : LocalDateTime;
	getOffsetBefore() : ZoneOffset;
	getOffsetAfter() : ZoneOffset;
	getDuration() : Duration;
	getDurationSeconds() : number;
	isGap() : boolean;
	isOverlap() : boolean;
	isValidOffset(arg1 : ZoneOffset) : boolean;
	getValidOffsets() : List<ZoneOffset>;
}


declare interface ZoneOffsetTransition extends Comparable<ZoneOffsetTransition>, Serializable {}
export = ZoneOffsetTransition
