import Object = require('nashorn/java/lang/Object');
import Locale = require('nashorn/java/util/Locale');
import DecimalStyle = require('nashorn/java/time/format/DecimalStyle');
import Chronology = require('nashorn/java/time/chrono/Chronology');
import ZoneId = require('nashorn/java/time/ZoneId');
import ResolverStyle = require('nashorn/java/time/format/ResolverStyle');
import Set = require('nashorn/java/util/Set');
import TemporalField = require('nashorn/java/time/temporal/TemporalField');
import FormatStyle = require('nashorn/java/time/format/FormatStyle');
import TemporalQuery = require('nashorn/java/time/temporal/TemporalQuery');
import Period = require('nashorn/java/time/Period');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import Appendable = require('nashorn/java/lang/Appendable');
import CharSequence = require('nashorn/java/lang/CharSequence');
import ParsePosition = require('nashorn/java/text/ParsePosition');
import RuntimeException = require('nashorn/java/lang/RuntimeException');
import DateTimeParseException = require('nashorn/java/time/format/DateTimeParseException');
import DateTimeParseContext = require('nashorn/java/time/format/DateTimeParseContext');
import DateTimeFormatterBuilder = require('nashorn/java/time/format/DateTimeFormatterBuilder');
import Format = require('nashorn/java/text/Format');

declare class DateTimeFormatter extends Object {
	static ISO_LOCAL_DATE : DateTimeFormatter;
	static ISO_OFFSET_DATE : DateTimeFormatter;
	static ISO_DATE : DateTimeFormatter;
	static ISO_LOCAL_TIME : DateTimeFormatter;
	static ISO_OFFSET_TIME : DateTimeFormatter;
	static ISO_TIME : DateTimeFormatter;
	static ISO_LOCAL_DATE_TIME : DateTimeFormatter;
	static ISO_OFFSET_DATE_TIME : DateTimeFormatter;
	static ISO_ZONED_DATE_TIME : DateTimeFormatter;
	static ISO_DATE_TIME : DateTimeFormatter;
	static ISO_ORDINAL_DATE : DateTimeFormatter;
	static ISO_WEEK_DATE : DateTimeFormatter;
	static ISO_INSTANT : DateTimeFormatter;
	static BASIC_ISO_DATE : DateTimeFormatter;
	static RFC_1123_DATE_TIME : DateTimeFormatter;
	locale : Locale;
	decimalStyle : DecimalStyle;
	chronology : Chronology;
	zone : ZoneId;
	resolverStyle : ResolverStyle;
	resolverFields : Set<TemporalField>;
	static ofPattern(arg1 : string) : DateTimeFormatter;
	static ofPattern(arg1 : string, arg2 : Locale) : DateTimeFormatter;
	static ofLocalizedDate(arg1 : FormatStyle) : DateTimeFormatter;
	static ofLocalizedTime(arg1 : FormatStyle) : DateTimeFormatter;
	static ofLocalizedDateTime(arg1 : FormatStyle) : DateTimeFormatter;
	static ofLocalizedDateTime(arg1 : FormatStyle, arg2 : FormatStyle) : DateTimeFormatter;
	static parsedExcessDays() : TemporalQuery<Period>;
	static parsedLeapSecond() : TemporalQuery<boolean>;
	getLocale() : Locale;
	withLocale(arg1 : Locale) : DateTimeFormatter;
	getDecimalStyle() : DecimalStyle;
	withDecimalStyle(arg1 : DecimalStyle) : DateTimeFormatter;
	getChronology() : Chronology;
	withChronology(arg1 : Chronology) : DateTimeFormatter;
	getZone() : ZoneId;
	withZone(arg1 : ZoneId) : DateTimeFormatter;
	getResolverStyle() : ResolverStyle;
	withResolverStyle(arg1 : ResolverStyle) : DateTimeFormatter;
	getResolverFields() : Set<TemporalField>;
	withResolverFields(arg1 : TemporalField[]) : DateTimeFormatter;
	withResolverFields(arg1 : Set<TemporalField>) : DateTimeFormatter;
	format(arg1 : TemporalAccessor) : string;
	formatTo(arg1 : TemporalAccessor, arg2 : Appendable) : void;
	parse(arg1 : CharSequence) : TemporalAccessor;
	parse(arg1 : CharSequence, arg2 : ParsePosition) : TemporalAccessor;
	parse<T>(arg1 : CharSequence, arg2 : TemporalQuery<T>) : T;
	parseBest(arg1 : CharSequence, arg2 : TemporalQuery<any>[]) : TemporalAccessor;
	createError(arg1 : CharSequence, arg2 : RuntimeException) : DateTimeParseException;
	parseResolved0(arg1 : CharSequence, arg2 : ParsePosition) : TemporalAccessor;
	parseUnresolved(arg1 : CharSequence, arg2 : ParsePosition) : TemporalAccessor;
	parseUnresolved0(arg1 : CharSequence, arg2 : ParsePosition) : DateTimeParseContext;
	toPrinterParser(arg1 : boolean) : DateTimeFormatterBuilder.CompositePrinterParser;
	toFormat() : Format;
	toFormat(arg1 : TemporalQuery<any>) : Format;
}


declare module DateTimeFormatter {
	class ClassicFormat {
		constructor(arg1 : DateTimeFormatter, arg2 : TemporalQuery<any>);
	}


	interface ClassicFormat extends Format {}}

export = DateTimeFormatter
