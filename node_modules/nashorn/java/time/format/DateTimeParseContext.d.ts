import Object = require('nashorn/java/lang/Object');
import Locale = require('nashorn/java/util/Locale');
import DecimalStyle = require('nashorn/java/time/format/DecimalStyle');
import Chronology = require('nashorn/java/time/chrono/Chronology');
import CharSequence = require('nashorn/java/lang/CharSequence');
import Parsed = require('nashorn/java/time/format/Parsed');
import ResolverStyle = require('nashorn/java/time/format/ResolverStyle');
import Set = require('nashorn/java/util/Set');
import TemporalField = require('nashorn/java/time/temporal/TemporalField');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import Consumer = require('nashorn/java/util/function/Consumer');
import ZoneId = require('nashorn/java/time/ZoneId');

declare class DateTimeParseContext extends Object {
	copy() : DateTimeParseContext;
	getLocale() : Locale;
	getDecimalStyle() : DecimalStyle;
	getEffectiveChronology() : Chronology;
	isCaseSensitive() : boolean;
	setCaseSensitive(arg1 : boolean) : void;
	subSequenceEquals(arg1 : CharSequence, arg2 : number, arg3 : CharSequence, arg4 : number, arg5 : number) : boolean;
	charEquals(arg1 : string, arg2 : string) : boolean;
	static charEqualsIgnoreCase(arg1 : string, arg2 : string) : boolean;
	isStrict() : boolean;
	setStrict(arg1 : boolean) : void;
	startOptional() : void;
	endOptional(arg1 : boolean) : void;
	currentParsed() : Parsed;
	toUnresolved() : Parsed;
	toResolved(arg1 : ResolverStyle, arg2 : Set<TemporalField>) : TemporalAccessor;
	getParsed(arg1 : TemporalField) : number;
	setParsedField(arg1 : TemporalField, arg2 : number, arg3 : number, arg4 : number) : number;
	setParsed(arg1 : Chronology) : void;
	addChronoChangedListener(arg1 : Consumer<Chronology>) : void;
	setParsed(arg1 : ZoneId) : void;
	setParsedLeapSecond() : void;
}

export = DateTimeParseContext
