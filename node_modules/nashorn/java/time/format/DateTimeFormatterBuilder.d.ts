import Object = require('nashorn/java/lang/Object');
import FormatStyle = require('nashorn/java/time/format/FormatStyle');
import Chronology = require('nashorn/java/time/chrono/Chronology');
import Locale = require('nashorn/java/util/Locale');
import TemporalField = require('nashorn/java/time/temporal/TemporalField');
import SignStyle = require('nashorn/java/time/format/SignStyle');
import ChronoLocalDate = require('nashorn/java/time/chrono/ChronoLocalDate');
import TextStyle = require('nashorn/java/time/format/TextStyle');
import Map = require('nashorn/java/util/Map');
import Set = require('nashorn/java/util/Set');
import ZoneId = require('nashorn/java/time/ZoneId');
import DateTimeFormatter = require('nashorn/java/time/format/DateTimeFormatter');
import ResolverStyle = require('nashorn/java/time/format/ResolverStyle');
import DateTimePrintContext = require('nashorn/java/time/format/DateTimePrintContext');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import DateTimeParseContext = require('nashorn/java/time/format/DateTimeParseContext');
import CharSequence = require('nashorn/java/lang/CharSequence');
import ParsePosition = require('nashorn/java/text/ParsePosition');
import Enum = require('nashorn/java/lang/Enum');

declare class DateTimeFormatterBuilder extends Object {
	constructor();
	static getLocalizedDateTimePattern(arg1 : FormatStyle, arg2 : FormatStyle, arg3 : Chronology, arg4 : Locale) : string;
	static convertStyle(arg1 : FormatStyle) : number;
	parseCaseSensitive() : DateTimeFormatterBuilder;
	parseCaseInsensitive() : DateTimeFormatterBuilder;
	parseStrict() : DateTimeFormatterBuilder;
	parseLenient() : DateTimeFormatterBuilder;
	parseDefaulting(arg1 : TemporalField, arg2 : number) : DateTimeFormatterBuilder;
	appendValue(arg1 : TemporalField) : DateTimeFormatterBuilder;
	appendValue(arg1 : TemporalField, arg2 : number) : DateTimeFormatterBuilder;
	appendValue(arg1 : TemporalField, arg2 : number, arg3 : number, arg4 : SignStyle) : DateTimeFormatterBuilder;
	appendValueReduced(arg1 : TemporalField, arg2 : number, arg3 : number, arg4 : number) : DateTimeFormatterBuilder;
	appendValueReduced(arg1 : TemporalField, arg2 : number, arg3 : number, arg4 : ChronoLocalDate) : DateTimeFormatterBuilder;
	appendValue(arg1 : DateTimeFormatterBuilder.NumberPrinterParser) : DateTimeFormatterBuilder;
	appendFraction(arg1 : TemporalField, arg2 : number, arg3 : number, arg4 : boolean) : DateTimeFormatterBuilder;
	appendText(arg1 : TemporalField) : DateTimeFormatterBuilder;
	appendText(arg1 : TemporalField, arg2 : TextStyle) : DateTimeFormatterBuilder;
	appendText(arg1 : TemporalField, arg2 : Map<number, string>) : DateTimeFormatterBuilder;
	appendInstant() : DateTimeFormatterBuilder;
	appendInstant(arg1 : number) : DateTimeFormatterBuilder;
	appendOffsetId() : DateTimeFormatterBuilder;
	appendOffset(arg1 : string, arg2 : string) : DateTimeFormatterBuilder;
	appendLocalizedOffset(arg1 : TextStyle) : DateTimeFormatterBuilder;
	appendZoneId() : DateTimeFormatterBuilder;
	appendZoneRegionId() : DateTimeFormatterBuilder;
	appendZoneOrOffsetId() : DateTimeFormatterBuilder;
	appendZoneText(arg1 : TextStyle) : DateTimeFormatterBuilder;
	appendZoneText(arg1 : TextStyle, arg2 : Set<ZoneId>) : DateTimeFormatterBuilder;
	appendChronologyId() : DateTimeFormatterBuilder;
	appendChronologyText(arg1 : TextStyle) : DateTimeFormatterBuilder;
	appendLocalized(arg1 : FormatStyle, arg2 : FormatStyle) : DateTimeFormatterBuilder;
	appendLiteral(arg1 : string) : DateTimeFormatterBuilder;
	appendLiteral(arg1 : string) : DateTimeFormatterBuilder;
	append(arg1 : DateTimeFormatter) : DateTimeFormatterBuilder;
	appendOptional(arg1 : DateTimeFormatter) : DateTimeFormatterBuilder;
	appendPattern(arg1 : string) : DateTimeFormatterBuilder;
	parsePattern(arg1 : string) : void;
	parseField(arg1 : string, arg2 : number, arg3 : TemporalField) : void;
	padNext(arg1 : number) : DateTimeFormatterBuilder;
	padNext(arg1 : number, arg2 : string) : DateTimeFormatterBuilder;
	optionalStart() : DateTimeFormatterBuilder;
	optionalEnd() : DateTimeFormatterBuilder;
	appendInternal(arg1 : DateTimeFormatterBuilder.DateTimePrinterParser) : number;
	toFormatter() : DateTimeFormatter;
	toFormatter(arg1 : Locale) : DateTimeFormatter;
	toFormatter(arg1 : ResolverStyle, arg2 : Chronology) : DateTimeFormatter;
	toFormatter(arg1 : Locale, arg2 : ResolverStyle, arg3 : Chronology) : DateTimeFormatter;
}


declare module DateTimeFormatterBuilder {
	class CharLiteralPrinterParser {
	}


	interface CharLiteralPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class ChronoPrinterParser {
		getChronologyName(arg1 : Chronology, arg2 : Locale) : string;
	}


	interface ChronoPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class CompositePrinterParser {
		withOptional(arg1 : boolean) : DateTimeFormatterBuilder.CompositePrinterParser;
	}


	interface CompositePrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class DateTimePrinterParser extends Object {
		format(arg1 : DateTimePrintContext, arg2 : StringBuilder) : boolean;
		parse(arg1 : DateTimeParseContext, arg2 : CharSequence, arg3 : number) : number;
	}
	class DefaultValueParser {
	}


	interface DefaultValueParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class FractionPrinterParser {
		convertToFraction(arg1 : number) : number;
		convertFromFraction(arg1 : number) : number;
	}


	interface FractionPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class InstantPrinterParser {
	}


	interface InstantPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class LocalizedOffsetIdPrinterParser {
		static appendHMS(arg1 : StringBuilder, arg2 : number) : StringBuilder;
		getDigit(arg1 : CharSequence, arg2 : number) : number;
	}


	interface LocalizedOffsetIdPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class LocalizedPrinterParser {
		formatter(arg1 : Locale, arg2 : Chronology) : DateTimeFormatter;
	}


	interface LocalizedPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class NumberPrinterParser {
		withFixedWidth() : DateTimeFormatterBuilder.NumberPrinterParser;
		withSubsequentWidth(arg1 : number) : DateTimeFormatterBuilder.NumberPrinterParser;
		getValue(arg1 : DateTimePrintContext, arg2 : number) : number;
		isFixedWidth(arg1 : DateTimeParseContext) : boolean;
		setValue(arg1 : DateTimeParseContext, arg2 : number, arg3 : number, arg4 : number) : number;
	}


	interface NumberPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class OffsetIdPrinterParser {
		checkPattern(arg1 : string) : number;
		parseNumber(arg1 : number[], arg2 : number, arg3 : CharSequence, arg4 : boolean) : boolean;
	}


	interface OffsetIdPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class PadPrinterParserDecorator {
	}


	interface PadPrinterParserDecorator extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class PrefixTree extends Object {
		static newTree(arg1 : DateTimeParseContext) : DateTimeFormatterBuilder.PrefixTree;
		static newTree(arg1 : Set<string>, arg2 : DateTimeParseContext) : DateTimeFormatterBuilder.PrefixTree;
		copyTree() : DateTimeFormatterBuilder.PrefixTree;
		add(arg1 : string, arg2 : string) : boolean;
		add0(arg1 : string, arg2 : string) : boolean;
		match(arg1 : CharSequence, arg2 : number, arg3 : number) : string;
		match(arg1 : CharSequence, arg2 : ParsePosition) : string;
		toKey(arg1 : string) : string;
		newNode(arg1 : string, arg2 : string, arg3 : DateTimeFormatterBuilder.PrefixTree) : DateTimeFormatterBuilder.PrefixTree;
		isEqual(arg1 : string, arg2 : string) : boolean;
		prefixOf(arg1 : CharSequence, arg2 : number, arg3 : number) : boolean;
		prefixLength(arg1 : string) : number;
	}


	module PrefixTree {
		class CI {
		}


		interface CI extends DateTimeFormatterBuilder.PrefixTree {}		class LENIENT {
			isLenientChar(arg1 : string) : boolean;
		}


		interface LENIENT extends DateTimeFormatterBuilder.PrefixTree.CI {}	}
	class ReducedPrinterParser {
	}


	interface ReducedPrinterParser extends DateTimeFormatterBuilder.NumberPrinterParser {}	class SettingsParser {
		static SENSITIVE : DateTimeFormatterBuilder.SettingsParser;
		static INSENSITIVE : DateTimeFormatterBuilder.SettingsParser;
		static STRICT : DateTimeFormatterBuilder.SettingsParser;
		static LENIENT : DateTimeFormatterBuilder.SettingsParser;
	}


	interface SettingsParser extends Enum<DateTimeFormatterBuilder.SettingsParser>, DateTimeFormatterBuilder.DateTimePrinterParser {}	class StringLiteralPrinterParser {
	}


	interface StringLiteralPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class TextPrinterParser {
		numberPrinterParser() : DateTimeFormatterBuilder.NumberPrinterParser;
	}


	interface TextPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class WeekBasedFieldPrinterParser {
		printerParser(arg1 : Locale) : DateTimeFormatterBuilder.DateTimePrinterParser;
	}


	interface WeekBasedFieldPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class ZoneIdPrinterParser {
		getTree(arg1 : DateTimeParseContext) : DateTimeFormatterBuilder.PrefixTree;
		parseOffsetBased(arg1 : DateTimeParseContext, arg2 : CharSequence, arg3 : number, arg4 : number, arg5 : DateTimeFormatterBuilder.OffsetIdPrinterParser) : number;
	}


	interface ZoneIdPrinterParser extends DateTimeFormatterBuilder.DateTimePrinterParser {}	class ZoneTextPrinterParser {
		getDisplayName(arg1 : string, arg2 : number, arg3 : Locale) : string;
	}


	interface ZoneTextPrinterParser extends DateTimeFormatterBuilder.ZoneIdPrinterParser {}}

export = DateTimeFormatterBuilder
