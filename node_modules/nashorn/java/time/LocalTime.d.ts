import ZoneId = require('nashorn/java/time/ZoneId');
import Clock = require('nashorn/java/time/Clock');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import CharSequence = require('nashorn/java/lang/CharSequence');
import DateTimeFormatter = require('nashorn/java/time/format/DateTimeFormatter');
import TemporalField = require('nashorn/java/time/temporal/TemporalField');
import TemporalUnit = require('nashorn/java/time/temporal/TemporalUnit');
import LocalDate = require('nashorn/java/time/LocalDate');
import LocalDateTime = require('nashorn/java/time/LocalDateTime');
import ZoneOffset = require('nashorn/java/time/ZoneOffset');
import OffsetTime = require('nashorn/java/time/OffsetTime');
import Object = require('nashorn/java/lang/Object');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import DataOutput = require('nashorn/java/io/DataOutput');
import DataInput = require('nashorn/java/io/DataInput');
import Temporal = require('nashorn/java/time/temporal/Temporal');
import TemporalAdjuster = require('nashorn/java/time/temporal/TemporalAdjuster');
import Comparable = require('nashorn/java/lang/Comparable');
import Serializable = require('nashorn/java/io/Serializable');

declare class LocalTime {
	static MIN : LocalTime;
	static MAX : LocalTime;
	static MIDNIGHT : LocalTime;
	static NOON : LocalTime;
	hour : number;
	minute : number;
	second : number;
	nano : number;
	static now() : LocalTime;
	static now(arg1 : ZoneId) : LocalTime;
	static now(arg1 : Clock) : LocalTime;
	static of(arg1 : number, arg2 : number) : LocalTime;
	static of(arg1 : number, arg2 : number, arg3 : number) : LocalTime;
	static of(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : LocalTime;
	static ofSecondOfDay(arg1 : number) : LocalTime;
	static ofNanoOfDay(arg1 : number) : LocalTime;
	static from(arg1 : TemporalAccessor) : LocalTime;
	static parse(arg1 : CharSequence) : LocalTime;
	static parse(arg1 : CharSequence, arg2 : DateTimeFormatter) : LocalTime;
	static create(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : LocalTime;
	get0(arg1 : TemporalField) : number;
	getHour() : number;
	getMinute() : number;
	getSecond() : number;
	getNano() : number;
	withHour(arg1 : number) : LocalTime;
	withMinute(arg1 : number) : LocalTime;
	withSecond(arg1 : number) : LocalTime;
	withNano(arg1 : number) : LocalTime;
	truncatedTo(arg1 : TemporalUnit) : LocalTime;
	plusHours(arg1 : number) : LocalTime;
	plusMinutes(arg1 : number) : LocalTime;
	plusSeconds(arg1 : number) : LocalTime;
	plusNanos(arg1 : number) : LocalTime;
	minusHours(arg1 : number) : LocalTime;
	minusMinutes(arg1 : number) : LocalTime;
	minusSeconds(arg1 : number) : LocalTime;
	minusNanos(arg1 : number) : LocalTime;
	format(arg1 : DateTimeFormatter) : string;
	atDate(arg1 : LocalDate) : LocalDateTime;
	atOffset(arg1 : ZoneOffset) : OffsetTime;
	toSecondOfDay() : number;
	toNanoOfDay() : number;
	isAfter(arg1 : LocalTime) : boolean;
	isBefore(arg1 : LocalTime) : boolean;
	writeReplace() : Object;
	readObject(arg1 : ObjectInputStream) : void;
	writeExternal(arg1 : DataOutput) : void;
	static readExternal(arg1 : DataInput) : LocalTime;
}


declare interface LocalTime extends Temporal, TemporalAdjuster, Comparable<LocalTime>, Serializable {}
export = LocalTime
