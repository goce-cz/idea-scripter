import ZoneRules = require('nashorn/java/time/zone/ZoneRules');
import CharSequence = require('nashorn/java/lang/CharSequence');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import Object = require('nashorn/java/lang/Object');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import DataOutput = require('nashorn/java/io/DataOutput');
import DataInput = require('nashorn/java/io/DataInput');
import ZoneId = require('nashorn/java/time/ZoneId');
import TemporalAdjuster = require('nashorn/java/time/temporal/TemporalAdjuster');
import Comparable = require('nashorn/java/lang/Comparable');
import Serializable = require('nashorn/java/io/Serializable');

declare class ZoneOffset {
	static UTC : ZoneOffset;
	static MIN : ZoneOffset;
	static MAX : ZoneOffset;
	totalSeconds : number;
	id : string;
	rules : ZoneRules;
	static of(arg1 : string) : ZoneOffset;
	static parseNumber(arg1 : CharSequence, arg2 : number, arg3 : boolean) : number;
	static ofHours(arg1 : number) : ZoneOffset;
	static ofHoursMinutes(arg1 : number, arg2 : number) : ZoneOffset;
	static ofHoursMinutesSeconds(arg1 : number, arg2 : number, arg3 : number) : ZoneOffset;
	static from(arg1 : TemporalAccessor) : ZoneOffset;
	static validate(arg1 : number, arg2 : number, arg3 : number) : void;
	static totalSeconds(arg1 : number, arg2 : number, arg3 : number) : number;
	static ofTotalSeconds(arg1 : number) : ZoneOffset;
	static buildId(arg1 : number) : string;
	getTotalSeconds() : number;
	writeReplace() : Object;
	readObject(arg1 : ObjectInputStream) : void;
	writeExternal(arg1 : DataOutput) : void;
	static readExternal(arg1 : DataInput) : ZoneOffset;
}


declare interface ZoneOffset extends ZoneId, TemporalAccessor, TemporalAdjuster, Comparable<ZoneOffset>, Serializable {}
export = ZoneOffset
