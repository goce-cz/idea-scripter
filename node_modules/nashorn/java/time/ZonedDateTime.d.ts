import ZoneOffset = require('nashorn/java/time/ZoneOffset');
import ZoneId = require('nashorn/java/time/ZoneId');
import Month = require('nashorn/java/time/Month');
import DayOfWeek = require('nashorn/java/time/DayOfWeek');
import Clock = require('nashorn/java/time/Clock');
import LocalDate = require('nashorn/java/time/LocalDate');
import LocalTime = require('nashorn/java/time/LocalTime');
import LocalDateTime = require('nashorn/java/time/LocalDateTime');
import Instant = require('nashorn/java/time/Instant');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import CharSequence = require('nashorn/java/lang/CharSequence');
import DateTimeFormatter = require('nashorn/java/time/format/DateTimeFormatter');
import TemporalUnit = require('nashorn/java/time/temporal/TemporalUnit');
import OffsetDateTime = require('nashorn/java/time/OffsetDateTime');
import Object = require('nashorn/java/lang/Object');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import DataOutput = require('nashorn/java/io/DataOutput');
import ObjectInput = require('nashorn/java/io/ObjectInput');
import Temporal = require('nashorn/java/time/temporal/Temporal');
import ChronoZonedDateTime = require('nashorn/java/time/chrono/ChronoZonedDateTime');
import Serializable = require('nashorn/java/io/Serializable');

declare class ZonedDateTime {
	offset : ZoneOffset;
	zone : ZoneId;
	year : number;
	monthValue : number;
	month : Month;
	dayOfMonth : number;
	dayOfYear : number;
	dayOfWeek : DayOfWeek;
	hour : number;
	minute : number;
	second : number;
	nano : number;
	static now() : ZonedDateTime;
	static now(arg1 : ZoneId) : ZonedDateTime;
	static now(arg1 : Clock) : ZonedDateTime;
	static of(arg1 : LocalDate, arg2 : LocalTime, arg3 : ZoneId) : ZonedDateTime;
	static of(arg1 : LocalDateTime, arg2 : ZoneId) : ZonedDateTime;
	static of(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number, arg7 : number, arg8 : ZoneId) : ZonedDateTime;
	static ofLocal(arg1 : LocalDateTime, arg2 : ZoneId, arg3 : ZoneOffset) : ZonedDateTime;
	static ofInstant(arg1 : Instant, arg2 : ZoneId) : ZonedDateTime;
	static ofInstant(arg1 : LocalDateTime, arg2 : ZoneOffset, arg3 : ZoneId) : ZonedDateTime;
	static create(arg1 : number, arg2 : number, arg3 : ZoneId) : ZonedDateTime;
	static ofStrict(arg1 : LocalDateTime, arg2 : ZoneOffset, arg3 : ZoneId) : ZonedDateTime;
	static ofLenient(arg1 : LocalDateTime, arg2 : ZoneOffset, arg3 : ZoneId) : ZonedDateTime;
	static from(arg1 : TemporalAccessor) : ZonedDateTime;
	static parse(arg1 : CharSequence) : ZonedDateTime;
	static parse(arg1 : CharSequence, arg2 : DateTimeFormatter) : ZonedDateTime;
	resolveLocal(arg1 : LocalDateTime) : ZonedDateTime;
	resolveInstant(arg1 : LocalDateTime) : ZonedDateTime;
	resolveOffset(arg1 : ZoneOffset) : ZonedDateTime;
	withFixedOffsetZone() : ZonedDateTime;
	getYear() : number;
	getMonthValue() : number;
	getMonth() : Month;
	getDayOfMonth() : number;
	getDayOfYear() : number;
	getDayOfWeek() : DayOfWeek;
	getHour() : number;
	getMinute() : number;
	getSecond() : number;
	getNano() : number;
	withYear(arg1 : number) : ZonedDateTime;
	withMonth(arg1 : number) : ZonedDateTime;
	withDayOfMonth(arg1 : number) : ZonedDateTime;
	withDayOfYear(arg1 : number) : ZonedDateTime;
	withHour(arg1 : number) : ZonedDateTime;
	withMinute(arg1 : number) : ZonedDateTime;
	withSecond(arg1 : number) : ZonedDateTime;
	withNano(arg1 : number) : ZonedDateTime;
	truncatedTo(arg1 : TemporalUnit) : ZonedDateTime;
	plusYears(arg1 : number) : ZonedDateTime;
	plusMonths(arg1 : number) : ZonedDateTime;
	plusWeeks(arg1 : number) : ZonedDateTime;
	plusDays(arg1 : number) : ZonedDateTime;
	plusHours(arg1 : number) : ZonedDateTime;
	plusMinutes(arg1 : number) : ZonedDateTime;
	plusSeconds(arg1 : number) : ZonedDateTime;
	plusNanos(arg1 : number) : ZonedDateTime;
	minusYears(arg1 : number) : ZonedDateTime;
	minusMonths(arg1 : number) : ZonedDateTime;
	minusWeeks(arg1 : number) : ZonedDateTime;
	minusDays(arg1 : number) : ZonedDateTime;
	minusHours(arg1 : number) : ZonedDateTime;
	minusMinutes(arg1 : number) : ZonedDateTime;
	minusSeconds(arg1 : number) : ZonedDateTime;
	minusNanos(arg1 : number) : ZonedDateTime;
	toOffsetDateTime() : OffsetDateTime;
	writeReplace() : Object;
	readObject(arg1 : ObjectInputStream) : void;
	writeExternal(arg1 : DataOutput) : void;
	static readExternal(arg1 : ObjectInput) : ZonedDateTime;
}


declare interface ZonedDateTime extends Temporal, ChronoZonedDateTime<LocalDate>, Serializable {}
export = ZonedDateTime
