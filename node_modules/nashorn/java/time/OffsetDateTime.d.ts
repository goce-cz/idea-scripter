import ZoneOffset = require('nashorn/java/time/ZoneOffset');
import Month = require('nashorn/java/time/Month');
import DayOfWeek = require('nashorn/java/time/DayOfWeek');
import Comparator = require('nashorn/java/util/Comparator');
import ZoneId = require('nashorn/java/time/ZoneId');
import Clock = require('nashorn/java/time/Clock');
import LocalDate = require('nashorn/java/time/LocalDate');
import LocalTime = require('nashorn/java/time/LocalTime');
import LocalDateTime = require('nashorn/java/time/LocalDateTime');
import Instant = require('nashorn/java/time/Instant');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import CharSequence = require('nashorn/java/lang/CharSequence');
import DateTimeFormatter = require('nashorn/java/time/format/DateTimeFormatter');
import TemporalUnit = require('nashorn/java/time/temporal/TemporalUnit');
import ZonedDateTime = require('nashorn/java/time/ZonedDateTime');
import OffsetTime = require('nashorn/java/time/OffsetTime');
import Object = require('nashorn/java/lang/Object');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import ObjectOutput = require('nashorn/java/io/ObjectOutput');
import ObjectInput = require('nashorn/java/io/ObjectInput');
import Temporal = require('nashorn/java/time/temporal/Temporal');
import TemporalAdjuster = require('nashorn/java/time/temporal/TemporalAdjuster');
import Comparable = require('nashorn/java/lang/Comparable');
import Serializable = require('nashorn/java/io/Serializable');

declare class OffsetDateTime {
	static MIN : OffsetDateTime;
	static MAX : OffsetDateTime;
	offset : ZoneOffset;
	year : number;
	monthValue : number;
	month : Month;
	dayOfMonth : number;
	dayOfYear : number;
	dayOfWeek : DayOfWeek;
	hour : number;
	minute : number;
	second : number;
	nano : number;
	static timeLineOrder() : Comparator<OffsetDateTime>;
	static compareInstant(arg1 : OffsetDateTime, arg2 : OffsetDateTime) : number;
	static now() : OffsetDateTime;
	static now(arg1 : ZoneId) : OffsetDateTime;
	static now(arg1 : Clock) : OffsetDateTime;
	static of(arg1 : LocalDate, arg2 : LocalTime, arg3 : ZoneOffset) : OffsetDateTime;
	static of(arg1 : LocalDateTime, arg2 : ZoneOffset) : OffsetDateTime;
	static of(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number, arg7 : number, arg8 : ZoneOffset) : OffsetDateTime;
	static ofInstant(arg1 : Instant, arg2 : ZoneId) : OffsetDateTime;
	static from(arg1 : TemporalAccessor) : OffsetDateTime;
	static parse(arg1 : CharSequence) : OffsetDateTime;
	static parse(arg1 : CharSequence, arg2 : DateTimeFormatter) : OffsetDateTime;
	with(arg1 : LocalDateTime, arg2 : ZoneOffset) : OffsetDateTime;
	getOffset() : ZoneOffset;
	withOffsetSameLocal(arg1 : ZoneOffset) : OffsetDateTime;
	withOffsetSameInstant(arg1 : ZoneOffset) : OffsetDateTime;
	toLocalDateTime() : LocalDateTime;
	toLocalDate() : LocalDate;
	getYear() : number;
	getMonthValue() : number;
	getMonth() : Month;
	getDayOfMonth() : number;
	getDayOfYear() : number;
	getDayOfWeek() : DayOfWeek;
	toLocalTime() : LocalTime;
	getHour() : number;
	getMinute() : number;
	getSecond() : number;
	getNano() : number;
	withYear(arg1 : number) : OffsetDateTime;
	withMonth(arg1 : number) : OffsetDateTime;
	withDayOfMonth(arg1 : number) : OffsetDateTime;
	withDayOfYear(arg1 : number) : OffsetDateTime;
	withHour(arg1 : number) : OffsetDateTime;
	withMinute(arg1 : number) : OffsetDateTime;
	withSecond(arg1 : number) : OffsetDateTime;
	withNano(arg1 : number) : OffsetDateTime;
	truncatedTo(arg1 : TemporalUnit) : OffsetDateTime;
	plusYears(arg1 : number) : OffsetDateTime;
	plusMonths(arg1 : number) : OffsetDateTime;
	plusWeeks(arg1 : number) : OffsetDateTime;
	plusDays(arg1 : number) : OffsetDateTime;
	plusHours(arg1 : number) : OffsetDateTime;
	plusMinutes(arg1 : number) : OffsetDateTime;
	plusSeconds(arg1 : number) : OffsetDateTime;
	plusNanos(arg1 : number) : OffsetDateTime;
	minusYears(arg1 : number) : OffsetDateTime;
	minusMonths(arg1 : number) : OffsetDateTime;
	minusWeeks(arg1 : number) : OffsetDateTime;
	minusDays(arg1 : number) : OffsetDateTime;
	minusHours(arg1 : number) : OffsetDateTime;
	minusMinutes(arg1 : number) : OffsetDateTime;
	minusSeconds(arg1 : number) : OffsetDateTime;
	minusNanos(arg1 : number) : OffsetDateTime;
	format(arg1 : DateTimeFormatter) : string;
	atZoneSameInstant(arg1 : ZoneId) : ZonedDateTime;
	atZoneSimilarLocal(arg1 : ZoneId) : ZonedDateTime;
	toOffsetTime() : OffsetTime;
	toZonedDateTime() : ZonedDateTime;
	toInstant() : Instant;
	toEpochSecond() : number;
	isAfter(arg1 : OffsetDateTime) : boolean;
	isBefore(arg1 : OffsetDateTime) : boolean;
	isEqual(arg1 : OffsetDateTime) : boolean;
	writeReplace() : Object;
	readObject(arg1 : ObjectInputStream) : void;
	writeExternal(arg1 : ObjectOutput) : void;
	static readExternal(arg1 : ObjectInput) : OffsetDateTime;
}


declare interface OffsetDateTime extends Temporal, TemporalAdjuster, Comparable<OffsetDateTime>, Serializable {}
export = OffsetDateTime
