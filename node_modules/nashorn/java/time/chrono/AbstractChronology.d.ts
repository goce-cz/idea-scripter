import Chronology = require('nashorn/java/time/chrono/Chronology');
import Locale = require('nashorn/java/util/Locale');
import Set = require('nashorn/java/util/Set');
import Map = require('nashorn/java/util/Map');
import TemporalField = require('nashorn/java/time/temporal/TemporalField');
import ResolverStyle = require('nashorn/java/time/format/ResolverStyle');
import ChronoLocalDate = require('nashorn/java/time/chrono/ChronoLocalDate');
import ChronoField = require('nashorn/java/time/temporal/ChronoField');
import Object = require('nashorn/java/lang/Object');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import DataOutput = require('nashorn/java/io/DataOutput');
import DataInput = require('nashorn/java/io/DataInput');

declare class AbstractChronology {
	static registerChrono(arg1 : Chronology) : Chronology;
	static registerChrono(arg1 : Chronology, arg2 : string) : Chronology;
	static initCache() : boolean;
	static ofLocale(arg1 : Locale) : Chronology;
	static of(arg1 : string) : Chronology;
	static of0(arg1 : string) : Chronology;
	static getAvailableChronologies() : Set<Chronology>;
	resolveProlepticMonth(arg1 : Map<TemporalField, number>, arg2 : ResolverStyle) : void;
	resolveYearOfEra(arg1 : Map<TemporalField, number>, arg2 : ResolverStyle) : ChronoLocalDate;
	resolveYMD(arg1 : Map<TemporalField, number>, arg2 : ResolverStyle) : ChronoLocalDate;
	resolveYD(arg1 : Map<TemporalField, number>, arg2 : ResolverStyle) : ChronoLocalDate;
	resolveYMAA(arg1 : Map<TemporalField, number>, arg2 : ResolverStyle) : ChronoLocalDate;
	resolveYMAD(arg1 : Map<TemporalField, number>, arg2 : ResolverStyle) : ChronoLocalDate;
	resolveYAA(arg1 : Map<TemporalField, number>, arg2 : ResolverStyle) : ChronoLocalDate;
	resolveYAD(arg1 : Map<TemporalField, number>, arg2 : ResolverStyle) : ChronoLocalDate;
	resolveAligned(arg1 : ChronoLocalDate, arg2 : number, arg3 : number, arg4 : number) : ChronoLocalDate;
	addFieldValue(arg1 : Map<TemporalField, number>, arg2 : ChronoField, arg3 : number) : void;
	writeReplace() : Object;
	readObject(arg1 : ObjectInputStream) : void;
	writeExternal(arg1 : DataOutput) : void;
	static readExternal(arg1 : DataInput) : Chronology;
}


declare interface AbstractChronology extends Chronology {}
export = AbstractChronology
