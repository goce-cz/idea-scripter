import ChronoLocalDate = require('nashorn/java/time/chrono/ChronoLocalDate');
import Chronology = require('nashorn/java/time/chrono/Chronology');
import ZoneOffset = require('nashorn/java/time/ZoneOffset');
import ZoneId = require('nashorn/java/time/ZoneId');
import Comparator = require('nashorn/java/util/Comparator');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import LocalTime = require('nashorn/java/time/LocalTime');
import ChronoLocalDateTime = require('nashorn/java/time/chrono/ChronoLocalDateTime');
import DateTimeFormatter = require('nashorn/java/time/format/DateTimeFormatter');
import Instant = require('nashorn/java/time/Instant');
import Temporal = require('nashorn/java/time/temporal/Temporal');
import Comparable = require('nashorn/java/lang/Comparable');

declare class ChronoZonedDateTime<D extends ChronoLocalDate> {
	chronology : Chronology;
	offset : ZoneOffset;
	zone : ZoneId;
	static timeLineOrder() : Comparator<ChronoZonedDateTime<any>>;
	static from(arg1 : TemporalAccessor) : ChronoZonedDateTime<any>;
	toLocalDate() : D;
	toLocalTime() : LocalTime;
	toLocalDateTime() : ChronoLocalDateTime<D>;
	getChronology() : Chronology;
	getOffset() : ZoneOffset;
	getZone() : ZoneId;
	withEarlierOffsetAtOverlap() : ChronoZonedDateTime<D>;
	withLaterOffsetAtOverlap() : ChronoZonedDateTime<D>;
	withZoneSameLocal(arg1 : ZoneId) : ChronoZonedDateTime<D>;
	withZoneSameInstant(arg1 : ZoneId) : ChronoZonedDateTime<D>;
	format(arg1 : DateTimeFormatter) : string;
	toInstant() : Instant;
	toEpochSecond() : number;
	isBefore(arg1 : ChronoZonedDateTime<any>) : boolean;
	isAfter(arg1 : ChronoZonedDateTime<any>) : boolean;
	isEqual(arg1 : ChronoZonedDateTime<any>) : boolean;
}


declare interface ChronoZonedDateTime<D extends ChronoLocalDate> extends Temporal, Comparable<ChronoZonedDateTime<any>> {}
export = ChronoZonedDateTime
