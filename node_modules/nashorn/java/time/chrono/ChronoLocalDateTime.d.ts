import ChronoLocalDate = require('nashorn/java/time/chrono/ChronoLocalDate');
import Chronology = require('nashorn/java/time/chrono/Chronology');
import Comparator = require('nashorn/java/util/Comparator');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import LocalTime = require('nashorn/java/time/LocalTime');
import DateTimeFormatter = require('nashorn/java/time/format/DateTimeFormatter');
import ZoneId = require('nashorn/java/time/ZoneId');
import ChronoZonedDateTime = require('nashorn/java/time/chrono/ChronoZonedDateTime');
import ZoneOffset = require('nashorn/java/time/ZoneOffset');
import Instant = require('nashorn/java/time/Instant');
import Temporal = require('nashorn/java/time/temporal/Temporal');
import TemporalAdjuster = require('nashorn/java/time/temporal/TemporalAdjuster');
import Comparable = require('nashorn/java/lang/Comparable');

declare class ChronoLocalDateTime<D extends ChronoLocalDate> {
	chronology : Chronology;
	static timeLineOrder() : Comparator<ChronoLocalDateTime<any>>;
	static from(arg1 : TemporalAccessor) : ChronoLocalDateTime<any>;
	getChronology() : Chronology;
	toLocalDate() : D;
	toLocalTime() : LocalTime;
	format(arg1 : DateTimeFormatter) : string;
	atZone(arg1 : ZoneId) : ChronoZonedDateTime<D>;
	toInstant(arg1 : ZoneOffset) : Instant;
	toEpochSecond(arg1 : ZoneOffset) : number;
	isAfter(arg1 : ChronoLocalDateTime<any>) : boolean;
	isBefore(arg1 : ChronoLocalDateTime<any>) : boolean;
	isEqual(arg1 : ChronoLocalDateTime<any>) : boolean;
}


declare interface ChronoLocalDateTime<D extends ChronoLocalDate> extends Temporal, TemporalAdjuster, Comparable<ChronoLocalDateTime<any>> {}
export = ChronoLocalDateTime
