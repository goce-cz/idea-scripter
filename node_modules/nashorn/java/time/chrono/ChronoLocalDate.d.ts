import Chronology = require('nashorn/java/time/chrono/Chronology');
import Era = require('nashorn/java/time/chrono/Era');
import Comparator = require('nashorn/java/util/Comparator');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import ChronoPeriod = require('nashorn/java/time/chrono/ChronoPeriod');
import DateTimeFormatter = require('nashorn/java/time/format/DateTimeFormatter');
import LocalTime = require('nashorn/java/time/LocalTime');
import ChronoLocalDateTime = require('nashorn/java/time/chrono/ChronoLocalDateTime');
import Temporal = require('nashorn/java/time/temporal/Temporal');
import TemporalAdjuster = require('nashorn/java/time/temporal/TemporalAdjuster');
import Comparable = require('nashorn/java/lang/Comparable');

declare class ChronoLocalDate {
	chronology : Chronology;
	era : Era;
	leapYear : boolean;
	static timeLineOrder() : Comparator<ChronoLocalDate>;
	static from(arg1 : TemporalAccessor) : ChronoLocalDate;
	getChronology() : Chronology;
	getEra() : Era;
	isLeapYear() : boolean;
	lengthOfMonth() : number;
	lengthOfYear() : number;
	until(arg1 : ChronoLocalDate) : ChronoPeriod;
	format(arg1 : DateTimeFormatter) : string;
	atTime(arg1 : LocalTime) : ChronoLocalDateTime<any>;
	toEpochDay() : number;
	isAfter(arg1 : ChronoLocalDate) : boolean;
	isBefore(arg1 : ChronoLocalDate) : boolean;
	isEqual(arg1 : ChronoLocalDate) : boolean;
}


declare interface ChronoLocalDate extends Temporal, TemporalAdjuster, Comparable<ChronoLocalDate> {}
export = ChronoLocalDate
