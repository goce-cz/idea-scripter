import Set = require('nashorn/java/util/Set');
import TemporalAccessor = require('nashorn/java/time/temporal/TemporalAccessor');
import Locale = require('nashorn/java/util/Locale');
import Era = require('nashorn/java/time/chrono/Era');
import ChronoLocalDate = require('nashorn/java/time/chrono/ChronoLocalDate');
import ZoneId = require('nashorn/java/time/ZoneId');
import Clock = require('nashorn/java/time/Clock');
import ChronoLocalDateTime = require('nashorn/java/time/chrono/ChronoLocalDateTime');
import ChronoZonedDateTime = require('nashorn/java/time/chrono/ChronoZonedDateTime');
import Instant = require('nashorn/java/time/Instant');
import List = require('nashorn/java/util/List');
import ChronoField = require('nashorn/java/time/temporal/ChronoField');
import ValueRange = require('nashorn/java/time/temporal/ValueRange');
import TextStyle = require('nashorn/java/time/format/TextStyle');
import Map = require('nashorn/java/util/Map');
import TemporalField = require('nashorn/java/time/temporal/TemporalField');
import ResolverStyle = require('nashorn/java/time/format/ResolverStyle');
import ChronoPeriod = require('nashorn/java/time/chrono/ChronoPeriod');
import Comparable = require('nashorn/java/lang/Comparable');

declare class Chronology {
	static availableChronologies : Set<Chronology>;
	id : string;
	calendarType : string;
	static from(arg1 : TemporalAccessor) : Chronology;
	static ofLocale(arg1 : Locale) : Chronology;
	static of(arg1 : string) : Chronology;
	static getAvailableChronologies() : Set<Chronology>;
	getId() : string;
	getCalendarType() : string;
	date(arg1 : Era, arg2 : number, arg3 : number, arg4 : number) : ChronoLocalDate;
	date(arg1 : number, arg2 : number, arg3 : number) : ChronoLocalDate;
	dateYearDay(arg1 : Era, arg2 : number, arg3 : number) : ChronoLocalDate;
	dateYearDay(arg1 : number, arg2 : number) : ChronoLocalDate;
	dateEpochDay(arg1 : number) : ChronoLocalDate;
	dateNow() : ChronoLocalDate;
	dateNow(arg1 : ZoneId) : ChronoLocalDate;
	dateNow(arg1 : Clock) : ChronoLocalDate;
	date(arg1 : TemporalAccessor) : ChronoLocalDate;
	localDateTime(arg1 : TemporalAccessor) : ChronoLocalDateTime<ChronoLocalDate>;
	zonedDateTime(arg1 : TemporalAccessor) : ChronoZonedDateTime<ChronoLocalDate>;
	zonedDateTime(arg1 : Instant, arg2 : ZoneId) : ChronoZonedDateTime<ChronoLocalDate>;
	isLeapYear(arg1 : number) : boolean;
	prolepticYear(arg1 : Era, arg2 : number) : number;
	eraOf(arg1 : number) : Era;
	eras() : List<Era>;
	range(arg1 : ChronoField) : ValueRange;
	getDisplayName(arg1 : TextStyle, arg2 : Locale) : string;
	resolveDate(arg1 : Map<TemporalField, number>, arg2 : ResolverStyle) : ChronoLocalDate;
	period(arg1 : number, arg2 : number, arg3 : number) : ChronoPeriod;
}


declare interface Chronology extends Comparable<Chronology> {}
export = Chronology
