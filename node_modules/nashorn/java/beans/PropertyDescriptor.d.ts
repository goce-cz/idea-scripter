import Class = require('nashorn/java/lang/Class');
import Method = require('nashorn/java/lang/reflect/Method');
import Object = require('nashorn/java/lang/Object');
import PropertyEditor = require('nashorn/java/beans/PropertyEditor');
import FeatureDescriptor = require('nashorn/java/beans/FeatureDescriptor');

declare class PropertyDescriptor {
	propertyType : Class<any>;
	readMethod : Method;
	writeMethod : Method;
	bound : boolean;
	constrained : boolean;
	propertyEditorClass : Class<any>;
	constructor(arg1 : string, arg2 : Class<any>);
	constructor(arg1 : string, arg2 : Class<any>, arg3 : string, arg4 : string);
	constructor(arg1 : string, arg2 : Method, arg3 : Method);
	getPropertyType() : Class<any>;
	setPropertyType(arg1 : Class<any>) : void;
	getPropertyType0() : Class<any>;
	getReadMethod() : Method;
	setReadMethod(arg1 : Method) : void;
	getWriteMethod() : Method;
	setWriteMethod(arg1 : Method) : void;
	isBound() : boolean;
	setBound(arg1 : boolean) : void;
	isConstrained() : boolean;
	setConstrained(arg1 : boolean) : void;
	setPropertyEditorClass(arg1 : Class<any>) : void;
	getPropertyEditorClass() : Class<any>;
	createPropertyEditor(arg1 : Object) : PropertyEditor;
	compareMethods(arg1 : Method, arg2 : Method) : boolean;
	updateGenericsFor(arg1 : Class<any>) : void;
	findPropertyType(arg1 : Method, arg2 : Method) : Class<any>;
	getBaseName() : string;
	isAssignable(arg1 : Method, arg2 : Method) : boolean;
}


declare interface PropertyDescriptor extends FeatureDescriptor {}
export = PropertyDescriptor
