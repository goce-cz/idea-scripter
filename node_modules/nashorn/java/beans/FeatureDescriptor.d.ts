import Object = require('nashorn/java/lang/Object');
import Enumeration = require('nashorn/java/util/Enumeration');
import Hashtable = require('nashorn/java/util/Hashtable');
import Transient = require('nashorn/java/beans/Transient');
import Class = require('nashorn/java/lang/Class');
import Reference = require('nashorn/java/lang/ref/Reference');
import Method = require('nashorn/java/lang/reflect/Method');
import StringBuilder = require('nashorn/java/lang/StringBuilder');

declare class FeatureDescriptor extends Object {
	name : string;
	displayName : string;
	expert : boolean;
	hidden : boolean;
	preferred : boolean;
	shortDescription : string;
	constructor();
	getName() : string;
	setName(arg1 : string) : void;
	getDisplayName() : string;
	setDisplayName(arg1 : string) : void;
	isExpert() : boolean;
	setExpert(arg1 : boolean) : void;
	isHidden() : boolean;
	setHidden(arg1 : boolean) : void;
	isPreferred() : boolean;
	setPreferred(arg1 : boolean) : void;
	getShortDescription() : string;
	setShortDescription(arg1 : string) : void;
	setValue(arg1 : string, arg2 : Object) : void;
	getValue(arg1 : string) : Object;
	attributeNames() : Enumeration<string>;
	addTable(arg1 : Hashtable<string, Object>) : void;
	getTable() : Hashtable<string, Object>;
	setTransient(arg1 : Transient) : void;
	isTransient() : boolean;
	setClass0(arg1 : Class<any>) : void;
	getClass0() : Class<any>;
	static getSoftReference<T>(arg1 : T) : Reference<T>;
	static getWeakReference<T>(arg1 : T) : Reference<T>;
	static getReturnType(arg1 : Class<any>, arg2 : Method) : Class<any>;
	static getParameterTypes(arg1 : Class<any>, arg2 : Method) : Class<any>[];
	appendTo(arg1 : StringBuilder) : void;
	static appendTo(arg1 : StringBuilder, arg2 : string, arg3 : Reference<any>) : void;
	static appendTo(arg1 : StringBuilder, arg2 : string, arg3 : Object) : void;
	static appendTo(arg1 : StringBuilder, arg2 : string, arg3 : boolean) : void;
}

export = FeatureDescriptor
