import URI = require('nashorn/java/net/URI');
import URL = require('nashorn/java/net/URL');
import FilenameFilter = require('nashorn/java/io/FilenameFilter');
import FileFilter = require('nashorn/java/io/FileFilter');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Path = require('nashorn/java/nio/file/Path');
import Serializable = require('nashorn/java/io/Serializable');
import Comparable = require('nashorn/java/lang/Comparable');
import Enum = require('nashorn/java/lang/Enum');
import Object = require('nashorn/java/lang/Object');

declare class File {
	static separatorChar : string;
	static separator : string;
	static pathSeparatorChar : string;
	static pathSeparator : string;
	name : string;
	parent : string;
	parentFile : File;
	path : string;
	absolute : boolean;
	absolutePath : string;
	absoluteFile : File;
	canonicalPath : string;
	canonicalFile : File;
	directory : boolean;
	file : boolean;
	hidden : boolean;
	totalSpace : number;
	freeSpace : number;
	usableSpace : number;
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : string);
	constructor(arg1 : File, arg2 : string);
	constructor(arg1 : URI);
	isInvalid() : boolean;
	getPrefixLength() : number;
	getName() : string;
	getParent() : string;
	getParentFile() : File;
	getPath() : string;
	isAbsolute() : boolean;
	getAbsolutePath() : string;
	getAbsoluteFile() : File;
	getCanonicalPath() : string;
	getCanonicalFile() : File;
	static slashify(arg1 : string, arg2 : boolean) : string;
	toURL() : URL;
	toURI() : URI;
	canRead() : boolean;
	canWrite() : boolean;
	exists() : boolean;
	isDirectory() : boolean;
	isFile() : boolean;
	isHidden() : boolean;
	lastModified() : number;
	length() : number;
	createNewFile() : boolean;
	delete() : boolean;
	deleteOnExit() : void;
	list() : string[];
	list(arg1 : FilenameFilter) : string[];
	listFiles() : File[];
	listFiles(arg1 : FilenameFilter) : File[];
	listFiles(arg1 : FileFilter) : File[];
	mkdir() : boolean;
	mkdirs() : boolean;
	renameTo(arg1 : File) : boolean;
	setLastModified(arg1 : number) : boolean;
	setReadOnly() : boolean;
	setWritable(arg1 : boolean, arg2 : boolean) : boolean;
	setWritable(arg1 : boolean) : boolean;
	setReadable(arg1 : boolean, arg2 : boolean) : boolean;
	setReadable(arg1 : boolean) : boolean;
	setExecutable(arg1 : boolean, arg2 : boolean) : boolean;
	setExecutable(arg1 : boolean) : boolean;
	canExecute() : boolean;
	static listRoots() : File[];
	getTotalSpace() : number;
	getFreeSpace() : number;
	getUsableSpace() : number;
	static createTempFile(arg1 : string, arg2 : string, arg3 : File) : File;
	static createTempFile(arg1 : string, arg2 : string) : File;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	toPath() : Path;
}


declare interface File extends Serializable, Comparable<File> {}

declare module File {
	class PathStatus {
		static INVALID : File.PathStatus;
		static CHECKED : File.PathStatus;
	}


	interface PathStatus extends Enum<File.PathStatus> {}	class TempDirectory extends Object {
		static location() : File;
		static generateFile(arg1 : string, arg2 : string, arg3 : File) : File;
	}
}

export = File
