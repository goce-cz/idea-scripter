import FileDescriptor = require('nashorn/java/io/FileDescriptor');
import FileChannel = require('nashorn/java/nio/channels/FileChannel');
import File = require('nashorn/java/io/File');
import DataOutput = require('nashorn/java/io/DataOutput');
import DataInput = require('nashorn/java/io/DataInput');
import Closeable = require('nashorn/java/io/Closeable');

declare class RandomAccessFile {
	FD : FileDescriptor;
	channel : FileChannel;
	filePointer : number;
	constructor(arg1 : string, arg2 : string);
	constructor(arg1 : File, arg2 : string);
	getFD() : FileDescriptor;
	getChannel() : FileChannel;
	open(arg1 : string, arg2 : number) : void;
	read() : number;
	read0() : number;
	readBytes(arg1 : number[], arg2 : number, arg3 : number) : number;
	read(arg1 : number[], arg2 : number, arg3 : number) : number;
	read(arg1 : number[]) : number;
	write0(arg1 : number) : void;
	writeBytes(arg1 : number[], arg2 : number, arg3 : number) : void;
	getFilePointer() : number;
	seek(arg1 : number) : void;
	seek0(arg1 : number) : void;
	length() : number;
	setLength(arg1 : number) : void;
	static initIDs() : void;
	close0() : void;
}


declare interface RandomAccessFile extends DataOutput, DataInput, Closeable {}
export = RandomAccessFile
