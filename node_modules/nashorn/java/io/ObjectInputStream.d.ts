import InputStream = require('nashorn/java/io/InputStream');
import Object = require('nashorn/java/lang/Object');
import ObjectInputValidation = require('nashorn/java/io/ObjectInputValidation');
import ObjectStreamClass = require('nashorn/java/io/ObjectStreamClass');
import Class = require('nashorn/java/lang/Class');
import Enum = require('nashorn/java/lang/Enum');
import Externalizable = require('nashorn/java/io/Externalizable');
import IOException = require('nashorn/java/io/IOException');
import ClassLoader = require('nashorn/java/lang/ClassLoader');
import ObjectInput = require('nashorn/java/io/ObjectInput');
import ObjectStreamConstants = require('nashorn/java/io/ObjectStreamConstants');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import DataInput = require('nashorn/java/io/DataInput');
import ClassNotFoundException = require('nashorn/java/lang/ClassNotFoundException');

declare class ObjectInputStream {
	constructor(arg1 : InputStream);
	readObjectOverride() : Object;
	readUnshared() : Object;
	defaultReadObject() : void;
	readFields() : ObjectInputStream.GetField;
	registerValidation(arg1 : ObjectInputValidation, arg2 : number) : void;
	resolveClass(arg1 : ObjectStreamClass) : Class<any>;
	resolveProxyClass(arg1 : string[]) : Class<any>;
	resolveObject(arg1 : Object) : Object;
	enableResolveObject(arg1 : boolean) : boolean;
	readStreamHeader() : void;
	readClassDescriptor() : ObjectStreamClass;
	verifySubclass() : void;
	static auditSubclass(arg1 : Class<any>) : boolean;
	clear() : void;
	readObject0(arg1 : boolean) : Object;
	checkResolve(arg1 : Object) : Object;
	readTypeString() : string;
	readNull() : Object;
	readHandle(arg1 : boolean) : Object;
	readClass(arg1 : boolean) : Class<any>;
	readClassDesc(arg1 : boolean) : ObjectStreamClass;
	isCustomSubclass() : boolean;
	readProxyDesc(arg1 : boolean) : ObjectStreamClass;
	readNonProxyDesc(arg1 : boolean) : ObjectStreamClass;
	readString(arg1 : boolean) : string;
	readArray(arg1 : boolean) : Object;
	readEnum(arg1 : boolean) : Enum<any>;
	readOrdinaryObject(arg1 : boolean) : Object;
	readExternalData(arg1 : Externalizable, arg2 : ObjectStreamClass) : void;
	readSerialData(arg1 : Object, arg2 : ObjectStreamClass) : void;
	skipCustomData() : void;
	defaultReadFields(arg1 : Object, arg2 : ObjectStreamClass) : void;
	readFatalException() : IOException;
	handleReset() : void;
	static bytesToFloats(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number, arg5 : number) : void;
	static bytesToDoubles(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number, arg5 : number) : void;
	static latestUserDefinedLoader() : ClassLoader;
	static cloneArray(arg1 : Object) : Object;
}


declare interface ObjectInputStream extends InputStream, ObjectInput, ObjectStreamConstants {}

declare module ObjectInputStream {
	class BlockDataInputStream {
		setBlockDataMode(arg1 : boolean) : boolean;
		getBlockDataMode() : boolean;
		skipBlockData() : void;
		readBlockHeader(arg1 : boolean) : number;
		refill() : void;
		currentBlockRemaining() : number;
		peek() : number;
		peekByte() : number;
		read(arg1 : number[], arg2 : number, arg3 : number, arg4 : boolean) : number;
		readFully(arg1 : number[], arg2 : number, arg3 : number, arg4 : boolean) : void;
		readBooleans(arg1 : boolean[], arg2 : number, arg3 : number) : void;
		readChars(arg1 : string[], arg2 : number, arg3 : number) : void;
		readShorts(arg1 : number[], arg2 : number, arg3 : number) : void;
		readInts(arg1 : number[], arg2 : number, arg3 : number) : void;
		readFloats(arg1 : number[], arg2 : number, arg3 : number) : void;
		readLongs(arg1 : number[], arg2 : number, arg3 : number) : void;
		readDoubles(arg1 : number[], arg2 : number, arg3 : number) : void;
		readLongUTF() : string;
		readUTFBody(arg1 : number) : string;
		readUTFSpan(arg1 : StringBuilder, arg2 : number) : number;
		readUTFChar(arg1 : StringBuilder, arg2 : number) : number;
	}


	interface BlockDataInputStream extends InputStream, DataInput {}	class Caches extends Object {
	}
	class GetField extends Object {
		objectStreamClass : ObjectStreamClass;
		constructor();
		getObjectStreamClass() : ObjectStreamClass;
		defaulted(arg1 : string) : boolean;
		get(arg1 : string, arg2 : boolean) : boolean;
		get(arg1 : string, arg2 : number) : number;
		get(arg1 : string, arg2 : string) : string;
		get(arg1 : string, arg2 : number) : number;
		get(arg1 : string, arg2 : number) : number;
		get(arg1 : string, arg2 : number) : number;
		get(arg1 : string, arg2 : number) : number;
		get(arg1 : string, arg2 : number) : number;
		get(arg1 : string, arg2 : Object) : Object;
	}
	class GetFieldImpl {
		objectStreamClass : ObjectStreamClass;
		readFields() : void;
		getFieldOffset(arg1 : string, arg2 : Class<any>) : number;
	}


	interface GetFieldImpl extends ObjectInputStream.GetField {}	class HandleTable extends Object {
		assign(arg1 : Object) : number;
		markDependency(arg1 : number, arg2 : number) : void;
		markException(arg1 : number, arg2 : ClassNotFoundException) : void;
		finish(arg1 : number) : void;
		setObject(arg1 : number, arg2 : Object) : void;
		lookupObject(arg1 : number) : Object;
		lookupException(arg1 : number) : ClassNotFoundException;
		clear() : void;
		size() : number;
		grow() : void;
	}


	module HandleTable {
		class HandleList extends Object {
			constructor();
			add(arg1 : number) : void;
			get(arg1 : number) : number;
			size() : number;
		}
	}
	class PeekInputStream {
		peek() : number;
		readFully(arg1 : number[], arg2 : number, arg3 : number) : void;
	}


	interface PeekInputStream extends InputStream {}	class ValidationList extends Object {
		register(arg1 : ObjectInputValidation, arg2 : number) : void;
		doCallbacks() : void;
		clear() : void;
	}


	module ValidationList {
		class Callback extends Object {
		}
	}
}

export = ObjectInputStream
