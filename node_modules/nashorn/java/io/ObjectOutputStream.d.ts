import OutputStream = require('nashorn/java/io/OutputStream');
import Object = require('nashorn/java/lang/Object');
import Class = require('nashorn/java/lang/Class');
import ObjectStreamClass = require('nashorn/java/io/ObjectStreamClass');
import Enum = require('nashorn/java/lang/Enum');
import Externalizable = require('nashorn/java/io/Externalizable');
import IOException = require('nashorn/java/io/IOException');
import ObjectOutput = require('nashorn/java/io/ObjectOutput');
import ObjectStreamConstants = require('nashorn/java/io/ObjectStreamConstants');
import DataOutput = require('nashorn/java/io/DataOutput');

declare class ObjectOutputStream {
	constructor(arg1 : OutputStream);
	useProtocolVersion(arg1 : number) : void;
	writeObjectOverride(arg1 : Object) : void;
	writeUnshared(arg1 : Object) : void;
	defaultWriteObject() : void;
	putFields() : ObjectOutputStream.PutField;
	writeFields() : void;
	reset() : void;
	annotateClass(arg1 : Class<any>) : void;
	annotateProxyClass(arg1 : Class<any>) : void;
	replaceObject(arg1 : Object) : Object;
	enableReplaceObject(arg1 : boolean) : boolean;
	writeStreamHeader() : void;
	writeClassDescriptor(arg1 : ObjectStreamClass) : void;
	drain() : void;
	getProtocolVersion() : number;
	writeTypeString(arg1 : string) : void;
	verifySubclass() : void;
	static auditSubclass(arg1 : Class<any>) : boolean;
	clear() : void;
	writeObject0(arg1 : Object, arg2 : boolean) : void;
	writeNull() : void;
	writeHandle(arg1 : number) : void;
	writeClass(arg1 : Class<any>, arg2 : boolean) : void;
	writeClassDesc(arg1 : ObjectStreamClass, arg2 : boolean) : void;
	isCustomSubclass() : boolean;
	writeProxyDesc(arg1 : ObjectStreamClass, arg2 : boolean) : void;
	writeNonProxyDesc(arg1 : ObjectStreamClass, arg2 : boolean) : void;
	writeString(arg1 : string, arg2 : boolean) : void;
	writeArray(arg1 : Object, arg2 : ObjectStreamClass, arg3 : boolean) : void;
	writeEnum(arg1 : Enum<any>, arg2 : ObjectStreamClass, arg3 : boolean) : void;
	writeOrdinaryObject(arg1 : Object, arg2 : ObjectStreamClass, arg3 : boolean) : void;
	writeExternalData(arg1 : Externalizable) : void;
	writeSerialData(arg1 : Object, arg2 : ObjectStreamClass) : void;
	defaultWriteFields(arg1 : Object, arg2 : ObjectStreamClass) : void;
	writeFatalException(arg1 : IOException) : void;
	static floatsToBytes(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number, arg5 : number) : void;
	static doublesToBytes(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number, arg5 : number) : void;
}


declare interface ObjectOutputStream extends OutputStream, ObjectOutput, ObjectStreamConstants {}

declare module ObjectOutputStream {
	class BlockDataOutputStream {
		setBlockDataMode(arg1 : boolean) : boolean;
		getBlockDataMode() : boolean;
		write(arg1 : number[], arg2 : number, arg3 : number, arg4 : boolean) : void;
		drain() : void;
		writeBlockHeader(arg1 : number) : void;
		writeBooleans(arg1 : boolean[], arg2 : number, arg3 : number) : void;
		writeChars(arg1 : string[], arg2 : number, arg3 : number) : void;
		writeShorts(arg1 : number[], arg2 : number, arg3 : number) : void;
		writeInts(arg1 : number[], arg2 : number, arg3 : number) : void;
		writeFloats(arg1 : number[], arg2 : number, arg3 : number) : void;
		writeLongs(arg1 : number[], arg2 : number, arg3 : number) : void;
		writeDoubles(arg1 : number[], arg2 : number, arg3 : number) : void;
		getUTFLength(arg1 : string) : number;
		writeUTF(arg1 : string, arg2 : number) : void;
		writeLongUTF(arg1 : string) : void;
		writeLongUTF(arg1 : string, arg2 : number) : void;
		writeUTFBody(arg1 : string) : void;
	}


	interface BlockDataOutputStream extends OutputStream, DataOutput {}	class Caches extends Object {
	}
	class DebugTraceInfoStack extends Object {
		clear() : void;
		pop() : void;
		push(arg1 : string) : void;
	}
	class HandleTable extends Object {
		assign(arg1 : Object) : number;
		lookup(arg1 : Object) : number;
		clear() : void;
		size() : number;
		insert(arg1 : Object, arg2 : number) : void;
		growSpine() : void;
		growEntries() : void;
		hash(arg1 : Object) : number;
	}
	class PutField extends Object {
		constructor();
		put(arg1 : string, arg2 : boolean) : void;
		put(arg1 : string, arg2 : number) : void;
		put(arg1 : string, arg2 : string) : void;
		put(arg1 : string, arg2 : number) : void;
		put(arg1 : string, arg2 : number) : void;
		put(arg1 : string, arg2 : number) : void;
		put(arg1 : string, arg2 : number) : void;
		put(arg1 : string, arg2 : number) : void;
		put(arg1 : string, arg2 : Object) : void;
		write(arg1 : ObjectOutput) : void;
	}
	class PutFieldImpl {
		writeFields() : void;
		getFieldOffset(arg1 : string, arg2 : Class<any>) : number;
	}


	interface PutFieldImpl extends ObjectOutputStream.PutField {}	class ReplaceTable extends Object {
		assign(arg1 : Object, arg2 : Object) : void;
		lookup(arg1 : Object) : Object;
		clear() : void;
		size() : number;
		grow() : void;
	}
}

export = ObjectOutputStream
