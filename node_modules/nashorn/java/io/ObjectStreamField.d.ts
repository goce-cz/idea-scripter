import Class = require('nashorn/java/lang/Class');
import Field = require('nashorn/java/lang/reflect/Field');
import Comparable = require('nashorn/java/lang/Comparable');
import Object = require('nashorn/java/lang/Object');

declare class ObjectStreamField {
	name : string;
	type : Class<any>;
	typeCode : string;
	typeString : string;
	offset : number;
	primitive : boolean;
	unshared : boolean;
	constructor(arg1 : string, arg2 : Class<any>);
	constructor(arg1 : string, arg2 : Class<any>, arg3 : boolean);
	getName() : string;
	getType() : Class<any>;
	getTypeCode() : string;
	getTypeString() : string;
	getOffset() : number;
	setOffset(arg1 : number) : void;
	isPrimitive() : boolean;
	isUnshared() : boolean;
	getField() : Field;
	getSignature() : string;
	static getClassSignature(arg1 : Class<any>) : string;
}


declare interface ObjectStreamField extends Comparable<Object> {}
export = ObjectStreamField
