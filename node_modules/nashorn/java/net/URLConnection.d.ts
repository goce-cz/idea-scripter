import Object = require('nashorn/java/lang/Object');
import FileNameMap = require('nashorn/java/net/FileNameMap');
import URL = require('nashorn/java/net/URL');
import Map = require('nashorn/java/util/Map');
import List = require('nashorn/java/util/List');
import Permission = require('nashorn/java/security/Permission');
import InputStream = require('nashorn/java/io/InputStream');
import OutputStream = require('nashorn/java/io/OutputStream');
import Class = require('nashorn/java/lang/Class');
import ContentHandlerFactory = require('nashorn/java/net/ContentHandlerFactory');
import ContentHandler = require('nashorn/java/net/ContentHandler');

declare class URLConnection extends Object {
	static fileNameMap : FileNameMap;
	connectTimeout : number;
	readTimeout : number;
	uRL : URL;
	contentLength : number;
	contentLengthLong : number;
	contentType : string;
	contentEncoding : string;
	expiration : number;
	date : number;
	lastModified : number;
	headerFields : Map<string, List<string>>;
	content : Object;
	permission : Permission;
	inputStream : InputStream;
	outputStream : OutputStream;
	doInput : boolean;
	doOutput : boolean;
	allowUserInteraction : boolean;
	static defaultAllowUserInteraction : boolean;
	useCaches : boolean;
	ifModifiedSince : number;
	defaultUseCaches : boolean;
	requestProperties : Map<string, List<string>>;
	static getFileNameMap() : FileNameMap;
	static setFileNameMap(arg1 : FileNameMap) : void;
	connect() : void;
	setConnectTimeout(arg1 : number) : void;
	getConnectTimeout() : number;
	setReadTimeout(arg1 : number) : void;
	getReadTimeout() : number;
	getURL() : URL;
	getContentLength() : number;
	getContentLengthLong() : number;
	getContentType() : string;
	getContentEncoding() : string;
	getExpiration() : number;
	getDate() : number;
	getLastModified() : number;
	getHeaderField(arg1 : string) : string;
	getHeaderFields() : Map<string, List<string>>;
	getHeaderFieldInt(arg1 : string, arg2 : number) : number;
	getHeaderFieldLong(arg1 : string, arg2 : number) : number;
	getHeaderFieldDate(arg1 : string, arg2 : number) : number;
	getHeaderFieldKey(arg1 : number) : string;
	getHeaderField(arg1 : number) : string;
	getContent() : Object;
	getContent(arg1 : Class[]) : Object;
	getPermission() : Permission;
	getInputStream() : InputStream;
	getOutputStream() : OutputStream;
	setDoInput(arg1 : boolean) : void;
	getDoInput() : boolean;
	setDoOutput(arg1 : boolean) : void;
	getDoOutput() : boolean;
	setAllowUserInteraction(arg1 : boolean) : void;
	getAllowUserInteraction() : boolean;
	static setDefaultAllowUserInteraction(arg1 : boolean) : void;
	static getDefaultAllowUserInteraction() : boolean;
	setUseCaches(arg1 : boolean) : void;
	getUseCaches() : boolean;
	setIfModifiedSince(arg1 : number) : void;
	getIfModifiedSince() : number;
	getDefaultUseCaches() : boolean;
	setDefaultUseCaches(arg1 : boolean) : void;
	setRequestProperty(arg1 : string, arg2 : string) : void;
	addRequestProperty(arg1 : string, arg2 : string) : void;
	getRequestProperty(arg1 : string) : string;
	getRequestProperties() : Map<string, List<string>>;
	static setDefaultRequestProperty(arg1 : string, arg2 : string) : void;
	static getDefaultRequestProperty(arg1 : string) : string;
	static setContentHandlerFactory(arg1 : ContentHandlerFactory) : void;
	getContentHandler() : ContentHandler;
	stripOffParameters(arg1 : string) : string;
	lookupContentHandlerClassFor(arg1 : string) : ContentHandler;
	typeToPackageName(arg1 : string) : string;
	getContentHandlerPkgPrefixes() : string;
	static guessContentTypeFromName(arg1 : string) : string;
	static guessContentTypeFromStream(arg1 : InputStream) : string;
	static checkfpx(arg1 : InputStream) : boolean;
	static readBytes(arg1 : number[], arg2 : number, arg3 : InputStream) : number;
	static skipForward(arg1 : InputStream, arg2 : number) : number;
}

export = URLConnection
