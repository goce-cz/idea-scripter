import Object = require('nashorn/java/lang/Object');
import NetworkInterface = require('nashorn/java/net/NetworkInterface');
import NameService = require('nashorn/sun/net/spi/nameservice/NameService');
import InetAddressImpl = require('nashorn/java/net/InetAddressImpl');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import Serializable = require('nashorn/java/io/Serializable');
import Enum = require('nashorn/java/lang/Enum');

declare class InetAddress {
	multicastAddress : boolean;
	anyLocalAddress : boolean;
	loopbackAddress : boolean;
	linkLocalAddress : boolean;
	siteLocalAddress : boolean;
	mCGlobal : boolean;
	mCNodeLocal : boolean;
	mCLinkLocal : boolean;
	mCSiteLocal : boolean;
	mCOrgLocal : boolean;
	hostName : string;
	canonicalHostName : string;
	address : number[];
	hostAddress : string;
	static loopbackAddress : InetAddress;
	static localHost : InetAddress;
	holder() : InetAddress.InetAddressHolder;
	readResolve() : Object;
	isMulticastAddress() : boolean;
	isAnyLocalAddress() : boolean;
	isLoopbackAddress() : boolean;
	isLinkLocalAddress() : boolean;
	isSiteLocalAddress() : boolean;
	isMCGlobal() : boolean;
	isMCNodeLocal() : boolean;
	isMCLinkLocal() : boolean;
	isMCSiteLocal() : boolean;
	isMCOrgLocal() : boolean;
	isReachable(arg1 : number) : boolean;
	isReachable(arg1 : NetworkInterface, arg2 : number, arg3 : number) : boolean;
	getHostName() : string;
	getHostName(arg1 : boolean) : string;
	getCanonicalHostName() : string;
	static getHostFromNameService(arg1 : InetAddress, arg2 : boolean) : string;
	getAddress() : number[];
	getHostAddress() : string;
	static cacheInitIfNeeded() : void;
	static cacheAddresses(arg1 : string, arg2 : InetAddress[], arg3 : boolean) : void;
	static getCachedAddresses(arg1 : string) : InetAddress[];
	static createNSProvider(arg1 : string) : NameService;
	static getByAddress(arg1 : string, arg2 : number[]) : InetAddress;
	static getByName(arg1 : string) : InetAddress;
	static getByName(arg1 : string, arg2 : InetAddress) : InetAddress;
	static getAllByName(arg1 : string) : InetAddress[];
	static getAllByName(arg1 : string, arg2 : InetAddress) : InetAddress[];
	static getLoopbackAddress() : InetAddress;
	static checkNumericZone(arg1 : string) : number;
	static getAllByName0(arg1 : string) : InetAddress[];
	static getAllByName0(arg1 : string, arg2 : boolean) : InetAddress[];
	static getAllByName0(arg1 : string, arg2 : InetAddress, arg3 : boolean) : InetAddress[];
	static getAddressesFromNameService(arg1 : string, arg2 : InetAddress) : InetAddress[];
	static checkLookupTable(arg1 : string) : InetAddress[];
	static updateLookupTable(arg1 : string) : void;
	static getByAddress(arg1 : number[]) : InetAddress;
	static getLocalHost() : InetAddress;
	static init() : void;
	static anyLocalAddress() : InetAddress;
	static loadImpl(arg1 : string) : InetAddressImpl;
	readObjectNoData(arg1 : ObjectInputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface InetAddress extends Serializable {}

declare module InetAddress {
	class Cache extends Object {
		constructor(arg1 : InetAddress.Cache.Type);
		getPolicy() : number;
		put(arg1 : string, arg2 : InetAddress[]) : InetAddress.Cache;
		get(arg1 : string) : InetAddress.CacheEntry;
	}


	module Cache {
		class Type {
			static Positive : InetAddress.Cache.Type;
			static Negative : InetAddress.Cache.Type;
		}


		interface Type extends Enum<InetAddress.Cache.Type> {}	}
	class CacheEntry extends Object {
	}
	class InetAddressHolder extends Object {
		init(arg1 : string, arg2 : number) : void;
		getHostName() : string;
		getAddress() : number;
		getFamily() : number;
	}
}

export = InetAddress
