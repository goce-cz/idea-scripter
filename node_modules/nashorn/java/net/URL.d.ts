import Object = require('nashorn/java/lang/Object');
import URLStreamHandler = require('nashorn/java/net/URLStreamHandler');
import SecurityManager = require('nashorn/java/lang/SecurityManager');
import URI = require('nashorn/java/net/URI');
import URLConnection = require('nashorn/java/net/URLConnection');
import Proxy = require('nashorn/java/net/Proxy');
import InputStream = require('nashorn/java/io/InputStream');
import Class = require('nashorn/java/lang/Class');
import URLStreamHandlerFactory = require('nashorn/java/net/URLStreamHandlerFactory');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Serializable = require('nashorn/java/io/Serializable');

declare class URL {
	query : string;
	path : string;
	userInfo : string;
	authority : string;
	port : number;
	defaultPort : number;
	protocol : string;
	host : string;
	file : string;
	ref : string;
	content : Object;
	constructor(arg1 : string, arg2 : string, arg3 : number, arg4 : string);
	constructor(arg1 : string, arg2 : string, arg3 : string);
	constructor(arg1 : string, arg2 : string, arg3 : number, arg4 : string, arg5 : URLStreamHandler);
	constructor(arg1 : string);
	constructor(arg1 : URL, arg2 : string);
	constructor(arg1 : URL, arg2 : string, arg3 : URLStreamHandler);
	isValidProtocol(arg1 : string) : boolean;
	checkSpecifyHandler(arg1 : SecurityManager) : void;
	set(arg1 : string, arg2 : string, arg3 : number, arg4 : string, arg5 : string) : void;
	set(arg1 : string, arg2 : string, arg3 : number, arg4 : string, arg5 : string, arg6 : string, arg7 : string, arg8 : string) : void;
	getQuery() : string;
	getPath() : string;
	getUserInfo() : string;
	getAuthority() : string;
	getPort() : number;
	getDefaultPort() : number;
	getProtocol() : string;
	getHost() : string;
	getFile() : string;
	getRef() : string;
	sameFile(arg1 : URL) : boolean;
	toExternalForm() : string;
	toURI() : URI;
	openConnection() : URLConnection;
	openConnection(arg1 : Proxy) : URLConnection;
	openStream() : InputStream;
	getContent() : Object;
	getContent(arg1 : Class[]) : Object;
	static setURLStreamHandlerFactory(arg1 : URLStreamHandlerFactory) : void;
	static getURLStreamHandler(arg1 : string) : URLStreamHandler;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface URL extends Serializable {}
export = URL
