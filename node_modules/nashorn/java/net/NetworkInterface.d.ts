import Object = require('nashorn/java/lang/Object');
import Enumeration = require('nashorn/java/util/Enumeration');
import InetAddress = require('nashorn/java/net/InetAddress');
import List = require('nashorn/java/util/List');
import InterfaceAddress = require('nashorn/java/net/InterfaceAddress');

declare class NetworkInterface extends Object {
	name : string;
	inetAddresses : Enumeration<InetAddress>;
	interfaceAddresses : List<InterfaceAddress>;
	subInterfaces : Enumeration<NetworkInterface>;
	parent : NetworkInterface;
	index : number;
	displayName : string;
	static networkInterfaces : Enumeration<NetworkInterface>;
	up : boolean;
	loopback : boolean;
	pointToPoint : boolean;
	hardwareAddress : number[];
	mTU : number;
	virtual : boolean;
	getName() : string;
	getInetAddresses() : Enumeration<InetAddress>;
	getInterfaceAddresses() : List<InterfaceAddress>;
	getSubInterfaces() : Enumeration<NetworkInterface>;
	getParent() : NetworkInterface;
	getIndex() : number;
	getDisplayName() : string;
	static getByName(arg1 : string) : NetworkInterface;
	static getByIndex(arg1 : number) : NetworkInterface;
	static getByInetAddress(arg1 : InetAddress) : NetworkInterface;
	static getNetworkInterfaces() : Enumeration<NetworkInterface>;
	static getAll() : NetworkInterface[];
	static getByName0(arg1 : string) : NetworkInterface;
	static getByIndex0(arg1 : number) : NetworkInterface;
	static getByInetAddress0(arg1 : InetAddress) : NetworkInterface;
	isUp() : boolean;
	isLoopback() : boolean;
	isPointToPoint() : boolean;
	supportsMulticast() : boolean;
	getHardwareAddress() : number[];
	getMTU() : number;
	isVirtual() : boolean;
	static isUp0(arg1 : string, arg2 : number) : boolean;
	static isLoopback0(arg1 : string, arg2 : number) : boolean;
	static supportsMulticast0(arg1 : string, arg2 : number) : boolean;
	static isP2P0(arg1 : string, arg2 : number) : boolean;
	static getMacAddr0(arg1 : number[], arg2 : string, arg3 : number) : number[];
	static getMTU0(arg1 : string, arg2 : number) : number;
	static init() : void;
	static getDefault() : NetworkInterface;
}

export = NetworkInterface
