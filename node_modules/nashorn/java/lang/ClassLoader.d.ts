import Object = require('nashorn/java/lang/Object');
import Class = require('nashorn/java/lang/Class');
import Void = require('nashorn/java/lang/Void');
import ProtectionDomain = require('nashorn/java/security/ProtectionDomain');
import ByteBuffer = require('nashorn/java/nio/ByteBuffer');
import CodeSource = require('nashorn/java/security/CodeSource');
import Certificate = require('nashorn/java/security/cert/Certificate');
import URL = require('nashorn/java/net/URL');
import Enumeration = require('nashorn/java/util/Enumeration');
import URLClassPath = require('nashorn/sun/misc/URLClassPath');
import InputStream = require('nashorn/java/io/InputStream');
import Package = require('nashorn/java/lang/Package');
import File = require('nashorn/java/io/File');
import AssertionStatusDirectives = require('nashorn/java/lang/AssertionStatusDirectives');

declare class ClassLoader extends Object {
	parent : ClassLoader;
	static systemClassLoader : ClassLoader;
	static registerNatives() : void;
	addClass(arg1 : Class<any>) : void;
	static checkCreateClassLoader() : Void;
	loadClass(arg1 : string) : Class<any>;
	loadClass(arg1 : string, arg2 : boolean) : Class<any>;
	getClassLoadingLock(arg1 : string) : Object;
	loadClassInternal(arg1 : string) : Class<any>;
	checkPackageAccess(arg1 : Class<any>, arg2 : ProtectionDomain) : void;
	findClass(arg1 : string) : Class<any>;
	defineClass(arg1 : number[], arg2 : number, arg3 : number) : Class<any>;
	defineClass(arg1 : string, arg2 : number[], arg3 : number, arg4 : number) : Class<any>;
	preDefineClass(arg1 : string, arg2 : ProtectionDomain) : ProtectionDomain;
	defineClassSourceLocation(arg1 : ProtectionDomain) : string;
	postDefineClass(arg1 : Class<any>, arg2 : ProtectionDomain) : void;
	defineClass(arg1 : string, arg2 : number[], arg3 : number, arg4 : number, arg5 : ProtectionDomain) : Class<any>;
	defineClass(arg1 : string, arg2 : ByteBuffer, arg3 : ProtectionDomain) : Class<any>;
	defineClass0(arg1 : string, arg2 : number[], arg3 : number, arg4 : number, arg5 : ProtectionDomain) : Class<any>;
	defineClass1(arg1 : string, arg2 : number[], arg3 : number, arg4 : number, arg5 : ProtectionDomain, arg6 : string) : Class<any>;
	defineClass2(arg1 : string, arg2 : ByteBuffer, arg3 : number, arg4 : number, arg5 : ProtectionDomain, arg6 : string) : Class<any>;
	checkName(arg1 : string) : boolean;
	checkCerts(arg1 : string, arg2 : CodeSource) : void;
	compareCerts(arg1 : Certificate[], arg2 : Certificate[]) : boolean;
	resolveClass(arg1 : Class<any>) : void;
	resolveClass0(arg1 : Class<any>) : void;
	findSystemClass(arg1 : string) : Class<any>;
	findBootstrapClassOrNull(arg1 : string) : Class<any>;
	findBootstrapClass(arg1 : string) : Class<any>;
	findLoadedClass(arg1 : string) : Class<any>;
	findLoadedClass0(arg1 : string) : Class<any>;
	setSigners(arg1 : Class<any>, arg2 : Object[]) : void;
	getResource(arg1 : string) : URL;
	getResources(arg1 : string) : Enumeration<URL>;
	findResource(arg1 : string) : URL;
	findResources(arg1 : string) : Enumeration<URL>;
	static registerAsParallelCapable() : boolean;
	static getSystemResource(arg1 : string) : URL;
	static getSystemResources(arg1 : string) : Enumeration<URL>;
	static getBootstrapResource(arg1 : string) : URL;
	static getBootstrapResources(arg1 : string) : Enumeration<URL>;
	static getBootstrapClassPath() : URLClassPath;
	getResourceAsStream(arg1 : string) : InputStream;
	static getSystemResourceAsStream(arg1 : string) : InputStream;
	getParent() : ClassLoader;
	static getSystemClassLoader() : ClassLoader;
	static initSystemClassLoader() : void;
	isAncestor(arg1 : ClassLoader) : boolean;
	static needsClassLoaderPermissionCheck(arg1 : ClassLoader, arg2 : ClassLoader) : boolean;
	static getClassLoader(arg1 : Class<any>) : ClassLoader;
	static checkClassLoaderPermission(arg1 : ClassLoader, arg2 : Class<any>) : void;
	definePackage(arg1 : string, arg2 : string, arg3 : string, arg4 : string, arg5 : string, arg6 : string, arg7 : string, arg8 : URL) : Package;
	getPackage(arg1 : string) : Package;
	getPackages() : Package[];
	findLibrary(arg1 : string) : string;
	static initializePath(arg1 : string) : string[];
	static loadLibrary(arg1 : Class<any>, arg2 : string, arg3 : boolean) : void;
	static loadLibrary0(arg1 : Class<any>, arg2 : File) : boolean;
	static findNative(arg1 : ClassLoader, arg2 : string) : number;
	setDefaultAssertionStatus(arg1 : boolean) : void;
	setPackageAssertionStatus(arg1 : string, arg2 : boolean) : void;
	setClassAssertionStatus(arg1 : string, arg2 : boolean) : void;
	clearAssertionStatus() : void;
	desiredAssertionStatus(arg1 : string) : boolean;
	initializeJavaAssertionMaps() : void;
	static retrieveDirectives() : AssertionStatusDirectives;
}


declare module ClassLoader {
	class NativeLibrary extends Object {
		constructor(arg1 : Class<any>, arg2 : string, arg3 : boolean);
		load(arg1 : string, arg2 : boolean) : void;
		find(arg1 : string) : number;
		unload(arg1 : string, arg2 : boolean) : void;
		static findBuiltinLib(arg1 : string) : string;
		static getFromClass() : Class<any>;
	}
	class ParallelLoaders extends Object {
		static register(arg1 : Class<ClassLoader>) : boolean;
		static isRegistered(arg1 : Class<ClassLoader>) : boolean;
	}
}

export = ClassLoader
