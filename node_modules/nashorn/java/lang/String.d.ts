import Comparator = require('nashorn/java/util/Comparator');
import Charset = require('nashorn/java/nio/charset/Charset');
import StringBuffer = require('nashorn/java/lang/StringBuffer');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import AbstractStringBuilder = require('nashorn/java/lang/AbstractStringBuilder');
import CharSequence = require('nashorn/java/lang/CharSequence');
import Iterable = require('nashorn/java/lang/Iterable');
import Locale = require('nashorn/java/util/Locale');
import Object = require('nashorn/java/lang/Object');
import Serializable = require('nashorn/java/io/Serializable');
import Comparable = require('nashorn/java/lang/Comparable');

declare class String {
	static CASE_INSENSITIVE_ORDER : Comparator<string>;
	empty : boolean;
	bytes : number[];
	constructor();
	constructor(arg1 : string);
	constructor(arg1 : string[]);
	constructor(arg1 : string[], arg2 : number, arg3 : number);
	constructor(arg1 : number[], arg2 : number, arg3 : number);
	constructor(arg1 : number[], arg2 : number, arg3 : number, arg4 : number);
	constructor(arg1 : number[], arg2 : number);
	constructor(arg1 : number[], arg2 : number, arg3 : number, arg4 : string);
	constructor(arg1 : number[], arg2 : number, arg3 : number, arg4 : Charset);
	constructor(arg1 : number[], arg2 : string);
	constructor(arg1 : number[], arg2 : Charset);
	constructor(arg1 : number[], arg2 : number, arg3 : number);
	constructor(arg1 : number[]);
	constructor(arg1 : StringBuffer);
	constructor(arg1 : StringBuilder);
	static checkBounds(arg1 : number[], arg2 : number, arg3 : number) : void;
	isEmpty() : boolean;
	codePointAt(arg1 : number) : number;
	codePointBefore(arg1 : number) : number;
	codePointCount(arg1 : number, arg2 : number) : number;
	offsetByCodePoints(arg1 : number, arg2 : number) : number;
	getChars(arg1 : string[], arg2 : number) : void;
	getChars(arg1 : number, arg2 : number, arg3 : string[], arg4 : number) : void;
	getBytes(arg1 : number, arg2 : number, arg3 : number[], arg4 : number) : void;
	getBytes(arg1 : string) : number[];
	getBytes(arg1 : Charset) : number[];
	getBytes() : number[];
	contentEquals(arg1 : StringBuffer) : boolean;
	nonSyncContentEquals(arg1 : AbstractStringBuilder) : boolean;
	contentEquals(arg1 : CharSequence) : boolean;
	equalsIgnoreCase(arg1 : string) : boolean;
	compareToIgnoreCase(arg1 : string) : number;
	regionMatches(arg1 : number, arg2 : string, arg3 : number, arg4 : number) : boolean;
	regionMatches(arg1 : boolean, arg2 : number, arg3 : string, arg4 : number, arg5 : number) : boolean;
	startsWith(arg1 : string, arg2 : number) : boolean;
	startsWith(arg1 : string) : boolean;
	endsWith(arg1 : string) : boolean;
	indexOf(arg1 : number) : number;
	indexOf(arg1 : number, arg2 : number) : number;
	indexOfSupplementary(arg1 : number, arg2 : number) : number;
	lastIndexOf(arg1 : number) : number;
	lastIndexOf(arg1 : number, arg2 : number) : number;
	lastIndexOfSupplementary(arg1 : number, arg2 : number) : number;
	indexOf(arg1 : string) : number;
	indexOf(arg1 : string, arg2 : number) : number;
	static indexOf(arg1 : string[], arg2 : number, arg3 : number, arg4 : string, arg5 : number) : number;
	static indexOf(arg1 : string[], arg2 : number, arg3 : number, arg4 : string[], arg5 : number, arg6 : number, arg7 : number) : number;
	lastIndexOf(arg1 : string) : number;
	lastIndexOf(arg1 : string, arg2 : number) : number;
	static lastIndexOf(arg1 : string[], arg2 : number, arg3 : number, arg4 : string, arg5 : number) : number;
	static lastIndexOf(arg1 : string[], arg2 : number, arg3 : number, arg4 : string[], arg5 : number, arg6 : number, arg7 : number) : number;
	substring(arg1 : number) : string;
	substring(arg1 : number, arg2 : number) : string;
	concat(arg1 : string) : string;
	replace(arg1 : string, arg2 : string) : string;
	matches(arg1 : string) : boolean;
	contains(arg1 : CharSequence) : boolean;
	replaceFirst(arg1 : string, arg2 : string) : string;
	replaceAll(arg1 : string, arg2 : string) : string;
	replace(arg1 : CharSequence, arg2 : CharSequence) : string;
	split(arg1 : string, arg2 : number) : string[];
	split(arg1 : string) : string[];
	static join(arg1 : CharSequence, arg2 : CharSequence[]) : string;
	static join(arg1 : CharSequence, arg2 : Iterable<CharSequence>) : string;
	toLowerCase(arg1 : Locale) : string;
	toLowerCase() : string;
	toUpperCase(arg1 : Locale) : string;
	toUpperCase() : string;
	trim() : string;
	toCharArray() : string[];
	static format(arg1 : string, arg2 : Object[]) : string;
	static format(arg1 : Locale, arg2 : string, arg3 : Object[]) : string;
	static valueOf(arg1 : Object) : string;
	static valueOf(arg1 : string[]) : string;
	static valueOf(arg1 : string[], arg2 : number, arg3 : number) : string;
	static copyValueOf(arg1 : string[], arg2 : number, arg3 : number) : string;
	static copyValueOf(arg1 : string[]) : string;
	static valueOf(arg1 : boolean) : string;
	static valueOf(arg1 : string) : string;
	static valueOf(arg1 : number) : string;
	static valueOf(arg1 : number) : string;
	static valueOf(arg1 : number) : string;
	static valueOf(arg1 : number) : string;
	intern() : string;
}


declare interface String extends Serializable, Comparable<string>, CharSequence {}

declare module String {
	class CaseInsensitiveComparator {
		readResolve() : Object;
	}


	interface CaseInsensitiveComparator extends Comparator<string>, Serializable {}}

export = String
