import Class = require('nashorn/java/lang/Class');
import Type = require('nashorn/java/lang/reflect/Type');
import Annotation = require('nashorn/java/lang/annotation/Annotation');
import AnnotatedType = require('nashorn/java/lang/reflect/AnnotatedType');
import GenericsFactory = require('nashorn/sun/reflect/generics/factory/GenericsFactory');
import FieldRepository = require('nashorn/sun/reflect/generics/repository/FieldRepository');
import Object = require('nashorn/java/lang/Object');
import FieldAccessor = require('nashorn/sun/reflect/FieldAccessor');
import Map = require('nashorn/java/util/Map');
import AccessibleObject = require('nashorn/java/lang/reflect/AccessibleObject');
import Member = require('nashorn/java/lang/reflect/Member');

declare class Field {
	declaringClass : Class<any>;
	name : string;
	modifiers : number;
	enumConstant : boolean;
	synthetic : boolean;
	type : Class<any>;
	genericType : Type;
	declaredAnnotations : Annotation[];
	annotatedType : AnnotatedType;
	getGenericSignature() : string;
	getFactory() : GenericsFactory;
	getGenericInfo() : FieldRepository;
	copy() : Field;
	isEnumConstant() : boolean;
	getType() : Class<any>;
	getGenericType() : Type;
	toGenericString() : string;
	get(arg1 : Object) : Object;
	getBoolean(arg1 : Object) : boolean;
	getByte(arg1 : Object) : number;
	getChar(arg1 : Object) : string;
	getShort(arg1 : Object) : number;
	getInt(arg1 : Object) : number;
	getLong(arg1 : Object) : number;
	getFloat(arg1 : Object) : number;
	getDouble(arg1 : Object) : number;
	set(arg1 : Object, arg2 : Object) : void;
	setBoolean(arg1 : Object, arg2 : boolean) : void;
	setByte(arg1 : Object, arg2 : number) : void;
	setChar(arg1 : Object, arg2 : string) : void;
	setShort(arg1 : Object, arg2 : number) : void;
	setInt(arg1 : Object, arg2 : number) : void;
	setLong(arg1 : Object, arg2 : number) : void;
	setFloat(arg1 : Object, arg2 : number) : void;
	setDouble(arg1 : Object, arg2 : number) : void;
	getFieldAccessor(arg1 : Object) : FieldAccessor;
	acquireFieldAccessor(arg1 : boolean) : FieldAccessor;
	getFieldAccessor(arg1 : boolean) : FieldAccessor;
	setFieldAccessor(arg1 : FieldAccessor, arg2 : boolean) : void;
	declaredAnnotations() : Map<Class<Annotation>, Annotation>;
	getTypeAnnotationBytes0() : number[];
	getAnnotatedType() : AnnotatedType;
}


declare interface Field extends AccessibleObject, Member {}
export = Field
