import Class = require('nashorn/java/lang/Class');
import TypeVariable = require('nashorn/java/lang/reflect/TypeVariable');
import Type = require('nashorn/java/lang/reflect/Type');
import Object = require('nashorn/java/lang/Object');
import Annotation = require('nashorn/java/lang/annotation/Annotation');
import AnnotatedType = require('nashorn/java/lang/reflect/AnnotatedType');
import GenericsFactory = require('nashorn/sun/reflect/generics/factory/GenericsFactory');
import MethodAccessor = require('nashorn/sun/reflect/MethodAccessor');
import Executable = require('nashorn/java/lang/reflect/Executable');

declare class Method {
	declaringClass : Class<any>;
	name : string;
	modifiers : number;
	typeParameters : TypeVariable<Method>[];
	returnType : Class<any>;
	genericReturnType : Type;
	parameterTypes : Class<any>[];
	parameterCount : number;
	genericParameterTypes : Type[];
	exceptionTypes : Class<any>[];
	genericExceptionTypes : Type[];
	bridge : boolean;
	varArgs : boolean;
	synthetic : boolean;
	default : boolean;
	defaultValue : Object;
	declaredAnnotations : Annotation[];
	parameterAnnotations : Annotation[][];
	annotatedReturnType : AnnotatedType;
	getGenericSignature() : string;
	getFactory() : GenericsFactory;
	copy() : Method;
	getReturnType() : Class<any>;
	getGenericReturnType() : Type;
	invoke(arg1 : Object, arg2 : Object[]) : Object;
	isBridge() : boolean;
	isDefault() : boolean;
	acquireMethodAccessor() : MethodAccessor;
	getMethodAccessor() : MethodAccessor;
	setMethodAccessor(arg1 : MethodAccessor) : void;
	getDefaultValue() : Object;
}


declare interface Method extends Executable {}
export = Method
