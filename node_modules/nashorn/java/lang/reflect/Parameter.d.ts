import Executable = require('nashorn/java/lang/reflect/Executable');
import Type = require('nashorn/java/lang/reflect/Type');
import Class = require('nashorn/java/lang/Class');
import AnnotatedType = require('nashorn/java/lang/reflect/AnnotatedType');
import Annotation = require('nashorn/java/lang/annotation/Annotation');
import Map = require('nashorn/java/util/Map');
import AnnotatedElement = require('nashorn/java/lang/reflect/AnnotatedElement');

declare class Parameter {
	namePresent : boolean;
	declaringExecutable : Executable;
	modifiers : number;
	name : string;
	parameterizedType : Type;
	type : Class<any>;
	annotatedType : AnnotatedType;
	implicit : boolean;
	synthetic : boolean;
	varArgs : boolean;
	declaredAnnotations : Annotation[];
	annotations : Annotation[];
	isNamePresent() : boolean;
	getDeclaringExecutable() : Executable;
	getModifiers() : number;
	getName() : string;
	getRealName() : string;
	getParameterizedType() : Type;
	getType() : Class<any>;
	getAnnotatedType() : AnnotatedType;
	isImplicit() : boolean;
	isSynthetic() : boolean;
	isVarArgs() : boolean;
	declaredAnnotations() : Map<Class<Annotation>, Annotation>;
}


declare interface Parameter extends AnnotatedElement {}
export = Parameter
