import Class = require('nashorn/java/lang/Class');
import TypeVariable = require('nashorn/java/lang/reflect/TypeVariable');
import Type = require('nashorn/java/lang/reflect/Type');
import Parameter = require('nashorn/java/lang/reflect/Parameter');
import Annotation = require('nashorn/java/lang/annotation/Annotation');
import AnnotatedType = require('nashorn/java/lang/reflect/AnnotatedType');
import ConstructorRepository = require('nashorn/sun/reflect/generics/repository/ConstructorRepository');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import Map = require('nashorn/java/util/Map');
import AccessibleObject = require('nashorn/java/lang/reflect/AccessibleObject');
import Member = require('nashorn/java/lang/reflect/Member');
import GenericDeclaration = require('nashorn/java/lang/reflect/GenericDeclaration');

declare class Executable {
	declaringClass : Class<any>;
	name : string;
	modifiers : number;
	typeParameters : TypeVariable<any>[];
	parameterTypes : Class<any>[];
	parameterCount : number;
	genericParameterTypes : Type[];
	parameters : Parameter[];
	exceptionTypes : Class<any>[];
	genericExceptionTypes : Type[];
	varArgs : boolean;
	synthetic : boolean;
	parameterAnnotations : Annotation[][];
	declaredAnnotations : Annotation[];
	annotatedReturnType : AnnotatedType;
	annotatedReceiverType : AnnotatedType;
	annotatedParameterTypes : AnnotatedType[];
	annotatedExceptionTypes : AnnotatedType[];
	getAnnotationBytes() : number[];
	hasGenericInformation() : boolean;
	getGenericInfo() : ConstructorRepository;
	equalParamTypes(arg1 : Class<any>[], arg2 : Class<any>[]) : boolean;
	parseParameterAnnotations(arg1 : number[]) : Annotation[][];
	separateWithCommas(arg1 : Class<any>[], arg2 : StringBuilder) : void;
	printModifiersIfNonzero(arg1 : StringBuilder, arg2 : number, arg3 : boolean) : void;
	sharedToString(arg1 : number, arg2 : boolean, arg3 : Class<any>[], arg4 : Class<any>[]) : string;
	specificToStringHeader(arg1 : StringBuilder) : void;
	sharedToGenericString(arg1 : number, arg2 : boolean) : string;
	specificToGenericStringHeader(arg1 : StringBuilder) : void;
	getParameterTypes() : Class<any>[];
	getParameterCount() : number;
	getGenericParameterTypes() : Type[];
	getParameters() : Parameter[];
	synthesizeAllParams() : Parameter[];
	verifyParameters(arg1 : Parameter[]) : void;
	privateGetParameters() : Parameter[];
	hasRealParameterData() : boolean;
	getParameters0() : Parameter[];
	getTypeAnnotationBytes0() : number[];
	getTypeAnnotationBytes() : number[];
	getExceptionTypes() : Class<any>[];
	getGenericExceptionTypes() : Type[];
	toGenericString() : string;
	isVarArgs() : boolean;
	getParameterAnnotations() : Annotation[][];
	sharedGetParameterAnnotations(arg1 : Class<any>[], arg2 : number[]) : Annotation[][];
	handleParameterNumberMismatch(arg1 : number, arg2 : number) : void;
	declaredAnnotations() : Map<Class<Annotation>, Annotation>;
	getAnnotatedReturnType() : AnnotatedType;
	getAnnotatedReturnType0(arg1 : Type) : AnnotatedType;
	getAnnotatedReceiverType() : AnnotatedType;
	getAnnotatedParameterTypes() : AnnotatedType[];
	getAnnotatedExceptionTypes() : AnnotatedType[];
}


declare interface Executable extends AccessibleObject, Member, GenericDeclaration {}
export = Executable
