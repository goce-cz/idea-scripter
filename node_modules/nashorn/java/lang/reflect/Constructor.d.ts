import Class = require('nashorn/java/lang/Class');
import TypeVariable = require('nashorn/java/lang/reflect/TypeVariable');
import Type = require('nashorn/java/lang/reflect/Type');
import Annotation = require('nashorn/java/lang/annotation/Annotation');
import AnnotatedType = require('nashorn/java/lang/reflect/AnnotatedType');
import GenericsFactory = require('nashorn/sun/reflect/generics/factory/GenericsFactory');
import Object = require('nashorn/java/lang/Object');
import ConstructorAccessor = require('nashorn/sun/reflect/ConstructorAccessor');
import Executable = require('nashorn/java/lang/reflect/Executable');

declare class Constructor<T> {
	declaringClass : Class<T>;
	name : string;
	modifiers : number;
	typeParameters : TypeVariable<Constructor<T>>[];
	parameterTypes : Class<any>[];
	parameterCount : number;
	genericParameterTypes : Type[];
	exceptionTypes : Class<any>[];
	genericExceptionTypes : Type[];
	varArgs : boolean;
	synthetic : boolean;
	declaredAnnotations : Annotation[];
	parameterAnnotations : Annotation[][];
	annotatedReturnType : AnnotatedType;
	annotatedReceiverType : AnnotatedType;
	getFactory() : GenericsFactory;
	copy() : Constructor<T>;
	newInstance(arg1 : Object[]) : T;
	acquireConstructorAccessor() : ConstructorAccessor;
	getConstructorAccessor() : ConstructorAccessor;
	setConstructorAccessor(arg1 : ConstructorAccessor) : void;
	getSlot() : number;
	getSignature() : string;
	getRawAnnotations() : number[];
	getRawParameterAnnotations() : number[];
}


declare interface Constructor<T> extends Executable {}
export = Constructor
