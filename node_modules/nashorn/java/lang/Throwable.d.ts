import StackTraceElement = require('nashorn/java/lang/StackTraceElement');
import PrintStream = require('nashorn/java/io/PrintStream');
import Set = require('nashorn/java/util/Set');
import PrintWriter = require('nashorn/java/io/PrintWriter');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import Serializable = require('nashorn/java/io/Serializable');
import Object = require('nashorn/java/lang/Object');

declare class Throwable {
	message : string;
	localizedMessage : string;
	cause : Throwable;
	stackTrace : StackTraceElement[];
	suppressed : Throwable[];
	constructor();
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : Throwable);
	constructor(arg1 : Throwable);
	getMessage() : string;
	getLocalizedMessage() : string;
	getCause() : Throwable;
	initCause(arg1 : Throwable) : Throwable;
	printStackTrace() : void;
	printStackTrace(arg1 : PrintStream) : void;
	printStackTrace(arg1 : Throwable.PrintStreamOrWriter) : void;
	printEnclosedStackTrace(arg1 : Throwable.PrintStreamOrWriter, arg2 : StackTraceElement[], arg3 : string, arg4 : string, arg5 : Set<Throwable>) : void;
	printStackTrace(arg1 : PrintWriter) : void;
	fillInStackTrace() : Throwable;
	fillInStackTrace(arg1 : number) : Throwable;
	getStackTrace() : StackTraceElement[];
	getOurStackTrace() : StackTraceElement[];
	setStackTrace(arg1 : StackTraceElement[]) : void;
	getStackTraceDepth() : number;
	getStackTraceElement(arg1 : number) : StackTraceElement;
	readObject(arg1 : ObjectInputStream) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
	addSuppressed(arg1 : Throwable) : void;
	getSuppressed() : Throwable[];
}


declare interface Throwable extends Serializable {}

declare module Throwable {
	class PrintStreamOrWriter extends Object {
		lock() : Object;
		println(arg1 : Object) : void;
	}
	class SentinelHolder extends Object {
		static STACK_TRACE_ELEMENT_SENTINEL : StackTraceElement;
		static STACK_TRACE_SENTINEL : StackTraceElement[];
	}
	class WrappedPrintStream {
	}


	interface WrappedPrintStream extends Throwable.PrintStreamOrWriter {}	class WrappedPrintWriter {
	}


	interface WrappedPrintWriter extends Throwable.PrintStreamOrWriter {}}

export = Throwable
