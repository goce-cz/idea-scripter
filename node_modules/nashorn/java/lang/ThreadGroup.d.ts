import Void = require('nashorn/java/lang/Void');
import Thread = require('nashorn/java/lang/Thread');
import PrintStream = require('nashorn/java/io/PrintStream');

declare class ThreadGroup {
	name : string;
	parent : ThreadGroup;
	maxPriority : number;
	daemon : boolean;
	destroyed : boolean;
	constructor(arg1 : string);
	constructor(arg1 : ThreadGroup, arg2 : string);
	static checkParentAccess(arg1 : ThreadGroup) : Void;
	getName() : string;
	getParent() : ThreadGroup;
	getMaxPriority() : number;
	isDaemon() : boolean;
	isDestroyed() : boolean;
	setDaemon(arg1 : boolean) : void;
	setMaxPriority(arg1 : number) : void;
	parentOf(arg1 : ThreadGroup) : boolean;
	checkAccess() : void;
	activeCount() : number;
	enumerate(arg1 : Thread[]) : number;
	enumerate(arg1 : Thread[], arg2 : boolean) : number;
	enumerate(arg1 : Thread[], arg2 : number, arg3 : boolean) : number;
	activeGroupCount() : number;
	enumerate(arg1 : ThreadGroup[]) : number;
	enumerate(arg1 : ThreadGroup[], arg2 : boolean) : number;
	enumerate(arg1 : ThreadGroup[], arg2 : number, arg3 : boolean) : number;
	stop() : void;
	interrupt() : void;
	suspend() : void;
	stopOrSuspend(arg1 : boolean) : boolean;
	resume() : void;
	destroy() : void;
	add(arg1 : ThreadGroup) : void;
	remove(arg1 : ThreadGroup) : void;
	addUnstarted() : void;
	add(arg1 : Thread) : void;
	threadStartFailed(arg1 : Thread) : void;
	threadTerminated(arg1 : Thread) : void;
	remove(arg1 : Thread) : void;
	list() : void;
	list(arg1 : PrintStream, arg2 : number) : void;
	allowThreadSuspension(arg1 : boolean) : boolean;
}


declare interface ThreadGroup extends Thread.UncaughtExceptionHandler {}
export = ThreadGroup
