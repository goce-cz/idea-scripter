import Class = require('nashorn/java/lang/Class');
import CharSequence = require('nashorn/java/lang/CharSequence');
import Serializable = require('nashorn/java/io/Serializable');
import Comparable = require('nashorn/java/lang/Comparable');
import Object = require('nashorn/java/lang/Object');
import Enum = require('nashorn/java/lang/Enum');

declare class Character {
	static MIN_RADIX : number;
	static MAX_RADIX : number;
	static MIN_VALUE : string;
	static MAX_VALUE : string;
	static TYPE : Class<string>;
	static UNASSIGNED : number;
	static UPPERCASE_LETTER : number;
	static LOWERCASE_LETTER : number;
	static TITLECASE_LETTER : number;
	static MODIFIER_LETTER : number;
	static OTHER_LETTER : number;
	static NON_SPACING_MARK : number;
	static ENCLOSING_MARK : number;
	static COMBINING_SPACING_MARK : number;
	static DECIMAL_DIGIT_NUMBER : number;
	static LETTER_NUMBER : number;
	static OTHER_NUMBER : number;
	static SPACE_SEPARATOR : number;
	static LINE_SEPARATOR : number;
	static PARAGRAPH_SEPARATOR : number;
	static CONTROL : number;
	static FORMAT : number;
	static PRIVATE_USE : number;
	static SURROGATE : number;
	static DASH_PUNCTUATION : number;
	static START_PUNCTUATION : number;
	static END_PUNCTUATION : number;
	static CONNECTOR_PUNCTUATION : number;
	static OTHER_PUNCTUATION : number;
	static MATH_SYMBOL : number;
	static CURRENCY_SYMBOL : number;
	static MODIFIER_SYMBOL : number;
	static OTHER_SYMBOL : number;
	static INITIAL_QUOTE_PUNCTUATION : number;
	static FINAL_QUOTE_PUNCTUATION : number;
	static DIRECTIONALITY_UNDEFINED : number;
	static DIRECTIONALITY_LEFT_TO_RIGHT : number;
	static DIRECTIONALITY_RIGHT_TO_LEFT : number;
	static DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC : number;
	static DIRECTIONALITY_EUROPEAN_NUMBER : number;
	static DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR : number;
	static DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR : number;
	static DIRECTIONALITY_ARABIC_NUMBER : number;
	static DIRECTIONALITY_COMMON_NUMBER_SEPARATOR : number;
	static DIRECTIONALITY_NONSPACING_MARK : number;
	static DIRECTIONALITY_BOUNDARY_NEUTRAL : number;
	static DIRECTIONALITY_PARAGRAPH_SEPARATOR : number;
	static DIRECTIONALITY_SEGMENT_SEPARATOR : number;
	static DIRECTIONALITY_WHITESPACE : number;
	static DIRECTIONALITY_OTHER_NEUTRALS : number;
	static DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING : number;
	static DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE : number;
	static DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING : number;
	static DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE : number;
	static DIRECTIONALITY_POP_DIRECTIONAL_FORMAT : number;
	static MIN_HIGH_SURROGATE : string;
	static MAX_HIGH_SURROGATE : string;
	static MIN_LOW_SURROGATE : string;
	static MAX_LOW_SURROGATE : string;
	static MIN_SURROGATE : string;
	static MAX_SURROGATE : string;
	static MIN_SUPPLEMENTARY_CODE_POINT : number;
	static MIN_CODE_POINT : number;
	static MAX_CODE_POINT : number;
	static SIZE : number;
	static BYTES : number;
	constructor(arg1 : string);
	static valueOf(arg1 : string) : string;
	charValue() : string;
	static hashCode(arg1 : string) : number;
	static toString(arg1 : string) : string;
	static isValidCodePoint(arg1 : number) : boolean;
	static isBmpCodePoint(arg1 : number) : boolean;
	static isSupplementaryCodePoint(arg1 : number) : boolean;
	static isHighSurrogate(arg1 : string) : boolean;
	static isLowSurrogate(arg1 : string) : boolean;
	static isSurrogate(arg1 : string) : boolean;
	static isSurrogatePair(arg1 : string, arg2 : string) : boolean;
	static charCount(arg1 : number) : number;
	static toCodePoint(arg1 : string, arg2 : string) : number;
	static codePointAt(arg1 : CharSequence, arg2 : number) : number;
	static codePointAt(arg1 : string[], arg2 : number) : number;
	static codePointAt(arg1 : string[], arg2 : number, arg3 : number) : number;
	static codePointAtImpl(arg1 : string[], arg2 : number, arg3 : number) : number;
	static codePointBefore(arg1 : CharSequence, arg2 : number) : number;
	static codePointBefore(arg1 : string[], arg2 : number) : number;
	static codePointBefore(arg1 : string[], arg2 : number, arg3 : number) : number;
	static codePointBeforeImpl(arg1 : string[], arg2 : number, arg3 : number) : number;
	static highSurrogate(arg1 : number) : string;
	static lowSurrogate(arg1 : number) : string;
	static toChars(arg1 : number, arg2 : string[], arg3 : number) : number;
	static toChars(arg1 : number) : string[];
	static toSurrogates(arg1 : number, arg2 : string[], arg3 : number) : void;
	static codePointCount(arg1 : CharSequence, arg2 : number, arg3 : number) : number;
	static codePointCount(arg1 : string[], arg2 : number, arg3 : number) : number;
	static codePointCountImpl(arg1 : string[], arg2 : number, arg3 : number) : number;
	static offsetByCodePoints(arg1 : CharSequence, arg2 : number, arg3 : number) : number;
	static offsetByCodePoints(arg1 : string[], arg2 : number, arg3 : number, arg4 : number, arg5 : number) : number;
	static offsetByCodePointsImpl(arg1 : string[], arg2 : number, arg3 : number, arg4 : number, arg5 : number) : number;
	static isLowerCase(arg1 : string) : boolean;
	static isLowerCase(arg1 : number) : boolean;
	static isUpperCase(arg1 : string) : boolean;
	static isUpperCase(arg1 : number) : boolean;
	static isTitleCase(arg1 : string) : boolean;
	static isTitleCase(arg1 : number) : boolean;
	static isDigit(arg1 : string) : boolean;
	static isDigit(arg1 : number) : boolean;
	static isDefined(arg1 : string) : boolean;
	static isDefined(arg1 : number) : boolean;
	static isLetter(arg1 : string) : boolean;
	static isLetter(arg1 : number) : boolean;
	static isLetterOrDigit(arg1 : string) : boolean;
	static isLetterOrDigit(arg1 : number) : boolean;
	static isJavaLetter(arg1 : string) : boolean;
	static isJavaLetterOrDigit(arg1 : string) : boolean;
	static isAlphabetic(arg1 : number) : boolean;
	static isIdeographic(arg1 : number) : boolean;
	static isJavaIdentifierStart(arg1 : string) : boolean;
	static isJavaIdentifierStart(arg1 : number) : boolean;
	static isJavaIdentifierPart(arg1 : string) : boolean;
	static isJavaIdentifierPart(arg1 : number) : boolean;
	static isUnicodeIdentifierStart(arg1 : string) : boolean;
	static isUnicodeIdentifierStart(arg1 : number) : boolean;
	static isUnicodeIdentifierPart(arg1 : string) : boolean;
	static isUnicodeIdentifierPart(arg1 : number) : boolean;
	static isIdentifierIgnorable(arg1 : string) : boolean;
	static isIdentifierIgnorable(arg1 : number) : boolean;
	static toLowerCase(arg1 : string) : string;
	static toLowerCase(arg1 : number) : number;
	static toUpperCase(arg1 : string) : string;
	static toUpperCase(arg1 : number) : number;
	static toTitleCase(arg1 : string) : string;
	static toTitleCase(arg1 : number) : number;
	static digit(arg1 : string, arg2 : number) : number;
	static digit(arg1 : number, arg2 : number) : number;
	static getNumericValue(arg1 : string) : number;
	static getNumericValue(arg1 : number) : number;
	static isSpace(arg1 : string) : boolean;
	static isSpaceChar(arg1 : string) : boolean;
	static isSpaceChar(arg1 : number) : boolean;
	static isWhitespace(arg1 : string) : boolean;
	static isWhitespace(arg1 : number) : boolean;
	static isISOControl(arg1 : string) : boolean;
	static isISOControl(arg1 : number) : boolean;
	static getType(arg1 : string) : number;
	static getType(arg1 : number) : number;
	static forDigit(arg1 : number, arg2 : number) : string;
	static getDirectionality(arg1 : string) : number;
	static getDirectionality(arg1 : number) : number;
	static isMirrored(arg1 : string) : boolean;
	static isMirrored(arg1 : number) : boolean;
	static compare(arg1 : string, arg2 : string) : number;
	static toUpperCaseEx(arg1 : number) : number;
	static toUpperCaseCharArray(arg1 : number) : string[];
	static reverseBytes(arg1 : string) : string;
	static getName(arg1 : number) : string;
}


declare interface Character extends Serializable, Comparable<string> {}

declare module Character {
	class CharacterCache extends Object {
	}
	class Subset extends Object {
	}
	class UnicodeBlock {
		static BASIC_LATIN : Character.UnicodeBlock;
		static LATIN_1_SUPPLEMENT : Character.UnicodeBlock;
		static LATIN_EXTENDED_A : Character.UnicodeBlock;
		static LATIN_EXTENDED_B : Character.UnicodeBlock;
		static IPA_EXTENSIONS : Character.UnicodeBlock;
		static SPACING_MODIFIER_LETTERS : Character.UnicodeBlock;
		static COMBINING_DIACRITICAL_MARKS : Character.UnicodeBlock;
		static GREEK : Character.UnicodeBlock;
		static CYRILLIC : Character.UnicodeBlock;
		static ARMENIAN : Character.UnicodeBlock;
		static HEBREW : Character.UnicodeBlock;
		static ARABIC : Character.UnicodeBlock;
		static DEVANAGARI : Character.UnicodeBlock;
		static BENGALI : Character.UnicodeBlock;
		static GURMUKHI : Character.UnicodeBlock;
		static GUJARATI : Character.UnicodeBlock;
		static ORIYA : Character.UnicodeBlock;
		static TAMIL : Character.UnicodeBlock;
		static TELUGU : Character.UnicodeBlock;
		static KANNADA : Character.UnicodeBlock;
		static MALAYALAM : Character.UnicodeBlock;
		static THAI : Character.UnicodeBlock;
		static LAO : Character.UnicodeBlock;
		static TIBETAN : Character.UnicodeBlock;
		static GEORGIAN : Character.UnicodeBlock;
		static HANGUL_JAMO : Character.UnicodeBlock;
		static LATIN_EXTENDED_ADDITIONAL : Character.UnicodeBlock;
		static GREEK_EXTENDED : Character.UnicodeBlock;
		static GENERAL_PUNCTUATION : Character.UnicodeBlock;
		static SUPERSCRIPTS_AND_SUBSCRIPTS : Character.UnicodeBlock;
		static CURRENCY_SYMBOLS : Character.UnicodeBlock;
		static COMBINING_MARKS_FOR_SYMBOLS : Character.UnicodeBlock;
		static LETTERLIKE_SYMBOLS : Character.UnicodeBlock;
		static NUMBER_FORMS : Character.UnicodeBlock;
		static ARROWS : Character.UnicodeBlock;
		static MATHEMATICAL_OPERATORS : Character.UnicodeBlock;
		static MISCELLANEOUS_TECHNICAL : Character.UnicodeBlock;
		static CONTROL_PICTURES : Character.UnicodeBlock;
		static OPTICAL_CHARACTER_RECOGNITION : Character.UnicodeBlock;
		static ENCLOSED_ALPHANUMERICS : Character.UnicodeBlock;
		static BOX_DRAWING : Character.UnicodeBlock;
		static BLOCK_ELEMENTS : Character.UnicodeBlock;
		static GEOMETRIC_SHAPES : Character.UnicodeBlock;
		static MISCELLANEOUS_SYMBOLS : Character.UnicodeBlock;
		static DINGBATS : Character.UnicodeBlock;
		static CJK_SYMBOLS_AND_PUNCTUATION : Character.UnicodeBlock;
		static HIRAGANA : Character.UnicodeBlock;
		static KATAKANA : Character.UnicodeBlock;
		static BOPOMOFO : Character.UnicodeBlock;
		static HANGUL_COMPATIBILITY_JAMO : Character.UnicodeBlock;
		static KANBUN : Character.UnicodeBlock;
		static ENCLOSED_CJK_LETTERS_AND_MONTHS : Character.UnicodeBlock;
		static CJK_COMPATIBILITY : Character.UnicodeBlock;
		static CJK_UNIFIED_IDEOGRAPHS : Character.UnicodeBlock;
		static HANGUL_SYLLABLES : Character.UnicodeBlock;
		static PRIVATE_USE_AREA : Character.UnicodeBlock;
		static CJK_COMPATIBILITY_IDEOGRAPHS : Character.UnicodeBlock;
		static ALPHABETIC_PRESENTATION_FORMS : Character.UnicodeBlock;
		static ARABIC_PRESENTATION_FORMS_A : Character.UnicodeBlock;
		static COMBINING_HALF_MARKS : Character.UnicodeBlock;
		static CJK_COMPATIBILITY_FORMS : Character.UnicodeBlock;
		static SMALL_FORM_VARIANTS : Character.UnicodeBlock;
		static ARABIC_PRESENTATION_FORMS_B : Character.UnicodeBlock;
		static HALFWIDTH_AND_FULLWIDTH_FORMS : Character.UnicodeBlock;
		static SPECIALS : Character.UnicodeBlock;
		static SURROGATES_AREA : Character.UnicodeBlock;
		static SYRIAC : Character.UnicodeBlock;
		static THAANA : Character.UnicodeBlock;
		static SINHALA : Character.UnicodeBlock;
		static MYANMAR : Character.UnicodeBlock;
		static ETHIOPIC : Character.UnicodeBlock;
		static CHEROKEE : Character.UnicodeBlock;
		static UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS : Character.UnicodeBlock;
		static OGHAM : Character.UnicodeBlock;
		static RUNIC : Character.UnicodeBlock;
		static KHMER : Character.UnicodeBlock;
		static MONGOLIAN : Character.UnicodeBlock;
		static BRAILLE_PATTERNS : Character.UnicodeBlock;
		static CJK_RADICALS_SUPPLEMENT : Character.UnicodeBlock;
		static KANGXI_RADICALS : Character.UnicodeBlock;
		static IDEOGRAPHIC_DESCRIPTION_CHARACTERS : Character.UnicodeBlock;
		static BOPOMOFO_EXTENDED : Character.UnicodeBlock;
		static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A : Character.UnicodeBlock;
		static YI_SYLLABLES : Character.UnicodeBlock;
		static YI_RADICALS : Character.UnicodeBlock;
		static CYRILLIC_SUPPLEMENTARY : Character.UnicodeBlock;
		static TAGALOG : Character.UnicodeBlock;
		static HANUNOO : Character.UnicodeBlock;
		static BUHID : Character.UnicodeBlock;
		static TAGBANWA : Character.UnicodeBlock;
		static LIMBU : Character.UnicodeBlock;
		static TAI_LE : Character.UnicodeBlock;
		static KHMER_SYMBOLS : Character.UnicodeBlock;
		static PHONETIC_EXTENSIONS : Character.UnicodeBlock;
		static MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A : Character.UnicodeBlock;
		static SUPPLEMENTAL_ARROWS_A : Character.UnicodeBlock;
		static SUPPLEMENTAL_ARROWS_B : Character.UnicodeBlock;
		static MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B : Character.UnicodeBlock;
		static SUPPLEMENTAL_MATHEMATICAL_OPERATORS : Character.UnicodeBlock;
		static MISCELLANEOUS_SYMBOLS_AND_ARROWS : Character.UnicodeBlock;
		static KATAKANA_PHONETIC_EXTENSIONS : Character.UnicodeBlock;
		static YIJING_HEXAGRAM_SYMBOLS : Character.UnicodeBlock;
		static VARIATION_SELECTORS : Character.UnicodeBlock;
		static LINEAR_B_SYLLABARY : Character.UnicodeBlock;
		static LINEAR_B_IDEOGRAMS : Character.UnicodeBlock;
		static AEGEAN_NUMBERS : Character.UnicodeBlock;
		static OLD_ITALIC : Character.UnicodeBlock;
		static GOTHIC : Character.UnicodeBlock;
		static UGARITIC : Character.UnicodeBlock;
		static DESERET : Character.UnicodeBlock;
		static SHAVIAN : Character.UnicodeBlock;
		static OSMANYA : Character.UnicodeBlock;
		static CYPRIOT_SYLLABARY : Character.UnicodeBlock;
		static BYZANTINE_MUSICAL_SYMBOLS : Character.UnicodeBlock;
		static MUSICAL_SYMBOLS : Character.UnicodeBlock;
		static TAI_XUAN_JING_SYMBOLS : Character.UnicodeBlock;
		static MATHEMATICAL_ALPHANUMERIC_SYMBOLS : Character.UnicodeBlock;
		static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B : Character.UnicodeBlock;
		static CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT : Character.UnicodeBlock;
		static TAGS : Character.UnicodeBlock;
		static VARIATION_SELECTORS_SUPPLEMENT : Character.UnicodeBlock;
		static SUPPLEMENTARY_PRIVATE_USE_AREA_A : Character.UnicodeBlock;
		static SUPPLEMENTARY_PRIVATE_USE_AREA_B : Character.UnicodeBlock;
		static HIGH_SURROGATES : Character.UnicodeBlock;
		static HIGH_PRIVATE_USE_SURROGATES : Character.UnicodeBlock;
		static LOW_SURROGATES : Character.UnicodeBlock;
		static ARABIC_SUPPLEMENT : Character.UnicodeBlock;
		static NKO : Character.UnicodeBlock;
		static SAMARITAN : Character.UnicodeBlock;
		static MANDAIC : Character.UnicodeBlock;
		static ETHIOPIC_SUPPLEMENT : Character.UnicodeBlock;
		static UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED : Character.UnicodeBlock;
		static NEW_TAI_LUE : Character.UnicodeBlock;
		static BUGINESE : Character.UnicodeBlock;
		static TAI_THAM : Character.UnicodeBlock;
		static BALINESE : Character.UnicodeBlock;
		static SUNDANESE : Character.UnicodeBlock;
		static BATAK : Character.UnicodeBlock;
		static LEPCHA : Character.UnicodeBlock;
		static OL_CHIKI : Character.UnicodeBlock;
		static VEDIC_EXTENSIONS : Character.UnicodeBlock;
		static PHONETIC_EXTENSIONS_SUPPLEMENT : Character.UnicodeBlock;
		static COMBINING_DIACRITICAL_MARKS_SUPPLEMENT : Character.UnicodeBlock;
		static GLAGOLITIC : Character.UnicodeBlock;
		static LATIN_EXTENDED_C : Character.UnicodeBlock;
		static COPTIC : Character.UnicodeBlock;
		static GEORGIAN_SUPPLEMENT : Character.UnicodeBlock;
		static TIFINAGH : Character.UnicodeBlock;
		static ETHIOPIC_EXTENDED : Character.UnicodeBlock;
		static CYRILLIC_EXTENDED_A : Character.UnicodeBlock;
		static SUPPLEMENTAL_PUNCTUATION : Character.UnicodeBlock;
		static CJK_STROKES : Character.UnicodeBlock;
		static LISU : Character.UnicodeBlock;
		static VAI : Character.UnicodeBlock;
		static CYRILLIC_EXTENDED_B : Character.UnicodeBlock;
		static BAMUM : Character.UnicodeBlock;
		static MODIFIER_TONE_LETTERS : Character.UnicodeBlock;
		static LATIN_EXTENDED_D : Character.UnicodeBlock;
		static SYLOTI_NAGRI : Character.UnicodeBlock;
		static COMMON_INDIC_NUMBER_FORMS : Character.UnicodeBlock;
		static PHAGS_PA : Character.UnicodeBlock;
		static SAURASHTRA : Character.UnicodeBlock;
		static DEVANAGARI_EXTENDED : Character.UnicodeBlock;
		static KAYAH_LI : Character.UnicodeBlock;
		static REJANG : Character.UnicodeBlock;
		static HANGUL_JAMO_EXTENDED_A : Character.UnicodeBlock;
		static JAVANESE : Character.UnicodeBlock;
		static CHAM : Character.UnicodeBlock;
		static MYANMAR_EXTENDED_A : Character.UnicodeBlock;
		static TAI_VIET : Character.UnicodeBlock;
		static ETHIOPIC_EXTENDED_A : Character.UnicodeBlock;
		static MEETEI_MAYEK : Character.UnicodeBlock;
		static HANGUL_JAMO_EXTENDED_B : Character.UnicodeBlock;
		static VERTICAL_FORMS : Character.UnicodeBlock;
		static ANCIENT_GREEK_NUMBERS : Character.UnicodeBlock;
		static ANCIENT_SYMBOLS : Character.UnicodeBlock;
		static PHAISTOS_DISC : Character.UnicodeBlock;
		static LYCIAN : Character.UnicodeBlock;
		static CARIAN : Character.UnicodeBlock;
		static OLD_PERSIAN : Character.UnicodeBlock;
		static IMPERIAL_ARAMAIC : Character.UnicodeBlock;
		static PHOENICIAN : Character.UnicodeBlock;
		static LYDIAN : Character.UnicodeBlock;
		static KHAROSHTHI : Character.UnicodeBlock;
		static OLD_SOUTH_ARABIAN : Character.UnicodeBlock;
		static AVESTAN : Character.UnicodeBlock;
		static INSCRIPTIONAL_PARTHIAN : Character.UnicodeBlock;
		static INSCRIPTIONAL_PAHLAVI : Character.UnicodeBlock;
		static OLD_TURKIC : Character.UnicodeBlock;
		static RUMI_NUMERAL_SYMBOLS : Character.UnicodeBlock;
		static BRAHMI : Character.UnicodeBlock;
		static KAITHI : Character.UnicodeBlock;
		static CUNEIFORM : Character.UnicodeBlock;
		static CUNEIFORM_NUMBERS_AND_PUNCTUATION : Character.UnicodeBlock;
		static EGYPTIAN_HIEROGLYPHS : Character.UnicodeBlock;
		static BAMUM_SUPPLEMENT : Character.UnicodeBlock;
		static KANA_SUPPLEMENT : Character.UnicodeBlock;
		static ANCIENT_GREEK_MUSICAL_NOTATION : Character.UnicodeBlock;
		static COUNTING_ROD_NUMERALS : Character.UnicodeBlock;
		static MAHJONG_TILES : Character.UnicodeBlock;
		static DOMINO_TILES : Character.UnicodeBlock;
		static PLAYING_CARDS : Character.UnicodeBlock;
		static ENCLOSED_ALPHANUMERIC_SUPPLEMENT : Character.UnicodeBlock;
		static ENCLOSED_IDEOGRAPHIC_SUPPLEMENT : Character.UnicodeBlock;
		static MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS : Character.UnicodeBlock;
		static EMOTICONS : Character.UnicodeBlock;
		static TRANSPORT_AND_MAP_SYMBOLS : Character.UnicodeBlock;
		static ALCHEMICAL_SYMBOLS : Character.UnicodeBlock;
		static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C : Character.UnicodeBlock;
		static CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D : Character.UnicodeBlock;
		static ARABIC_EXTENDED_A : Character.UnicodeBlock;
		static SUNDANESE_SUPPLEMENT : Character.UnicodeBlock;
		static MEETEI_MAYEK_EXTENSIONS : Character.UnicodeBlock;
		static MEROITIC_HIEROGLYPHS : Character.UnicodeBlock;
		static MEROITIC_CURSIVE : Character.UnicodeBlock;
		static SORA_SOMPENG : Character.UnicodeBlock;
		static CHAKMA : Character.UnicodeBlock;
		static SHARADA : Character.UnicodeBlock;
		static TAKRI : Character.UnicodeBlock;
		static MIAO : Character.UnicodeBlock;
		static ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS : Character.UnicodeBlock;
		static of(arg1 : string) : Character.UnicodeBlock;
		static of(arg1 : number) : Character.UnicodeBlock;
		static forName(arg1 : string) : Character.UnicodeBlock;
	}


	interface UnicodeBlock extends Character.Subset {}	class UnicodeScript {
		static COMMON : Character.UnicodeScript;
		static LATIN : Character.UnicodeScript;
		static GREEK : Character.UnicodeScript;
		static CYRILLIC : Character.UnicodeScript;
		static ARMENIAN : Character.UnicodeScript;
		static HEBREW : Character.UnicodeScript;
		static ARABIC : Character.UnicodeScript;
		static SYRIAC : Character.UnicodeScript;
		static THAANA : Character.UnicodeScript;
		static DEVANAGARI : Character.UnicodeScript;
		static BENGALI : Character.UnicodeScript;
		static GURMUKHI : Character.UnicodeScript;
		static GUJARATI : Character.UnicodeScript;
		static ORIYA : Character.UnicodeScript;
		static TAMIL : Character.UnicodeScript;
		static TELUGU : Character.UnicodeScript;
		static KANNADA : Character.UnicodeScript;
		static MALAYALAM : Character.UnicodeScript;
		static SINHALA : Character.UnicodeScript;
		static THAI : Character.UnicodeScript;
		static LAO : Character.UnicodeScript;
		static TIBETAN : Character.UnicodeScript;
		static MYANMAR : Character.UnicodeScript;
		static GEORGIAN : Character.UnicodeScript;
		static HANGUL : Character.UnicodeScript;
		static ETHIOPIC : Character.UnicodeScript;
		static CHEROKEE : Character.UnicodeScript;
		static CANADIAN_ABORIGINAL : Character.UnicodeScript;
		static OGHAM : Character.UnicodeScript;
		static RUNIC : Character.UnicodeScript;
		static KHMER : Character.UnicodeScript;
		static MONGOLIAN : Character.UnicodeScript;
		static HIRAGANA : Character.UnicodeScript;
		static KATAKANA : Character.UnicodeScript;
		static BOPOMOFO : Character.UnicodeScript;
		static HAN : Character.UnicodeScript;
		static YI : Character.UnicodeScript;
		static OLD_ITALIC : Character.UnicodeScript;
		static GOTHIC : Character.UnicodeScript;
		static DESERET : Character.UnicodeScript;
		static INHERITED : Character.UnicodeScript;
		static TAGALOG : Character.UnicodeScript;
		static HANUNOO : Character.UnicodeScript;
		static BUHID : Character.UnicodeScript;
		static TAGBANWA : Character.UnicodeScript;
		static LIMBU : Character.UnicodeScript;
		static TAI_LE : Character.UnicodeScript;
		static LINEAR_B : Character.UnicodeScript;
		static UGARITIC : Character.UnicodeScript;
		static SHAVIAN : Character.UnicodeScript;
		static OSMANYA : Character.UnicodeScript;
		static CYPRIOT : Character.UnicodeScript;
		static BRAILLE : Character.UnicodeScript;
		static BUGINESE : Character.UnicodeScript;
		static COPTIC : Character.UnicodeScript;
		static NEW_TAI_LUE : Character.UnicodeScript;
		static GLAGOLITIC : Character.UnicodeScript;
		static TIFINAGH : Character.UnicodeScript;
		static SYLOTI_NAGRI : Character.UnicodeScript;
		static OLD_PERSIAN : Character.UnicodeScript;
		static KHAROSHTHI : Character.UnicodeScript;
		static BALINESE : Character.UnicodeScript;
		static CUNEIFORM : Character.UnicodeScript;
		static PHOENICIAN : Character.UnicodeScript;
		static PHAGS_PA : Character.UnicodeScript;
		static NKO : Character.UnicodeScript;
		static SUNDANESE : Character.UnicodeScript;
		static BATAK : Character.UnicodeScript;
		static LEPCHA : Character.UnicodeScript;
		static OL_CHIKI : Character.UnicodeScript;
		static VAI : Character.UnicodeScript;
		static SAURASHTRA : Character.UnicodeScript;
		static KAYAH_LI : Character.UnicodeScript;
		static REJANG : Character.UnicodeScript;
		static LYCIAN : Character.UnicodeScript;
		static CARIAN : Character.UnicodeScript;
		static LYDIAN : Character.UnicodeScript;
		static CHAM : Character.UnicodeScript;
		static TAI_THAM : Character.UnicodeScript;
		static TAI_VIET : Character.UnicodeScript;
		static AVESTAN : Character.UnicodeScript;
		static EGYPTIAN_HIEROGLYPHS : Character.UnicodeScript;
		static SAMARITAN : Character.UnicodeScript;
		static MANDAIC : Character.UnicodeScript;
		static LISU : Character.UnicodeScript;
		static BAMUM : Character.UnicodeScript;
		static JAVANESE : Character.UnicodeScript;
		static MEETEI_MAYEK : Character.UnicodeScript;
		static IMPERIAL_ARAMAIC : Character.UnicodeScript;
		static OLD_SOUTH_ARABIAN : Character.UnicodeScript;
		static INSCRIPTIONAL_PARTHIAN : Character.UnicodeScript;
		static INSCRIPTIONAL_PAHLAVI : Character.UnicodeScript;
		static OLD_TURKIC : Character.UnicodeScript;
		static BRAHMI : Character.UnicodeScript;
		static KAITHI : Character.UnicodeScript;
		static MEROITIC_HIEROGLYPHS : Character.UnicodeScript;
		static MEROITIC_CURSIVE : Character.UnicodeScript;
		static SORA_SOMPENG : Character.UnicodeScript;
		static CHAKMA : Character.UnicodeScript;
		static SHARADA : Character.UnicodeScript;
		static TAKRI : Character.UnicodeScript;
		static MIAO : Character.UnicodeScript;
		static UNKNOWN : Character.UnicodeScript;
		static of(arg1 : number) : Character.UnicodeScript;
		static forName(arg1 : string) : Character.UnicodeScript;
	}


	interface UnicodeScript extends Enum<Character.UnicodeScript> {}}

export = Character
