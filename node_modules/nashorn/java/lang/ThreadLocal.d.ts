import Object = require('nashorn/java/lang/Object');
import Supplier = require('nashorn/java/util/function/Supplier');
import Thread = require('nashorn/java/lang/Thread');
import WeakReference = require('nashorn/java/lang/ref/WeakReference');

declare class ThreadLocal<T> extends Object {
	constructor();
	static nextHashCode() : number;
	initialValue() : T;
	static withInitial<S>(arg1 : Supplier<S>) : ThreadLocal<S>;
	get() : T;
	setInitialValue() : T;
	set(arg1 : T) : void;
	remove() : void;
	getMap(arg1 : Thread) : ThreadLocal.ThreadLocalMap;
	createMap(arg1 : Thread, arg2 : T) : void;
	static createInheritedMap(arg1 : ThreadLocal.ThreadLocalMap) : ThreadLocal.ThreadLocalMap;
	childValue(arg1 : T) : T;
}


declare module ThreadLocal {
	class SuppliedThreadLocal<T> {
	}


	interface SuppliedThreadLocal<T> extends ThreadLocal<T> {}	class ThreadLocalMap extends Object {
		setThreshold(arg1 : number) : void;
		static nextIndex(arg1 : number, arg2 : number) : number;
		static prevIndex(arg1 : number, arg2 : number) : number;
		getEntry(arg1 : ThreadLocal<any>) : ThreadLocal.ThreadLocalMap.Entry;
		getEntryAfterMiss(arg1 : ThreadLocal<any>, arg2 : number, arg3 : ThreadLocal.ThreadLocalMap.Entry) : ThreadLocal.ThreadLocalMap.Entry;
		set(arg1 : ThreadLocal<any>, arg2 : Object) : void;
		remove(arg1 : ThreadLocal<any>) : void;
		replaceStaleEntry(arg1 : ThreadLocal<any>, arg2 : Object, arg3 : number) : void;
		expungeStaleEntry(arg1 : number) : number;
		cleanSomeSlots(arg1 : number, arg2 : number) : boolean;
		rehash() : void;
		resize() : void;
		expungeStaleEntries() : void;
	}


	module ThreadLocalMap {
		class Entry {
		}


		interface Entry extends WeakReference<ThreadLocal<any>> {}	}
}

export = ThreadLocal
