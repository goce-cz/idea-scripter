import Object = require('nashorn/java/lang/Object');
import StringBuffer = require('nashorn/java/lang/StringBuffer');
import CharSequence = require('nashorn/java/lang/CharSequence');
import Appendable = require('nashorn/java/lang/Appendable');

declare class AbstractStringBuilder {
	capacity() : number;
	ensureCapacity(arg1 : number) : void;
	ensureCapacityInternal(arg1 : number) : void;
	expandCapacity(arg1 : number) : void;
	trimToSize() : void;
	setLength(arg1 : number) : void;
	codePointAt(arg1 : number) : number;
	codePointBefore(arg1 : number) : number;
	codePointCount(arg1 : number, arg2 : number) : number;
	offsetByCodePoints(arg1 : number, arg2 : number) : number;
	getChars(arg1 : number, arg2 : number, arg3 : string[], arg4 : number) : void;
	setCharAt(arg1 : number, arg2 : string) : void;
	append(arg1 : Object) : AbstractStringBuilder;
	append(arg1 : string) : AbstractStringBuilder;
	append(arg1 : StringBuffer) : AbstractStringBuilder;
	append(arg1 : AbstractStringBuilder) : AbstractStringBuilder;
	appendNull() : AbstractStringBuilder;
	append(arg1 : string[]) : AbstractStringBuilder;
	append(arg1 : string[], arg2 : number, arg3 : number) : AbstractStringBuilder;
	append(arg1 : boolean) : AbstractStringBuilder;
	append(arg1 : number) : AbstractStringBuilder;
	append(arg1 : number) : AbstractStringBuilder;
	append(arg1 : number) : AbstractStringBuilder;
	append(arg1 : number) : AbstractStringBuilder;
	delete(arg1 : number, arg2 : number) : AbstractStringBuilder;
	appendCodePoint(arg1 : number) : AbstractStringBuilder;
	deleteCharAt(arg1 : number) : AbstractStringBuilder;
	replace(arg1 : number, arg2 : number, arg3 : string) : AbstractStringBuilder;
	substring(arg1 : number) : string;
	substring(arg1 : number, arg2 : number) : string;
	insert(arg1 : number, arg2 : string[], arg3 : number, arg4 : number) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : Object) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : string) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : string[]) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : CharSequence) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : CharSequence, arg3 : number, arg4 : number) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : boolean) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : string) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : number) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : number) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : number) : AbstractStringBuilder;
	insert(arg1 : number, arg2 : number) : AbstractStringBuilder;
	indexOf(arg1 : string) : number;
	indexOf(arg1 : string, arg2 : number) : number;
	lastIndexOf(arg1 : string) : number;
	lastIndexOf(arg1 : string, arg2 : number) : number;
	reverse() : AbstractStringBuilder;
	reverseAllValidSurrogatePairs() : void;
	getValue() : string[];
}


declare interface AbstractStringBuilder extends Appendable, CharSequence {}
export = AbstractStringBuilder
