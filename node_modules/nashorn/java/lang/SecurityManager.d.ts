import Object = require('nashorn/java/lang/Object');
import ThreadGroup = require('nashorn/java/lang/ThreadGroup');
import Class = require('nashorn/java/lang/Class');
import ClassLoader = require('nashorn/java/lang/ClassLoader');
import Permission = require('nashorn/java/security/Permission');
import Thread = require('nashorn/java/lang/Thread');
import FileDescriptor = require('nashorn/java/io/FileDescriptor');
import InetAddress = require('nashorn/java/net/InetAddress');

declare class SecurityManager extends Object {
	inCheck : boolean;
	securityContext : Object;
	threadGroup : ThreadGroup;
	constructor();
	hasAllPermission() : boolean;
	getInCheck() : boolean;
	getClassContext() : Class[];
	currentClassLoader() : ClassLoader;
	currentClassLoader0() : ClassLoader;
	currentLoadedClass() : Class<any>;
	classDepth(arg1 : string) : number;
	classLoaderDepth() : number;
	classLoaderDepth0() : number;
	inClass(arg1 : string) : boolean;
	inClassLoader() : boolean;
	getSecurityContext() : Object;
	checkPermission(arg1 : Permission) : void;
	checkPermission(arg1 : Permission, arg2 : Object) : void;
	checkCreateClassLoader() : void;
	static getRootGroup() : ThreadGroup;
	checkAccess(arg1 : Thread) : void;
	checkAccess(arg1 : ThreadGroup) : void;
	checkExit(arg1 : number) : void;
	checkExec(arg1 : string) : void;
	checkLink(arg1 : string) : void;
	checkRead(arg1 : FileDescriptor) : void;
	checkRead(arg1 : string) : void;
	checkRead(arg1 : string, arg2 : Object) : void;
	checkWrite(arg1 : FileDescriptor) : void;
	checkWrite(arg1 : string) : void;
	checkDelete(arg1 : string) : void;
	checkConnect(arg1 : string, arg2 : number) : void;
	checkConnect(arg1 : string, arg2 : number, arg3 : Object) : void;
	checkListen(arg1 : number) : void;
	checkAccept(arg1 : string, arg2 : number) : void;
	checkMulticast(arg1 : InetAddress) : void;
	checkMulticast(arg1 : InetAddress, arg2 : number) : void;
	checkPropertiesAccess() : void;
	checkPropertyAccess(arg1 : string) : void;
	checkTopLevelWindow(arg1 : Object) : boolean;
	checkPrintJobAccess() : void;
	checkSystemClipboardAccess() : void;
	checkAwtEventQueueAccess() : void;
	static getPackages(arg1 : string) : string[];
	checkPackageAccess(arg1 : string) : void;
	checkPackageDefinition(arg1 : string) : void;
	checkSetFactory() : void;
	checkMemberAccess(arg1 : Class<any>, arg2 : number) : void;
	checkSecurityAccess(arg1 : string) : void;
	currentLoadedClass0() : Class<any>;
	getThreadGroup() : ThreadGroup;
}

export = SecurityManager
