import Locale = require('nashorn/java/util/Locale');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import Serializable = require('nashorn/java/io/Serializable');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class DateFormatSymbols {
	static availableLocales : Locale[];
	static instance : DateFormatSymbols;
	eras : string[];
	months : string[];
	shortMonths : string[];
	weekdays : string[];
	shortWeekdays : string[];
	amPmStrings : string[];
	zoneStrings : string[][];
	localPatternChars : string;
	constructor();
	constructor(arg1 : Locale);
	static getAvailableLocales() : Locale[];
	static getInstance() : DateFormatSymbols;
	static getInstance(arg1 : Locale) : DateFormatSymbols;
	static getInstanceRef(arg1 : Locale) : DateFormatSymbols;
	static getProviderInstance(arg1 : Locale) : DateFormatSymbols;
	getEras() : string[];
	setEras(arg1 : string[]) : void;
	getMonths() : string[];
	setMonths(arg1 : string[]) : void;
	getShortMonths() : string[];
	setShortMonths(arg1 : string[]) : void;
	getWeekdays() : string[];
	setWeekdays(arg1 : string[]) : void;
	getShortWeekdays() : string[];
	setShortWeekdays(arg1 : string[]) : void;
	getAmPmStrings() : string[];
	setAmPmStrings(arg1 : string[]) : void;
	getZoneStrings() : string[][];
	setZoneStrings(arg1 : string[][]) : void;
	getLocalPatternChars() : string;
	setLocalPatternChars(arg1 : string) : void;
	initializeData(arg1 : Locale) : void;
	static toOneBasedArray(arg1 : string[]) : string[];
	getZoneIndex(arg1 : string) : number;
	getZoneStringsWrapper() : string[][];
	getZoneStringsImpl(arg1 : boolean) : string[][];
	isSubclassObject() : boolean;
	copyMembers(arg1 : DateFormatSymbols, arg2 : DateFormatSymbols) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface DateFormatSymbols extends Serializable, Cloneable {}
export = DateFormatSymbols
