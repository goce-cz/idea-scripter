import Object = require('nashorn/java/lang/Object');
import StringBuffer = require('nashorn/java/lang/StringBuffer');
import FieldPosition = require('nashorn/java/text/FieldPosition');
import AttributedCharacterIterator = require('nashorn/java/text/AttributedCharacterIterator');
import ParsePosition = require('nashorn/java/text/ParsePosition');
import Serializable = require('nashorn/java/io/Serializable');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class Format {
	format(arg1 : Object) : string;
	format(arg1 : Object, arg2 : StringBuffer, arg3 : FieldPosition) : StringBuffer;
	formatToCharacterIterator(arg1 : Object) : AttributedCharacterIterator;
	parseObject(arg1 : string, arg2 : ParsePosition) : Object;
	parseObject(arg1 : string) : Object;
	createAttributedCharacterIterator(arg1 : string) : AttributedCharacterIterator;
	createAttributedCharacterIterator(arg1 : AttributedCharacterIterator[]) : AttributedCharacterIterator;
	createAttributedCharacterIterator(arg1 : string, arg2 : AttributedCharacterIterator.Attribute, arg3 : Object) : AttributedCharacterIterator;
	createAttributedCharacterIterator(arg1 : AttributedCharacterIterator, arg2 : AttributedCharacterIterator.Attribute, arg3 : Object) : AttributedCharacterIterator;
}


declare interface Format extends Serializable, Cloneable {}

declare module Format {
	class Field {
	}


	interface Field extends AttributedCharacterIterator.Attribute {}	class FieldDelegate extends Object {
		formatted(arg1 : Format.Field, arg2 : Object, arg3 : number, arg4 : number, arg5 : StringBuffer) : void;
		formatted(arg1 : number, arg2 : Format.Field, arg3 : Object, arg4 : number, arg5 : number, arg6 : StringBuffer) : void;
	}
}

export = Format
