import Locale = require('nashorn/java/util/Locale');
import Format = require('nashorn/java/text/Format');
import Object = require('nashorn/java/lang/Object');
import StringBuffer = require('nashorn/java/lang/StringBuffer');
import FieldPosition = require('nashorn/java/text/FieldPosition');
import ParsePosition = require('nashorn/java/text/ParsePosition');
import List = require('nashorn/java/util/List');
import AttributedCharacterIterator = require('nashorn/java/text/AttributedCharacterIterator');
import CharacterIterator = require('nashorn/java/text/CharacterIterator');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');

declare class MessageFormat {
	locale : Locale;
	formatsByArgumentIndex : Format[];
	formats : Format[];
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : Locale);
	setLocale(arg1 : Locale) : void;
	getLocale() : Locale;
	applyPattern(arg1 : string) : void;
	toPattern() : string;
	setFormatsByArgumentIndex(arg1 : Format[]) : void;
	setFormats(arg1 : Format[]) : void;
	setFormatByArgumentIndex(arg1 : number, arg2 : Format) : void;
	setFormat(arg1 : number, arg2 : Format) : void;
	getFormatsByArgumentIndex() : Format[];
	getFormats() : Format[];
	format(arg1 : Object[], arg2 : StringBuffer, arg3 : FieldPosition) : StringBuffer;
	static format(arg1 : string, arg2 : Object[]) : string;
	parse(arg1 : string, arg2 : ParsePosition) : Object[];
	parse(arg1 : string) : Object[];
	subformat(arg1 : Object[], arg2 : StringBuffer, arg3 : FieldPosition, arg4 : List<AttributedCharacterIterator>) : StringBuffer;
	append(arg1 : StringBuffer, arg2 : CharacterIterator) : void;
	makeFormat(arg1 : number, arg2 : number, arg3 : StringBuilder[]) : void;
	static findKeyword(arg1 : string, arg2 : string[]) : number;
	static copyAndFixQuotes(arg1 : string, arg2 : number, arg3 : number, arg4 : StringBuilder) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface MessageFormat extends Format {}

declare module MessageFormat {
	class Field {
		static ARGUMENT : MessageFormat.Field;
	}


	interface Field extends Format.Field {}}

export = MessageFormat
