import Locale = require('nashorn/java/util/Locale');
import Currency = require('nashorn/java/util/Currency');
import RoundingMode = require('nashorn/java/math/RoundingMode');
import StringBuffer = require('nashorn/java/lang/StringBuffer');
import FieldPosition = require('nashorn/java/text/FieldPosition');
import ParsePosition = require('nashorn/java/text/ParsePosition');
import LocaleProviderAdapter = require('nashorn/sun/util/locale/provider/LocaleProviderAdapter');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import Format = require('nashorn/java/text/Format');

declare class NumberFormat {
	static INTEGER_FIELD : number;
	static FRACTION_FIELD : number;
	parseIntegerOnly : boolean;
	static instance : NumberFormat;
	static numberInstance : NumberFormat;
	static integerInstance : NumberFormat;
	static currencyInstance : NumberFormat;
	static percentInstance : NumberFormat;
	static availableLocales : Locale[];
	groupingUsed : boolean;
	maximumIntegerDigits : number;
	minimumIntegerDigits : number;
	maximumFractionDigits : number;
	minimumFractionDigits : number;
	currency : Currency;
	roundingMode : RoundingMode;
	format(arg1 : number) : string;
	fastFormat(arg1 : number) : string;
	format(arg1 : number) : string;
	format(arg1 : number, arg2 : StringBuffer, arg3 : FieldPosition) : StringBuffer;
	format(arg1 : number, arg2 : StringBuffer, arg3 : FieldPosition) : StringBuffer;
	parse(arg1 : string, arg2 : ParsePosition) : number;
	parse(arg1 : string) : number;
	isParseIntegerOnly() : boolean;
	setParseIntegerOnly(arg1 : boolean) : void;
	static getInstance() : NumberFormat;
	static getInstance(arg1 : Locale) : NumberFormat;
	static getNumberInstance() : NumberFormat;
	static getNumberInstance(arg1 : Locale) : NumberFormat;
	static getIntegerInstance() : NumberFormat;
	static getIntegerInstance(arg1 : Locale) : NumberFormat;
	static getCurrencyInstance() : NumberFormat;
	static getCurrencyInstance(arg1 : Locale) : NumberFormat;
	static getPercentInstance() : NumberFormat;
	static getPercentInstance(arg1 : Locale) : NumberFormat;
	static getScientificInstance() : NumberFormat;
	static getScientificInstance(arg1 : Locale) : NumberFormat;
	static getAvailableLocales() : Locale[];
	isGroupingUsed() : boolean;
	setGroupingUsed(arg1 : boolean) : void;
	getMaximumIntegerDigits() : number;
	setMaximumIntegerDigits(arg1 : number) : void;
	getMinimumIntegerDigits() : number;
	setMinimumIntegerDigits(arg1 : number) : void;
	getMaximumFractionDigits() : number;
	setMaximumFractionDigits(arg1 : number) : void;
	getMinimumFractionDigits() : number;
	setMinimumFractionDigits(arg1 : number) : void;
	getCurrency() : Currency;
	setCurrency(arg1 : Currency) : void;
	getRoundingMode() : RoundingMode;
	setRoundingMode(arg1 : RoundingMode) : void;
	static getInstance(arg1 : Locale, arg2 : number) : NumberFormat;
	static getInstance(arg1 : LocaleProviderAdapter, arg2 : Locale, arg3 : number) : NumberFormat;
	readObject(arg1 : ObjectInputStream) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface NumberFormat extends Format {}

declare module NumberFormat {
	class Field {
		static INTEGER : NumberFormat.Field;
		static FRACTION : NumberFormat.Field;
		static EXPONENT : NumberFormat.Field;
		static DECIMAL_SEPARATOR : NumberFormat.Field;
		static SIGN : NumberFormat.Field;
		static GROUPING_SEPARATOR : NumberFormat.Field;
		static EXPONENT_SYMBOL : NumberFormat.Field;
		static PERCENT : NumberFormat.Field;
		static PERMILLE : NumberFormat.Field;
		static CURRENCY : NumberFormat.Field;
		static EXPONENT_SIGN : NumberFormat.Field;
	}


	interface Field extends Format.Field {}}

export = NumberFormat
