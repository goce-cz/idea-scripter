import Locale = require('nashorn/java/util/Locale');
import Date = require('nashorn/java/util/Date');
import ZoneId = require('nashorn/java/time/ZoneId');
import Serializable = require('nashorn/java/io/Serializable');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class TimeZone {
	static SHORT : number;
	static LONG : number;
	rawOffset : number;
	iD : string;
	displayName : string;
	dSTSavings : number;
	static availableIDs : string[];
	static default : TimeZone;
	constructor();
	getOffset(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : number;
	getOffset(arg1 : number) : number;
	getOffsets(arg1 : number, arg2 : number[]) : number;
	setRawOffset(arg1 : number) : void;
	getRawOffset() : number;
	getID() : string;
	setID(arg1 : string) : void;
	getDisplayName() : string;
	getDisplayName(arg1 : Locale) : string;
	getDisplayName(arg1 : boolean, arg2 : number) : string;
	getDisplayName(arg1 : boolean, arg2 : number, arg3 : Locale) : string;
	static getDisplayNames(arg1 : string, arg2 : Locale) : string[];
	getDSTSavings() : number;
	useDaylightTime() : boolean;
	observesDaylightTime() : boolean;
	inDaylightTime(arg1 : Date) : boolean;
	static getTimeZone(arg1 : string) : TimeZone;
	static getTimeZone(arg1 : ZoneId) : TimeZone;
	toZoneId() : ZoneId;
	static getTimeZone(arg1 : string, arg2 : boolean) : TimeZone;
	static getAvailableIDs(arg1 : number) : string[];
	static getAvailableIDs() : string[];
	static getSystemTimeZoneID(arg1 : string, arg2 : string) : string;
	static getSystemGMTOffsetID() : string;
	static getDefault() : TimeZone;
	static getDefaultRef() : TimeZone;
	static setDefaultZone() : TimeZone;
	static setDefault(arg1 : TimeZone) : void;
	hasSameRules(arg1 : TimeZone) : boolean;
	static parseCustomTimeZone(arg1 : string) : TimeZone;
}


declare interface TimeZone extends Serializable, Cloneable {}
export = TimeZone
