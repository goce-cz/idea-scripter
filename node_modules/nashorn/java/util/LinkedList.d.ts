import Collection = require('nashorn/java/util/Collection');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import AbstractSequentialList = require('nashorn/java/util/AbstractSequentialList');
import List = require('nashorn/java/util/List');
import Deque = require('nashorn/java/util/Deque');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Serializable = require('nashorn/java/io/Serializable');
import Iterator = require('nashorn/java/util/Iterator');
import Spliterator = require('nashorn/java/util/Spliterator');
import ListIterator = require('nashorn/java/util/ListIterator');
import Object = require('nashorn/java/lang/Object');

declare class LinkedList<E> {
	first : E;
	last : E;
	constructor();
	constructor(arg1 : Collection<E>);
	linkFirst(arg1 : E) : void;
	linkLast(arg1 : E) : void;
	linkBefore(arg1 : E, arg2 : LinkedList.Node<E>) : void;
	unlinkFirst(arg1 : LinkedList.Node<E>) : E;
	unlinkLast(arg1 : LinkedList.Node<E>) : E;
	unlink(arg1 : LinkedList.Node<E>) : E;
	isElementIndex(arg1 : number) : boolean;
	isPositionIndex(arg1 : number) : boolean;
	outOfBoundsMsg(arg1 : number) : string;
	checkElementIndex(arg1 : number) : void;
	checkPositionIndex(arg1 : number) : void;
	node(arg1 : number) : LinkedList.Node<E>;
	superClone() : LinkedList<E>;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface LinkedList<E> extends AbstractSequentialList<E>, List<E>, Deque<E>, Cloneable, Serializable {}

declare module LinkedList {
	class DescendingIterator {
	}


	interface DescendingIterator extends Iterator<E> {}	class LLSpliterator<E> {
		getEst() : number;
	}


	interface LLSpliterator<E> extends Spliterator<E> {}	class ListItr {
		checkForComodification() : void;
	}


	interface ListItr extends ListIterator<E> {}	class Node<E> extends Object {
	}
}

export = LinkedList
