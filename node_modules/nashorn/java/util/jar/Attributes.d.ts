import DataOutputStream = require('nashorn/java/io/DataOutputStream');
import Manifest = require('nashorn/java/util/jar/Manifest');
import Map = require('nashorn/java/util/Map');
import Object = require('nashorn/java/lang/Object');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class Attributes {
	empty : boolean;
	constructor();
	constructor(arg1 : number);
	constructor(arg1 : Attributes);
	getValue(arg1 : string) : string;
	getValue(arg1 : Attributes.Name) : string;
	putValue(arg1 : string, arg2 : string) : string;
	write(arg1 : DataOutputStream) : void;
	writeMain(arg1 : DataOutputStream) : void;
	read(arg1 : Manifest.FastInputStream, arg2 : number[]) : void;
}


declare interface Attributes extends Map<Object, Object>, Cloneable {}

declare module Attributes {
	class Name extends Object {
		static MANIFEST_VERSION : Attributes.Name;
		static SIGNATURE_VERSION : Attributes.Name;
		static CONTENT_TYPE : Attributes.Name;
		static CLASS_PATH : Attributes.Name;
		static MAIN_CLASS : Attributes.Name;
		static SEALED : Attributes.Name;
		static EXTENSION_LIST : Attributes.Name;
		static EXTENSION_NAME : Attributes.Name;
		static EXTENSION_INSTALLATION : Attributes.Name;
		static IMPLEMENTATION_TITLE : Attributes.Name;
		static IMPLEMENTATION_VERSION : Attributes.Name;
		static IMPLEMENTATION_VENDOR : Attributes.Name;
		static IMPLEMENTATION_VENDOR_ID : Attributes.Name;
		static IMPLEMENTATION_URL : Attributes.Name;
		static SPECIFICATION_TITLE : Attributes.Name;
		static SPECIFICATION_VERSION : Attributes.Name;
		static SPECIFICATION_VENDOR : Attributes.Name;
		constructor(arg1 : string);
		static isValid(arg1 : string) : boolean;
		static isValid(arg1 : string) : boolean;
		static isAlpha(arg1 : string) : boolean;
		static isDigit(arg1 : string) : boolean;
	}
}

export = Attributes
