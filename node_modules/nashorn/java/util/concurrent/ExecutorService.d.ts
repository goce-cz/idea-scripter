import List = require('nashorn/java/util/List');
import Runnable = require('nashorn/java/lang/Runnable');
import TimeUnit = require('nashorn/java/util/concurrent/TimeUnit');
import Callable = require('nashorn/java/util/concurrent/Callable');
import Future = require('nashorn/java/util/concurrent/Future');
import Collection = require('nashorn/java/util/Collection');
import Executor = require('nashorn/java/util/concurrent/Executor');

declare class ExecutorService {
	shutdown : boolean;
	terminated : boolean;
	shutdown() : void;
	shutdownNow() : List<Runnable>;
	isShutdown() : boolean;
	isTerminated() : boolean;
	awaitTermination(arg1 : number, arg2 : TimeUnit) : boolean;
	submit<T>(arg1 : Callable<T>) : Future<T>;
	submit<T>(arg1 : Runnable, arg2 : T) : Future<T>;
	submit(arg1 : Runnable) : Future<any>;
	invokeAll<T>(arg1 : Collection<Callable<T>>) : List<Future<T>>;
	invokeAll<T>(arg1 : Collection<Callable<T>>, arg2 : number, arg3 : TimeUnit) : List<Future<T>>;
	invokeAny<T>(arg1 : Collection<Callable<T>>) : T;
	invokeAny<T>(arg1 : Collection<Callable<T>>, arg2 : number, arg3 : TimeUnit) : T;
}


declare interface ExecutorService extends Executor {}
export = ExecutorService
