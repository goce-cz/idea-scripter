import TimeUnit = require('nashorn/java/util/concurrent/TimeUnit');
import Collection = require('nashorn/java/util/Collection');
import Thread = require('nashorn/java/lang/Thread');
import Serializable = require('nashorn/java/io/Serializable');
import AbstractQueuedSynchronizer = require('nashorn/java/util/concurrent/locks/AbstractQueuedSynchronizer');

declare class Semaphore {
	fair : boolean;
	queueLength : number;
	constructor(arg1 : number);
	constructor(arg1 : number, arg2 : boolean);
	acquire() : void;
	acquireUninterruptibly() : void;
	tryAcquire() : boolean;
	tryAcquire(arg1 : number, arg2 : TimeUnit) : boolean;
	release() : void;
	acquire(arg1 : number) : void;
	acquireUninterruptibly(arg1 : number) : void;
	tryAcquire(arg1 : number) : boolean;
	tryAcquire(arg1 : number, arg2 : number, arg3 : TimeUnit) : boolean;
	release(arg1 : number) : void;
	availablePermits() : number;
	drainPermits() : number;
	reducePermits(arg1 : number) : void;
	isFair() : boolean;
	hasQueuedThreads() : boolean;
	getQueueLength() : number;
	getQueuedThreads() : Collection<Thread>;
}


declare interface Semaphore extends Serializable {}

declare module Semaphore {
	class FairSync {
	}


	interface FairSync extends Semaphore.Sync {}	class NonfairSync {
	}


	interface NonfairSync extends Semaphore.Sync {}	class Sync {
		getPermits() : number;
		nonfairTryAcquireShared(arg1 : number) : number;
		reducePermits(arg1 : number) : void;
		drainPermits() : number;
	}


	interface Sync extends AbstractQueuedSynchronizer {}}

export = Semaphore
