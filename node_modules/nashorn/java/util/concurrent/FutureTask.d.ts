import Callable = require('nashorn/java/util/concurrent/Callable');
import Runnable = require('nashorn/java/lang/Runnable');
import Throwable = require('nashorn/java/lang/Throwable');
import RunnableFuture = require('nashorn/java/util/concurrent/RunnableFuture');
import Object = require('nashorn/java/lang/Object');

declare class FutureTask<V> {
	cancelled : boolean;
	done : boolean;
	constructor(arg1 : Callable<V>);
	constructor(arg1 : Runnable, arg2 : V);
	report(arg1 : number) : V;
	done() : void;
	set(arg1 : V) : void;
	setException(arg1 : Throwable) : void;
	runAndReset() : boolean;
	handlePossibleCancellationInterrupt(arg1 : number) : void;
	finishCompletion() : void;
	awaitDone(arg1 : boolean, arg2 : number) : number;
	removeWaiter(arg1 : FutureTask.WaitNode) : void;
}


declare interface FutureTask<V> extends RunnableFuture<V> {}

declare module FutureTask {
	class WaitNode extends Object {
	}
}

export = FutureTask
