import ThreadFactory = require('nashorn/java/util/concurrent/ThreadFactory');
import RejectedExecutionHandler = require('nashorn/java/util/concurrent/RejectedExecutionHandler');
import BlockingQueue = require('nashorn/java/util/concurrent/BlockingQueue');
import Runnable = require('nashorn/java/lang/Runnable');
import TimeUnit = require('nashorn/java/util/concurrent/TimeUnit');
import List = require('nashorn/java/util/List');
import Thread = require('nashorn/java/lang/Thread');
import Throwable = require('nashorn/java/lang/Throwable');
import AbstractExecutorService = require('nashorn/java/util/concurrent/AbstractExecutorService');
import AbstractQueuedSynchronizer = require('nashorn/java/util/concurrent/locks/AbstractQueuedSynchronizer');

declare class ThreadPoolExecutor {
	shutdown : boolean;
	terminating : boolean;
	terminated : boolean;
	threadFactory : ThreadFactory;
	rejectedExecutionHandler : RejectedExecutionHandler;
	corePoolSize : number;
	maximumPoolSize : number;
	queue : BlockingQueue<Runnable>;
	poolSize : number;
	activeCount : number;
	largestPoolSize : number;
	taskCount : number;
	completedTaskCount : number;
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : TimeUnit, arg5 : BlockingQueue<Runnable>);
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : TimeUnit, arg5 : BlockingQueue<Runnable>, arg6 : ThreadFactory);
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : TimeUnit, arg5 : BlockingQueue<Runnable>, arg6 : RejectedExecutionHandler);
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : TimeUnit, arg5 : BlockingQueue<Runnable>, arg6 : ThreadFactory, arg7 : RejectedExecutionHandler);
	static runStateOf(arg1 : number) : number;
	static workerCountOf(arg1 : number) : number;
	static ctlOf(arg1 : number, arg2 : number) : number;
	static runStateLessThan(arg1 : number, arg2 : number) : boolean;
	static runStateAtLeast(arg1 : number, arg2 : number) : boolean;
	static isRunning(arg1 : number) : boolean;
	compareAndIncrementWorkerCount(arg1 : number) : boolean;
	compareAndDecrementWorkerCount(arg1 : number) : boolean;
	decrementWorkerCount() : void;
	advanceRunState(arg1 : number) : void;
	tryTerminate() : void;
	checkShutdownAccess() : void;
	interruptWorkers() : void;
	interruptIdleWorkers(arg1 : boolean) : void;
	interruptIdleWorkers() : void;
	reject(arg1 : Runnable) : void;
	onShutdown() : void;
	isRunningOrShutdown(arg1 : boolean) : boolean;
	drainQueue() : List<Runnable>;
	addWorker(arg1 : Runnable, arg2 : boolean) : boolean;
	addWorkerFailed(arg1 : ThreadPoolExecutor.Worker) : void;
	processWorkerExit(arg1 : ThreadPoolExecutor.Worker, arg2 : boolean) : void;
	getTask() : Runnable;
	runWorker(arg1 : ThreadPoolExecutor.Worker) : void;
	isTerminating() : boolean;
	setThreadFactory(arg1 : ThreadFactory) : void;
	getThreadFactory() : ThreadFactory;
	setRejectedExecutionHandler(arg1 : RejectedExecutionHandler) : void;
	getRejectedExecutionHandler() : RejectedExecutionHandler;
	setCorePoolSize(arg1 : number) : void;
	getCorePoolSize() : number;
	prestartCoreThread() : boolean;
	ensurePrestart() : void;
	prestartAllCoreThreads() : number;
	allowsCoreThreadTimeOut() : boolean;
	allowCoreThreadTimeOut(arg1 : boolean) : void;
	setMaximumPoolSize(arg1 : number) : void;
	getMaximumPoolSize() : number;
	setKeepAliveTime(arg1 : number, arg2 : TimeUnit) : void;
	getKeepAliveTime(arg1 : TimeUnit) : number;
	getQueue() : BlockingQueue<Runnable>;
	remove(arg1 : Runnable) : boolean;
	purge() : void;
	getPoolSize() : number;
	getActiveCount() : number;
	getLargestPoolSize() : number;
	getTaskCount() : number;
	getCompletedTaskCount() : number;
	beforeExecute(arg1 : Thread, arg2 : Runnable) : void;
	afterExecute(arg1 : Runnable, arg2 : Throwable) : void;
	terminated() : void;
}


declare interface ThreadPoolExecutor extends AbstractExecutorService {}

declare module ThreadPoolExecutor {
	class AbortPolicy {
		constructor();
	}


	interface AbortPolicy extends RejectedExecutionHandler {}	class CallerRunsPolicy {
		constructor();
	}


	interface CallerRunsPolicy extends RejectedExecutionHandler {}	class DiscardOldestPolicy {
		constructor();
	}


	interface DiscardOldestPolicy extends RejectedExecutionHandler {}	class DiscardPolicy {
		constructor();
	}


	interface DiscardPolicy extends RejectedExecutionHandler {}	class Worker {
		locked : boolean;
		lock() : void;
		tryLock() : boolean;
		unlock() : void;
		isLocked() : boolean;
		interruptIfStarted() : void;
	}


	interface Worker extends AbstractQueuedSynchronizer, Runnable {}}

export = ThreadPoolExecutor
