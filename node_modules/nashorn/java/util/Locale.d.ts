import Set = require('nashorn/java/util/Set');
import LocaleExtensions = require('nashorn/sun/util/locale/LocaleExtensions');
import BaseLocale = require('nashorn/sun/util/locale/BaseLocale');
import MessageFormat = require('nashorn/java/text/MessageFormat');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import Collection = require('nashorn/java/util/Collection');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Serializable = require('nashorn/java/io/Serializable');
import LocaleObjectCache = require('nashorn/sun/util/locale/LocaleObjectCache');
import Enum = require('nashorn/java/lang/Enum');
import Map = require('nashorn/java/util/Map');
import LocaleServiceProviderPool = require('nashorn/sun/util/locale/provider/LocaleServiceProviderPool');
import LocaleNameProvider = require('nashorn/java/util/spi/LocaleNameProvider');

declare class Locale {
	static ENGLISH : Locale;
	static FRENCH : Locale;
	static GERMAN : Locale;
	static ITALIAN : Locale;
	static JAPANESE : Locale;
	static KOREAN : Locale;
	static CHINESE : Locale;
	static SIMPLIFIED_CHINESE : Locale;
	static TRADITIONAL_CHINESE : Locale;
	static FRANCE : Locale;
	static GERMANY : Locale;
	static ITALY : Locale;
	static JAPAN : Locale;
	static KOREA : Locale;
	static CHINA : Locale;
	static PRC : Locale;
	static TAIWAN : Locale;
	static UK : Locale;
	static US : Locale;
	static CANADA : Locale;
	static CANADA_FRENCH : Locale;
	static ROOT : Locale;
	static PRIVATE_USE_EXTENSION : string;
	static UNICODE_LOCALE_EXTENSION : string;
	static default : Locale;
	static availableLocales : Locale[];
	static iSOCountries : string[];
	static iSOLanguages : string[];
	language : string;
	script : string;
	country : string;
	variant : string;
	extensionKeys : Set<string>;
	unicodeLocaleAttributes : Set<string>;
	unicodeLocaleKeys : Set<string>;
	iSO3Language : string;
	iSO3Country : string;
	displayLanguage : string;
	displayScript : string;
	displayCountry : string;
	displayVariant : string;
	displayName : string;
	constructor(arg1 : string, arg2 : string, arg3 : string);
	constructor(arg1 : string, arg2 : string);
	constructor(arg1 : string);
	static createConstant(arg1 : string, arg2 : string) : Locale;
	static getInstance(arg1 : string, arg2 : string, arg3 : string) : Locale;
	static getInstance(arg1 : string, arg2 : string, arg3 : string, arg4 : string, arg5 : LocaleExtensions) : Locale;
	static getInstance(arg1 : BaseLocale, arg2 : LocaleExtensions) : Locale;
	static getDefault() : Locale;
	static getDefault(arg1 : Locale.Category) : Locale;
	static initDefault() : Locale;
	static initDefault(arg1 : Locale.Category) : Locale;
	static setDefault(arg1 : Locale) : void;
	static setDefault(arg1 : Locale.Category, arg2 : Locale) : void;
	static getAvailableLocales() : Locale[];
	static getISOCountries() : string[];
	static getISOLanguages() : string[];
	static getISO2Table(arg1 : string) : string[];
	getLanguage() : string;
	getScript() : string;
	getCountry() : string;
	getVariant() : string;
	hasExtensions() : boolean;
	stripExtensions() : Locale;
	getExtension(arg1 : string) : string;
	getExtensionKeys() : Set<string>;
	getUnicodeLocaleAttributes() : Set<string>;
	getUnicodeLocaleType(arg1 : string) : string;
	getUnicodeLocaleKeys() : Set<string>;
	getBaseLocale() : BaseLocale;
	getLocaleExtensions() : LocaleExtensions;
	toLanguageTag() : string;
	static forLanguageTag(arg1 : string) : Locale;
	getISO3Language() : string;
	getISO3Country() : string;
	static getISO3Code(arg1 : string, arg2 : string) : string;
	getDisplayLanguage() : string;
	getDisplayLanguage(arg1 : Locale) : string;
	getDisplayScript() : string;
	getDisplayScript(arg1 : Locale) : string;
	getDisplayCountry() : string;
	getDisplayCountry(arg1 : Locale) : string;
	getDisplayString(arg1 : string, arg2 : Locale, arg3 : number) : string;
	getDisplayVariant() : string;
	getDisplayVariant(arg1 : Locale) : string;
	getDisplayName() : string;
	getDisplayName(arg1 : Locale) : string;
	getDisplayVariantArray(arg1 : Locale) : string[];
	static formatList(arg1 : string[], arg2 : string, arg3 : string) : string;
	static composeList(arg1 : MessageFormat, arg2 : string[]) : string[];
	static isUnicodeExtensionKey(arg1 : string) : boolean;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	readResolve() : Object;
	static convertOldISOCodes(arg1 : string) : string;
	static getCompatibilityExtensions(arg1 : string, arg2 : string, arg3 : string, arg4 : string) : LocaleExtensions;
	static filter(arg1 : List<Locale.LanguageRange>, arg2 : Collection<Locale>, arg3 : Locale.FilteringMode) : List<Locale>;
	static filter(arg1 : List<Locale.LanguageRange>, arg2 : Collection<Locale>) : List<Locale>;
	static filterTags(arg1 : List<Locale.LanguageRange>, arg2 : Collection<string>, arg3 : Locale.FilteringMode) : List<string>;
	static filterTags(arg1 : List<Locale.LanguageRange>, arg2 : Collection<string>) : List<string>;
	static lookup(arg1 : List<Locale.LanguageRange>, arg2 : Collection<Locale>) : Locale;
	static lookupTag(arg1 : List<Locale.LanguageRange>, arg2 : Collection<string>) : string;
}


declare interface Locale extends Cloneable, Serializable {}

declare module Locale {
	class Builder extends Object {
		constructor();
		setLocale(arg1 : Locale) : Locale.Builder;
		setLanguageTag(arg1 : string) : Locale.Builder;
		setLanguage(arg1 : string) : Locale.Builder;
		setScript(arg1 : string) : Locale.Builder;
		setRegion(arg1 : string) : Locale.Builder;
		setVariant(arg1 : string) : Locale.Builder;
		setExtension(arg1 : string, arg2 : string) : Locale.Builder;
		setUnicodeLocaleKeyword(arg1 : string, arg2 : string) : Locale.Builder;
		addUnicodeLocaleAttribute(arg1 : string) : Locale.Builder;
		removeUnicodeLocaleAttribute(arg1 : string) : Locale.Builder;
		clear() : Locale.Builder;
		clearExtensions() : Locale.Builder;
		build() : Locale;
	}
	class Cache {
	}


	interface Cache extends LocaleObjectCache<Locale.LocaleKey, Locale> {}	class Category {
		static DISPLAY : Locale.Category;
		static FORMAT : Locale.Category;
	}


	interface Category extends Enum<Locale.Category> {}	class FilteringMode {
		static AUTOSELECT_FILTERING : Locale.FilteringMode;
		static EXTENDED_FILTERING : Locale.FilteringMode;
		static IGNORE_EXTENDED_RANGES : Locale.FilteringMode;
		static MAP_EXTENDED_RANGES : Locale.FilteringMode;
		static REJECT_EXTENDED_RANGES : Locale.FilteringMode;
	}


	interface FilteringMode extends Enum<Locale.FilteringMode> {}	class LanguageRange extends Object {
		static MAX_WEIGHT : number;
		static MIN_WEIGHT : number;
		range : string;
		weight : number;
		constructor(arg1 : string);
		constructor(arg1 : string, arg2 : number);
		static isSubtagIllFormed(arg1 : string, arg2 : boolean) : boolean;
		getRange() : string;
		getWeight() : number;
		static parse(arg1 : string) : List<Locale.LanguageRange>;
		static parse(arg1 : string, arg2 : Map<string, List<string>>) : List<Locale.LanguageRange>;
		static mapEquivalents(arg1 : List<Locale.LanguageRange>, arg2 : Map<string, List<string>>) : List<Locale.LanguageRange>;
	}
	class LocaleKey extends Object {
	}
	class LocaleNameGetter {
	}


	interface LocaleNameGetter extends LocaleServiceProviderPool.LocalizedObjectGetter<LocaleNameProvider, string> {}}

export = Locale
