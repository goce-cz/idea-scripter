import Object = require('nashorn/java/lang/Object');
import Comparator = require('nashorn/java/util/Comparator');
import Consumer = require('nashorn/java/util/function/Consumer');
import DoubleConsumer = require('nashorn/java/util/function/DoubleConsumer');
import IntConsumer = require('nashorn/java/util/function/IntConsumer');
import LongConsumer = require('nashorn/java/util/function/LongConsumer');

declare class Spliterator<T> extends Object {
	static ORDERED : number;
	static DISTINCT : number;
	static SORTED : number;
	static SIZED : number;
	static NONNULL : number;
	static IMMUTABLE : number;
	static CONCURRENT : number;
	static SUBSIZED : number;
	exactSizeIfKnown : number;
	comparator : Comparator<any>;
	tryAdvance(arg1 : Consumer<any>) : boolean;
	forEachRemaining(arg1 : Consumer<any>) : void;
	trySplit() : Spliterator<T>;
	estimateSize() : number;
	getExactSizeIfKnown() : number;
	characteristics() : number;
	hasCharacteristics(arg1 : number) : boolean;
	getComparator() : Comparator<any>;
}


declare module Spliterator {
	class OfDouble {
	}


	interface OfDouble extends Spliterator.OfPrimitive<number, DoubleConsumer, Spliterator.OfDouble> {}	class OfInt {
	}


	interface OfInt extends Spliterator.OfPrimitive<number, IntConsumer, Spliterator.OfInt> {}	class OfLong {
	}


	interface OfLong extends Spliterator.OfPrimitive<number, LongConsumer, Spliterator.OfLong> {}	class OfPrimitive<T, T_CONS, T_SPLITR extends Spliterator.OfPrimitive<T, T_CONS, T_SPLITR>> {
		tryAdvance(arg1 : T_CONS) : boolean;
		forEachRemaining(arg1 : T_CONS) : void;
	}


	interface OfPrimitive<T, T_CONS, T_SPLITR extends Spliterator.OfPrimitive<T, T_CONS, T_SPLITR>> extends Spliterator<T> {}}

export = Spliterator
