import Locale = require('nashorn/java/util/Locale');
import Date = require('nashorn/java/util/Date');
import Set = require('nashorn/java/util/Set');
import TimeZone = require('nashorn/java/util/TimeZone');
import Map = require('nashorn/java/util/Map');
import DateFormatSymbols = require('nashorn/java/text/DateFormatSymbols');
import Object = require('nashorn/java/lang/Object');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Instant = require('nashorn/java/time/Instant');
import Serializable = require('nashorn/java/io/Serializable');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Comparable = require('nashorn/java/lang/Comparable');

declare class Calendar {
	static ERA : number;
	static YEAR : number;
	static MONTH : number;
	static WEEK_OF_YEAR : number;
	static WEEK_OF_MONTH : number;
	static DATE : number;
	static DAY_OF_MONTH : number;
	static DAY_OF_YEAR : number;
	static DAY_OF_WEEK : number;
	static DAY_OF_WEEK_IN_MONTH : number;
	static AM_PM : number;
	static HOUR : number;
	static HOUR_OF_DAY : number;
	static MINUTE : number;
	static SECOND : number;
	static MILLISECOND : number;
	static ZONE_OFFSET : number;
	static DST_OFFSET : number;
	static FIELD_COUNT : number;
	static SUNDAY : number;
	static MONDAY : number;
	static TUESDAY : number;
	static WEDNESDAY : number;
	static THURSDAY : number;
	static FRIDAY : number;
	static SATURDAY : number;
	static JANUARY : number;
	static FEBRUARY : number;
	static MARCH : number;
	static APRIL : number;
	static MAY : number;
	static JUNE : number;
	static JULY : number;
	static AUGUST : number;
	static SEPTEMBER : number;
	static OCTOBER : number;
	static NOVEMBER : number;
	static DECEMBER : number;
	static UNDECIMBER : number;
	static AM : number;
	static PM : number;
	static ALL_STYLES : number;
	static SHORT : number;
	static LONG : number;
	static NARROW_FORMAT : number;
	static NARROW_STANDALONE : number;
	static SHORT_FORMAT : number;
	static LONG_FORMAT : number;
	static SHORT_STANDALONE : number;
	static LONG_STANDALONE : number;
	static instance : Calendar;
	static availableLocales : Locale[];
	time : Date;
	timeInMillis : number;
	static availableCalendarTypes : Set<string>;
	calendarType : string;
	timeZone : TimeZone;
	lenient : boolean;
	firstDayOfWeek : number;
	minimalDaysInFirstWeek : number;
	weekDateSupported : boolean;
	weekYear : number;
	weeksInWeekYear : number;
	static getInstance() : Calendar;
	static getInstance(arg1 : TimeZone) : Calendar;
	static getInstance(arg1 : Locale) : Calendar;
	static getInstance(arg1 : TimeZone, arg2 : Locale) : Calendar;
	static createCalendar(arg1 : TimeZone, arg2 : Locale) : Calendar;
	static getAvailableLocales() : Locale[];
	computeTime() : void;
	computeFields() : void;
	getTime() : Date;
	setTime(arg1 : Date) : void;
	getTimeInMillis() : number;
	setTimeInMillis(arg1 : number) : void;
	get(arg1 : number) : number;
	internalGet(arg1 : number) : number;
	internalSet(arg1 : number, arg2 : number) : void;
	set(arg1 : number, arg2 : number) : void;
	set(arg1 : number, arg2 : number, arg3 : number) : void;
	set(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number) : void;
	set(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : void;
	clear() : void;
	clear(arg1 : number) : void;
	isSet(arg1 : number) : boolean;
	getDisplayName(arg1 : number, arg2 : number, arg3 : Locale) : string;
	getDisplayNames(arg1 : number, arg2 : number, arg3 : Locale) : Map<string, number>;
	getDisplayNamesImpl(arg1 : number, arg2 : number, arg3 : Locale) : Map<string, number>;
	checkDisplayNameParams(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : Locale, arg6 : number) : boolean;
	getFieldStrings(arg1 : number, arg2 : number, arg3 : DateFormatSymbols) : string[];
	complete() : void;
	isExternallySet(arg1 : number) : boolean;
	getSetStateFields() : number;
	setFieldsComputed(arg1 : number) : void;
	setFieldsNormalized(arg1 : number) : void;
	isPartiallyNormalized() : boolean;
	isFullyNormalized() : boolean;
	setUnnormalized() : void;
	static isFieldSet(arg1 : number, arg2 : number) : boolean;
	selectFields() : number;
	getBaseStyle(arg1 : number) : number;
	isStandaloneStyle(arg1 : number) : boolean;
	isNarrowStyle(arg1 : number) : boolean;
	static aggregateStamp(arg1 : number, arg2 : number) : number;
	static getAvailableCalendarTypes() : Set<string>;
	getCalendarType() : string;
	before(arg1 : Object) : boolean;
	after(arg1 : Object) : boolean;
	add(arg1 : number, arg2 : number) : void;
	roll(arg1 : number, arg2 : boolean) : void;
	roll(arg1 : number, arg2 : number) : void;
	setTimeZone(arg1 : TimeZone) : void;
	getTimeZone() : TimeZone;
	getZone() : TimeZone;
	setZoneShared(arg1 : boolean) : void;
	setLenient(arg1 : boolean) : void;
	isLenient() : boolean;
	setFirstDayOfWeek(arg1 : number) : void;
	getFirstDayOfWeek() : number;
	setMinimalDaysInFirstWeek(arg1 : number) : void;
	getMinimalDaysInFirstWeek() : number;
	isWeekDateSupported() : boolean;
	getWeekYear() : number;
	setWeekDate(arg1 : number, arg2 : number, arg3 : number) : void;
	getWeeksInWeekYear() : number;
	getMinimum(arg1 : number) : number;
	getMaximum(arg1 : number) : number;
	getGreatestMinimum(arg1 : number) : number;
	getLeastMaximum(arg1 : number) : number;
	getActualMinimum(arg1 : number) : number;
	getActualMaximum(arg1 : number) : number;
	static getFieldName(arg1 : number) : string;
	static appendValue(arg1 : StringBuilder, arg2 : string, arg3 : boolean, arg4 : number) : void;
	setWeekCountData(arg1 : Locale) : void;
	updateTime() : void;
	compareTo(arg1 : number) : number;
	static getMillisOf(arg1 : Calendar) : number;
	adjustStamp() : void;
	invalidateWeekFields() : void;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	toInstant() : Instant;
}


declare interface Calendar extends Serializable, Cloneable, Comparable<Calendar> {}

declare module Calendar {
	class AvailableCalendarTypes extends Object {
	}
	class Builder extends Object {
		constructor();
		setInstant(arg1 : number) : Calendar.Builder;
		setInstant(arg1 : Date) : Calendar.Builder;
		set(arg1 : number, arg2 : number) : Calendar.Builder;
		setFields(arg1 : number[]) : Calendar.Builder;
		setDate(arg1 : number, arg2 : number, arg3 : number) : Calendar.Builder;
		setTimeOfDay(arg1 : number, arg2 : number, arg3 : number) : Calendar.Builder;
		setTimeOfDay(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Calendar.Builder;
		setWeekDate(arg1 : number, arg2 : number, arg3 : number) : Calendar.Builder;
		setTimeZone(arg1 : TimeZone) : Calendar.Builder;
		setLenient(arg1 : boolean) : Calendar.Builder;
		setCalendarType(arg1 : string) : Calendar.Builder;
		setLocale(arg1 : Locale) : Calendar.Builder;
		setWeekDefinition(arg1 : number, arg2 : number) : Calendar.Builder;
		build() : Calendar;
		allocateFields() : void;
		internalSet(arg1 : number, arg2 : number) : void;
		isInstantSet() : boolean;
		isSet(arg1 : number) : boolean;
		isValidWeekParameter(arg1 : number) : boolean;
	}
	class CalendarAccessControlContext extends Object {
	}
}

export = Calendar
