import File = require('nashorn/java/io/File');
import Charset = require('nashorn/java/nio/charset/Charset');
import ZipEntry = require('nashorn/java/util/zip/ZipEntry');
import InputStream = require('nashorn/java/io/InputStream');
import Inflater = require('nashorn/java/util/zip/Inflater');
import Enumeration = require('nashorn/java/util/Enumeration');
import Stream = require('nashorn/java/util/stream/Stream');
import ZipConstants = require('nashorn/java/util/zip/ZipConstants');
import Closeable = require('nashorn/java/io/Closeable');
import Iterator = require('nashorn/java/util/Iterator');
import InflaterInputStream = require('nashorn/java/util/zip/InflaterInputStream');

declare class ZipFile {
	static OPEN_READ : number;
	static OPEN_DELETE : number;
	comment : string;
	name : string;
	constructor(arg1 : string);
	constructor(arg1 : File, arg2 : number);
	constructor(arg1 : File);
	constructor(arg1 : File, arg2 : number, arg3 : Charset);
	constructor(arg1 : string, arg2 : Charset);
	constructor(arg1 : File, arg2 : Charset);
	static initIDs() : void;
	getComment() : string;
	getEntry(arg1 : string) : ZipEntry;
	static getEntry(arg1 : number, arg2 : number[], arg3 : boolean) : number;
	static freeEntry(arg1 : number, arg2 : number) : void;
	getInputStream(arg1 : ZipEntry) : InputStream;
	getInflater() : Inflater;
	releaseInflater(arg1 : Inflater) : void;
	getName() : string;
	entries() : Enumeration<ZipEntry>;
	stream() : Stream<ZipEntry>;
	getZipEntry(arg1 : string, arg2 : number) : ZipEntry;
	static getNextEntry(arg1 : number, arg2 : number) : number;
	size() : number;
	static close(arg1 : number) : void;
	ensureOpen() : void;
	ensureOpenOrZipException() : void;
	startsWithLocHeader() : boolean;
	static open(arg1 : string, arg2 : number, arg3 : number, arg4 : boolean) : number;
	static getTotal(arg1 : number) : number;
	static startsWithLOC(arg1 : number) : boolean;
	static read(arg1 : number, arg2 : number, arg3 : number, arg4 : number[], arg5 : number, arg6 : number) : number;
	static getEntryTime(arg1 : number) : number;
	static getEntryCrc(arg1 : number) : number;
	static getEntryCSize(arg1 : number) : number;
	static getEntrySize(arg1 : number) : number;
	static getEntryMethod(arg1 : number) : number;
	static getEntryFlag(arg1 : number) : number;
	static getCommentBytes(arg1 : number) : number[];
	static getEntryBytes(arg1 : number, arg2 : number) : number[];
	static getZipMessage(arg1 : number) : string;
}


declare interface ZipFile extends ZipConstants, Closeable {}

declare module ZipFile {
	class ZipEntryIterator {
		constructor();
	}


	interface ZipEntryIterator extends Enumeration<ZipEntry>, Iterator<ZipEntry> {}	class ZipFileInflaterInputStream {
	}


	interface ZipFileInflaterInputStream extends InflaterInputStream {}	class ZipFileInputStream {
		size() : number;
	}


	interface ZipFileInputStream extends InputStream {}}

export = ZipFile
