import Pattern = require('nashorn/java/util/regex/Pattern');
import MatchResult = require('nashorn/java/util/regex/MatchResult');
import CharSequence = require('nashorn/java/lang/CharSequence');
import StringBuffer = require('nashorn/java/lang/StringBuffer');

declare class Matcher {
	pattern() : Pattern;
	toMatchResult() : MatchResult;
	usePattern(arg1 : Pattern) : Matcher;
	reset() : Matcher;
	reset(arg1 : CharSequence) : Matcher;
	start(arg1 : string) : number;
	end(arg1 : string) : number;
	group(arg1 : string) : string;
	matches() : boolean;
	find() : boolean;
	find(arg1 : number) : boolean;
	lookingAt() : boolean;
	static quoteReplacement(arg1 : string) : string;
	appendReplacement(arg1 : StringBuffer, arg2 : string) : Matcher;
	appendTail(arg1 : StringBuffer) : StringBuffer;
	replaceAll(arg1 : string) : string;
	replaceFirst(arg1 : string) : string;
	region(arg1 : number, arg2 : number) : Matcher;
	regionStart() : number;
	regionEnd() : number;
	hasTransparentBounds() : boolean;
	useTransparentBounds(arg1 : boolean) : Matcher;
	hasAnchoringBounds() : boolean;
	useAnchoringBounds(arg1 : boolean) : Matcher;
	hitEnd() : boolean;
	requireEnd() : boolean;
	search(arg1 : number) : boolean;
	match(arg1 : number, arg2 : number) : boolean;
	getTextLength() : number;
	getSubSequence(arg1 : number, arg2 : number) : CharSequence;
	charAt(arg1 : number) : string;
	getMatchedGroupIndex(arg1 : string) : number;
}


declare interface Matcher extends MatchResult {}
export = Matcher
