import Enum = require('nashorn/java/lang/Enum');
import Class = require('nashorn/java/lang/Class');
import Map = require('nashorn/java/util/Map');
import Object = require('nashorn/java/lang/Object');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import AbstractMap = require('nashorn/java/util/AbstractMap');
import Serializable = require('nashorn/java/io/Serializable');
import Cloneable = require('nashorn/java/lang/Cloneable');
import AbstractSet = require('nashorn/java/util/AbstractSet');
import Iterator = require('nashorn/java/util/Iterator');
import AbstractCollection = require('nashorn/java/util/AbstractCollection');

declare class EnumMap<K extends Enum<K>, V> {
	constructor(arg1 : Class<K>);
	constructor(arg1 : EnumMap<K, V>);
	constructor(arg1 : Map<K, V>);
	maskNull(arg1 : Object) : Object;
	unmaskNull(arg1 : Object) : V;
	containsMapping(arg1 : Object, arg2 : Object) : boolean;
	removeMapping(arg1 : Object, arg2 : Object) : boolean;
	isValidKey(arg1 : Object) : boolean;
	equals(arg1 : EnumMap<any, any>) : boolean;
	entryHashCode(arg1 : number) : number;
	typeCheck(arg1 : K) : void;
	static getKeyUniverse<K extends Enum<K>>(arg1 : Class<K>) : K[];
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface EnumMap<K extends Enum<K>, V> extends AbstractMap<K, V>, Serializable, Cloneable {}

declare module EnumMap {
	class EntryIterator {
	}


	interface EntryIterator extends EnumMap.EnumMapIterator<Map.Entry<K, V>> {}

	module EntryIterator {
		class Entry {
			key : K;
			value : V;
			checkIndexForEntryUse() : void;
		}


		interface Entry extends Map.Entry<K, V> {}	}
	class EntrySet {
		fillEntryArray(arg1 : Object[]) : Object[];
	}


	interface EntrySet extends AbstractSet<Map.Entry<K, V>> {}	class EnumMapIterator<T> {
		checkLastReturnedIndex() : void;
	}


	interface EnumMapIterator<T> extends Iterator<T> {}	class KeyIterator {
	}


	interface KeyIterator extends EnumMap.EnumMapIterator<K> {}	class KeySet {
	}


	interface KeySet extends AbstractSet<K> {}	class ValueIterator {
	}


	interface ValueIterator extends EnumMap.EnumMapIterator<V> {}	class Values {
	}


	interface Values extends AbstractCollection<V> {}}

export = EnumMap
