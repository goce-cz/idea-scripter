import Collection = require('nashorn/java/util/Collection');
import Object = require('nashorn/java/lang/Object');
import Enumeration = require('nashorn/java/util/Enumeration');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import AbstractList = require('nashorn/java/util/AbstractList');
import List = require('nashorn/java/util/List');
import RandomAccess = require('nashorn/java/util/RandomAccess');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Serializable = require('nashorn/java/io/Serializable');
import Iterator = require('nashorn/java/util/Iterator');
import ListIterator = require('nashorn/java/util/ListIterator');
import Spliterator = require('nashorn/java/util/Spliterator');

declare class Vector<E> {
	empty : boolean;
	constructor(arg1 : number, arg2 : number);
	constructor(arg1 : number);
	constructor();
	constructor(arg1 : Collection<E>);
	copyInto(arg1 : Object[]) : void;
	trimToSize() : void;
	ensureCapacity(arg1 : number) : void;
	ensureCapacityHelper(arg1 : number) : void;
	grow(arg1 : number) : void;
	static hugeCapacity(arg1 : number) : number;
	setSize(arg1 : number) : void;
	capacity() : number;
	elements() : Enumeration<E>;
	indexOf(arg1 : Object, arg2 : number) : number;
	lastIndexOf(arg1 : Object, arg2 : number) : number;
	elementAt(arg1 : number) : E;
	firstElement() : E;
	lastElement() : E;
	setElementAt(arg1 : E, arg2 : number) : void;
	removeElementAt(arg1 : number) : void;
	insertElementAt(arg1 : E, arg2 : number) : void;
	addElement(arg1 : E) : void;
	removeElement(arg1 : Object) : boolean;
	removeAllElements() : void;
	elementData(arg1 : number) : E;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface Vector<E> extends AbstractList<E>, List<E>, RandomAccess, Cloneable, Serializable {}

declare module Vector {
	class Itr {
		checkForComodification() : void;
	}


	interface Itr extends Iterator<E> {}	class ListItr {
	}


	interface ListItr extends Vector.Itr, ListIterator<E> {}	class VectorSpliterator<E> {
		getFence() : number;
	}


	interface VectorSpliterator<E> extends Spliterator<E> {}}

export = Vector
