import Enum = require('nashorn/java/lang/Enum');
import Class = require('nashorn/java/lang/Class');
import Collection = require('nashorn/java/util/Collection');
import Object = require('nashorn/java/lang/Object');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import AbstractSet = require('nashorn/java/util/AbstractSet');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Serializable = require('nashorn/java/io/Serializable');

declare class EnumSet<E extends Enum<E>> {
	static noneOf<E extends Enum<E>>(arg1 : Class<E>) : EnumSet<E>;
	static allOf<E extends Enum<E>>(arg1 : Class<E>) : EnumSet<E>;
	addAll() : void;
	static copyOf<E extends Enum<E>>(arg1 : EnumSet<E>) : EnumSet<E>;
	static copyOf<E extends Enum<E>>(arg1 : Collection<E>) : EnumSet<E>;
	static complementOf<E extends Enum<E>>(arg1 : EnumSet<E>) : EnumSet<E>;
	static of<E extends Enum<E>>(arg1 : E) : EnumSet<E>;
	static of<E extends Enum<E>>(arg1 : E, arg2 : E) : EnumSet<E>;
	static of<E extends Enum<E>>(arg1 : E, arg2 : E, arg3 : E) : EnumSet<E>;
	static of<E extends Enum<E>>(arg1 : E, arg2 : E, arg3 : E, arg4 : E) : EnumSet<E>;
	static of<E extends Enum<E>>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E) : EnumSet<E>;
	static of<E extends Enum<E>>(arg1 : E, arg2 : E[]) : EnumSet<E>;
	static range<E extends Enum<E>>(arg1 : E, arg2 : E) : EnumSet<E>;
	addRange(arg1 : E, arg2 : E) : void;
	complement() : void;
	typeCheck(arg1 : E) : void;
	static getUniverse<E extends Enum<E>>(arg1 : Class<E>) : E[];
	writeReplace() : Object;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface EnumSet<E extends Enum<E>> extends AbstractSet<E>, Cloneable, Serializable {}

declare module EnumSet {
	class SerializationProxy<E extends Enum<E>> {
		readResolve() : Object;
	}


	interface SerializationProxy<E extends Enum<E>> extends Serializable {}}

export = EnumSet
