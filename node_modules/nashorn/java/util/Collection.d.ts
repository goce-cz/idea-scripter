import Object = require('nashorn/java/lang/Object');
import Predicate = require('nashorn/java/util/function/Predicate');
import Stream = require('nashorn/java/util/stream/Stream');
import Iterable = require('nashorn/java/lang/Iterable');

declare class Collection<E> {
	empty : boolean;
	size() : number;
	isEmpty() : boolean;
	contains(arg1 : Object) : boolean;
	toArray() : Object[];
	toArray<T>(arg1 : T[]) : T[];
	add(arg1 : E) : boolean;
	remove(arg1 : Object) : boolean;
	containsAll(arg1 : Collection<any>) : boolean;
	addAll(arg1 : Collection<E>) : boolean;
	removeAll(arg1 : Collection<any>) : boolean;
	removeIf(arg1 : Predicate<any>) : boolean;
	retainAll(arg1 : Collection<any>) : boolean;
	clear() : void;
	stream() : Stream<E>;
	parallelStream() : Stream<E>;
}


declare interface Collection<E> extends Iterable<E> {}
export = Collection
