import Set = require('nashorn/java/util/Set');
import Locale = require('nashorn/java/util/Locale');
import Object = require('nashorn/java/lang/Object');
import DataInputStream = require('nashorn/java/io/DataInputStream');
import Pattern = require('nashorn/java/util/regex/Pattern');
import Throwable = require('nashorn/java/lang/Throwable');
import Serializable = require('nashorn/java/io/Serializable');
import LocaleServiceProviderPool = require('nashorn/sun/util/locale/provider/LocaleServiceProviderPool');
import CurrencyNameProvider = require('nashorn/java/util/spi/CurrencyNameProvider');

declare class Currency {
	static availableCurrencies : Set<Currency>;
	currencyCode : string;
	symbol : string;
	defaultFractionDigits : number;
	numericCode : number;
	displayName : string;
	static getInstance(arg1 : string) : Currency;
	static getInstance(arg1 : string, arg2 : number, arg3 : number) : Currency;
	static getInstance(arg1 : Locale) : Currency;
	static getAvailableCurrencies() : Set<Currency>;
	getCurrencyCode() : string;
	getSymbol() : string;
	getSymbol(arg1 : Locale) : string;
	getDefaultFractionDigits() : number;
	getNumericCode() : number;
	getDisplayName() : string;
	getDisplayName(arg1 : Locale) : string;
	readResolve() : Object;
	static getMainTableEntry(arg1 : string, arg2 : string) : number;
	static setMainTableEntry(arg1 : string, arg2 : string, arg3 : number) : void;
	static readIntArray(arg1 : DataInputStream, arg2 : number) : number[];
	static readLongArray(arg1 : DataInputStream, arg2 : number) : number[];
	static readStringArray(arg1 : DataInputStream, arg2 : number) : string[];
	static replaceCurrencyData(arg1 : Pattern, arg2 : string, arg3 : string) : void;
	static isPastCutoverDate(arg1 : string) : boolean;
	static countOccurrences(arg1 : string, arg2 : string) : number;
	static info(arg1 : string, arg2 : Throwable) : void;
}


declare interface Currency extends Serializable {}

declare module Currency {
	class CurrencyNameGetter {
	}


	interface CurrencyNameGetter extends LocaleServiceProviderPool.LocalizedObjectGetter<CurrencyNameProvider, string> {}}

export = Currency
