import Map = require('nashorn/java/util/Map');
import HashMap = require('nashorn/java/util/HashMap');
import Iterator = require('nashorn/java/util/Iterator');
import AbstractSet = require('nashorn/java/util/AbstractSet');
import Object = require('nashorn/java/lang/Object');
import AbstractCollection = require('nashorn/java/util/AbstractCollection');

declare class LinkedHashMap<K, V> {
	constructor(arg1 : number, arg2 : number);
	constructor(arg1 : number);
	constructor();
	constructor(arg1 : Map<K, V>);
	constructor(arg1 : number, arg2 : number, arg3 : boolean);
	linkNodeLast(arg1 : LinkedHashMap.Entry<K, V>) : void;
	transferLinks(arg1 : LinkedHashMap.Entry<K, V>, arg2 : LinkedHashMap.Entry<K, V>) : void;
	removeEldestEntry(arg1 : Map.Entry<K, V>) : boolean;
}


declare interface LinkedHashMap<K, V> extends HashMap<K, V>, Map<K, V> {}

declare module LinkedHashMap {
	class Entry<K, V> {
	}


	interface Entry<K, V> extends HashMap.Node<K, V> {}	class LinkedEntryIterator {
	}


	interface LinkedEntryIterator extends LinkedHashMap.LinkedHashIterator, Iterator<Map.Entry<K, V>> {}	class LinkedEntrySet {
	}


	interface LinkedEntrySet extends AbstractSet<Map.Entry<K, V>> {}	class LinkedHashIterator extends Object {
		hasNext() : boolean;
		nextNode() : LinkedHashMap.Entry<K, V>;
		remove() : void;
	}
	class LinkedKeyIterator {
	}


	interface LinkedKeyIterator extends LinkedHashMap.LinkedHashIterator, Iterator<K> {}	class LinkedKeySet {
	}


	interface LinkedKeySet extends AbstractSet<K> {}	class LinkedValueIterator {
	}


	interface LinkedValueIterator extends LinkedHashMap.LinkedHashIterator, Iterator<V> {}	class LinkedValues {
	}


	interface LinkedValues extends AbstractCollection<V> {}}

export = LinkedHashMap
