import Map = require('nashorn/java/util/Map');
import Object = require('nashorn/java/lang/Object');
import Enumeration = require('nashorn/java/util/Enumeration');
import Iterator = require('nashorn/java/util/Iterator');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Dictionary = require('nashorn/java/util/Dictionary');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Serializable = require('nashorn/java/io/Serializable');
import AbstractSet = require('nashorn/java/util/AbstractSet');
import AbstractCollection = require('nashorn/java/util/AbstractCollection');

declare class Hashtable<K, V> {
	empty : boolean;
	constructor(arg1 : number, arg2 : number);
	constructor(arg1 : number);
	constructor();
	constructor(arg1 : Map<K, V>);
	contains(arg1 : Object) : boolean;
	rehash() : void;
	addEntry(arg1 : number, arg2 : K, arg3 : V, arg4 : number) : void;
	getEnumeration<T>(arg1 : number) : Enumeration<T>;
	getIterator<T>(arg1 : number) : Iterator<T>;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	reconstitutionPut(arg1 : Hashtable.Entry<any, any>[], arg2 : K, arg3 : V) : void;
}


declare interface Hashtable<K, V> extends Dictionary<K, V>, Map<K, V>, Cloneable, Serializable {}

declare module Hashtable {
	class Entry<K, V> {
		key : K;
		value : V;
	}


	interface Entry<K, V> extends Map.Entry<K, V> {}	class EntrySet {
	}


	interface EntrySet extends AbstractSet<Map.Entry<K, V>> {}	class Enumerator<T> {
	}


	interface Enumerator<T> extends Enumeration<T>, Iterator<T> {}	class KeySet {
	}


	interface KeySet extends AbstractSet<K> {}	class ValueCollection {
	}


	interface ValueCollection extends AbstractCollection<V> {}}

export = Hashtable
