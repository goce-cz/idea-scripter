import Object = require('nashorn/java/lang/Object');
import Consumer = require('nashorn/java/util/function/Consumer');
import Predicate = require('nashorn/java/util/function/Predicate');
import Function = require('nashorn/java/util/function/Function');
import Supplier = require('nashorn/java/util/function/Supplier');
import Throwable = require('nashorn/java/lang/Throwable');

declare class Optional<T> extends Object {
	present : boolean;
	static empty<T>() : Optional<T>;
	static of<T>(arg1 : T) : Optional<T>;
	static ofNullable<T>(arg1 : T) : Optional<T>;
	get() : T;
	isPresent() : boolean;
	ifPresent(arg1 : Consumer<any>) : void;
	filter(arg1 : Predicate<any>) : Optional<T>;
	map<U>(arg1 : Function<any, U>) : Optional<U>;
	flatMap<U>(arg1 : Function<any, Optional<U>>) : Optional<U>;
	orElse(arg1 : T) : T;
	orElseGet(arg1 : Supplier<T>) : T;
	orElseThrow<X extends Throwable>(arg1 : Supplier<X>) : T;
}

export = Optional
