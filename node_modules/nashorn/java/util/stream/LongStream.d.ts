import LongPredicate = require('nashorn/java/util/function/LongPredicate');
import LongUnaryOperator = require('nashorn/java/util/function/LongUnaryOperator');
import LongFunction = require('nashorn/java/util/function/LongFunction');
import Stream = require('nashorn/java/util/stream/Stream');
import LongToIntFunction = require('nashorn/java/util/function/LongToIntFunction');
import IntStream = require('nashorn/java/util/stream/IntStream');
import LongToDoubleFunction = require('nashorn/java/util/function/LongToDoubleFunction');
import DoubleStream = require('nashorn/java/util/stream/DoubleStream');
import LongConsumer = require('nashorn/java/util/function/LongConsumer');
import LongBinaryOperator = require('nashorn/java/util/function/LongBinaryOperator');
import OptionalLong = require('nashorn/java/util/OptionalLong');
import Supplier = require('nashorn/java/util/function/Supplier');
import ObjLongConsumer = require('nashorn/java/util/function/ObjLongConsumer');
import BiConsumer = require('nashorn/java/util/function/BiConsumer');
import OptionalDouble = require('nashorn/java/util/OptionalDouble');
import LongSummaryStatistics = require('nashorn/java/util/LongSummaryStatistics');
import LongSupplier = require('nashorn/java/util/function/LongSupplier');
import BaseStream = require('nashorn/java/util/stream/BaseStream');

declare class LongStream {
	filter(arg1 : LongPredicate) : LongStream;
	map(arg1 : LongUnaryOperator) : LongStream;
	mapToObj<U>(arg1 : LongFunction<U>) : Stream<U>;
	mapToInt(arg1 : LongToIntFunction) : IntStream;
	mapToDouble(arg1 : LongToDoubleFunction) : DoubleStream;
	flatMap(arg1 : LongFunction<LongStream>) : LongStream;
	distinct() : LongStream;
	sorted() : LongStream;
	peek(arg1 : LongConsumer) : LongStream;
	limit(arg1 : number) : LongStream;
	skip(arg1 : number) : LongStream;
	forEach(arg1 : LongConsumer) : void;
	forEachOrdered(arg1 : LongConsumer) : void;
	toArray() : number[];
	reduce(arg1 : number, arg2 : LongBinaryOperator) : number;
	reduce(arg1 : LongBinaryOperator) : OptionalLong;
	collect<R>(arg1 : Supplier<R>, arg2 : ObjLongConsumer<R>, arg3 : BiConsumer<R, R>) : R;
	sum() : number;
	min() : OptionalLong;
	max() : OptionalLong;
	count() : number;
	average() : OptionalDouble;
	summaryStatistics() : LongSummaryStatistics;
	anyMatch(arg1 : LongPredicate) : boolean;
	allMatch(arg1 : LongPredicate) : boolean;
	noneMatch(arg1 : LongPredicate) : boolean;
	findFirst() : OptionalLong;
	findAny() : OptionalLong;
	asDoubleStream() : DoubleStream;
	boxed() : Stream<number>;
	static builder() : LongStream.Builder;
	static empty() : LongStream;
	static of(arg1 : number) : LongStream;
	static of(arg1 : number[]) : LongStream;
	static iterate(arg1 : number, arg2 : LongUnaryOperator) : LongStream;
	static generate(arg1 : LongSupplier) : LongStream;
	static range(arg1 : number, arg2 : number) : LongStream;
	static rangeClosed(arg1 : number, arg2 : number) : LongStream;
	static concat(arg1 : LongStream, arg2 : LongStream) : LongStream;
}


declare interface LongStream extends BaseStream<number, LongStream> {}

declare module LongStream {
	class Builder {
		add(arg1 : number) : LongStream.Builder;
		build() : LongStream;
	}


	interface Builder extends LongConsumer {}}

export = LongStream
