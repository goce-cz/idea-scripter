import IntPredicate = require('nashorn/java/util/function/IntPredicate');
import IntUnaryOperator = require('nashorn/java/util/function/IntUnaryOperator');
import IntFunction = require('nashorn/java/util/function/IntFunction');
import Stream = require('nashorn/java/util/stream/Stream');
import IntToLongFunction = require('nashorn/java/util/function/IntToLongFunction');
import LongStream = require('nashorn/java/util/stream/LongStream');
import IntToDoubleFunction = require('nashorn/java/util/function/IntToDoubleFunction');
import DoubleStream = require('nashorn/java/util/stream/DoubleStream');
import IntConsumer = require('nashorn/java/util/function/IntConsumer');
import IntBinaryOperator = require('nashorn/java/util/function/IntBinaryOperator');
import OptionalInt = require('nashorn/java/util/OptionalInt');
import Supplier = require('nashorn/java/util/function/Supplier');
import ObjIntConsumer = require('nashorn/java/util/function/ObjIntConsumer');
import BiConsumer = require('nashorn/java/util/function/BiConsumer');
import OptionalDouble = require('nashorn/java/util/OptionalDouble');
import IntSummaryStatistics = require('nashorn/java/util/IntSummaryStatistics');
import IntSupplier = require('nashorn/java/util/function/IntSupplier');
import BaseStream = require('nashorn/java/util/stream/BaseStream');

declare class IntStream {
	filter(arg1 : IntPredicate) : IntStream;
	map(arg1 : IntUnaryOperator) : IntStream;
	mapToObj<U>(arg1 : IntFunction<U>) : Stream<U>;
	mapToLong(arg1 : IntToLongFunction) : LongStream;
	mapToDouble(arg1 : IntToDoubleFunction) : DoubleStream;
	flatMap(arg1 : IntFunction<IntStream>) : IntStream;
	distinct() : IntStream;
	sorted() : IntStream;
	peek(arg1 : IntConsumer) : IntStream;
	limit(arg1 : number) : IntStream;
	skip(arg1 : number) : IntStream;
	forEach(arg1 : IntConsumer) : void;
	forEachOrdered(arg1 : IntConsumer) : void;
	toArray() : number[];
	reduce(arg1 : number, arg2 : IntBinaryOperator) : number;
	reduce(arg1 : IntBinaryOperator) : OptionalInt;
	collect<R>(arg1 : Supplier<R>, arg2 : ObjIntConsumer<R>, arg3 : BiConsumer<R, R>) : R;
	sum() : number;
	min() : OptionalInt;
	max() : OptionalInt;
	count() : number;
	average() : OptionalDouble;
	summaryStatistics() : IntSummaryStatistics;
	anyMatch(arg1 : IntPredicate) : boolean;
	allMatch(arg1 : IntPredicate) : boolean;
	noneMatch(arg1 : IntPredicate) : boolean;
	findFirst() : OptionalInt;
	findAny() : OptionalInt;
	asLongStream() : LongStream;
	asDoubleStream() : DoubleStream;
	boxed() : Stream<number>;
	static builder() : IntStream.Builder;
	static empty() : IntStream;
	static of(arg1 : number) : IntStream;
	static of(arg1 : number[]) : IntStream;
	static iterate(arg1 : number, arg2 : IntUnaryOperator) : IntStream;
	static generate(arg1 : IntSupplier) : IntStream;
	static range(arg1 : number, arg2 : number) : IntStream;
	static rangeClosed(arg1 : number, arg2 : number) : IntStream;
	static concat(arg1 : IntStream, arg2 : IntStream) : IntStream;
}


declare interface IntStream extends BaseStream<number, IntStream> {}

declare module IntStream {
	class Builder {
		add(arg1 : number) : IntStream.Builder;
		build() : IntStream;
	}


	interface Builder extends IntConsumer {}}

export = IntStream
