import Object = require('nashorn/java/lang/Object');
import Supplier = require('nashorn/java/util/function/Supplier');
import BiConsumer = require('nashorn/java/util/function/BiConsumer');
import BinaryOperator = require('nashorn/java/util/function/BinaryOperator');
import Function = require('nashorn/java/util/function/Function');
import Set = require('nashorn/java/util/Set');
import Enum = require('nashorn/java/lang/Enum');

declare class Collector<T, A, R> extends Object {
	supplier() : Supplier<A>;
	accumulator() : BiConsumer<A, T>;
	combiner() : BinaryOperator<A>;
	finisher() : Function<A, R>;
	characteristics() : Set<Collector.Characteristics>;
	static of<T, R>(arg1 : Supplier<R>, arg2 : BiConsumer<R, T>, arg3 : BinaryOperator<R>, arg4 : Collector.Characteristics[]) : Collector<T, R, R>;
	static of<T, A, R>(arg1 : Supplier<A>, arg2 : BiConsumer<A, T>, arg3 : BinaryOperator<A>, arg4 : Function<A, R>, arg5 : Collector.Characteristics[]) : Collector<T, A, R>;
}


declare module Collector {
	class Characteristics {
		static CONCURRENT : Collector.Characteristics;
		static UNORDERED : Collector.Characteristics;
		static IDENTITY_FINISH : Collector.Characteristics;
	}


	interface Characteristics extends Enum<Collector.Characteristics> {}}

export = Collector
