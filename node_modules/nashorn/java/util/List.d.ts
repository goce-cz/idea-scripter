import Collection = require('nashorn/java/util/Collection');
import UnaryOperator = require('nashorn/java/util/function/UnaryOperator');
import Comparator = require('nashorn/java/util/Comparator');
import Object = require('nashorn/java/lang/Object');
import ListIterator = require('nashorn/java/util/ListIterator');

declare class List<E> {
	empty : boolean;
	addAll(arg1 : number, arg2 : Collection<E>) : boolean;
	replaceAll(arg1 : UnaryOperator<E>) : void;
	sort(arg1 : Comparator<any>) : void;
	get(arg1 : number) : E;
	set(arg1 : number, arg2 : E) : E;
	add(arg1 : number, arg2 : E) : void;
	remove(arg1 : number) : E;
	indexOf(arg1 : Object) : number;
	lastIndexOf(arg1 : Object) : number;
	listIterator() : ListIterator<E>;
	listIterator(arg1 : number) : ListIterator<E>;
	subList(arg1 : number, arg2 : number) : List<E>;
}


declare interface List<E> extends Collection<E> {}
export = List
