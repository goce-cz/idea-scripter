import Object = require('nashorn/java/lang/Object');
import Comparable = require('nashorn/java/lang/Comparable');
import Comparator = require('nashorn/java/util/Comparator');
import BinaryOperator = require('nashorn/java/util/function/BinaryOperator');
import LongBinaryOperator = require('nashorn/java/util/function/LongBinaryOperator');
import DoubleBinaryOperator = require('nashorn/java/util/function/DoubleBinaryOperator');
import IntBinaryOperator = require('nashorn/java/util/function/IntBinaryOperator');
import Class = require('nashorn/java/lang/Class');
import List = require('nashorn/java/util/List');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import Set = require('nashorn/java/util/Set');
import IntFunction = require('nashorn/java/util/function/IntFunction');
import IntUnaryOperator = require('nashorn/java/util/function/IntUnaryOperator');
import IntToLongFunction = require('nashorn/java/util/function/IntToLongFunction');
import IntToDoubleFunction = require('nashorn/java/util/function/IntToDoubleFunction');
import Spliterator = require('nashorn/java/util/Spliterator');
import Stream = require('nashorn/java/util/stream/Stream');
import IntStream = require('nashorn/java/util/stream/IntStream');
import LongStream = require('nashorn/java/util/stream/LongStream');
import DoubleStream = require('nashorn/java/util/stream/DoubleStream');
import AbstractList = require('nashorn/java/util/AbstractList');
import RandomAccess = require('nashorn/java/util/RandomAccess');
import Serializable = require('nashorn/java/io/Serializable');

declare class Arrays extends Object {
	static rangeCheck(arg1 : number, arg2 : number, arg3 : number) : void;
	static sort(arg1 : number[]) : void;
	static sort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static sort(arg1 : number[]) : void;
	static sort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static sort(arg1 : number[]) : void;
	static sort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static sort(arg1 : string[]) : void;
	static sort(arg1 : string[], arg2 : number, arg3 : number) : void;
	static sort(arg1 : number[]) : void;
	static sort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static sort(arg1 : number[]) : void;
	static sort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static sort(arg1 : number[]) : void;
	static sort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static parallelSort(arg1 : number[]) : void;
	static parallelSort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static parallelSort(arg1 : string[]) : void;
	static parallelSort(arg1 : string[], arg2 : number, arg3 : number) : void;
	static parallelSort(arg1 : number[]) : void;
	static parallelSort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static parallelSort(arg1 : number[]) : void;
	static parallelSort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static parallelSort(arg1 : number[]) : void;
	static parallelSort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static parallelSort(arg1 : number[]) : void;
	static parallelSort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static parallelSort(arg1 : number[]) : void;
	static parallelSort(arg1 : number[], arg2 : number, arg3 : number) : void;
	static parallelSort<T extends Comparable<any>>(arg1 : T[]) : void;
	static parallelSort<T extends Comparable<any>>(arg1 : T[], arg2 : number, arg3 : number) : void;
	static parallelSort<T>(arg1 : T[], arg2 : Comparator<any>) : void;
	static parallelSort<T>(arg1 : T[], arg2 : number, arg3 : number, arg4 : Comparator<any>) : void;
	static sort(arg1 : Object[]) : void;
	static legacyMergeSort(arg1 : Object[]) : void;
	static sort(arg1 : Object[], arg2 : number, arg3 : number) : void;
	static legacyMergeSort(arg1 : Object[], arg2 : number, arg3 : number) : void;
	static mergeSort(arg1 : Object[], arg2 : Object[], arg3 : number, arg4 : number, arg5 : number) : void;
	static swap(arg1 : Object[], arg2 : number, arg3 : number) : void;
	static sort<T>(arg1 : T[], arg2 : Comparator<any>) : void;
	static legacyMergeSort<T>(arg1 : T[], arg2 : Comparator<any>) : void;
	static sort<T>(arg1 : T[], arg2 : number, arg3 : number, arg4 : Comparator<any>) : void;
	static legacyMergeSort<T>(arg1 : T[], arg2 : number, arg3 : number, arg4 : Comparator<any>) : void;
	static mergeSort(arg1 : Object[], arg2 : Object[], arg3 : number, arg4 : number, arg5 : number, arg6 : Comparator) : void;
	static parallelPrefix<T>(arg1 : T[], arg2 : BinaryOperator<T>) : void;
	static parallelPrefix<T>(arg1 : T[], arg2 : number, arg3 : number, arg4 : BinaryOperator<T>) : void;
	static parallelPrefix(arg1 : number[], arg2 : LongBinaryOperator) : void;
	static parallelPrefix(arg1 : number[], arg2 : number, arg3 : number, arg4 : LongBinaryOperator) : void;
	static parallelPrefix(arg1 : number[], arg2 : DoubleBinaryOperator) : void;
	static parallelPrefix(arg1 : number[], arg2 : number, arg3 : number, arg4 : DoubleBinaryOperator) : void;
	static parallelPrefix(arg1 : number[], arg2 : IntBinaryOperator) : void;
	static parallelPrefix(arg1 : number[], arg2 : number, arg3 : number, arg4 : IntBinaryOperator) : void;
	static binarySearch(arg1 : number[], arg2 : number) : number;
	static binarySearch(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch0(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch(arg1 : number[], arg2 : number) : number;
	static binarySearch(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch0(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch(arg1 : number[], arg2 : number) : number;
	static binarySearch(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch0(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch(arg1 : string[], arg2 : string) : number;
	static binarySearch(arg1 : string[], arg2 : number, arg3 : number, arg4 : string) : number;
	static binarySearch0(arg1 : string[], arg2 : number, arg3 : number, arg4 : string) : number;
	static binarySearch(arg1 : number[], arg2 : number) : number;
	static binarySearch(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch0(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch(arg1 : number[], arg2 : number) : number;
	static binarySearch(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch0(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch(arg1 : number[], arg2 : number) : number;
	static binarySearch(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch0(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : number;
	static binarySearch(arg1 : Object[], arg2 : Object) : number;
	static binarySearch(arg1 : Object[], arg2 : number, arg3 : number, arg4 : Object) : number;
	static binarySearch0(arg1 : Object[], arg2 : number, arg3 : number, arg4 : Object) : number;
	static binarySearch<T>(arg1 : T[], arg2 : T, arg3 : Comparator<any>) : number;
	static binarySearch<T>(arg1 : T[], arg2 : number, arg3 : number, arg4 : T, arg5 : Comparator<any>) : number;
	static binarySearch0<T>(arg1 : T[], arg2 : number, arg3 : number, arg4 : T, arg5 : Comparator<any>) : number;
	static equals(arg1 : number[], arg2 : number[]) : boolean;
	static equals(arg1 : number[], arg2 : number[]) : boolean;
	static equals(arg1 : number[], arg2 : number[]) : boolean;
	static equals(arg1 : string[], arg2 : string[]) : boolean;
	static equals(arg1 : number[], arg2 : number[]) : boolean;
	static equals(arg1 : boolean[], arg2 : boolean[]) : boolean;
	static equals(arg1 : number[], arg2 : number[]) : boolean;
	static equals(arg1 : number[], arg2 : number[]) : boolean;
	static equals(arg1 : Object[], arg2 : Object[]) : boolean;
	static fill(arg1 : number[], arg2 : number) : void;
	static fill(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : void;
	static fill(arg1 : number[], arg2 : number) : void;
	static fill(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : void;
	static fill(arg1 : number[], arg2 : number) : void;
	static fill(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : void;
	static fill(arg1 : string[], arg2 : string) : void;
	static fill(arg1 : string[], arg2 : number, arg3 : number, arg4 : string) : void;
	static fill(arg1 : number[], arg2 : number) : void;
	static fill(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : void;
	static fill(arg1 : boolean[], arg2 : boolean) : void;
	static fill(arg1 : boolean[], arg2 : number, arg3 : number, arg4 : boolean) : void;
	static fill(arg1 : number[], arg2 : number) : void;
	static fill(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : void;
	static fill(arg1 : number[], arg2 : number) : void;
	static fill(arg1 : number[], arg2 : number, arg3 : number, arg4 : number) : void;
	static fill(arg1 : Object[], arg2 : Object) : void;
	static fill(arg1 : Object[], arg2 : number, arg3 : number, arg4 : Object) : void;
	static copyOf<T>(arg1 : T[], arg2 : number) : T[];
	static copyOf<T, U>(arg1 : U[], arg2 : number, arg3 : Class<T[]>) : T[];
	static copyOf(arg1 : number[], arg2 : number) : number[];
	static copyOf(arg1 : number[], arg2 : number) : number[];
	static copyOf(arg1 : number[], arg2 : number) : number[];
	static copyOf(arg1 : number[], arg2 : number) : number[];
	static copyOf(arg1 : string[], arg2 : number) : string[];
	static copyOf(arg1 : number[], arg2 : number) : number[];
	static copyOf(arg1 : number[], arg2 : number) : number[];
	static copyOf(arg1 : boolean[], arg2 : number) : boolean[];
	static copyOfRange<T>(arg1 : T[], arg2 : number, arg3 : number) : T[];
	static copyOfRange<T, U>(arg1 : U[], arg2 : number, arg3 : number, arg4 : Class<T[]>) : T[];
	static copyOfRange(arg1 : number[], arg2 : number, arg3 : number) : number[];
	static copyOfRange(arg1 : number[], arg2 : number, arg3 : number) : number[];
	static copyOfRange(arg1 : number[], arg2 : number, arg3 : number) : number[];
	static copyOfRange(arg1 : number[], arg2 : number, arg3 : number) : number[];
	static copyOfRange(arg1 : string[], arg2 : number, arg3 : number) : string[];
	static copyOfRange(arg1 : number[], arg2 : number, arg3 : number) : number[];
	static copyOfRange(arg1 : number[], arg2 : number, arg3 : number) : number[];
	static copyOfRange(arg1 : boolean[], arg2 : number, arg3 : number) : boolean[];
	static asList<T>(arg1 : T[]) : List<T>;
	static hashCode(arg1 : number[]) : number;
	static hashCode(arg1 : number[]) : number;
	static hashCode(arg1 : number[]) : number;
	static hashCode(arg1 : string[]) : number;
	static hashCode(arg1 : number[]) : number;
	static hashCode(arg1 : boolean[]) : number;
	static hashCode(arg1 : number[]) : number;
	static hashCode(arg1 : number[]) : number;
	static hashCode(arg1 : Object[]) : number;
	static deepHashCode(arg1 : Object[]) : number;
	static deepEquals(arg1 : Object[], arg2 : Object[]) : boolean;
	static deepEquals0(arg1 : Object, arg2 : Object) : boolean;
	static toString(arg1 : number[]) : string;
	static toString(arg1 : number[]) : string;
	static toString(arg1 : number[]) : string;
	static toString(arg1 : string[]) : string;
	static toString(arg1 : number[]) : string;
	static toString(arg1 : boolean[]) : string;
	static toString(arg1 : number[]) : string;
	static toString(arg1 : number[]) : string;
	static toString(arg1 : Object[]) : string;
	static deepToString(arg1 : Object[]) : string;
	static deepToString(arg1 : Object[], arg2 : StringBuilder, arg3 : Set<Object[]>) : void;
	static setAll<T>(arg1 : T[], arg2 : IntFunction<T>) : void;
	static parallelSetAll<T>(arg1 : T[], arg2 : IntFunction<T>) : void;
	static setAll(arg1 : number[], arg2 : IntUnaryOperator) : void;
	static parallelSetAll(arg1 : number[], arg2 : IntUnaryOperator) : void;
	static setAll(arg1 : number[], arg2 : IntToLongFunction) : void;
	static parallelSetAll(arg1 : number[], arg2 : IntToLongFunction) : void;
	static setAll(arg1 : number[], arg2 : IntToDoubleFunction) : void;
	static parallelSetAll(arg1 : number[], arg2 : IntToDoubleFunction) : void;
	static spliterator<T>(arg1 : T[]) : Spliterator<T>;
	static spliterator<T>(arg1 : T[], arg2 : number, arg3 : number) : Spliterator<T>;
	static spliterator(arg1 : number[]) : Spliterator.OfInt;
	static spliterator(arg1 : number[], arg2 : number, arg3 : number) : Spliterator.OfInt;
	static spliterator(arg1 : number[]) : Spliterator.OfLong;
	static spliterator(arg1 : number[], arg2 : number, arg3 : number) : Spliterator.OfLong;
	static spliterator(arg1 : number[]) : Spliterator.OfDouble;
	static spliterator(arg1 : number[], arg2 : number, arg3 : number) : Spliterator.OfDouble;
	static stream<T>(arg1 : T[]) : Stream<T>;
	static stream<T>(arg1 : T[], arg2 : number, arg3 : number) : Stream<T>;
	static stream(arg1 : number[]) : IntStream;
	static stream(arg1 : number[], arg2 : number, arg3 : number) : IntStream;
	static stream(arg1 : number[]) : LongStream;
	static stream(arg1 : number[], arg2 : number, arg3 : number) : LongStream;
	static stream(arg1 : number[]) : DoubleStream;
	static stream(arg1 : number[], arg2 : number, arg3 : number) : DoubleStream;
}


declare module Arrays {
	class ArrayList<E> {
	}


	interface ArrayList<E> extends AbstractList<E>, RandomAccess, Serializable {}	class LegacyMergeSort extends Object {
	}
	class NaturalOrder {
	}


	interface NaturalOrder extends Comparator<Object> {}}

export = Arrays
