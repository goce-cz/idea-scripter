import Object = require('nashorn/java/lang/Object');
import Function = require('nashorn/java/util/function/Function');
import Comparable = require('nashorn/java/lang/Comparable');
import ToIntFunction = require('nashorn/java/util/function/ToIntFunction');
import ToLongFunction = require('nashorn/java/util/function/ToLongFunction');
import ToDoubleFunction = require('nashorn/java/util/function/ToDoubleFunction');

declare class Comparator_interface<T> extends Object {
	compare(arg1 : T, arg2 : T) : number;
	reversed() : Comparator<T>;
	thenComparing(arg1 : Comparator<any>) : Comparator<T>;
	thenComparing<U>(arg1 : Function<any, U>, arg2 : Comparator<any>) : Comparator<T>;
	thenComparing<U extends Comparable<any>>(arg1 : Function<any, U>) : Comparator<T>;
	thenComparingInt(arg1 : ToIntFunction<any>) : Comparator<T>;
	thenComparingLong(arg1 : ToLongFunction<any>) : Comparator<T>;
	thenComparingDouble(arg1 : ToDoubleFunction<any>) : Comparator<T>;
	static reverseOrder<T extends Comparable<any>>() : Comparator<T>;
	static naturalOrder<T extends Comparable<any>>() : Comparator<T>;
	static nullsFirst<T>(arg1 : Comparator<any>) : Comparator<T>;
	static nullsLast<T>(arg1 : Comparator<any>) : Comparator<T>;
	static comparing<T, U>(arg1 : Function<any, U>, arg2 : Comparator<any>) : Comparator<T>;
	static comparing<T, U extends Comparable<any>>(arg1 : Function<any, U>) : Comparator<T>;
	static comparingInt<T>(arg1 : ToIntFunction<any>) : Comparator<T>;
	static comparingLong<T>(arg1 : ToLongFunction<any>) : Comparator<T>;
	static comparingDouble<T>(arg1 : ToDoubleFunction<any>) : Comparator<T>;
}


declare type Comparator<T> = Comparator_interface<T> | ((arg1 : T, arg2 : T)=>number);
export = Comparator
