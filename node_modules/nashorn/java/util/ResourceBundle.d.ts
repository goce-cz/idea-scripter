import Object = require('nashorn/java/lang/Object');
import Locale = require('nashorn/java/util/Locale');
import Enumeration = require('nashorn/java/util/Enumeration');
import Class = require('nashorn/java/lang/Class');
import ClassLoader = require('nashorn/java/lang/ClassLoader');
import List = require('nashorn/java/util/List');
import Throwable = require('nashorn/java/lang/Throwable');
import Set = require('nashorn/java/util/Set');
import SoftReference = require('nashorn/java/lang/ref/SoftReference');
import Cloneable = require('nashorn/java/lang/Cloneable');
import LocaleObjectCache = require('nashorn/sun/util/locale/LocaleObjectCache');
import BaseLocale = require('nashorn/sun/util/locale/BaseLocale');
import WeakReference = require('nashorn/java/lang/ref/WeakReference');

declare class ResourceBundle extends Object {
	baseBundleName : string;
	locale : Locale;
	keys : Enumeration<string>;
	constructor();
	getBaseBundleName() : string;
	getString(arg1 : string) : string;
	getStringArray(arg1 : string) : string[];
	getObject(arg1 : string) : Object;
	getLocale() : Locale;
	static getLoader(arg1 : Class<any>) : ClassLoader;
	setParent(arg1 : ResourceBundle) : void;
	static getBundle(arg1 : string) : ResourceBundle;
	static getBundle(arg1 : string, arg2 : ResourceBundle.Control) : ResourceBundle;
	static getBundle(arg1 : string, arg2 : Locale) : ResourceBundle;
	static getBundle(arg1 : string, arg2 : Locale, arg3 : ResourceBundle.Control) : ResourceBundle;
	static getBundle(arg1 : string, arg2 : Locale, arg3 : ClassLoader) : ResourceBundle;
	static getBundle(arg1 : string, arg2 : Locale, arg3 : ClassLoader, arg4 : ResourceBundle.Control) : ResourceBundle;
	static getDefaultControl(arg1 : string) : ResourceBundle.Control;
	static getBundleImpl(arg1 : string, arg2 : Locale, arg3 : ClassLoader, arg4 : ResourceBundle.Control) : ResourceBundle;
	static checkList(arg1 : List<any>) : boolean;
	static findBundle(arg1 : ResourceBundle.CacheKey, arg2 : List<Locale>, arg3 : List<string>, arg4 : number, arg5 : ResourceBundle.Control, arg6 : ResourceBundle) : ResourceBundle;
	static loadBundle(arg1 : ResourceBundle.CacheKey, arg2 : List<string>, arg3 : ResourceBundle.Control, arg4 : boolean) : ResourceBundle;
	static isValidBundle(arg1 : ResourceBundle) : boolean;
	static hasValidParentChain(arg1 : ResourceBundle) : boolean;
	static throwMissingResourceException(arg1 : string, arg2 : Locale, arg3 : Throwable) : void;
	static findBundleInCache(arg1 : ResourceBundle.CacheKey, arg2 : ResourceBundle.Control) : ResourceBundle;
	static putBundleInCache(arg1 : ResourceBundle.CacheKey, arg2 : ResourceBundle, arg3 : ResourceBundle.Control) : ResourceBundle;
	static setExpirationTime(arg1 : ResourceBundle.CacheKey, arg2 : ResourceBundle.Control) : void;
	static clearCache() : void;
	static clearCache(arg1 : ClassLoader) : void;
	handleGetObject(arg1 : string) : Object;
	getKeys() : Enumeration<string>;
	containsKey(arg1 : string) : boolean;
	keySet() : Set<string>;
	handleKeySet() : Set<string>;
}


declare module ResourceBundle {
	class BundleReference {
		cacheKey : ResourceBundle.CacheKey;
	}


	interface BundleReference extends SoftReference<ResourceBundle>, ResourceBundle.CacheKeyReference {}	class CacheKey {
		getName() : string;
		setName(arg1 : string) : ResourceBundle.CacheKey;
		getLocale() : Locale;
		setLocale(arg1 : Locale) : ResourceBundle.CacheKey;
		getLoader() : ClassLoader;
		calculateHashCode() : void;
		getFormat() : string;
		setFormat(arg1 : string) : void;
		setCause(arg1 : Throwable) : void;
		getCause() : Throwable;
	}


	interface CacheKey extends Cloneable {}	class CacheKeyReference extends Object {
		cacheKey : ResourceBundle.CacheKey;
		getCacheKey() : ResourceBundle.CacheKey;
	}
	class Control extends Object {
		static FORMAT_DEFAULT : List<string>;
		static FORMAT_CLASS : List<string>;
		static FORMAT_PROPERTIES : List<string>;
		static TTL_DONT_CACHE : number;
		static TTL_NO_EXPIRATION_CONTROL : number;
		static getControl(arg1 : List<string>) : ResourceBundle.Control;
		static getNoFallbackControl(arg1 : List<string>) : ResourceBundle.Control;
		getFormats(arg1 : string) : List<string>;
		getCandidateLocales(arg1 : string, arg2 : Locale) : List<Locale>;
		getFallbackLocale(arg1 : string, arg2 : Locale) : Locale;
		newBundle(arg1 : string, arg2 : Locale, arg3 : string, arg4 : ClassLoader, arg5 : boolean) : ResourceBundle;
		getTimeToLive(arg1 : string, arg2 : Locale) : number;
		needsReload(arg1 : string, arg2 : Locale, arg3 : string, arg4 : ClassLoader, arg5 : ResourceBundle, arg6 : number) : boolean;
		toBundleName(arg1 : string, arg2 : Locale) : string;
		toResourceName(arg1 : string, arg2 : string) : string;
		toResourceName0(arg1 : string, arg2 : string) : string;
	}


	module Control {
		class CandidateListCache {
			static getDefaultList(arg1 : string, arg2 : string, arg3 : string, arg4 : string) : List<Locale>;
		}


		interface CandidateListCache extends LocaleObjectCache<BaseLocale, List<Locale>> {}	}
	class LoaderReference {
		cacheKey : ResourceBundle.CacheKey;
	}


	interface LoaderReference extends WeakReference<ClassLoader>, ResourceBundle.CacheKeyReference {}	class NoFallbackControl {
	}


	interface NoFallbackControl extends ResourceBundle.SingleFormatControl {}	class RBClassLoader {
	}


	interface RBClassLoader extends ClassLoader {}	class SingleFormatControl {
	}


	interface SingleFormatControl extends ResourceBundle.Control {}}

export = ResourceBundle
