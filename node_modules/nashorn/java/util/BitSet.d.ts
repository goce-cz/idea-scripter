import LongBuffer = require('nashorn/java/nio/LongBuffer');
import ByteBuffer = require('nashorn/java/nio/ByteBuffer');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import IntStream = require('nashorn/java/util/stream/IntStream');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Serializable = require('nashorn/java/io/Serializable');

declare class BitSet {
	empty : boolean;
	constructor();
	constructor(arg1 : number);
	static wordIndex(arg1 : number) : number;
	checkInvariants() : void;
	recalculateWordsInUse() : void;
	initWords(arg1 : number) : void;
	static valueOf(arg1 : number[]) : BitSet;
	static valueOf(arg1 : LongBuffer) : BitSet;
	static valueOf(arg1 : number[]) : BitSet;
	static valueOf(arg1 : ByteBuffer) : BitSet;
	toByteArray() : number[];
	toLongArray() : number[];
	ensureCapacity(arg1 : number) : void;
	expandTo(arg1 : number) : void;
	static checkRange(arg1 : number, arg2 : number) : void;
	flip(arg1 : number) : void;
	flip(arg1 : number, arg2 : number) : void;
	set(arg1 : number) : void;
	set(arg1 : number, arg2 : boolean) : void;
	set(arg1 : number, arg2 : number) : void;
	set(arg1 : number, arg2 : number, arg3 : boolean) : void;
	clear(arg1 : number) : void;
	clear(arg1 : number, arg2 : number) : void;
	clear() : void;
	get(arg1 : number) : boolean;
	get(arg1 : number, arg2 : number) : BitSet;
	nextSetBit(arg1 : number) : number;
	nextClearBit(arg1 : number) : number;
	previousSetBit(arg1 : number) : number;
	previousClearBit(arg1 : number) : number;
	length() : number;
	isEmpty() : boolean;
	intersects(arg1 : BitSet) : boolean;
	cardinality() : number;
	and(arg1 : BitSet) : void;
	or(arg1 : BitSet) : void;
	xor(arg1 : BitSet) : void;
	andNot(arg1 : BitSet) : void;
	size() : number;
	trimToSize() : void;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	stream() : IntStream;
}


declare interface BitSet extends Cloneable, Serializable {}
export = BitSet
