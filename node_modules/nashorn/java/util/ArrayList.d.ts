import Collection = require('nashorn/java/util/Collection');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import AbstractList = require('nashorn/java/util/AbstractList');
import List = require('nashorn/java/util/List');
import RandomAccess = require('nashorn/java/util/RandomAccess');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Serializable = require('nashorn/java/io/Serializable');
import Spliterator = require('nashorn/java/util/Spliterator');
import Iterator = require('nashorn/java/util/Iterator');
import ListIterator = require('nashorn/java/util/ListIterator');

declare class ArrayList<E> {
	empty : boolean;
	constructor(arg1 : number);
	constructor();
	constructor(arg1 : Collection<E>);
	trimToSize() : void;
	ensureCapacity(arg1 : number) : void;
	ensureCapacityInternal(arg1 : number) : void;
	ensureExplicitCapacity(arg1 : number) : void;
	grow(arg1 : number) : void;
	static hugeCapacity(arg1 : number) : number;
	elementData(arg1 : number) : E;
	fastRemove(arg1 : number) : void;
	rangeCheck(arg1 : number) : void;
	rangeCheckForAdd(arg1 : number) : void;
	outOfBoundsMsg(arg1 : number) : string;
	batchRemove(arg1 : Collection<any>, arg2 : boolean) : boolean;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	static subListRangeCheck(arg1 : number, arg2 : number, arg3 : number) : void;
}


declare interface ArrayList<E> extends AbstractList<E>, List<E>, RandomAccess, Cloneable, Serializable {}

declare module ArrayList {
	class ArrayListSpliterator<E> {
		getFence() : number;
	}


	interface ArrayListSpliterator<E> extends Spliterator<E> {}	class Itr {
		checkForComodification() : void;
	}


	interface Itr extends Iterator<E> {}	class ListItr {
	}


	interface ListItr extends ArrayList.Itr, ListIterator<E> {}	class SubList {
		rangeCheck(arg1 : number) : void;
		rangeCheckForAdd(arg1 : number) : void;
		outOfBoundsMsg(arg1 : number) : string;
		checkForComodification() : void;
	}


	interface SubList extends AbstractList<E>, RandomAccess {}}

export = ArrayList
