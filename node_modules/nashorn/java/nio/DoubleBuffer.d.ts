import ByteOrder = require('nashorn/java/nio/ByteOrder');
import Buffer = require('nashorn/java/nio/Buffer');
import Comparable = require('nashorn/java/lang/Comparable');

declare class DoubleBuffer {
	direct : boolean;
	static allocate(arg1 : number) : DoubleBuffer;
	static wrap(arg1 : number[], arg2 : number, arg3 : number) : DoubleBuffer;
	static wrap(arg1 : number[]) : DoubleBuffer;
	slice() : DoubleBuffer;
	duplicate() : DoubleBuffer;
	asReadOnlyBuffer() : DoubleBuffer;
	get() : number;
	put(arg1 : number) : DoubleBuffer;
	get(arg1 : number) : number;
	put(arg1 : number, arg2 : number) : DoubleBuffer;
	get(arg1 : number[], arg2 : number, arg3 : number) : DoubleBuffer;
	get(arg1 : number[]) : DoubleBuffer;
	put(arg1 : DoubleBuffer) : DoubleBuffer;
	put(arg1 : number[], arg2 : number, arg3 : number) : DoubleBuffer;
	put(arg1 : number[]) : DoubleBuffer;
	compact() : DoubleBuffer;
	static equals(arg1 : number, arg2 : number) : boolean;
	static compare(arg1 : number, arg2 : number) : number;
	order() : ByteOrder;
}


declare interface DoubleBuffer extends Buffer, Comparable<DoubleBuffer> {}
export = DoubleBuffer
