import Path = require('nashorn/java/nio/file/Path');
import Set = require('nashorn/java/util/Set');
import OpenOption = require('nashorn/java/nio/file/OpenOption');
import ExecutorService = require('nashorn/java/util/concurrent/ExecutorService');
import FileAttribute = require('nashorn/java/nio/file/attribute/FileAttribute');
import CompletionHandler = require('nashorn/java/nio/channels/CompletionHandler');
import FileLock = require('nashorn/java/nio/channels/FileLock');
import Future = require('nashorn/java/util/concurrent/Future');
import ByteBuffer = require('nashorn/java/nio/ByteBuffer');
import AsynchronousChannel = require('nashorn/java/nio/channels/AsynchronousChannel');

declare class AsynchronousFileChannel {
	static open(arg1 : Path, arg2 : Set<OpenOption>, arg3 : ExecutorService, arg4 : FileAttribute<any>[]) : AsynchronousFileChannel;
	static open(arg1 : Path, arg2 : OpenOption[]) : AsynchronousFileChannel;
	size() : number;
	truncate(arg1 : number) : AsynchronousFileChannel;
	force(arg1 : boolean) : void;
	lock<A>(arg1 : number, arg2 : number, arg3 : boolean, arg4 : A, arg5 : CompletionHandler<FileLock, any>) : void;
	lock<A>(arg1 : A, arg2 : CompletionHandler<FileLock, any>) : void;
	lock(arg1 : number, arg2 : number, arg3 : boolean) : Future<FileLock>;
	lock() : Future<FileLock>;
	tryLock(arg1 : number, arg2 : number, arg3 : boolean) : FileLock;
	tryLock() : FileLock;
	read<A>(arg1 : ByteBuffer, arg2 : number, arg3 : A, arg4 : CompletionHandler<number, any>) : void;
	read(arg1 : ByteBuffer, arg2 : number) : Future<number>;
	write<A>(arg1 : ByteBuffer, arg2 : number, arg3 : A, arg4 : CompletionHandler<number, any>) : void;
	write(arg1 : ByteBuffer, arg2 : number) : Future<number>;
}


declare interface AsynchronousFileChannel extends AsynchronousChannel {}
export = AsynchronousFileChannel
