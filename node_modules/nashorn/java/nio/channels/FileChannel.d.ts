import Path = require('nashorn/java/nio/file/Path');
import Set = require('nashorn/java/util/Set');
import OpenOption = require('nashorn/java/nio/file/OpenOption');
import FileAttribute = require('nashorn/java/nio/file/attribute/FileAttribute');
import WritableByteChannel = require('nashorn/java/nio/channels/WritableByteChannel');
import ReadableByteChannel = require('nashorn/java/nio/channels/ReadableByteChannel');
import ByteBuffer = require('nashorn/java/nio/ByteBuffer');
import MappedByteBuffer = require('nashorn/java/nio/MappedByteBuffer');
import FileLock = require('nashorn/java/nio/channels/FileLock');
import AbstractInterruptibleChannel = require('nashorn/java/nio/channels/spi/AbstractInterruptibleChannel');
import SeekableByteChannel = require('nashorn/java/nio/channels/SeekableByteChannel');
import GatheringByteChannel = require('nashorn/java/nio/channels/GatheringByteChannel');
import ScatteringByteChannel = require('nashorn/java/nio/channels/ScatteringByteChannel');
import Object = require('nashorn/java/lang/Object');

declare class FileChannel {
	static open(arg1 : Path, arg2 : Set<OpenOption>, arg3 : FileAttribute<any>[]) : FileChannel;
	static open(arg1 : Path, arg2 : OpenOption[]) : FileChannel;
	force(arg1 : boolean) : void;
	transferTo(arg1 : number, arg2 : number, arg3 : WritableByteChannel) : number;
	transferFrom(arg1 : ReadableByteChannel, arg2 : number, arg3 : number) : number;
	read(arg1 : ByteBuffer, arg2 : number) : number;
	write(arg1 : ByteBuffer, arg2 : number) : number;
	map(arg1 : FileChannel.MapMode, arg2 : number, arg3 : number) : MappedByteBuffer;
	lock(arg1 : number, arg2 : number, arg3 : boolean) : FileLock;
	lock() : FileLock;
	tryLock(arg1 : number, arg2 : number, arg3 : boolean) : FileLock;
	tryLock() : FileLock;
}


declare interface FileChannel extends AbstractInterruptibleChannel, SeekableByteChannel, GatheringByteChannel, ScatteringByteChannel {}

declare module FileChannel {
	class MapMode extends Object {
		static READ_ONLY : FileChannel.MapMode;
		static READ_WRITE : FileChannel.MapMode;
		static PRIVATE : FileChannel.MapMode;
	}
}

export = FileChannel
