import Object = require('nashorn/java/lang/Object');
import Void = require('nashorn/java/lang/Void');
import List = require('nashorn/java/util/List');
import URI = require('nashorn/java/net/URI');
import Map = require('nashorn/java/util/Map');
import FileSystem = require('nashorn/java/nio/file/FileSystem');
import Path = require('nashorn/java/nio/file/Path');
import OpenOption = require('nashorn/java/nio/file/OpenOption');
import InputStream = require('nashorn/java/io/InputStream');
import OutputStream = require('nashorn/java/io/OutputStream');
import Set = require('nashorn/java/util/Set');
import FileAttribute = require('nashorn/java/nio/file/attribute/FileAttribute');
import FileChannel = require('nashorn/java/nio/channels/FileChannel');
import ExecutorService = require('nashorn/java/util/concurrent/ExecutorService');
import AsynchronousFileChannel = require('nashorn/java/nio/channels/AsynchronousFileChannel');
import SeekableByteChannel = require('nashorn/java/nio/channels/SeekableByteChannel');
import DirectoryStream = require('nashorn/java/nio/file/DirectoryStream');
import CopyOption = require('nashorn/java/nio/file/CopyOption');
import FileStore = require('nashorn/java/nio/file/FileStore');
import AccessMode = require('nashorn/java/nio/file/AccessMode');
import FileAttributeView = require('nashorn/java/nio/file/attribute/FileAttributeView');
import Class = require('nashorn/java/lang/Class');
import LinkOption = require('nashorn/java/nio/file/LinkOption');
import BasicFileAttributes = require('nashorn/java/nio/file/attribute/BasicFileAttributes');

declare class FileSystemProvider extends Object {
	scheme : string;
	static checkPermission() : Void;
	static loadInstalledProviders() : List<FileSystemProvider>;
	static installedProviders() : List<FileSystemProvider>;
	getScheme() : string;
	newFileSystem(arg1 : URI, arg2 : Map<string, any>) : FileSystem;
	getFileSystem(arg1 : URI) : FileSystem;
	getPath(arg1 : URI) : Path;
	newFileSystem(arg1 : Path, arg2 : Map<string, any>) : FileSystem;
	newInputStream(arg1 : Path, arg2 : OpenOption[]) : InputStream;
	newOutputStream(arg1 : Path, arg2 : OpenOption[]) : OutputStream;
	newFileChannel(arg1 : Path, arg2 : Set<OpenOption>, arg3 : FileAttribute<any>[]) : FileChannel;
	newAsynchronousFileChannel(arg1 : Path, arg2 : Set<OpenOption>, arg3 : ExecutorService, arg4 : FileAttribute<any>[]) : AsynchronousFileChannel;
	newByteChannel(arg1 : Path, arg2 : Set<OpenOption>, arg3 : FileAttribute<any>[]) : SeekableByteChannel;
	newDirectoryStream(arg1 : Path, arg2 : DirectoryStream.Filter<any>) : DirectoryStream<Path>;
	createDirectory(arg1 : Path, arg2 : FileAttribute<any>[]) : void;
	createSymbolicLink(arg1 : Path, arg2 : Path, arg3 : FileAttribute<any>[]) : void;
	createLink(arg1 : Path, arg2 : Path) : void;
	delete(arg1 : Path) : void;
	deleteIfExists(arg1 : Path) : boolean;
	readSymbolicLink(arg1 : Path) : Path;
	copy(arg1 : Path, arg2 : Path, arg3 : CopyOption[]) : void;
	move(arg1 : Path, arg2 : Path, arg3 : CopyOption[]) : void;
	isSameFile(arg1 : Path, arg2 : Path) : boolean;
	isHidden(arg1 : Path) : boolean;
	getFileStore(arg1 : Path) : FileStore;
	checkAccess(arg1 : Path, arg2 : AccessMode[]) : void;
	getFileAttributeView<V extends FileAttributeView>(arg1 : Path, arg2 : Class<V>, arg3 : LinkOption[]) : V;
	readAttributes<A extends BasicFileAttributes>(arg1 : Path, arg2 : Class<A>, arg3 : LinkOption[]) : A;
	readAttributes(arg1 : Path, arg2 : string, arg3 : LinkOption[]) : Map<string, Object>;
	setAttribute(arg1 : Path, arg2 : string, arg3 : Object, arg4 : LinkOption[]) : void;
}

export = FileSystemProvider
