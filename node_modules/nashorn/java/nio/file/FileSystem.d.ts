import Iterable = require('nashorn/java/lang/Iterable');
import Path = require('nashorn/java/nio/file/Path');
import FileStore = require('nashorn/java/nio/file/FileStore');
import UserPrincipalLookupService = require('nashorn/java/nio/file/attribute/UserPrincipalLookupService');
import FileSystemProvider = require('nashorn/java/nio/file/spi/FileSystemProvider');
import Set = require('nashorn/java/util/Set');
import PathMatcher = require('nashorn/java/nio/file/PathMatcher');
import WatchService = require('nashorn/java/nio/file/WatchService');
import Closeable = require('nashorn/java/io/Closeable');

declare class FileSystem {
	open : boolean;
	readOnly : boolean;
	separator : string;
	rootDirectories : Iterable<Path>;
	fileStores : Iterable<FileStore>;
	userPrincipalLookupService : UserPrincipalLookupService;
	provider() : FileSystemProvider;
	isOpen() : boolean;
	isReadOnly() : boolean;
	getSeparator() : string;
	getRootDirectories() : Iterable<Path>;
	getFileStores() : Iterable<FileStore>;
	supportedFileAttributeViews() : Set<string>;
	getPath(arg1 : string, arg2 : string[]) : Path;
	getPathMatcher(arg1 : string) : PathMatcher;
	getUserPrincipalLookupService() : UserPrincipalLookupService;
	newWatchService() : WatchService;
}


declare interface FileSystem extends Closeable {}
export = FileSystem
