import ByteOrder = require('nashorn/java/nio/ByteOrder');
import Buffer = require('nashorn/java/nio/Buffer');
import Comparable = require('nashorn/java/lang/Comparable');

declare class IntBuffer {
	direct : boolean;
	static allocate(arg1 : number) : IntBuffer;
	static wrap(arg1 : number[], arg2 : number, arg3 : number) : IntBuffer;
	static wrap(arg1 : number[]) : IntBuffer;
	slice() : IntBuffer;
	duplicate() : IntBuffer;
	asReadOnlyBuffer() : IntBuffer;
	get() : number;
	put(arg1 : number) : IntBuffer;
	get(arg1 : number) : number;
	put(arg1 : number, arg2 : number) : IntBuffer;
	get(arg1 : number[], arg2 : number, arg3 : number) : IntBuffer;
	get(arg1 : number[]) : IntBuffer;
	put(arg1 : IntBuffer) : IntBuffer;
	put(arg1 : number[], arg2 : number, arg3 : number) : IntBuffer;
	put(arg1 : number[]) : IntBuffer;
	compact() : IntBuffer;
	static equals(arg1 : number, arg2 : number) : boolean;
	static compare(arg1 : number, arg2 : number) : number;
	order() : ByteOrder;
}


declare interface IntBuffer extends Buffer, Comparable<IntBuffer> {}
export = IntBuffer
