import Iterator = require('nashorn/java/util/Iterator');
import CharsetProvider = require('nashorn/java/nio/charset/spi/CharsetProvider');
import Map = require('nashorn/java/util/Map');
import SortedMap = require('nashorn/java/util/SortedMap');
import Set = require('nashorn/java/util/Set');
import Locale = require('nashorn/java/util/Locale');
import CharsetDecoder = require('nashorn/java/nio/charset/CharsetDecoder');
import CharsetEncoder = require('nashorn/java/nio/charset/CharsetEncoder');
import ByteBuffer = require('nashorn/java/nio/ByteBuffer');
import CharBuffer = require('nashorn/java/nio/CharBuffer');
import Comparable = require('nashorn/java/lang/Comparable');
import Object = require('nashorn/java/lang/Object');

declare class Charset {
	registered : boolean;
	static atBugLevel(arg1 : string) : boolean;
	static checkName(arg1 : string) : void;
	static cache(arg1 : string, arg2 : Charset) : void;
	static providers() : Iterator<CharsetProvider>;
	static lookupViaProviders(arg1 : string) : Charset;
	static lookupExtendedCharset(arg1 : string) : Charset;
	static lookup(arg1 : string) : Charset;
	static lookup2(arg1 : string) : Charset;
	static isSupported(arg1 : string) : boolean;
	static forName(arg1 : string) : Charset;
	static put(arg1 : Iterator<Charset>, arg2 : Map<string, Charset>) : void;
	static availableCharsets() : SortedMap<string, Charset>;
	static defaultCharset() : Charset;
	name() : string;
	aliases() : Set<string>;
	displayName() : string;
	isRegistered() : boolean;
	displayName(arg1 : Locale) : string;
	contains(arg1 : Charset) : boolean;
	newDecoder() : CharsetDecoder;
	newEncoder() : CharsetEncoder;
	canEncode() : boolean;
	decode(arg1 : ByteBuffer) : CharBuffer;
	encode(arg1 : CharBuffer) : ByteBuffer;
	encode(arg1 : string) : ByteBuffer;
}


declare interface Charset extends Comparable<Charset> {}

declare module Charset {
	class ExtendedProviderHolder extends Object {
		static extendedProvider() : CharsetProvider;
	}
}

export = Charset
