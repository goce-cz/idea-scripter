import Object = require('nashorn/java/lang/Object');
import Charset = require('nashorn/java/nio/charset/Charset');
import CodingErrorAction = require('nashorn/java/nio/charset/CodingErrorAction');
import CharBuffer = require('nashorn/java/nio/CharBuffer');
import ByteBuffer = require('nashorn/java/nio/ByteBuffer');
import CoderResult = require('nashorn/java/nio/charset/CoderResult');
import CharSequence = require('nashorn/java/lang/CharSequence');

declare class CharsetEncoder extends Object {
	charset() : Charset;
	replacement() : number[];
	replaceWith(arg1 : number[]) : CharsetEncoder;
	implReplaceWith(arg1 : number[]) : void;
	isLegalReplacement(arg1 : number[]) : boolean;
	malformedInputAction() : CodingErrorAction;
	onMalformedInput(arg1 : CodingErrorAction) : CharsetEncoder;
	implOnMalformedInput(arg1 : CodingErrorAction) : void;
	unmappableCharacterAction() : CodingErrorAction;
	onUnmappableCharacter(arg1 : CodingErrorAction) : CharsetEncoder;
	implOnUnmappableCharacter(arg1 : CodingErrorAction) : void;
	averageBytesPerChar() : number;
	maxBytesPerChar() : number;
	encode(arg1 : CharBuffer, arg2 : ByteBuffer, arg3 : boolean) : CoderResult;
	flush(arg1 : ByteBuffer) : CoderResult;
	implFlush(arg1 : ByteBuffer) : CoderResult;
	reset() : CharsetEncoder;
	implReset() : void;
	encodeLoop(arg1 : CharBuffer, arg2 : ByteBuffer) : CoderResult;
	encode(arg1 : CharBuffer) : ByteBuffer;
	canEncode(arg1 : CharBuffer) : boolean;
	canEncode(arg1 : string) : boolean;
	canEncode(arg1 : CharSequence) : boolean;
	throwIllegalStateException(arg1 : number, arg2 : number) : void;
}

export = CharsetEncoder
