import Object = require('nashorn/java/lang/Object');
import Charset = require('nashorn/java/nio/charset/Charset');
import CodingErrorAction = require('nashorn/java/nio/charset/CodingErrorAction');
import ByteBuffer = require('nashorn/java/nio/ByteBuffer');
import CharBuffer = require('nashorn/java/nio/CharBuffer');
import CoderResult = require('nashorn/java/nio/charset/CoderResult');

declare class CharsetDecoder extends Object {
	autoDetecting : boolean;
	charsetDetected : boolean;
	charset() : Charset;
	replacement() : string;
	replaceWith(arg1 : string) : CharsetDecoder;
	implReplaceWith(arg1 : string) : void;
	malformedInputAction() : CodingErrorAction;
	onMalformedInput(arg1 : CodingErrorAction) : CharsetDecoder;
	implOnMalformedInput(arg1 : CodingErrorAction) : void;
	unmappableCharacterAction() : CodingErrorAction;
	onUnmappableCharacter(arg1 : CodingErrorAction) : CharsetDecoder;
	implOnUnmappableCharacter(arg1 : CodingErrorAction) : void;
	averageCharsPerByte() : number;
	maxCharsPerByte() : number;
	decode(arg1 : ByteBuffer, arg2 : CharBuffer, arg3 : boolean) : CoderResult;
	flush(arg1 : CharBuffer) : CoderResult;
	implFlush(arg1 : CharBuffer) : CoderResult;
	reset() : CharsetDecoder;
	implReset() : void;
	decodeLoop(arg1 : ByteBuffer, arg2 : CharBuffer) : CoderResult;
	decode(arg1 : ByteBuffer) : CharBuffer;
	isAutoDetecting() : boolean;
	isCharsetDetected() : boolean;
	detectedCharset() : Charset;
	throwIllegalStateException(arg1 : number, arg2 : number) : void;
}

export = CharsetDecoder
