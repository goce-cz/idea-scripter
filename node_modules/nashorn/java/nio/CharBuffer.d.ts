import CharSequence = require('nashorn/java/lang/CharSequence');
import ByteOrder = require('nashorn/java/nio/ByteOrder');
import Buffer = require('nashorn/java/nio/Buffer');
import Comparable = require('nashorn/java/lang/Comparable');
import Appendable = require('nashorn/java/lang/Appendable');
import Readable = require('nashorn/java/lang/Readable');

declare class CharBuffer {
	direct : boolean;
	static allocate(arg1 : number) : CharBuffer;
	static wrap(arg1 : string[], arg2 : number, arg3 : number) : CharBuffer;
	static wrap(arg1 : string[]) : CharBuffer;
	static wrap(arg1 : CharSequence, arg2 : number, arg3 : number) : CharBuffer;
	static wrap(arg1 : CharSequence) : CharBuffer;
	slice() : CharBuffer;
	duplicate() : CharBuffer;
	asReadOnlyBuffer() : CharBuffer;
	get() : string;
	put(arg1 : string) : CharBuffer;
	get(arg1 : number) : string;
	getUnchecked(arg1 : number) : string;
	put(arg1 : number, arg2 : string) : CharBuffer;
	get(arg1 : string[], arg2 : number, arg3 : number) : CharBuffer;
	get(arg1 : string[]) : CharBuffer;
	put(arg1 : CharBuffer) : CharBuffer;
	put(arg1 : string[], arg2 : number, arg3 : number) : CharBuffer;
	put(arg1 : string[]) : CharBuffer;
	put(arg1 : string, arg2 : number, arg3 : number) : CharBuffer;
	put(arg1 : string) : CharBuffer;
	compact() : CharBuffer;
	static equals(arg1 : string, arg2 : string) : boolean;
	static compare(arg1 : string, arg2 : string) : number;
	toString(arg1 : number, arg2 : number) : string;
	order() : ByteOrder;
}


declare interface CharBuffer extends Buffer, Comparable<CharBuffer>, Appendable, CharSequence, Readable {}
export = CharBuffer
