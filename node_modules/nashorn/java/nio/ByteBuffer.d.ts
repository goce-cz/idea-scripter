import ByteOrder = require('nashorn/java/nio/ByteOrder');
import CharBuffer = require('nashorn/java/nio/CharBuffer');
import ShortBuffer = require('nashorn/java/nio/ShortBuffer');
import IntBuffer = require('nashorn/java/nio/IntBuffer');
import LongBuffer = require('nashorn/java/nio/LongBuffer');
import FloatBuffer = require('nashorn/java/nio/FloatBuffer');
import DoubleBuffer = require('nashorn/java/nio/DoubleBuffer');
import Buffer = require('nashorn/java/nio/Buffer');
import Comparable = require('nashorn/java/lang/Comparable');

declare class ByteBuffer {
	direct : boolean;
	char : string;
	short : number;
	int : number;
	long : number;
	float : number;
	double : number;
	static allocateDirect(arg1 : number) : ByteBuffer;
	static allocate(arg1 : number) : ByteBuffer;
	static wrap(arg1 : number[], arg2 : number, arg3 : number) : ByteBuffer;
	static wrap(arg1 : number[]) : ByteBuffer;
	slice() : ByteBuffer;
	duplicate() : ByteBuffer;
	asReadOnlyBuffer() : ByteBuffer;
	get() : number;
	put(arg1 : number) : ByteBuffer;
	get(arg1 : number) : number;
	put(arg1 : number, arg2 : number) : ByteBuffer;
	get(arg1 : number[], arg2 : number, arg3 : number) : ByteBuffer;
	get(arg1 : number[]) : ByteBuffer;
	put(arg1 : ByteBuffer) : ByteBuffer;
	put(arg1 : number[], arg2 : number, arg3 : number) : ByteBuffer;
	put(arg1 : number[]) : ByteBuffer;
	compact() : ByteBuffer;
	static equals(arg1 : number, arg2 : number) : boolean;
	static compare(arg1 : number, arg2 : number) : number;
	order() : ByteOrder;
	order(arg1 : ByteOrder) : ByteBuffer;
	_get(arg1 : number) : number;
	_put(arg1 : number, arg2 : number) : void;
	getChar() : string;
	putChar(arg1 : string) : ByteBuffer;
	getChar(arg1 : number) : string;
	putChar(arg1 : number, arg2 : string) : ByteBuffer;
	asCharBuffer() : CharBuffer;
	getShort() : number;
	putShort(arg1 : number) : ByteBuffer;
	getShort(arg1 : number) : number;
	putShort(arg1 : number, arg2 : number) : ByteBuffer;
	asShortBuffer() : ShortBuffer;
	getInt() : number;
	putInt(arg1 : number) : ByteBuffer;
	getInt(arg1 : number) : number;
	putInt(arg1 : number, arg2 : number) : ByteBuffer;
	asIntBuffer() : IntBuffer;
	getLong() : number;
	putLong(arg1 : number) : ByteBuffer;
	getLong(arg1 : number) : number;
	putLong(arg1 : number, arg2 : number) : ByteBuffer;
	asLongBuffer() : LongBuffer;
	getFloat() : number;
	putFloat(arg1 : number) : ByteBuffer;
	getFloat(arg1 : number) : number;
	putFloat(arg1 : number, arg2 : number) : ByteBuffer;
	asFloatBuffer() : FloatBuffer;
	getDouble() : number;
	putDouble(arg1 : number) : ByteBuffer;
	getDouble(arg1 : number) : number;
	putDouble(arg1 : number, arg2 : number) : ByteBuffer;
	asDoubleBuffer() : DoubleBuffer;
}


declare interface ByteBuffer extends Buffer, Comparable<ByteBuffer> {}
export = ByteBuffer
