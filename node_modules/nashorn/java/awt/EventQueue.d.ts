import Object = require('nashorn/java/lang/Object');
import AWTEvent = require('nashorn/java/awt/AWTEvent');
import PaintEvent = require('nashorn/java/awt/event/PaintEvent');
import MouseEvent = require('nashorn/java/awt/event/MouseEvent');
import PeerEvent = require('nashorn/sun/awt/PeerEvent');
import EventQueueItem = require('nashorn/sun/awt/EventQueueItem');
import AccessControlContext = require('nashorn/java/security/AccessControlContext');
import SecondaryLoop = require('nashorn/java/awt/SecondaryLoop');
import Conditional = require('nashorn/java/awt/Conditional');
import EventFilter = require('nashorn/java/awt/EventFilter');
import EventDispatchThread = require('nashorn/java/awt/EventDispatchThread');
import Runnable = require('nashorn/java/lang/Runnable');
import FwDispatcher = require('nashorn/sun/awt/FwDispatcher');

declare class EventQueue extends Object {
	nextEvent : AWTEvent;
	static mostRecentEventTime : number;
	static currentEvent : AWTEvent;
	static dispatchThread : boolean;
	constructor();
	postEvent(arg1 : AWTEvent) : void;
	postEventPrivate(arg1 : AWTEvent) : void;
	static getPriority(arg1 : AWTEvent) : number;
	postEvent(arg1 : AWTEvent, arg2 : number) : void;
	coalescePaintEvent(arg1 : PaintEvent) : boolean;
	mergePaintEvents(arg1 : PaintEvent, arg2 : PaintEvent) : PaintEvent;
	coalesceMouseEvent(arg1 : MouseEvent) : boolean;
	coalescePeerEvent(arg1 : PeerEvent) : boolean;
	coalesceOtherEvent(arg1 : AWTEvent, arg2 : number) : boolean;
	coalesceEvent(arg1 : AWTEvent, arg2 : number) : boolean;
	cacheEQItem(arg1 : EventQueueItem) : void;
	uncacheEQItem(arg1 : EventQueueItem) : void;
	static eventToCacheIndex(arg1 : AWTEvent) : number;
	noEvents() : boolean;
	getNextEvent() : AWTEvent;
	getNextEventPrivate() : AWTEvent;
	getNextEvent(arg1 : number) : AWTEvent;
	peekEvent() : AWTEvent;
	peekEvent(arg1 : number) : AWTEvent;
	dispatchEvent(arg1 : AWTEvent) : void;
	static getAccessControlContextFrom(arg1 : Object) : AccessControlContext;
	dispatchEventImpl(arg1 : AWTEvent, arg2 : Object) : void;
	static getMostRecentEventTime() : number;
	getMostRecentEventTimeImpl() : number;
	getMostRecentEventTimeEx() : number;
	static getCurrentEvent() : AWTEvent;
	getCurrentEventImpl() : AWTEvent;
	push(arg1 : EventQueue) : void;
	pop() : void;
	createSecondaryLoop() : SecondaryLoop;
	createSecondaryLoop(arg1 : Conditional, arg2 : EventFilter, arg3 : number) : SecondaryLoop;
	static isDispatchThread() : boolean;
	isDispatchThreadImpl() : boolean;
	initDispatchThread() : void;
	detachDispatchThread(arg1 : EventDispatchThread) : void;
	getDispatchThread() : EventDispatchThread;
	removeSourceEvents(arg1 : Object, arg2 : boolean) : void;
	getMostRecentKeyEventTime() : number;
	static setCurrentEventAndMostRecentTime(arg1 : AWTEvent) : void;
	setCurrentEventAndMostRecentTimeImpl(arg1 : AWTEvent) : void;
	static invokeLater(arg1 : Runnable) : void;
	static invokeAndWait(arg1 : Runnable) : void;
	static invokeAndWait(arg1 : Object, arg2 : Runnable) : void;
	wakeup(arg1 : boolean) : void;
	setFwDispatcher(arg1 : FwDispatcher) : void;
}

export = EventQueue
