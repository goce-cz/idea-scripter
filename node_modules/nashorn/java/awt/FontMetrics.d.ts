import Font = require('nashorn/java/awt/Font');
import FontRenderContext = require('nashorn/java/awt/font/FontRenderContext');
import Graphics = require('nashorn/java/awt/Graphics');
import LineMetrics = require('nashorn/java/awt/font/LineMetrics');
import CharacterIterator = require('nashorn/java/text/CharacterIterator');
import Rectangle2D = require('nashorn/java/awt/geom/Rectangle2D');
import Serializable = require('nashorn/java/io/Serializable');

declare class FontMetrics {
	font : Font;
	fontRenderContext : FontRenderContext;
	leading : number;
	ascent : number;
	descent : number;
	height : number;
	maxAscent : number;
	maxDescent : number;
	maxDecent : number;
	maxAdvance : number;
	widths : number[];
	getFont() : Font;
	getFontRenderContext() : FontRenderContext;
	getLeading() : number;
	getAscent() : number;
	getDescent() : number;
	getHeight() : number;
	getMaxAscent() : number;
	getMaxDescent() : number;
	getMaxDecent() : number;
	getMaxAdvance() : number;
	charWidth(arg1 : number) : number;
	charWidth(arg1 : string) : number;
	stringWidth(arg1 : string) : number;
	charsWidth(arg1 : string[], arg2 : number, arg3 : number) : number;
	bytesWidth(arg1 : number[], arg2 : number, arg3 : number) : number;
	getWidths() : number[];
	hasUniformLineMetrics() : boolean;
	getLineMetrics(arg1 : string, arg2 : Graphics) : LineMetrics;
	getLineMetrics(arg1 : string, arg2 : number, arg3 : number, arg4 : Graphics) : LineMetrics;
	getLineMetrics(arg1 : string[], arg2 : number, arg3 : number, arg4 : Graphics) : LineMetrics;
	getLineMetrics(arg1 : CharacterIterator, arg2 : number, arg3 : number, arg4 : Graphics) : LineMetrics;
	getStringBounds(arg1 : string, arg2 : Graphics) : Rectangle2D;
	getStringBounds(arg1 : string, arg2 : number, arg3 : number, arg4 : Graphics) : Rectangle2D;
	getStringBounds(arg1 : string[], arg2 : number, arg3 : number, arg4 : Graphics) : Rectangle2D;
	getStringBounds(arg1 : CharacterIterator, arg2 : number, arg3 : number, arg4 : Graphics) : Rectangle2D;
	getMaxCharBounds(arg1 : Graphics) : Rectangle2D;
	myFRC(arg1 : Graphics) : FontRenderContext;
	static initIDs() : void;
}


declare interface FontMetrics extends Serializable {}
export = FontMetrics
