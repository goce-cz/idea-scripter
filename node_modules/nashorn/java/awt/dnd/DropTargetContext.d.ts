import DropTarget = require('nashorn/java/awt/dnd/DropTarget');
import Component = require('nashorn/java/awt/Component');
import DropTargetContextPeer = require('nashorn/java/awt/dnd/peer/DropTargetContextPeer');
import DataFlavor = require('nashorn/java/awt/datatransfer/DataFlavor');
import List = require('nashorn/java/util/List');
import Transferable = require('nashorn/java/awt/datatransfer/Transferable');
import Serializable = require('nashorn/java/io/Serializable');

declare class DropTargetContext {
	dropTarget : DropTarget;
	component : Component;
	getDropTarget() : DropTarget;
	getComponent() : Component;
	addNotify(arg1 : DropTargetContextPeer) : void;
	removeNotify() : void;
	setTargetActions(arg1 : number) : void;
	getTargetActions() : number;
	dropComplete(arg1 : boolean) : void;
	acceptDrag(arg1 : number) : void;
	rejectDrag() : void;
	acceptDrop(arg1 : number) : void;
	rejectDrop() : void;
	getCurrentDataFlavors() : DataFlavor[];
	getCurrentDataFlavorsAsList() : List<DataFlavor>;
	isDataFlavorSupported(arg1 : DataFlavor) : boolean;
	getTransferable() : Transferable;
	getDropTargetContextPeer() : DropTargetContextPeer;
	createTransferableProxy(arg1 : Transferable, arg2 : boolean) : Transferable;
}


declare interface DropTargetContext extends Serializable {}

declare module DropTargetContext {
	class TransferableProxy {
		transferDataFlavors : DataFlavor[];
	}


	interface TransferableProxy extends Transferable {}}

export = DropTargetContext
