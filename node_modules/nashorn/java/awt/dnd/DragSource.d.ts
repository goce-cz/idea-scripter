import Cursor = require('nashorn/java/awt/Cursor');
import FlavorMap = require('nashorn/java/awt/datatransfer/FlavorMap');
import DragSourceListener = require('nashorn/java/awt/dnd/DragSourceListener');
import DragSourceMotionListener = require('nashorn/java/awt/dnd/DragSourceMotionListener');
import DragGestureEvent = require('nashorn/java/awt/dnd/DragGestureEvent');
import Image = require('nashorn/java/awt/Image');
import Point = require('nashorn/java/awt/Point');
import Transferable = require('nashorn/java/awt/datatransfer/Transferable');
import DragSourceContextPeer = require('nashorn/java/awt/dnd/peer/DragSourceContextPeer');
import DragSourceContext = require('nashorn/java/awt/dnd/DragSourceContext');
import DragGestureRecognizer = require('nashorn/java/awt/dnd/DragGestureRecognizer');
import Class = require('nashorn/java/lang/Class');
import Component = require('nashorn/java/awt/Component');
import DragGestureListener = require('nashorn/java/awt/dnd/DragGestureListener');
import EventListener = require('nashorn/java/util/EventListener');
import DragSourceDragEvent = require('nashorn/java/awt/dnd/DragSourceDragEvent');
import DragSourceEvent = require('nashorn/java/awt/dnd/DragSourceEvent');
import DragSourceDropEvent = require('nashorn/java/awt/dnd/DragSourceDropEvent');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Serializable = require('nashorn/java/io/Serializable');

declare class DragSource {
	static DefaultCopyDrop : Cursor;
	static DefaultMoveDrop : Cursor;
	static DefaultLinkDrop : Cursor;
	static DefaultCopyNoDrop : Cursor;
	static DefaultMoveNoDrop : Cursor;
	static DefaultLinkNoDrop : Cursor;
	static defaultDragSource : DragSource;
	static dragImageSupported : boolean;
	flavorMap : FlavorMap;
	dragSourceListeners : DragSourceListener[];
	dragSourceMotionListeners : DragSourceMotionListener[];
	static dragThreshold : number;
	constructor();
	static load(arg1 : string) : Cursor;
	static getDefaultDragSource() : DragSource;
	static isDragImageSupported() : boolean;
	startDrag(arg1 : DragGestureEvent, arg2 : Cursor, arg3 : Image, arg4 : Point, arg5 : Transferable, arg6 : DragSourceListener, arg7 : FlavorMap) : void;
	startDrag(arg1 : DragGestureEvent, arg2 : Cursor, arg3 : Transferable, arg4 : DragSourceListener, arg5 : FlavorMap) : void;
	startDrag(arg1 : DragGestureEvent, arg2 : Cursor, arg3 : Image, arg4 : Point, arg5 : Transferable, arg6 : DragSourceListener) : void;
	startDrag(arg1 : DragGestureEvent, arg2 : Cursor, arg3 : Transferable, arg4 : DragSourceListener) : void;
	createDragSourceContext(arg1 : DragSourceContextPeer, arg2 : DragGestureEvent, arg3 : Cursor, arg4 : Image, arg5 : Point, arg6 : Transferable, arg7 : DragSourceListener) : DragSourceContext;
	getFlavorMap() : FlavorMap;
	createDragGestureRecognizer<T extends DragGestureRecognizer>(arg1 : Class<T>, arg2 : Component, arg3 : number, arg4 : DragGestureListener) : T;
	createDefaultDragGestureRecognizer(arg1 : Component, arg2 : number, arg3 : DragGestureListener) : DragGestureRecognizer;
	addDragSourceListener(arg1 : DragSourceListener) : void;
	removeDragSourceListener(arg1 : DragSourceListener) : void;
	getDragSourceListeners() : DragSourceListener[];
	addDragSourceMotionListener(arg1 : DragSourceMotionListener) : void;
	removeDragSourceMotionListener(arg1 : DragSourceMotionListener) : void;
	getDragSourceMotionListeners() : DragSourceMotionListener[];
	getListeners<T extends EventListener>(arg1 : Class<T>) : T[];
	processDragEnter(arg1 : DragSourceDragEvent) : void;
	processDragOver(arg1 : DragSourceDragEvent) : void;
	processDropActionChanged(arg1 : DragSourceDragEvent) : void;
	processDragExit(arg1 : DragSourceEvent) : void;
	processDragDropEnd(arg1 : DragSourceDropEvent) : void;
	processDragMouseMoved(arg1 : DragSourceDragEvent) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	static getDragThreshold() : number;
}


declare interface DragSource extends Serializable {}
export = DragSource
