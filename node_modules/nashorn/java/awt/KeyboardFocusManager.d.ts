import Component = require('nashorn/java/awt/Component');
import Window = require('nashorn/java/awt/Window');
import FocusTraversalPolicy = require('nashorn/java/awt/FocusTraversalPolicy');
import Container = require('nashorn/java/awt/Container');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import VetoableChangeListener = require('nashorn/java/beans/VetoableChangeListener');
import AppContext = require('nashorn/sun/awt/AppContext');
import SequencedEvent = require('nashorn/java/awt/SequencedEvent');
import Set = require('nashorn/java/util/Set');
import AWTKeyStroke = require('nashorn/java/awt/AWTKeyStroke');
import Object = require('nashorn/java/lang/Object');
import KeyEventDispatcher = require('nashorn/java/awt/KeyEventDispatcher');
import List = require('nashorn/java/util/List');
import KeyEventPostProcessor = require('nashorn/java/awt/KeyEventPostProcessor');
import AWTEvent = require('nashorn/java/awt/AWTEvent');
import KeyEvent = require('nashorn/java/awt/event/KeyEvent');
import CausedFocusEvent = require('nashorn/sun/awt/CausedFocusEvent');
import Throwable = require('nashorn/java/lang/Throwable');
import FocusEvent = require('nashorn/java/awt/event/FocusEvent');

declare class KeyboardFocusManager {
	static FORWARD_TRAVERSAL_KEYS : number;
	static BACKWARD_TRAVERSAL_KEYS : number;
	static UP_CYCLE_TRAVERSAL_KEYS : number;
	static DOWN_CYCLE_TRAVERSAL_KEYS : number;
	static currentKeyboardFocusManager : KeyboardFocusManager;
	focusOwner : Component;
	permanentFocusOwner : Component;
	focusedWindow : Window;
	activeWindow : Window;
	defaultFocusTraversalPolicy : FocusTraversalPolicy;
	currentFocusCycleRoot : Container;
	propertyChangeListeners : PropertyChangeListener[];
	vetoableChangeListeners : VetoableChangeListener[];
	constructor();
	static initIDs() : void;
	static getCurrentKeyboardFocusManager() : KeyboardFocusManager;
	static getCurrentKeyboardFocusManager(arg1 : AppContext) : KeyboardFocusManager;
	static setCurrentKeyboardFocusManager(arg1 : KeyboardFocusManager) : void;
	setCurrentSequencedEvent(arg1 : SequencedEvent) : void;
	getCurrentSequencedEvent() : SequencedEvent;
	static initFocusTraversalKeysSet(arg1 : string, arg2 : Set<AWTKeyStroke>) : Set<AWTKeyStroke>;
	initPeer() : void;
	getFocusOwner() : Component;
	getGlobalFocusOwner() : Component;
	setGlobalFocusOwner(arg1 : Component) : void;
	clearFocusOwner() : void;
	clearGlobalFocusOwner() : void;
	_clearGlobalFocusOwner() : void;
	clearGlobalFocusOwnerPriv() : void;
	getNativeFocusOwner() : Component;
	setNativeFocusOwner(arg1 : Component) : void;
	getNativeFocusedWindow() : Window;
	getPermanentFocusOwner() : Component;
	getGlobalPermanentFocusOwner() : Component;
	setGlobalPermanentFocusOwner(arg1 : Component) : void;
	getFocusedWindow() : Window;
	getGlobalFocusedWindow() : Window;
	setGlobalFocusedWindow(arg1 : Window) : void;
	getActiveWindow() : Window;
	getGlobalActiveWindow() : Window;
	setGlobalActiveWindow(arg1 : Window) : void;
	getDefaultFocusTraversalPolicy() : FocusTraversalPolicy;
	setDefaultFocusTraversalPolicy(arg1 : FocusTraversalPolicy) : void;
	setDefaultFocusTraversalKeys(arg1 : number, arg2 : Set<AWTKeyStroke>) : void;
	getDefaultFocusTraversalKeys(arg1 : number) : Set<AWTKeyStroke>;
	getCurrentFocusCycleRoot() : Container;
	getGlobalCurrentFocusCycleRoot() : Container;
	setGlobalCurrentFocusCycleRoot(arg1 : Container) : void;
	setGlobalCurrentFocusCycleRootPriv(arg1 : Container) : void;
	addPropertyChangeListener(arg1 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : PropertyChangeListener) : void;
	getPropertyChangeListeners() : PropertyChangeListener[];
	addPropertyChangeListener(arg1 : string, arg2 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : string, arg2 : PropertyChangeListener) : void;
	getPropertyChangeListeners(arg1 : string) : PropertyChangeListener[];
	firePropertyChange(arg1 : string, arg2 : Object, arg3 : Object) : void;
	addVetoableChangeListener(arg1 : VetoableChangeListener) : void;
	removeVetoableChangeListener(arg1 : VetoableChangeListener) : void;
	getVetoableChangeListeners() : VetoableChangeListener[];
	addVetoableChangeListener(arg1 : string, arg2 : VetoableChangeListener) : void;
	removeVetoableChangeListener(arg1 : string, arg2 : VetoableChangeListener) : void;
	getVetoableChangeListeners(arg1 : string) : VetoableChangeListener[];
	fireVetoableChange(arg1 : string, arg2 : Object, arg3 : Object) : void;
	addKeyEventDispatcher(arg1 : KeyEventDispatcher) : void;
	removeKeyEventDispatcher(arg1 : KeyEventDispatcher) : void;
	getKeyEventDispatchers() : List<KeyEventDispatcher>;
	addKeyEventPostProcessor(arg1 : KeyEventPostProcessor) : void;
	removeKeyEventPostProcessor(arg1 : KeyEventPostProcessor) : void;
	getKeyEventPostProcessors() : List<KeyEventPostProcessor>;
	static setMostRecentFocusOwner(arg1 : Component) : void;
	static setMostRecentFocusOwner(arg1 : Window, arg2 : Component) : void;
	static clearMostRecentFocusOwner(arg1 : Component) : void;
	static getMostRecentFocusOwner(arg1 : Window) : Component;
	dispatchEvent(arg1 : AWTEvent) : boolean;
	redispatchEvent(arg1 : Component, arg2 : AWTEvent) : void;
	processKeyEvent(arg1 : Component, arg2 : KeyEvent) : void;
	enqueueKeyEvents(arg1 : number, arg2 : Component) : void;
	dequeueKeyEvents(arg1 : number, arg2 : Component) : void;
	discardKeyEvents(arg1 : Component) : void;
	focusNextComponent(arg1 : Component) : void;
	focusPreviousComponent(arg1 : Component) : void;
	upFocusCycle(arg1 : Component) : void;
	downFocusCycle(arg1 : Container) : void;
	focusNextComponent() : void;
	focusPreviousComponent() : void;
	upFocusCycle() : void;
	downFocusCycle() : void;
	dumpRequests() : void;
	static processSynchronousLightweightTransfer(arg1 : Component, arg2 : Component, arg3 : boolean, arg4 : boolean, arg5 : number) : boolean;
	static shouldNativelyFocusHeavyweight(arg1 : Component, arg2 : Component, arg3 : boolean, arg4 : boolean, arg5 : number, arg6 : CausedFocusEvent.Cause) : number;
	static markClearGlobalFocusOwner() : Window;
	getCurrentWaitingRequest(arg1 : Component) : Component;
	static isAutoFocusTransferEnabled() : boolean;
	static isAutoFocusTransferEnabledFor(arg1 : Component) : boolean;
	static dispatchAndCatchException(arg1 : Throwable, arg2 : Component, arg3 : FocusEvent) : Throwable;
	static handleException(arg1 : Throwable) : void;
	static processCurrentLightweightRequests() : void;
	static retargetUnexpectedFocusEvent(arg1 : FocusEvent) : FocusEvent;
	static retargetFocusGained(arg1 : FocusEvent) : FocusEvent;
	static retargetFocusLost(arg1 : FocusEvent) : FocusEvent;
	static retargetFocusEvent(arg1 : AWTEvent) : AWTEvent;
	clearMarkers() : void;
	static removeFirstRequest() : boolean;
	static removeLastFocusRequest(arg1 : Component) : void;
	static focusedWindowChanged(arg1 : Component, arg2 : Component) : boolean;
	static isTemporary(arg1 : Component, arg2 : Component) : boolean;
	static getHeavyweight(arg1 : Component) : Component;
	static isProxyActiveImpl(arg1 : KeyEvent) : boolean;
	static isProxyActive(arg1 : KeyEvent) : boolean;
	static getLastHWRequest() : KeyboardFocusManager.HeavyweightFocusRequest;
	static getFirstHWRequest() : KeyboardFocusManager.HeavyweightFocusRequest;
	static checkReplaceKFMPermission() : void;
	checkKFMSecurity() : void;
}


declare interface KeyboardFocusManager extends KeyEventDispatcher, KeyEventPostProcessor {}

declare module KeyboardFocusManager {
	class HeavyweightFocusRequest extends Object {
		addLightweightRequest(arg1 : Component, arg2 : boolean, arg3 : CausedFocusEvent.Cause) : boolean;
		getFirstLightweightRequest() : KeyboardFocusManager.LightweightFocusRequest;
	}
	class LightweightFocusRequest extends Object {
	}
}

export = KeyboardFocusManager
