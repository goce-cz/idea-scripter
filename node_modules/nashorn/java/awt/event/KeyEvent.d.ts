import Component = require('nashorn/java/awt/Component');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import InputEvent = require('nashorn/java/awt/event/InputEvent');

declare class KeyEvent {
	static KEY_FIRST : number;
	static KEY_LAST : number;
	static KEY_TYPED : number;
	static KEY_PRESSED : number;
	static KEY_RELEASED : number;
	static VK_ENTER : number;
	static VK_BACK_SPACE : number;
	static VK_TAB : number;
	static VK_CANCEL : number;
	static VK_CLEAR : number;
	static VK_SHIFT : number;
	static VK_CONTROL : number;
	static VK_ALT : number;
	static VK_PAUSE : number;
	static VK_CAPS_LOCK : number;
	static VK_ESCAPE : number;
	static VK_SPACE : number;
	static VK_PAGE_UP : number;
	static VK_PAGE_DOWN : number;
	static VK_END : number;
	static VK_HOME : number;
	static VK_LEFT : number;
	static VK_UP : number;
	static VK_RIGHT : number;
	static VK_DOWN : number;
	static VK_COMMA : number;
	static VK_MINUS : number;
	static VK_PERIOD : number;
	static VK_SLASH : number;
	static VK_0 : number;
	static VK_1 : number;
	static VK_2 : number;
	static VK_3 : number;
	static VK_4 : number;
	static VK_5 : number;
	static VK_6 : number;
	static VK_7 : number;
	static VK_8 : number;
	static VK_9 : number;
	static VK_SEMICOLON : number;
	static VK_EQUALS : number;
	static VK_A : number;
	static VK_B : number;
	static VK_C : number;
	static VK_D : number;
	static VK_E : number;
	static VK_F : number;
	static VK_G : number;
	static VK_H : number;
	static VK_I : number;
	static VK_J : number;
	static VK_K : number;
	static VK_L : number;
	static VK_M : number;
	static VK_N : number;
	static VK_O : number;
	static VK_P : number;
	static VK_Q : number;
	static VK_R : number;
	static VK_S : number;
	static VK_T : number;
	static VK_U : number;
	static VK_V : number;
	static VK_W : number;
	static VK_X : number;
	static VK_Y : number;
	static VK_Z : number;
	static VK_OPEN_BRACKET : number;
	static VK_BACK_SLASH : number;
	static VK_CLOSE_BRACKET : number;
	static VK_NUMPAD0 : number;
	static VK_NUMPAD1 : number;
	static VK_NUMPAD2 : number;
	static VK_NUMPAD3 : number;
	static VK_NUMPAD4 : number;
	static VK_NUMPAD5 : number;
	static VK_NUMPAD6 : number;
	static VK_NUMPAD7 : number;
	static VK_NUMPAD8 : number;
	static VK_NUMPAD9 : number;
	static VK_MULTIPLY : number;
	static VK_ADD : number;
	static VK_SEPARATER : number;
	static VK_SEPARATOR : number;
	static VK_SUBTRACT : number;
	static VK_DECIMAL : number;
	static VK_DIVIDE : number;
	static VK_DELETE : number;
	static VK_NUM_LOCK : number;
	static VK_SCROLL_LOCK : number;
	static VK_F1 : number;
	static VK_F2 : number;
	static VK_F3 : number;
	static VK_F4 : number;
	static VK_F5 : number;
	static VK_F6 : number;
	static VK_F7 : number;
	static VK_F8 : number;
	static VK_F9 : number;
	static VK_F10 : number;
	static VK_F11 : number;
	static VK_F12 : number;
	static VK_F13 : number;
	static VK_F14 : number;
	static VK_F15 : number;
	static VK_F16 : number;
	static VK_F17 : number;
	static VK_F18 : number;
	static VK_F19 : number;
	static VK_F20 : number;
	static VK_F21 : number;
	static VK_F22 : number;
	static VK_F23 : number;
	static VK_F24 : number;
	static VK_PRINTSCREEN : number;
	static VK_INSERT : number;
	static VK_HELP : number;
	static VK_META : number;
	static VK_BACK_QUOTE : number;
	static VK_QUOTE : number;
	static VK_KP_UP : number;
	static VK_KP_DOWN : number;
	static VK_KP_LEFT : number;
	static VK_KP_RIGHT : number;
	static VK_DEAD_GRAVE : number;
	static VK_DEAD_ACUTE : number;
	static VK_DEAD_CIRCUMFLEX : number;
	static VK_DEAD_TILDE : number;
	static VK_DEAD_MACRON : number;
	static VK_DEAD_BREVE : number;
	static VK_DEAD_ABOVEDOT : number;
	static VK_DEAD_DIAERESIS : number;
	static VK_DEAD_ABOVERING : number;
	static VK_DEAD_DOUBLEACUTE : number;
	static VK_DEAD_CARON : number;
	static VK_DEAD_CEDILLA : number;
	static VK_DEAD_OGONEK : number;
	static VK_DEAD_IOTA : number;
	static VK_DEAD_VOICED_SOUND : number;
	static VK_DEAD_SEMIVOICED_SOUND : number;
	static VK_AMPERSAND : number;
	static VK_ASTERISK : number;
	static VK_QUOTEDBL : number;
	static VK_LESS : number;
	static VK_GREATER : number;
	static VK_BRACELEFT : number;
	static VK_BRACERIGHT : number;
	static VK_AT : number;
	static VK_COLON : number;
	static VK_CIRCUMFLEX : number;
	static VK_DOLLAR : number;
	static VK_EURO_SIGN : number;
	static VK_EXCLAMATION_MARK : number;
	static VK_INVERTED_EXCLAMATION_MARK : number;
	static VK_LEFT_PARENTHESIS : number;
	static VK_NUMBER_SIGN : number;
	static VK_PLUS : number;
	static VK_RIGHT_PARENTHESIS : number;
	static VK_UNDERSCORE : number;
	static VK_WINDOWS : number;
	static VK_CONTEXT_MENU : number;
	static VK_FINAL : number;
	static VK_CONVERT : number;
	static VK_NONCONVERT : number;
	static VK_ACCEPT : number;
	static VK_MODECHANGE : number;
	static VK_KANA : number;
	static VK_KANJI : number;
	static VK_ALPHANUMERIC : number;
	static VK_KATAKANA : number;
	static VK_HIRAGANA : number;
	static VK_FULL_WIDTH : number;
	static VK_HALF_WIDTH : number;
	static VK_ROMAN_CHARACTERS : number;
	static VK_ALL_CANDIDATES : number;
	static VK_PREVIOUS_CANDIDATE : number;
	static VK_CODE_INPUT : number;
	static VK_JAPANESE_KATAKANA : number;
	static VK_JAPANESE_HIRAGANA : number;
	static VK_JAPANESE_ROMAN : number;
	static VK_KANA_LOCK : number;
	static VK_INPUT_METHOD_ON_OFF : number;
	static VK_CUT : number;
	static VK_COPY : number;
	static VK_PASTE : number;
	static VK_UNDO : number;
	static VK_AGAIN : number;
	static VK_FIND : number;
	static VK_PROPS : number;
	static VK_STOP : number;
	static VK_COMPOSE : number;
	static VK_ALT_GRAPH : number;
	static VK_BEGIN : number;
	static VK_UNDEFINED : number;
	static CHAR_UNDEFINED : string;
	static KEY_LOCATION_UNKNOWN : number;
	static KEY_LOCATION_STANDARD : number;
	static KEY_LOCATION_LEFT : number;
	static KEY_LOCATION_RIGHT : number;
	static KEY_LOCATION_NUMPAD : number;
	keyCode : number;
	keyChar : string;
	keyLocation : number;
	actionKey : boolean;
	extendedKeyCode : number;
	constructor(arg1 : Component, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : string, arg7 : number);
	constructor(arg1 : Component, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : string);
	constructor(arg1 : Component, arg2 : number, arg3 : number, arg4 : number, arg5 : number);
	static initIDs() : void;
	getKeyCode() : number;
	setKeyCode(arg1 : number) : void;
	getKeyChar() : string;
	setKeyChar(arg1 : string) : void;
	setModifiers(arg1 : number) : void;
	getKeyLocation() : number;
	static getKeyText(arg1 : number) : string;
	static getKeyModifiersText(arg1 : number) : string;
	isActionKey() : boolean;
	getExtendedKeyCode() : number;
	static getExtendedKeyCodeForChar(arg1 : number) : number;
	setNewModifiers() : void;
	setOldModifiers() : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface KeyEvent extends InputEvent {}
export = KeyEvent
