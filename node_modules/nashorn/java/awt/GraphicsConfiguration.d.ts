import Object = require('nashorn/java/lang/Object');
import GraphicsDevice = require('nashorn/java/awt/GraphicsDevice');
import ColorModel = require('nashorn/java/awt/image/ColorModel');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import Rectangle = require('nashorn/java/awt/Rectangle');
import BufferCapabilities = require('nashorn/java/awt/BufferCapabilities');
import ImageCapabilities = require('nashorn/java/awt/ImageCapabilities');
import BufferedImage = require('nashorn/java/awt/image/BufferedImage');
import VolatileImage = require('nashorn/java/awt/image/VolatileImage');

declare class GraphicsConfiguration extends Object {
	device : GraphicsDevice;
	colorModel : ColorModel;
	defaultTransform : AffineTransform;
	normalizingTransform : AffineTransform;
	bounds : Rectangle;
	bufferCapabilities : BufferCapabilities;
	imageCapabilities : ImageCapabilities;
	translucencyCapable : boolean;
	getDevice() : GraphicsDevice;
	createCompatibleImage(arg1 : number, arg2 : number) : BufferedImage;
	createCompatibleImage(arg1 : number, arg2 : number, arg3 : number) : BufferedImage;
	createCompatibleVolatileImage(arg1 : number, arg2 : number) : VolatileImage;
	createCompatibleVolatileImage(arg1 : number, arg2 : number, arg3 : number) : VolatileImage;
	createCompatibleVolatileImage(arg1 : number, arg2 : number, arg3 : ImageCapabilities) : VolatileImage;
	createCompatibleVolatileImage(arg1 : number, arg2 : number, arg3 : ImageCapabilities, arg4 : number) : VolatileImage;
	getColorModel() : ColorModel;
	getColorModel(arg1 : number) : ColorModel;
	getDefaultTransform() : AffineTransform;
	getNormalizingTransform() : AffineTransform;
	getBounds() : Rectangle;
	getBufferCapabilities() : BufferCapabilities;
	getImageCapabilities() : ImageCapabilities;
	isTranslucencyCapable() : boolean;
}


declare module GraphicsConfiguration {
	class DefaultBufferCapabilities {
		constructor(arg1 : ImageCapabilities);
	}


	interface DefaultBufferCapabilities extends BufferCapabilities {}}

export = GraphicsConfiguration
