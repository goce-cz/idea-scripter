import ColorSpace = require('nashorn/java/awt/color/ColorSpace');
import Paint = require('nashorn/java/awt/Paint');
import Serializable = require('nashorn/java/io/Serializable');

declare class Color {
	static white : Color;
	static WHITE : Color;
	static lightGray : Color;
	static LIGHT_GRAY : Color;
	static gray : Color;
	static GRAY : Color;
	static darkGray : Color;
	static DARK_GRAY : Color;
	static black : Color;
	static BLACK : Color;
	static red : Color;
	static RED : Color;
	static pink : Color;
	static PINK : Color;
	static orange : Color;
	static ORANGE : Color;
	static yellow : Color;
	static YELLOW : Color;
	static green : Color;
	static GREEN : Color;
	static magenta : Color;
	static MAGENTA : Color;
	static cyan : Color;
	static CYAN : Color;
	static blue : Color;
	static BLUE : Color;
	red : number;
	green : number;
	blue : number;
	alpha : number;
	rGB : number;
	colorSpace : ColorSpace;
	transparency : number;
	constructor(arg1 : number, arg2 : number, arg3 : number);
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number);
	constructor(arg1 : number);
	constructor(arg1 : number, arg2 : boolean);
	constructor(arg1 : number, arg2 : number, arg3 : number);
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number);
	constructor(arg1 : ColorSpace, arg2 : number[], arg3 : number);
	static initIDs() : void;
	static testColorValueRange(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	static testColorValueRange(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	getRed() : number;
	getGreen() : number;
	getBlue() : number;
	getAlpha() : number;
	getRGB() : number;
	brighter() : Color;
	darker() : Color;
	static decode(arg1 : string) : Color;
	static getColor(arg1 : string) : Color;
	static getColor(arg1 : string, arg2 : Color) : Color;
	static getColor(arg1 : string, arg2 : number) : Color;
	static HSBtoRGB(arg1 : number, arg2 : number, arg3 : number) : number;
	static RGBtoHSB(arg1 : number, arg2 : number, arg3 : number, arg4 : number[]) : number[];
	static getHSBColor(arg1 : number, arg2 : number, arg3 : number) : Color;
	getRGBComponents(arg1 : number[]) : number[];
	getRGBColorComponents(arg1 : number[]) : number[];
	getComponents(arg1 : number[]) : number[];
	getColorComponents(arg1 : number[]) : number[];
	getComponents(arg1 : ColorSpace, arg2 : number[]) : number[];
	getColorComponents(arg1 : ColorSpace, arg2 : number[]) : number[];
	getColorSpace() : ColorSpace;
}


declare interface Color extends Paint, Serializable {}
export = Color
