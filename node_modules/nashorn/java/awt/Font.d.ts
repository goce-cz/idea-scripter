import FontPeer = require('nashorn/java/awt/peer/FontPeer');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import Map = require('nashorn/java/util/Map');
import TextAttribute = require('nashorn/java/awt/font/TextAttribute');
import AttributedCharacterIterator = require('nashorn/java/text/AttributedCharacterIterator');
import AttributeValues = require('nashorn/sun/font/AttributeValues');
import Font2D = require('nashorn/sun/font/Font2D');
import InputStream = require('nashorn/java/io/InputStream');
import CreatedFontTracker = require('nashorn/sun/font/CreatedFontTracker');
import File = require('nashorn/java/io/File');
import Locale = require('nashorn/java/util/Locale');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import CharacterIterator = require('nashorn/java/text/CharacterIterator');
import FontRenderContext = require('nashorn/java/awt/font/FontRenderContext');
import FontLineMetrics = require('nashorn/sun/font/FontLineMetrics');
import LineMetrics = require('nashorn/java/awt/font/LineMetrics');
import Rectangle2D = require('nashorn/java/awt/geom/Rectangle2D');
import GlyphVector = require('nashorn/java/awt/font/GlyphVector');
import Serializable = require('nashorn/java/io/Serializable');
import FontAccess = require('nashorn/sun/font/FontAccess');

declare class Font {
	static DIALOG : string;
	static DIALOG_INPUT : string;
	static SANS_SERIF : string;
	static SERIF : string;
	static MONOSPACED : string;
	static PLAIN : number;
	static BOLD : number;
	static ITALIC : number;
	static ROMAN_BASELINE : number;
	static CENTER_BASELINE : number;
	static HANGING_BASELINE : number;
	static TRUETYPE_FONT : number;
	static TYPE1_FONT : number;
	static LAYOUT_LEFT_TO_RIGHT : number;
	static LAYOUT_RIGHT_TO_LEFT : number;
	static LAYOUT_NO_START_CONTEXT : number;
	static LAYOUT_NO_LIMIT_CONTEXT : number;
	peer : FontPeer;
	transform : AffineTransform;
	family : string;
	pSName : string;
	name : string;
	fontName : string;
	style : number;
	size : number;
	size2D : number;
	plain : boolean;
	bold : boolean;
	italic : boolean;
	transformed : boolean;
	numGlyphs : number;
	missingGlyphCode : number;
	attributes : Map<TextAttribute, any>;
	availableAttributes : AttributedCharacterIterator.Attribute[];
	italicAngle : number;
	constructor(arg1 : string, arg2 : number, arg3 : number);
	constructor(arg1 : Map<AttributedCharacterIterator.Attribute, any>);
	getPeer() : FontPeer;
	getPeer_NoClientCode() : FontPeer;
	getAttributeValues() : AttributeValues;
	getFont2D() : Font2D;
	initFromValues(arg1 : AttributeValues) : void;
	static getFont(arg1 : Map<AttributedCharacterIterator.Attribute, any>) : Font;
	static hasTempPermission() : boolean;
	static createFont(arg1 : number, arg2 : InputStream) : Font;
	static createFont0(arg1 : number, arg2 : InputStream, arg3 : CreatedFontTracker) : Font;
	static createFont(arg1 : number, arg2 : File) : Font;
	getTransform() : AffineTransform;
	getFamily() : string;
	getFamily_NoClientCode() : string;
	getFamily(arg1 : Locale) : string;
	getPSName() : string;
	getName() : string;
	getFontName() : string;
	getFontName(arg1 : Locale) : string;
	getStyle() : number;
	getSize() : number;
	getSize2D() : number;
	isPlain() : boolean;
	isBold() : boolean;
	isItalic() : boolean;
	isTransformed() : boolean;
	hasLayoutAttributes() : boolean;
	static getFont(arg1 : string) : Font;
	static decode(arg1 : string) : Font;
	static getFont(arg1 : string, arg2 : Font) : Font;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	getNumGlyphs() : number;
	getMissingGlyphCode() : number;
	getBaselineFor(arg1 : string) : number;
	getAttributes() : Map<TextAttribute, any>;
	getAvailableAttributes() : AttributedCharacterIterator.Attribute[];
	deriveFont(arg1 : number, arg2 : number) : Font;
	deriveFont(arg1 : number, arg2 : AffineTransform) : Font;
	deriveFont(arg1 : number) : Font;
	deriveFont(arg1 : AffineTransform) : Font;
	deriveFont(arg1 : number) : Font;
	deriveFont(arg1 : Map<AttributedCharacterIterator.Attribute, any>) : Font;
	canDisplay(arg1 : string) : boolean;
	canDisplay(arg1 : number) : boolean;
	canDisplayUpTo(arg1 : string) : number;
	canDisplayUpTo(arg1 : string[], arg2 : number, arg3 : number) : number;
	canDisplayUpTo(arg1 : CharacterIterator, arg2 : number, arg3 : number) : number;
	getItalicAngle() : number;
	getItalicAngle(arg1 : FontRenderContext) : number;
	hasUniformLineMetrics() : boolean;
	defaultLineMetrics(arg1 : FontRenderContext) : FontLineMetrics;
	getLineMetrics(arg1 : string, arg2 : FontRenderContext) : LineMetrics;
	getLineMetrics(arg1 : string, arg2 : number, arg3 : number, arg4 : FontRenderContext) : LineMetrics;
	getLineMetrics(arg1 : string[], arg2 : number, arg3 : number, arg4 : FontRenderContext) : LineMetrics;
	getLineMetrics(arg1 : CharacterIterator, arg2 : number, arg3 : number, arg4 : FontRenderContext) : LineMetrics;
	getStringBounds(arg1 : string, arg2 : FontRenderContext) : Rectangle2D;
	getStringBounds(arg1 : string, arg2 : number, arg3 : number, arg4 : FontRenderContext) : Rectangle2D;
	getStringBounds(arg1 : string[], arg2 : number, arg3 : number, arg4 : FontRenderContext) : Rectangle2D;
	getStringBounds(arg1 : CharacterIterator, arg2 : number, arg3 : number, arg4 : FontRenderContext) : Rectangle2D;
	getMaxCharBounds(arg1 : FontRenderContext) : Rectangle2D;
	createGlyphVector(arg1 : FontRenderContext, arg2 : string) : GlyphVector;
	createGlyphVector(arg1 : FontRenderContext, arg2 : string[]) : GlyphVector;
	createGlyphVector(arg1 : FontRenderContext, arg2 : CharacterIterator) : GlyphVector;
	createGlyphVector(arg1 : FontRenderContext, arg2 : number[]) : GlyphVector;
	layoutGlyphVector(arg1 : FontRenderContext, arg2 : string[], arg3 : number, arg4 : number, arg5 : number) : GlyphVector;
	static applyTransform(arg1 : AffineTransform, arg2 : AttributeValues) : void;
	static applyStyle(arg1 : number, arg2 : AttributeValues) : void;
	static initIDs() : void;
}


declare interface Font extends Serializable {}

declare module Font {
	class FontAccessImpl {
	}


	interface FontAccessImpl extends FontAccess {}}

export = Font
