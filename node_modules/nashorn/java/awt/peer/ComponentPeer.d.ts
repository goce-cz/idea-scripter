import Object = require('nashorn/java/lang/Object');
import Point = require('nashorn/java/awt/Point');
import Dimension = require('nashorn/java/awt/Dimension');
import ColorModel = require('nashorn/java/awt/image/ColorModel');
import Graphics = require('nashorn/java/awt/Graphics');
import GraphicsConfiguration = require('nashorn/java/awt/GraphicsConfiguration');
import Image = require('nashorn/java/awt/Image');
import AWTEvent = require('nashorn/java/awt/AWTEvent');
import PaintEvent = require('nashorn/java/awt/event/PaintEvent');
import Font = require('nashorn/java/awt/Font');
import FontMetrics = require('nashorn/java/awt/FontMetrics');
import Color = require('nashorn/java/awt/Color');
import Component = require('nashorn/java/awt/Component');
import CausedFocusEvent = require('nashorn/sun/awt/CausedFocusEvent');
import ImageProducer = require('nashorn/java/awt/image/ImageProducer');
import VolatileImage = require('nashorn/java/awt/image/VolatileImage');
import ImageObserver = require('nashorn/java/awt/image/ImageObserver');
import BufferCapabilities = require('nashorn/java/awt/BufferCapabilities');
import ContainerPeer = require('nashorn/java/awt/peer/ContainerPeer');
import Region = require('nashorn/sun/java2d/pipe/Region');

declare class ComponentPeer extends Object {
	static SET_LOCATION : number;
	static SET_SIZE : number;
	static SET_BOUNDS : number;
	static SET_CLIENT_SIZE : number;
	static RESET_OPERATION : number;
	static NO_EMBEDDED_CHECK : number;
	static DEFAULT_OPERATION : number;
	obscured : boolean;
	locationOnScreen : Point;
	preferredSize : Dimension;
	minimumSize : Dimension;
	colorModel : ColorModel;
	graphics : Graphics;
	focusable : boolean;
	graphicsConfiguration : GraphicsConfiguration;
	backBuffer : Image;
	reparentSupported : boolean;
	isObscured() : boolean;
	canDetermineObscurity() : boolean;
	setVisible(arg1 : boolean) : void;
	setEnabled(arg1 : boolean) : void;
	paint(arg1 : Graphics) : void;
	print(arg1 : Graphics) : void;
	setBounds(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number) : void;
	handleEvent(arg1 : AWTEvent) : void;
	coalescePaintEvent(arg1 : PaintEvent) : void;
	getLocationOnScreen() : Point;
	getPreferredSize() : Dimension;
	getMinimumSize() : Dimension;
	getColorModel() : ColorModel;
	getGraphics() : Graphics;
	getFontMetrics(arg1 : Font) : FontMetrics;
	dispose() : void;
	setForeground(arg1 : Color) : void;
	setBackground(arg1 : Color) : void;
	setFont(arg1 : Font) : void;
	updateCursorImmediately() : void;
	requestFocus(arg1 : Component, arg2 : boolean, arg3 : boolean, arg4 : number, arg5 : CausedFocusEvent.Cause) : boolean;
	isFocusable() : boolean;
	createImage(arg1 : ImageProducer) : Image;
	createImage(arg1 : number, arg2 : number) : Image;
	createVolatileImage(arg1 : number, arg2 : number) : VolatileImage;
	prepareImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : ImageObserver) : boolean;
	checkImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : ImageObserver) : number;
	getGraphicsConfiguration() : GraphicsConfiguration;
	handlesWheelScrolling() : boolean;
	createBuffers(arg1 : number, arg2 : BufferCapabilities) : void;
	getBackBuffer() : Image;
	flip(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : BufferCapabilities.FlipContents) : void;
	destroyBuffers() : void;
	reparent(arg1 : ContainerPeer) : void;
	isReparentSupported() : boolean;
	layout() : void;
	applyShape(arg1 : Region) : void;
	setZOrder(arg1 : ComponentPeer) : void;
	updateGraphicsData(arg1 : GraphicsConfiguration) : boolean;
}

export = ComponentPeer
