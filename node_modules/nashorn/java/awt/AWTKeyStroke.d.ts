import Class = require('nashorn/java/lang/Class');
import Constructor = require('nashorn/java/lang/reflect/Constructor');
import KeyEvent = require('nashorn/java/awt/event/KeyEvent');
import VKCollection = require('nashorn/java/awt/VKCollection');
import Object = require('nashorn/java/lang/Object');
import Serializable = require('nashorn/java/io/Serializable');

declare class AWTKeyStroke {
	keyChar : string;
	keyCode : number;
	modifiers : number;
	onKeyRelease : boolean;
	keyEventType : number;
	static getAWTKeyStrokeClass() : Class<AWTKeyStroke>;
	static registerSubclass(arg1 : Class<any>) : void;
	static getCtor(arg1 : Class) : Constructor;
	static getCachedStroke(arg1 : string, arg2 : number, arg3 : number, arg4 : boolean) : AWTKeyStroke;
	static getAWTKeyStroke(arg1 : string) : AWTKeyStroke;
	static getAWTKeyStroke(arg1 : string, arg2 : number) : AWTKeyStroke;
	static getAWTKeyStroke(arg1 : number, arg2 : number, arg3 : boolean) : AWTKeyStroke;
	static getAWTKeyStroke(arg1 : number, arg2 : number) : AWTKeyStroke;
	static getAWTKeyStrokeForEvent(arg1 : KeyEvent) : AWTKeyStroke;
	static getAWTKeyStroke(arg1 : string) : AWTKeyStroke;
	static getVKCollection() : VKCollection;
	static getVKValue(arg1 : string) : number;
	getKeyChar() : string;
	getKeyCode() : number;
	getModifiers() : number;
	isOnKeyRelease() : boolean;
	getKeyEventType() : number;
	static getModifiersText(arg1 : number) : string;
	static getVKText(arg1 : number) : string;
	readResolve() : Object;
	static mapOldModifiers(arg1 : number) : number;
	static mapNewModifiers(arg1 : number) : number;
}


declare interface AWTKeyStroke extends Serializable {}
export = AWTKeyStroke
