import Class = require('nashorn/java/lang/Class');
import ClassLoader = require('nashorn/java/lang/ClassLoader');
import Transferable = require('nashorn/java/awt/datatransfer/Transferable');
import Reader = require('nashorn/java/io/Reader');
import MimeType = require('nashorn/java/awt/datatransfer/MimeType');
import Externalizable = require('nashorn/java/io/Externalizable');
import Cloneable = require('nashorn/java/lang/Cloneable');
import DataTransferer = require('nashorn/sun/awt/datatransfer/DataTransferer');

declare class DataFlavor {
	static stringFlavor : DataFlavor;
	static imageFlavor : DataFlavor;
	static plainTextFlavor : DataFlavor;
	static javaSerializedObjectMimeType : string;
	static javaFileListFlavor : DataFlavor;
	static javaJVMLocalObjectMimeType : string;
	static javaRemoteObjectMimeType : string;
	static selectionHtmlFlavor : DataFlavor;
	static fragmentHtmlFlavor : DataFlavor;
	static allHtmlFlavor : DataFlavor;
	static textPlainUnicodeFlavor : DataFlavor;
	mimeType : string;
	representationClass : Class<any>;
	humanPresentableName : string;
	primaryType : string;
	subType : string;
	mimeTypeSerializedObject : boolean;
	defaultRepresentationClass : Class<any>;
	defaultRepresentationClassAsString : string;
	representationClassInputStream : boolean;
	representationClassReader : boolean;
	representationClassCharBuffer : boolean;
	representationClassByteBuffer : boolean;
	representationClassSerializable : boolean;
	representationClassRemote : boolean;
	flavorSerializedObjectType : boolean;
	flavorRemoteObjectType : boolean;
	flavorJavaFileListType : boolean;
	flavorTextType : boolean;
	constructor();
	constructor(arg1 : Class<any>, arg2 : string);
	constructor(arg1 : string, arg2 : string);
	constructor(arg1 : string, arg2 : string, arg3 : ClassLoader);
	constructor(arg1 : string);
	static tryToLoadClass(arg1 : string, arg2 : ClassLoader) : Class<any>;
	static createConstant(arg1 : Class<any>, arg2 : string) : DataFlavor;
	static createConstant(arg1 : string, arg2 : string) : DataFlavor;
	static initHtmlDataFlavor(arg1 : string) : DataFlavor;
	initialize(arg1 : string, arg2 : string, arg3 : ClassLoader) : void;
	paramString() : string;
	static getTextPlainUnicodeFlavor() : DataFlavor;
	static selectBestTextFlavor(arg1 : DataFlavor[]) : DataFlavor;
	getReaderForText(arg1 : Transferable) : Reader;
	getMimeType() : string;
	getRepresentationClass() : Class<any>;
	getHumanPresentableName() : string;
	getPrimaryType() : string;
	getSubType() : string;
	getParameter(arg1 : string) : string;
	setHumanPresentableName(arg1 : string) : void;
	equals(arg1 : DataFlavor) : boolean;
	equals(arg1 : string) : boolean;
	match(arg1 : DataFlavor) : boolean;
	isMimeTypeEqual(arg1 : string) : boolean;
	isMimeTypeEqual(arg1 : DataFlavor) : boolean;
	isMimeTypeEqual(arg1 : MimeType) : boolean;
	isStandardTextRepresentationClass() : boolean;
	isMimeTypeSerializedObject() : boolean;
	getDefaultRepresentationClass() : Class<any>;
	getDefaultRepresentationClassAsString() : string;
	isRepresentationClassInputStream() : boolean;
	isRepresentationClassReader() : boolean;
	isRepresentationClassCharBuffer() : boolean;
	isRepresentationClassByteBuffer() : boolean;
	isRepresentationClassSerializable() : boolean;
	isRepresentationClassRemote() : boolean;
	isFlavorSerializedObjectType() : boolean;
	isFlavorRemoteObjectType() : boolean;
	isFlavorJavaFileListType() : boolean;
	isFlavorTextType() : boolean;
	normalizeMimeTypeParameter(arg1 : string, arg2 : string) : string;
	normalizeMimeType(arg1 : string) : string;
}


declare interface DataFlavor extends Externalizable, Cloneable {}

declare module DataFlavor {
	class TextFlavorComparator {
	}


	interface TextFlavorComparator extends DataTransferer.DataFlavorComparator {}}

export = DataFlavor
