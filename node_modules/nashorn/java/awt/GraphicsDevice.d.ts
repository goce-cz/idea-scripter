import Object = require('nashorn/java/lang/Object');
import GraphicsConfiguration = require('nashorn/java/awt/GraphicsConfiguration');
import Window = require('nashorn/java/awt/Window');
import DisplayMode = require('nashorn/java/awt/DisplayMode');
import GraphicsConfigTemplate = require('nashorn/java/awt/GraphicsConfigTemplate');
import Enum = require('nashorn/java/lang/Enum');

declare class GraphicsDevice extends Object {
	static TYPE_RASTER_SCREEN : number;
	static TYPE_PRINTER : number;
	static TYPE_IMAGE_BUFFER : number;
	type : number;
	iDstring : string;
	configurations : GraphicsConfiguration[];
	defaultConfiguration : GraphicsConfiguration;
	fullScreenSupported : boolean;
	fullScreenWindow : Window;
	displayChangeSupported : boolean;
	displayMode : DisplayMode;
	displayModes : DisplayMode[];
	availableAcceleratedMemory : number;
	getType() : number;
	getIDstring() : string;
	getConfigurations() : GraphicsConfiguration[];
	getDefaultConfiguration() : GraphicsConfiguration;
	getBestConfiguration(arg1 : GraphicsConfigTemplate) : GraphicsConfiguration;
	isFullScreenSupported() : boolean;
	setFullScreenWindow(arg1 : Window) : void;
	getFullScreenWindow() : Window;
	isDisplayChangeSupported() : boolean;
	setDisplayMode(arg1 : DisplayMode) : void;
	getDisplayMode() : DisplayMode;
	getDisplayModes() : DisplayMode[];
	getAvailableAcceleratedMemory() : number;
	isWindowTranslucencySupported(arg1 : GraphicsDevice.WindowTranslucency) : boolean;
	static isWindowShapingSupported() : boolean;
	static isWindowOpacitySupported() : boolean;
	isWindowPerpixelTranslucencySupported() : boolean;
	getTranslucencyCapableGC() : GraphicsConfiguration;
}


declare module GraphicsDevice {
	class WindowTranslucency {
		static PERPIXEL_TRANSPARENT : GraphicsDevice.WindowTranslucency;
		static TRANSLUCENT : GraphicsDevice.WindowTranslucency;
		static PERPIXEL_TRANSLUCENT : GraphicsDevice.WindowTranslucency;
	}


	interface WindowTranslucency extends Enum<GraphicsDevice.WindowTranslucency> {}}

export = GraphicsDevice
