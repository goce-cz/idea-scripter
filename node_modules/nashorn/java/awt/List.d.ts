import Object = require('nashorn/java/lang/Object');
import Dimension = require('nashorn/java/awt/Dimension');
import ItemListener = require('nashorn/java/awt/event/ItemListener');
import ActionListener = require('nashorn/java/awt/event/ActionListener');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import ItemEvent = require('nashorn/java/awt/event/ItemEvent');
import ActionEvent = require('nashorn/java/awt/event/ActionEvent');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Component = require('nashorn/java/awt/Component');
import ItemSelectable = require('nashorn/java/awt/ItemSelectable');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleSelection = require('nashorn/javax/accessibility/AccessibleSelection');
import Locale = require('nashorn/java/util/Locale');
import Color = require('nashorn/java/awt/Color');
import Cursor = require('nashorn/java/awt/Cursor');
import Font = require('nashorn/java/awt/Font');
import Point = require('nashorn/java/awt/Point');
import Rectangle = require('nashorn/java/awt/Rectangle');

declare class List {
	itemCount : number;
	items : string[];
	selectedIndex : number;
	selectedIndexes : number[];
	selectedItem : string;
	selectedItems : string[];
	selectedObjects : Object[];
	rows : number;
	multipleMode : boolean;
	visibleIndex : number;
	preferredSize : Dimension;
	minimumSize : Dimension;
	itemListeners : ItemListener[];
	actionListeners : ActionListener[];
	accessibleContext : AccessibleContext;
	constructor();
	constructor(arg1 : number);
	constructor(arg1 : number, arg2 : boolean);
	getItemCount() : number;
	countItems() : number;
	getItem(arg1 : number) : string;
	getItemImpl(arg1 : number) : string;
	getItems() : string[];
	add(arg1 : string) : void;
	addItem(arg1 : string) : void;
	add(arg1 : string, arg2 : number) : void;
	addItem(arg1 : string, arg2 : number) : void;
	replaceItem(arg1 : string, arg2 : number) : void;
	removeAll() : void;
	clear() : void;
	remove(arg1 : string) : void;
	remove(arg1 : number) : void;
	delItem(arg1 : number) : void;
	getSelectedIndex() : number;
	getSelectedIndexes() : number[];
	getSelectedItem() : string;
	getSelectedItems() : string[];
	select(arg1 : number) : void;
	deselect(arg1 : number) : void;
	isIndexSelected(arg1 : number) : boolean;
	isSelected(arg1 : number) : boolean;
	getRows() : number;
	isMultipleMode() : boolean;
	allowsMultipleSelections() : boolean;
	setMultipleMode(arg1 : boolean) : void;
	setMultipleSelections(arg1 : boolean) : void;
	getVisibleIndex() : number;
	makeVisible(arg1 : number) : void;
	getPreferredSize(arg1 : number) : Dimension;
	preferredSize(arg1 : number) : Dimension;
	getMinimumSize(arg1 : number) : Dimension;
	minimumSize(arg1 : number) : Dimension;
	getItemListeners() : ItemListener[];
	addActionListener(arg1 : ActionListener) : void;
	removeActionListener(arg1 : ActionListener) : void;
	getActionListeners() : ActionListener[];
	processItemEvent(arg1 : ItemEvent) : void;
	processActionEvent(arg1 : ActionEvent) : void;
	delItems(arg1 : number, arg2 : number) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface List extends Component, ItemSelectable, Accessible {}

declare module List {
	class AccessibleAWTList {
		accessibleStateSet : AccessibleStateSet;
		accessibleRole : AccessibleRole;
		accessibleChildrenCount : number;
		accessibleSelection : AccessibleSelection;
		accessibleSelectionCount : number;
		constructor();
	}


	interface AccessibleAWTList extends Component.AccessibleAWTComponent, AccessibleSelection, ItemListener, ActionListener {}

	module AccessibleAWTList {
		class AccessibleAWTListChild {
			accessibleContext : AccessibleContext;
			accessibleRole : AccessibleRole;
			accessibleStateSet : AccessibleStateSet;
			locale : Locale;
			accessibleIndexInParent : number;
			accessibleChildrenCount : number;
			background : Color;
			foreground : Color;
			cursor : Cursor;
			font : Font;
			enabled : boolean;
			visible : boolean;
			showing : boolean;
			locationOnScreen : Point;
			location : Point;
			bounds : Rectangle;
			size : Dimension;
			focusTraversable : boolean;
			constructor(arg1 : List, arg2 : number);
		}


		interface AccessibleAWTListChild extends Component.AccessibleAWTComponent, Accessible {}	}
}

export = List
