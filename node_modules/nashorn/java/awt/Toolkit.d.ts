import Object = require('nashorn/java/lang/Object');
import Dimension = require('nashorn/java/awt/Dimension');
import ColorModel = require('nashorn/java/awt/image/ColorModel');
import Clipboard = require('nashorn/java/awt/datatransfer/Clipboard');
import EventQueue = require('nashorn/java/awt/EventQueue');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import AWTEventListener = require('nashorn/java/awt/event/AWTEventListener');
import Desktop = require('nashorn/java/awt/Desktop');
import DesktopPeer = require('nashorn/java/awt/peer/DesktopPeer');
import Button = require('nashorn/java/awt/Button');
import ButtonPeer = require('nashorn/java/awt/peer/ButtonPeer');
import TextField = require('nashorn/java/awt/TextField');
import TextFieldPeer = require('nashorn/java/awt/peer/TextFieldPeer');
import Label = require('nashorn/java/awt/Label');
import LabelPeer = require('nashorn/java/awt/peer/LabelPeer');
import List = require('nashorn/java/awt/List');
import ListPeer = require('nashorn/java/awt/peer/ListPeer');
import Checkbox = require('nashorn/java/awt/Checkbox');
import CheckboxPeer = require('nashorn/java/awt/peer/CheckboxPeer');
import Scrollbar = require('nashorn/java/awt/Scrollbar');
import ScrollbarPeer = require('nashorn/java/awt/peer/ScrollbarPeer');
import ScrollPane = require('nashorn/java/awt/ScrollPane');
import ScrollPanePeer = require('nashorn/java/awt/peer/ScrollPanePeer');
import TextArea = require('nashorn/java/awt/TextArea');
import TextAreaPeer = require('nashorn/java/awt/peer/TextAreaPeer');
import Choice = require('nashorn/java/awt/Choice');
import ChoicePeer = require('nashorn/java/awt/peer/ChoicePeer');
import Frame = require('nashorn/java/awt/Frame');
import FramePeer = require('nashorn/java/awt/peer/FramePeer');
import Canvas = require('nashorn/java/awt/Canvas');
import CanvasPeer = require('nashorn/java/awt/peer/CanvasPeer');
import Panel = require('nashorn/java/awt/Panel');
import PanelPeer = require('nashorn/java/awt/peer/PanelPeer');
import Window = require('nashorn/java/awt/Window');
import WindowPeer = require('nashorn/java/awt/peer/WindowPeer');
import Dialog = require('nashorn/java/awt/Dialog');
import DialogPeer = require('nashorn/java/awt/peer/DialogPeer');
import MenuBar = require('nashorn/java/awt/MenuBar');
import MenuBarPeer = require('nashorn/java/awt/peer/MenuBarPeer');
import Menu = require('nashorn/java/awt/Menu');
import MenuPeer = require('nashorn/java/awt/peer/MenuPeer');
import PopupMenu = require('nashorn/java/awt/PopupMenu');
import PopupMenuPeer = require('nashorn/java/awt/peer/PopupMenuPeer');
import MenuItem = require('nashorn/java/awt/MenuItem');
import MenuItemPeer = require('nashorn/java/awt/peer/MenuItemPeer');
import FileDialog = require('nashorn/java/awt/FileDialog');
import FileDialogPeer = require('nashorn/java/awt/peer/FileDialogPeer');
import CheckboxMenuItem = require('nashorn/java/awt/CheckboxMenuItem');
import CheckboxMenuItemPeer = require('nashorn/java/awt/peer/CheckboxMenuItemPeer');
import MouseInfoPeer = require('nashorn/java/awt/peer/MouseInfoPeer');
import Component = require('nashorn/java/awt/Component');
import LightweightPeer = require('nashorn/java/awt/peer/LightweightPeer');
import FontPeer = require('nashorn/java/awt/peer/FontPeer');
import GraphicsConfiguration = require('nashorn/java/awt/GraphicsConfiguration');
import Insets = require('nashorn/java/awt/Insets');
import Font = require('nashorn/java/awt/Font');
import FontMetrics = require('nashorn/java/awt/FontMetrics');
import Image = require('nashorn/java/awt/Image');
import URL = require('nashorn/java/net/URL');
import ImageObserver = require('nashorn/java/awt/image/ImageObserver');
import ImageProducer = require('nashorn/java/awt/image/ImageProducer');
import Properties = require('nashorn/java/util/Properties');
import PrintJob = require('nashorn/java/awt/PrintJob');
import JobAttributes = require('nashorn/java/awt/JobAttributes');
import PageAttributes = require('nashorn/java/awt/PageAttributes');
import Container = require('nashorn/java/awt/Container');
import Point = require('nashorn/java/awt/Point');
import Cursor = require('nashorn/java/awt/Cursor');
import ResourceBundle = require('nashorn/java/util/ResourceBundle');
import DragGestureEvent = require('nashorn/java/awt/dnd/DragGestureEvent');
import DragSourceContextPeer = require('nashorn/java/awt/dnd/peer/DragSourceContextPeer');
import DragGestureRecognizer = require('nashorn/java/awt/dnd/DragGestureRecognizer');
import Class = require('nashorn/java/lang/Class');
import DragSource = require('nashorn/java/awt/dnd/DragSource');
import DragGestureListener = require('nashorn/java/awt/dnd/DragGestureListener');
import AWTEvent = require('nashorn/java/awt/AWTEvent');
import InputMethodHighlight = require('nashorn/java/awt/im/InputMethodHighlight');
import Map = require('nashorn/java/util/Map');
import TextAttribute = require('nashorn/java/awt/font/TextAttribute');
import PropertyChangeSupport = require('nashorn/java/beans/PropertyChangeSupport');
import AWTEventMulticaster = require('nashorn/java/awt/AWTEventMulticaster');

declare class Toolkit extends Object {
	dynamicLayoutActive : boolean;
	screenSize : Dimension;
	screenResolution : number;
	colorModel : ColorModel;
	fontList : string[];
	static defaultToolkit : Toolkit;
	systemClipboard : Clipboard;
	systemSelection : Clipboard;
	menuShortcutKeyMask : number;
	maximumCursorColors : number;
	systemEventQueue : EventQueue;
	propertyChangeListeners : PropertyChangeListener[];
	alwaysOnTopSupported : boolean;
	aWTEventListeners : AWTEventListener[];
	constructor();
	createDesktopPeer(arg1 : Desktop) : DesktopPeer;
	createButton(arg1 : Button) : ButtonPeer;
	createTextField(arg1 : TextField) : TextFieldPeer;
	createLabel(arg1 : Label) : LabelPeer;
	createList(arg1 : List) : ListPeer;
	createCheckbox(arg1 : Checkbox) : CheckboxPeer;
	createScrollbar(arg1 : Scrollbar) : ScrollbarPeer;
	createScrollPane(arg1 : ScrollPane) : ScrollPanePeer;
	createTextArea(arg1 : TextArea) : TextAreaPeer;
	createChoice(arg1 : Choice) : ChoicePeer;
	createFrame(arg1 : Frame) : FramePeer;
	createCanvas(arg1 : Canvas) : CanvasPeer;
	createPanel(arg1 : Panel) : PanelPeer;
	createWindow(arg1 : Window) : WindowPeer;
	createDialog(arg1 : Dialog) : DialogPeer;
	createMenuBar(arg1 : MenuBar) : MenuBarPeer;
	createMenu(arg1 : Menu) : MenuPeer;
	createPopupMenu(arg1 : PopupMenu) : PopupMenuPeer;
	createMenuItem(arg1 : MenuItem) : MenuItemPeer;
	createFileDialog(arg1 : FileDialog) : FileDialogPeer;
	createCheckboxMenuItem(arg1 : CheckboxMenuItem) : CheckboxMenuItemPeer;
	getMouseInfoPeer() : MouseInfoPeer;
	createComponent(arg1 : Component) : LightweightPeer;
	getFontPeer(arg1 : string, arg2 : number) : FontPeer;
	loadSystemColors(arg1 : number[]) : void;
	setDynamicLayout(arg1 : boolean) : void;
	isDynamicLayoutSet() : boolean;
	isDynamicLayoutActive() : boolean;
	getScreenSize() : Dimension;
	getScreenResolution() : number;
	getScreenInsets(arg1 : GraphicsConfiguration) : Insets;
	getColorModel() : ColorModel;
	getFontList() : string[];
	getFontMetrics(arg1 : Font) : FontMetrics;
	sync() : void;
	static initAssistiveTechnologies() : void;
	static loadAssistiveTechnologies() : void;
	static getDefaultToolkit() : Toolkit;
	getImage(arg1 : string) : Image;
	getImage(arg1 : URL) : Image;
	createImage(arg1 : string) : Image;
	createImage(arg1 : URL) : Image;
	prepareImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : ImageObserver) : boolean;
	checkImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : ImageObserver) : number;
	createImage(arg1 : ImageProducer) : Image;
	createImage(arg1 : number[]) : Image;
	createImage(arg1 : number[], arg2 : number, arg3 : number) : Image;
	getPrintJob(arg1 : Frame, arg2 : string, arg3 : Properties) : PrintJob;
	getPrintJob(arg1 : Frame, arg2 : string, arg3 : JobAttributes, arg4 : PageAttributes) : PrintJob;
	beep() : void;
	getSystemClipboard() : Clipboard;
	getSystemSelection() : Clipboard;
	getMenuShortcutKeyMask() : number;
	getLockingKeyState(arg1 : number) : boolean;
	setLockingKeyState(arg1 : number, arg2 : boolean) : void;
	static getNativeContainer(arg1 : Component) : Container;
	createCustomCursor(arg1 : Image, arg2 : Point, arg3 : string) : Cursor;
	getBestCursorSize(arg1 : number, arg2 : number) : Dimension;
	getMaximumCursorColors() : number;
	isFrameStateSupported(arg1 : number) : boolean;
	static setPlatformResources(arg1 : ResourceBundle) : void;
	static initIDs() : void;
	static loadLibraries() : void;
	static getProperty(arg1 : string, arg2 : string) : string;
	getSystemEventQueue() : EventQueue;
	getSystemEventQueueImpl() : EventQueue;
	static getEventQueue() : EventQueue;
	createDragSourceContextPeer(arg1 : DragGestureEvent) : DragSourceContextPeer;
	createDragGestureRecognizer<T extends DragGestureRecognizer>(arg1 : Class<T>, arg2 : DragSource, arg3 : Component, arg4 : number, arg5 : DragGestureListener) : T;
	getDesktopProperty(arg1 : string) : Object;
	setDesktopProperty(arg1 : string, arg2 : Object) : void;
	lazilyLoadDesktopProperty(arg1 : string) : Object;
	initializeDesktopProperties() : void;
	addPropertyChangeListener(arg1 : string, arg2 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : string, arg2 : PropertyChangeListener) : void;
	getPropertyChangeListeners() : PropertyChangeListener[];
	getPropertyChangeListeners(arg1 : string) : PropertyChangeListener[];
	isAlwaysOnTopSupported() : boolean;
	isModalityTypeSupported(arg1 : Dialog.ModalityType) : boolean;
	isModalExclusionTypeSupported(arg1 : Dialog.ModalExclusionType) : boolean;
	static deProxyAWTEventListener(arg1 : AWTEventListener) : AWTEventListener;
	addAWTEventListener(arg1 : AWTEventListener, arg2 : number) : void;
	removeAWTEventListener(arg1 : AWTEventListener) : void;
	static enabledOnToolkit(arg1 : number) : boolean;
	countAWTEventListeners(arg1 : number) : number;
	getAWTEventListeners() : AWTEventListener[];
	getAWTEventListeners(arg1 : number) : AWTEventListener[];
	notifyAWTEventListeners(arg1 : AWTEvent) : void;
	mapInputMethodHighlight(arg1 : InputMethodHighlight) : Map<TextAttribute, any>;
	static createPropertyChangeSupport(arg1 : Toolkit) : PropertyChangeSupport;
	areExtraMouseButtonsEnabled() : boolean;
}


declare module Toolkit {
	class DesktopPropertyChangeSupport {
		propertyChangeListeners : PropertyChangeListener[];
		constructor(arg1 : Object);
	}


	interface DesktopPropertyChangeSupport extends PropertyChangeSupport {}	class SelectiveAWTEventListener {
		listener : AWTEventListener;
		eventMask : number;
		calls : number[];
		getListener() : AWTEventListener;
		getEventMask() : number;
		getCalls() : number[];
		orEventMasks(arg1 : number) : void;
	}


	interface SelectiveAWTEventListener extends AWTEventListener {}	class ToolkitEventMulticaster {
		static add(arg1 : AWTEventListener, arg2 : AWTEventListener) : AWTEventListener;
		static remove(arg1 : AWTEventListener, arg2 : AWTEventListener) : AWTEventListener;
	}


	interface ToolkitEventMulticaster extends AWTEventMulticaster, AWTEventListener {}}

export = Toolkit
