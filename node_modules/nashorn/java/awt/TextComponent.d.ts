import InputMethodRequests = require('nashorn/java/awt/im/InputMethodRequests');
import Color = require('nashorn/java/awt/Color');
import TextListener = require('nashorn/java/awt/event/TextListener');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import TextEvent = require('nashorn/java/awt/event/TextEvent');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Component = require('nashorn/java/awt/Component');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleText = require('nashorn/javax/accessibility/AccessibleText');
import BreakIterator = require('nashorn/java/text/BreakIterator');

declare class TextComponent {
	inputMethodRequests : InputMethodRequests;
	text : string;
	selectedText : string;
	editable : boolean;
	background : Color;
	selectionStart : number;
	selectionEnd : number;
	caretPosition : number;
	textListeners : TextListener[];
	accessibleContext : AccessibleContext;
	enableInputMethodsIfNecessary() : void;
	setText(arg1 : string) : void;
	getText() : string;
	getSelectedText() : string;
	isEditable() : boolean;
	setEditable(arg1 : boolean) : void;
	getSelectionStart() : number;
	setSelectionStart(arg1 : number) : void;
	getSelectionEnd() : number;
	setSelectionEnd(arg1 : number) : void;
	select(arg1 : number, arg2 : number) : void;
	selectAll() : void;
	setCaretPosition(arg1 : number) : void;
	getCaretPosition() : number;
	addTextListener(arg1 : TextListener) : void;
	removeTextListener(arg1 : TextListener) : void;
	getTextListeners() : TextListener[];
	processTextEvent(arg1 : TextEvent) : void;
	canAccessClipboard() : boolean;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface TextComponent extends Component, Accessible {}

declare module TextComponent {
	class AccessibleAWTTextComponent {
		accessibleStateSet : AccessibleStateSet;
		accessibleRole : AccessibleRole;
		accessibleText : AccessibleText;
		charCount : number;
		caretPosition : number;
		selectionStart : number;
		selectionEnd : number;
		selectedText : string;
		constructor();
		findWordLimit(arg1 : number, arg2 : BreakIterator, arg3 : boolean, arg4 : string) : number;
	}


	interface AccessibleAWTTextComponent extends Component.AccessibleAWTComponent, AccessibleText, TextListener {}}

export = TextComponent
