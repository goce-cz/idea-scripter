import Component = require('nashorn/java/awt/Component');
import Insets = require('nashorn/java/awt/Insets');
import LayoutManager = require('nashorn/java/awt/LayoutManager');
import Dimension = require('nashorn/java/awt/Dimension');
import ContainerListener = require('nashorn/java/awt/event/ContainerListener');
import FocusTraversalPolicy = require('nashorn/java/awt/FocusTraversalPolicy');
import ContainerPeer = require('nashorn/java/awt/peer/ContainerPeer');
import Object = require('nashorn/java/lang/Object');
import Graphics = require('nashorn/java/awt/Graphics');
import ContainerEvent = require('nashorn/java/awt/event/ContainerEvent');
import AWTEvent = require('nashorn/java/awt/AWTEvent');
import Point = require('nashorn/java/awt/Point');
import KeyEvent = require('nashorn/java/awt/event/KeyEvent');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import Region = require('nashorn/sun/java2d/pipe/Region');
import Runnable = require('nashorn/java/lang/Runnable');

declare class Container {
	componentCount : number;
	components : Component[];
	insets : Insets;
	layout : LayoutManager;
	validateRoot : boolean;
	preferredSize : Dimension;
	minimumSize : Dimension;
	maximumSize : Dimension;
	alignmentX : number;
	alignmentY : number;
	containerListeners : ContainerListener[];
	focusTraversalPolicy : FocusTraversalPolicy;
	focusTraversalPolicySet : boolean;
	focusCycleRoot : boolean;
	focusTraversalPolicyProvider : boolean;
	constructor();
	static initIDs() : void;
	getComponentCount() : number;
	countComponents() : number;
	getComponent(arg1 : number) : Component;
	getComponents() : Component[];
	getComponents_NoClientCode() : Component[];
	getComponentsSync() : Component[];
	getInsets() : Insets;
	insets() : Insets;
	add(arg1 : Component) : Component;
	add(arg1 : string, arg2 : Component) : Component;
	add(arg1 : Component, arg2 : number) : Component;
	checkAddToSelf(arg1 : Component) : void;
	checkNotAWindow(arg1 : Component) : void;
	checkAdding(arg1 : Component, arg2 : number) : void;
	removeDelicately(arg1 : Component, arg2 : Container, arg3 : number) : boolean;
	canContainFocusOwner(arg1 : Component) : boolean;
	hasHeavyweightDescendants() : boolean;
	hasLightweightDescendants() : boolean;
	getHeavyweightContainer() : Container;
	static isRemoveNotifyNeeded(arg1 : Component, arg2 : Container, arg3 : Container) : boolean;
	setComponentZOrder(arg1 : Component, arg2 : number) : void;
	reparentTraverse(arg1 : ContainerPeer, arg2 : Container) : void;
	reparentChild(arg1 : Component) : void;
	addDelicately(arg1 : Component, arg2 : Container, arg3 : number) : void;
	getComponentZOrder(arg1 : Component) : number;
	add(arg1 : Component, arg2 : Object) : void;
	add(arg1 : Component, arg2 : Object, arg3 : number) : void;
	addImpl(arg1 : Component, arg2 : Object, arg3 : number) : void;
	remove(arg1 : number) : void;
	remove(arg1 : Component) : void;
	removeAll() : void;
	adjustListeningChildren(arg1 : number, arg2 : number) : void;
	adjustDescendants(arg1 : number) : void;
	adjustDecendantsOnParent(arg1 : number) : void;
	getListenersCount(arg1 : number, arg2 : boolean) : number;
	createChildHierarchyEvents(arg1 : number, arg2 : number, arg3 : boolean) : void;
	getLayout() : LayoutManager;
	setLayout(arg1 : LayoutManager) : void;
	isValidateRoot() : boolean;
	validateUnconditionally() : void;
	validateTree() : void;
	invalidateTree() : void;
	paintComponents(arg1 : Graphics) : void;
	printComponents(arg1 : Graphics) : void;
	addContainerListener(arg1 : ContainerListener) : void;
	removeContainerListener(arg1 : ContainerListener) : void;
	getContainerListeners() : ContainerListener[];
	processContainerEvent(arg1 : ContainerEvent) : void;
	dispatchEventToSelf(arg1 : AWTEvent) : void;
	getMouseEventTarget(arg1 : number, arg2 : number, arg3 : boolean) : Component;
	getDropTargetEventTarget(arg1 : number, arg2 : number, arg3 : boolean) : Component;
	getMouseEventTarget(arg1 : number, arg2 : number, arg3 : boolean, arg4 : Container.EventTargetFilter, arg5 : boolean) : Component;
	getMouseEventTargetImpl(arg1 : number, arg2 : number, arg3 : boolean, arg4 : Container.EventTargetFilter, arg5 : boolean, arg6 : boolean) : Component;
	proxyEnableEvents(arg1 : number) : void;
	getMousePosition(arg1 : boolean) : Point;
	findComponentAt(arg1 : number, arg2 : number) : Component;
	findComponentAt(arg1 : number, arg2 : number, arg3 : boolean) : Component;
	findComponentAtImpl(arg1 : number, arg2 : number, arg3 : boolean) : Component;
	findComponentAt(arg1 : Point) : Component;
	isAncestorOf(arg1 : Component) : boolean;
	startLWModal() : void;
	stopLWModal() : void;
	findTraversalRoot() : Container;
	isParentOf(arg1 : Component) : boolean;
	setFocusTraversalPolicy(arg1 : FocusTraversalPolicy) : void;
	getFocusTraversalPolicy() : FocusTraversalPolicy;
	isFocusTraversalPolicySet() : boolean;
	setFocusCycleRoot(arg1 : boolean) : void;
	isFocusCycleRoot() : boolean;
	setFocusTraversalPolicyProvider(arg1 : boolean) : void;
	isFocusTraversalPolicyProvider() : boolean;
	transferFocusDownCycle() : void;
	preProcessKeyEvent(arg1 : KeyEvent) : void;
	postProcessKeyEvent(arg1 : KeyEvent) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	getAccessibleAt(arg1 : Point) : Accessible;
	getAccessibleChildrenCount() : number;
	getAccessibleChild(arg1 : number) : Accessible;
	increaseComponentCount(arg1 : Component) : void;
	decreaseComponentCount(arg1 : Component) : void;
	getTopmostComponentIndex() : number;
	getBottommostComponentIndex() : number;
	recursiveSubtractAndApplyShape(arg1 : Region) : void;
	recursiveSubtractAndApplyShape(arg1 : Region, arg2 : number) : void;
	recursiveSubtractAndApplyShape(arg1 : Region, arg2 : number, arg3 : number) : void;
	recursiveApplyCurrentShape() : void;
	recursiveApplyCurrentShape(arg1 : number) : void;
	recursiveApplyCurrentShape(arg1 : number, arg2 : number) : void;
	recursiveShowHeavyweightChildren() : void;
	recursiveHideHeavyweightChildren() : void;
	recursiveRelocateHeavyweightChildren(arg1 : Point) : void;
	isRecursivelyVisibleUpToHeavyweightContainer() : boolean;
}


declare interface Container extends Component {}

declare module Container {
	class AccessibleAWTContainer {
		accessibleChildrenCount : number;
	}


	interface AccessibleAWTContainer extends Component.AccessibleAWTComponent {}

	module AccessibleAWTContainer {
		class AccessibleContainerHandler {
		}


		interface AccessibleContainerHandler extends ContainerListener {}	}
	class DropTargetEventTargetFilter {
	}


	interface DropTargetEventTargetFilter extends Container.EventTargetFilter {}	class EventTargetFilter extends Object {
		accept(arg1 : Component) : boolean;
	}
	class MouseEventTargetFilter {
	}


	interface MouseEventTargetFilter extends Container.EventTargetFilter {}	class WakingRunnable {
	}


	interface WakingRunnable extends Runnable {}}

export = Container
