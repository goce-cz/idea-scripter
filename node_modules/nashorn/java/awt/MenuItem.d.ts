import MenuShortcut = require('nashorn/java/awt/MenuShortcut');
import ActionListener = require('nashorn/java/awt/event/ActionListener');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import KeyEvent = require('nashorn/java/awt/event/KeyEvent');
import EventListener = require('nashorn/java/util/EventListener');
import Class = require('nashorn/java/lang/Class');
import ActionEvent = require('nashorn/java/awt/event/ActionEvent');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import MenuComponent = require('nashorn/java/awt/MenuComponent');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleAction = require('nashorn/javax/accessibility/AccessibleAction');
import AccessibleValue = require('nashorn/javax/accessibility/AccessibleValue');

declare class MenuItem {
	label : string;
	enabled : boolean;
	shortcut : MenuShortcut;
	actionCommand : string;
	actionListeners : ActionListener[];
	accessibleContext : AccessibleContext;
	constructor();
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : MenuShortcut);
	addNotify() : void;
	getLabel() : string;
	setLabel(arg1 : string) : void;
	isEnabled() : boolean;
	setEnabled(arg1 : boolean) : void;
	enable() : void;
	enable(arg1 : boolean) : void;
	disable() : void;
	getShortcut() : MenuShortcut;
	setShortcut(arg1 : MenuShortcut) : void;
	deleteShortcut() : void;
	deleteShortcut(arg1 : MenuShortcut) : void;
	doMenuEvent(arg1 : number, arg2 : number) : void;
	isItemEnabled() : boolean;
	handleShortcut(arg1 : KeyEvent) : boolean;
	getShortcutMenuItem(arg1 : MenuShortcut) : MenuItem;
	enableEvents(arg1 : number) : void;
	disableEvents(arg1 : number) : void;
	setActionCommand(arg1 : string) : void;
	getActionCommand() : string;
	getActionCommandImpl() : string;
	addActionListener(arg1 : ActionListener) : void;
	removeActionListener(arg1 : ActionListener) : void;
	getActionListeners() : ActionListener[];
	getListeners<T extends EventListener>(arg1 : Class<T>) : T[];
	processActionEvent(arg1 : ActionEvent) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	static initIDs() : void;
}


declare interface MenuItem extends MenuComponent, Accessible {}

declare module MenuItem {
	class AccessibleAWTMenuItem {
		accessibleName : string;
		accessibleRole : AccessibleRole;
		accessibleAction : AccessibleAction;
		accessibleValue : AccessibleValue;
		accessibleActionCount : number;
		currentAccessibleValue : number;
		minimumAccessibleValue : number;
		maximumAccessibleValue : number;
	}


	interface AccessibleAWTMenuItem extends MenuComponent.AccessibleAWTMenuComponent, AccessibleAction, AccessibleValue {}}

export = MenuItem
