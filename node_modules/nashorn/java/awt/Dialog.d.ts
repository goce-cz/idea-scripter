import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import Frame = require('nashorn/java/awt/Frame');
import GraphicsConfiguration = require('nashorn/java/awt/GraphicsConfiguration');
import Window = require('nashorn/java/awt/Window');
import Component = require('nashorn/java/awt/Component');
import List = require('nashorn/java/util/List');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import Enum = require('nashorn/java/lang/Enum');

declare class Dialog {
	static DEFAULT_MODALITY_TYPE : Dialog.ModalityType;
	modal : boolean;
	modalityType : Dialog.ModalityType;
	title : string;
	resizable : boolean;
	undecorated : boolean;
	accessibleContext : AccessibleContext;
	constructor(arg1 : Frame);
	constructor(arg1 : Frame, arg2 : boolean);
	constructor(arg1 : Frame, arg2 : string);
	constructor(arg1 : Frame, arg2 : string, arg3 : boolean);
	constructor(arg1 : Frame, arg2 : string, arg3 : boolean, arg4 : GraphicsConfiguration);
	constructor(arg1 : Dialog);
	constructor(arg1 : Dialog, arg2 : string);
	constructor(arg1 : Dialog, arg2 : string, arg3 : boolean);
	constructor(arg1 : Dialog, arg2 : string, arg3 : boolean, arg4 : GraphicsConfiguration);
	constructor(arg1 : Window);
	constructor(arg1 : Window, arg2 : string);
	constructor(arg1 : Window, arg2 : Dialog.ModalityType);
	constructor(arg1 : Window, arg2 : string, arg3 : Dialog.ModalityType);
	constructor(arg1 : Window, arg2 : string, arg3 : Dialog.ModalityType, arg4 : GraphicsConfiguration);
	isModal() : boolean;
	isModal_NoClientCode() : boolean;
	setModal(arg1 : boolean) : void;
	getModalityType() : Dialog.ModalityType;
	setModalityType(arg1 : Dialog.ModalityType) : void;
	getTitle() : string;
	setTitle(arg1 : string) : void;
	conditionalShow(arg1 : Component, arg2 : number) : boolean;
	modalityPushed() : void;
	modalityPopped() : void;
	interruptBlocking() : void;
	hideAndDisposePreHandler() : void;
	hideAndDisposeHandler() : void;
	isResizable() : boolean;
	setResizable(arg1 : boolean) : void;
	setUndecorated(arg1 : boolean) : void;
	isUndecorated() : boolean;
	static initIDs() : void;
	modalShow() : void;
	modalHide() : void;
	shouldBlock(arg1 : Window) : boolean;
	blockWindow(arg1 : Window) : void;
	blockWindows(arg1 : List<Window>) : void;
	unblockWindow(arg1 : Window) : void;
	static checkShouldBeBlocked(arg1 : Window) : void;
	checkModalityPermission(arg1 : Dialog.ModalityType) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface Dialog extends Window {}

declare module Dialog {
	class AccessibleAWTDialog {
		accessibleRole : AccessibleRole;
		accessibleStateSet : AccessibleStateSet;
	}


	interface AccessibleAWTDialog extends Window.AccessibleAWTWindow {}	class ModalExclusionType {
		static NO_EXCLUDE : Dialog.ModalExclusionType;
		static APPLICATION_EXCLUDE : Dialog.ModalExclusionType;
		static TOOLKIT_EXCLUDE : Dialog.ModalExclusionType;
	}


	interface ModalExclusionType extends Enum<Dialog.ModalExclusionType> {}	class ModalityType {
		static MODELESS : Dialog.ModalityType;
		static DOCUMENT_MODAL : Dialog.ModalityType;
		static APPLICATION_MODAL : Dialog.ModalityType;
		static TOOLKIT_MODAL : Dialog.ModalityType;
	}


	interface ModalityType extends Enum<Dialog.ModalityType> {}}

export = Dialog
