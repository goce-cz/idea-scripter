import Event = require('nashorn/java/awt/Event');
import Object = require('nashorn/java/lang/Object');
import AccessControlContext = require('nashorn/java/security/AccessControlContext');
import Field = require('nashorn/java/lang/reflect/Field');
import ComponentPeer = require('nashorn/java/awt/peer/ComponentPeer');
import EventObject = require('nashorn/java/util/EventObject');

declare class AWTEvent {
	static COMPONENT_EVENT_MASK : number;
	static CONTAINER_EVENT_MASK : number;
	static FOCUS_EVENT_MASK : number;
	static KEY_EVENT_MASK : number;
	static MOUSE_EVENT_MASK : number;
	static MOUSE_MOTION_EVENT_MASK : number;
	static WINDOW_EVENT_MASK : number;
	static ACTION_EVENT_MASK : number;
	static ADJUSTMENT_EVENT_MASK : number;
	static ITEM_EVENT_MASK : number;
	static TEXT_EVENT_MASK : number;
	static INPUT_METHOD_EVENT_MASK : number;
	static PAINT_EVENT_MASK : number;
	static INVOCATION_EVENT_MASK : number;
	static HIERARCHY_EVENT_MASK : number;
	static HIERARCHY_BOUNDS_EVENT_MASK : number;
	static MOUSE_WHEEL_EVENT_MASK : number;
	static WINDOW_STATE_EVENT_MASK : number;
	static WINDOW_FOCUS_EVENT_MASK : number;
	static RESERVED_ID_MAX : number;
	iD : number;
	constructor(arg1 : Event);
	constructor(arg1 : Object, arg2 : number);
	getAccessControlContext() : AccessControlContext;
	static get_InputEvent_CanAccessSystemClipboard() : Field;
	static initIDs() : void;
	setSource(arg1 : Object) : void;
	nativeSetSource(arg1 : ComponentPeer) : void;
	getID() : number;
	paramString() : string;
	consume() : void;
	isConsumed() : boolean;
	convertToOld() : Event;
	copyPrivateDataInto(arg1 : AWTEvent) : void;
	dispatched() : void;
}


declare interface AWTEvent extends EventObject {}
export = AWTEvent
