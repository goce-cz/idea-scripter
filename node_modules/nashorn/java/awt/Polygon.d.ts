import Rectangle = require('nashorn/java/awt/Rectangle');
import Rectangle2D = require('nashorn/java/awt/geom/Rectangle2D');
import Point = require('nashorn/java/awt/Point');
import Crossings = require('nashorn/sun/awt/geom/Crossings');
import Shape = require('nashorn/java/awt/Shape');
import Serializable = require('nashorn/java/io/Serializable');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import PathIterator = require('nashorn/java/awt/geom/PathIterator');

declare class Polygon {
	npoints : number;
	xpoints : number[];
	ypoints : number[];
	bounds : Rectangle;
	boundingBox : Rectangle;
	bounds2D : Rectangle2D;
	constructor();
	constructor(arg1 : number[], arg2 : number[], arg3 : number);
	reset() : void;
	invalidate() : void;
	translate(arg1 : number, arg2 : number) : void;
	calculateBounds(arg1 : number[], arg2 : number[], arg3 : number) : void;
	updateBounds(arg1 : number, arg2 : number) : void;
	addPoint(arg1 : number, arg2 : number) : void;
	getBoundingBox() : Rectangle;
	contains(arg1 : Point) : boolean;
	contains(arg1 : number, arg2 : number) : boolean;
	inside(arg1 : number, arg2 : number) : boolean;
	getCrossings(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Crossings;
}


declare interface Polygon extends Shape, Serializable {}

declare module Polygon {
	class PolygonPathIterator {
		windingRule : number;
		done : boolean;
		constructor(arg1 : Polygon, arg2 : AffineTransform);
	}


	interface PolygonPathIterator extends PathIterator {}}

export = Polygon
