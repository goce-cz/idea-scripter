import Container = require('nashorn/java/awt/Container');
import ComponentPeer = require('nashorn/java/awt/peer/ComponentPeer');
import DropTarget = require('nashorn/java/awt/dnd/DropTarget');
import GraphicsConfiguration = require('nashorn/java/awt/GraphicsConfiguration');
import Object = require('nashorn/java/lang/Object');
import Toolkit = require('nashorn/java/awt/Toolkit');
import Point = require('nashorn/java/awt/Point');
import Color = require('nashorn/java/awt/Color');
import Font = require('nashorn/java/awt/Font');
import Locale = require('nashorn/java/util/Locale');
import ColorModel = require('nashorn/java/awt/image/ColorModel');
import Dimension = require('nashorn/java/awt/Dimension');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Graphics = require('nashorn/java/awt/Graphics');
import Cursor = require('nashorn/java/awt/Cursor');
import ComponentListener = require('nashorn/java/awt/event/ComponentListener');
import FocusListener = require('nashorn/java/awt/event/FocusListener');
import HierarchyListener = require('nashorn/java/awt/event/HierarchyListener');
import HierarchyBoundsListener = require('nashorn/java/awt/event/HierarchyBoundsListener');
import KeyListener = require('nashorn/java/awt/event/KeyListener');
import MouseListener = require('nashorn/java/awt/event/MouseListener');
import MouseMotionListener = require('nashorn/java/awt/event/MouseMotionListener');
import MouseWheelListener = require('nashorn/java/awt/event/MouseWheelListener');
import InputMethodListener = require('nashorn/java/awt/event/InputMethodListener');
import InputMethodRequests = require('nashorn/java/awt/im/InputMethodRequests');
import InputContext = require('nashorn/java/awt/im/InputContext');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import ComponentOrientation = require('nashorn/java/awt/ComponentOrientation');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import AccessControlContext = require('nashorn/java/security/AccessControlContext');
import PointerInfo = require('nashorn/java/awt/PointerInfo');
import FontMetrics = require('nashorn/java/awt/FontMetrics');
import Insets = require('nashorn/java/awt/Insets');
import ImageProducer = require('nashorn/java/awt/image/ImageProducer');
import Image = require('nashorn/java/awt/Image');
import VolatileImage = require('nashorn/java/awt/image/VolatileImage');
import ImageCapabilities = require('nashorn/java/awt/ImageCapabilities');
import ImageObserver = require('nashorn/java/awt/image/ImageObserver');
import BufferCapabilities = require('nashorn/java/awt/BufferCapabilities');
import BufferStrategy = require('nashorn/java/awt/image/BufferStrategy');
import Event = require('nashorn/java/awt/Event');
import AWTEvent = require('nashorn/java/awt/AWTEvent');
import MouseWheelEvent = require('nashorn/java/awt/event/MouseWheelEvent');
import EventListener = require('nashorn/java/util/EventListener');
import Class = require('nashorn/java/lang/Class');
import ComponentEvent = require('nashorn/java/awt/event/ComponentEvent');
import FocusEvent = require('nashorn/java/awt/event/FocusEvent');
import KeyEvent = require('nashorn/java/awt/event/KeyEvent');
import MouseEvent = require('nashorn/java/awt/event/MouseEvent');
import InputMethodEvent = require('nashorn/java/awt/event/InputMethodEvent');
import HierarchyEvent = require('nashorn/java/awt/event/HierarchyEvent');
import Set = require('nashorn/java/util/Set');
import AWTKeyStroke = require('nashorn/java/awt/AWTKeyStroke');
import CausedFocusEvent = require('nashorn/sun/awt/CausedFocusEvent');
import RequestFocusController = require('nashorn/sun/awt/RequestFocusController');
import PopupMenu = require('nashorn/java/awt/PopupMenu');
import PrintStream = require('nashorn/java/io/PrintStream');
import PrintWriter = require('nashorn/java/io/PrintWriter');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Window = require('nashorn/java/awt/Window');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import Region = require('nashorn/sun/java2d/pipe/Region');
import MenuContainer = require('nashorn/java/awt/MenuContainer');
import Serializable = require('nashorn/java/io/Serializable');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import AccessibleComponent = require('nashorn/javax/accessibility/AccessibleComponent');
import Enum = require('nashorn/java/lang/Enum');
import SubRegionShowable = require('nashorn/sun/awt/SubRegionShowable');
import ExtendedBufferCapabilities = require('nashorn/sun/java2d/pipe/hw/ExtendedBufferCapabilities');

declare class Component {
	static TOP_ALIGNMENT : number;
	static CENTER_ALIGNMENT : number;
	static BOTTOM_ALIGNMENT : number;
	static LEFT_ALIGNMENT : number;
	static RIGHT_ALIGNMENT : number;
	name : string;
	parent : Container;
	peer : ComponentPeer;
	dropTarget : DropTarget;
	graphicsConfiguration : GraphicsConfiguration;
	treeLock : Object;
	toolkit : Toolkit;
	valid : boolean;
	displayable : boolean;
	visible : boolean;
	mousePosition : Point;
	showing : boolean;
	enabled : boolean;
	doubleBuffered : boolean;
	foreground : Color;
	foregroundSet : boolean;
	background : Color;
	backgroundSet : boolean;
	font : Font;
	fontSet : boolean;
	locale : Locale;
	colorModel : ColorModel;
	location : Point;
	locationOnScreen : Point;
	size : Dimension;
	bounds : Rectangle;
	x : number;
	y : number;
	width : number;
	height : number;
	opaque : boolean;
	lightweight : boolean;
	preferredSizeSet : boolean;
	preferredSize : Dimension;
	minimumSizeSet : boolean;
	minimumSize : Dimension;
	maximumSizeSet : boolean;
	maximumSize : Dimension;
	alignmentX : number;
	alignmentY : number;
	baselineResizeBehavior : Component.BaselineResizeBehavior;
	graphics : Graphics;
	cursor : Cursor;
	cursorSet : boolean;
	ignoreRepaint : boolean;
	componentListeners : ComponentListener[];
	focusListeners : FocusListener[];
	hierarchyListeners : HierarchyListener[];
	hierarchyBoundsListeners : HierarchyBoundsListener[];
	keyListeners : KeyListener[];
	mouseListeners : MouseListener[];
	mouseMotionListeners : MouseMotionListener[];
	mouseWheelListeners : MouseWheelListener[];
	inputMethodListeners : InputMethodListener[];
	inputMethodRequests : InputMethodRequests;
	inputContext : InputContext;
	focusTraversable : boolean;
	focusable : boolean;
	focusTraversalKeysEnabled : boolean;
	focusCycleRootAncestor : Container;
	focusOwner : boolean;
	propertyChangeListeners : PropertyChangeListener[];
	componentOrientation : ComponentOrientation;
	accessibleContext : AccessibleContext;
	getObjectLock() : Object;
	getAccessControlContext() : AccessControlContext;
	getBoundsOp() : number;
	setBoundsOp(arg1 : number) : void;
	initializeFocusTraversalKeys() : void;
	constructComponentName() : string;
	getName() : string;
	setName(arg1 : string) : void;
	getParent() : Container;
	getParent_NoClientCode() : Container;
	getContainer() : Container;
	getPeer() : ComponentPeer;
	setDropTarget(arg1 : DropTarget) : void;
	getDropTarget() : DropTarget;
	getGraphicsConfiguration() : GraphicsConfiguration;
	getGraphicsConfiguration_NoClientCode() : GraphicsConfiguration;
	setGraphicsConfiguration(arg1 : GraphicsConfiguration) : void;
	updateGraphicsData(arg1 : GraphicsConfiguration) : boolean;
	checkGD(arg1 : string) : void;
	getTreeLock() : Object;
	checkTreeLock() : void;
	getToolkit() : Toolkit;
	getToolkitImpl() : Toolkit;
	isValid() : boolean;
	isDisplayable() : boolean;
	isVisible() : boolean;
	isVisible_NoClientCode() : boolean;
	isRecursivelyVisible() : boolean;
	pointRelativeToComponent(arg1 : Point) : Point;
	findUnderMouseInWindow(arg1 : PointerInfo) : Component;
	getMousePosition() : Point;
	isSameOrAncestorOf(arg1 : Component, arg2 : boolean) : boolean;
	isShowing() : boolean;
	isEnabled() : boolean;
	isEnabledImpl() : boolean;
	setEnabled(arg1 : boolean) : void;
	enable() : void;
	enable(arg1 : boolean) : void;
	disable() : void;
	isDoubleBuffered() : boolean;
	enableInputMethods(arg1 : boolean) : void;
	setVisible(arg1 : boolean) : void;
	show() : void;
	show(arg1 : boolean) : void;
	containsFocus() : boolean;
	clearMostRecentFocusOwnerOnHide() : void;
	clearCurrentFocusCycleRootOnHide() : void;
	clearLightweightDispatcherOnRemove(arg1 : Component) : void;
	hide() : void;
	getForeground() : Color;
	setForeground(arg1 : Color) : void;
	isForegroundSet() : boolean;
	getBackground() : Color;
	setBackground(arg1 : Color) : void;
	isBackgroundSet() : boolean;
	getFont_NoClientCode() : Font;
	setFont(arg1 : Font) : void;
	isFontSet() : boolean;
	getLocale() : Locale;
	setLocale(arg1 : Locale) : void;
	getColorModel() : ColorModel;
	getLocation() : Point;
	getLocationOnScreen() : Point;
	getLocationOnScreen_NoTreeLock() : Point;
	location() : Point;
	location_NoClientCode() : Point;
	setLocation(arg1 : number, arg2 : number) : void;
	move(arg1 : number, arg2 : number) : void;
	setLocation(arg1 : Point) : void;
	getSize() : Dimension;
	size() : Dimension;
	setSize(arg1 : number, arg2 : number) : void;
	resize(arg1 : number, arg2 : number) : void;
	setSize(arg1 : Dimension) : void;
	resize(arg1 : Dimension) : void;
	getBounds() : Rectangle;
	bounds() : Rectangle;
	setBounds(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	reshape(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	repaintParentIfNeeded(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	reshapeNativePeer(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number) : void;
	notifyNewBounds(arg1 : boolean, arg2 : boolean) : void;
	setBounds(arg1 : Rectangle) : void;
	getX() : number;
	getY() : number;
	getWidth() : number;
	getHeight() : number;
	getBounds(arg1 : Rectangle) : Rectangle;
	getSize(arg1 : Dimension) : Dimension;
	getLocation(arg1 : Point) : Point;
	isOpaque() : boolean;
	isLightweight() : boolean;
	setPreferredSize(arg1 : Dimension) : void;
	isPreferredSizeSet() : boolean;
	getPreferredSize() : Dimension;
	preferredSize() : Dimension;
	setMinimumSize(arg1 : Dimension) : void;
	isMinimumSizeSet() : boolean;
	getMinimumSize() : Dimension;
	minimumSize() : Dimension;
	setMaximumSize(arg1 : Dimension) : void;
	isMaximumSizeSet() : boolean;
	getMaximumSize() : Dimension;
	getAlignmentX() : number;
	getAlignmentY() : number;
	getBaseline(arg1 : number, arg2 : number) : number;
	getBaselineResizeBehavior() : Component.BaselineResizeBehavior;
	doLayout() : void;
	layout() : void;
	validate() : void;
	invalidate() : void;
	invalidateParent() : void;
	invalidateIfValid() : void;
	revalidate() : void;
	revalidateSynchronously() : void;
	getGraphics() : Graphics;
	getGraphics_NoClientCode() : Graphics;
	getFontMetrics(arg1 : Font) : FontMetrics;
	setCursor(arg1 : Cursor) : void;
	updateCursorImmediately() : void;
	getCursor() : Cursor;
	getCursor_NoClientCode() : Cursor;
	isCursorSet() : boolean;
	paint(arg1 : Graphics) : void;
	update(arg1 : Graphics) : void;
	paintAll(arg1 : Graphics) : void;
	lightweightPaint(arg1 : Graphics) : void;
	paintHeavyweightComponents(arg1 : Graphics) : void;
	repaint() : void;
	repaint(arg1 : number) : void;
	repaint(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	repaint(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number) : void;
	print(arg1 : Graphics) : void;
	printAll(arg1 : Graphics) : void;
	lightweightPrint(arg1 : Graphics) : void;
	printHeavyweightComponents(arg1 : Graphics) : void;
	getInsets_NoClientCode() : Insets;
	createImage(arg1 : ImageProducer) : Image;
	createImage(arg1 : number, arg2 : number) : Image;
	createVolatileImage(arg1 : number, arg2 : number) : VolatileImage;
	createVolatileImage(arg1 : number, arg2 : number, arg3 : ImageCapabilities) : VolatileImage;
	prepareImage(arg1 : Image, arg2 : ImageObserver) : boolean;
	prepareImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : ImageObserver) : boolean;
	checkImage(arg1 : Image, arg2 : ImageObserver) : number;
	checkImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : ImageObserver) : number;
	createBufferStrategy(arg1 : number) : void;
	createBufferStrategy(arg1 : number, arg2 : BufferCapabilities) : void;
	getBufferStrategy() : BufferStrategy;
	getBackBuffer() : Image;
	setIgnoreRepaint(arg1 : boolean) : void;
	getIgnoreRepaint() : boolean;
	contains(arg1 : number, arg2 : number) : boolean;
	inside(arg1 : number, arg2 : number) : boolean;
	contains(arg1 : Point) : boolean;
	getComponentAt(arg1 : number, arg2 : number) : Component;
	locate(arg1 : number, arg2 : number) : Component;
	getComponentAt(arg1 : Point) : Component;
	deliverEvent(arg1 : Event) : void;
	dispatchEvent(arg1 : AWTEvent) : void;
	dispatchEventImpl(arg1 : AWTEvent) : void;
	autoProcessMouseWheel(arg1 : MouseWheelEvent) : void;
	dispatchMouseWheelToAncestor(arg1 : MouseWheelEvent) : boolean;
	checkWindowClosingException() : boolean;
	areInputMethodsEnabled() : boolean;
	eventEnabled(arg1 : AWTEvent) : boolean;
	eventTypeEnabled(arg1 : number) : boolean;
	addComponentListener(arg1 : ComponentListener) : void;
	removeComponentListener(arg1 : ComponentListener) : void;
	getComponentListeners() : ComponentListener[];
	addFocusListener(arg1 : FocusListener) : void;
	removeFocusListener(arg1 : FocusListener) : void;
	getFocusListeners() : FocusListener[];
	addHierarchyListener(arg1 : HierarchyListener) : void;
	removeHierarchyListener(arg1 : HierarchyListener) : void;
	getHierarchyListeners() : HierarchyListener[];
	addHierarchyBoundsListener(arg1 : HierarchyBoundsListener) : void;
	removeHierarchyBoundsListener(arg1 : HierarchyBoundsListener) : void;
	numListening(arg1 : number) : number;
	countHierarchyMembers() : number;
	createHierarchyEvents(arg1 : number, arg2 : Component, arg3 : Container, arg4 : number, arg5 : boolean) : number;
	getHierarchyBoundsListeners() : HierarchyBoundsListener[];
	adjustListeningChildrenOnParent(arg1 : number, arg2 : number) : void;
	addKeyListener(arg1 : KeyListener) : void;
	removeKeyListener(arg1 : KeyListener) : void;
	getKeyListeners() : KeyListener[];
	addMouseListener(arg1 : MouseListener) : void;
	removeMouseListener(arg1 : MouseListener) : void;
	getMouseListeners() : MouseListener[];
	addMouseMotionListener(arg1 : MouseMotionListener) : void;
	removeMouseMotionListener(arg1 : MouseMotionListener) : void;
	getMouseMotionListeners() : MouseMotionListener[];
	addMouseWheelListener(arg1 : MouseWheelListener) : void;
	removeMouseWheelListener(arg1 : MouseWheelListener) : void;
	getMouseWheelListeners() : MouseWheelListener[];
	addInputMethodListener(arg1 : InputMethodListener) : void;
	removeInputMethodListener(arg1 : InputMethodListener) : void;
	getInputMethodListeners() : InputMethodListener[];
	getListeners<T extends EventListener>(arg1 : Class<T>) : T[];
	getInputMethodRequests() : InputMethodRequests;
	getInputContext() : InputContext;
	enableEvents(arg1 : number) : void;
	disableEvents(arg1 : number) : void;
	checkCoalescing() : boolean;
	static isCoalesceEventsOverriden(arg1 : Class<any>) : boolean;
	isCoalescingEnabled() : boolean;
	coalesceEvents(arg1 : AWTEvent, arg2 : AWTEvent) : AWTEvent;
	processEvent(arg1 : AWTEvent) : void;
	processComponentEvent(arg1 : ComponentEvent) : void;
	processFocusEvent(arg1 : FocusEvent) : void;
	processKeyEvent(arg1 : KeyEvent) : void;
	processMouseEvent(arg1 : MouseEvent) : void;
	processMouseMotionEvent(arg1 : MouseEvent) : void;
	processMouseWheelEvent(arg1 : MouseWheelEvent) : void;
	postsOldMouseEvents() : boolean;
	processInputMethodEvent(arg1 : InputMethodEvent) : void;
	processHierarchyEvent(arg1 : HierarchyEvent) : void;
	processHierarchyBoundsEvent(arg1 : HierarchyEvent) : void;
	handleEvent(arg1 : Event) : boolean;
	mouseDown(arg1 : Event, arg2 : number, arg3 : number) : boolean;
	mouseDrag(arg1 : Event, arg2 : number, arg3 : number) : boolean;
	mouseUp(arg1 : Event, arg2 : number, arg3 : number) : boolean;
	mouseMove(arg1 : Event, arg2 : number, arg3 : number) : boolean;
	mouseEnter(arg1 : Event, arg2 : number, arg3 : number) : boolean;
	mouseExit(arg1 : Event, arg2 : number, arg3 : number) : boolean;
	keyDown(arg1 : Event, arg2 : number) : boolean;
	keyUp(arg1 : Event, arg2 : number) : boolean;
	action(arg1 : Event, arg2 : Object) : boolean;
	addNotify() : void;
	removeNotify() : void;
	gotFocus(arg1 : Event, arg2 : Object) : boolean;
	lostFocus(arg1 : Event, arg2 : Object) : boolean;
	isFocusTraversable() : boolean;
	isFocusable() : boolean;
	setFocusable(arg1 : boolean) : void;
	isFocusTraversableOverridden() : boolean;
	setFocusTraversalKeys(arg1 : number, arg2 : Set<AWTKeyStroke>) : void;
	getFocusTraversalKeys(arg1 : number) : Set<AWTKeyStroke>;
	setFocusTraversalKeys_NoIDCheck(arg1 : number, arg2 : Set<AWTKeyStroke>) : void;
	getFocusTraversalKeys_NoIDCheck(arg1 : number) : Set<AWTKeyStroke>;
	areFocusTraversalKeysSet(arg1 : number) : boolean;
	setFocusTraversalKeysEnabled(arg1 : boolean) : void;
	getFocusTraversalKeysEnabled() : boolean;
	requestFocus() : void;
	requestFocus(arg1 : CausedFocusEvent.Cause) : boolean;
	requestFocus(arg1 : boolean) : boolean;
	requestFocus(arg1 : boolean, arg2 : CausedFocusEvent.Cause) : boolean;
	requestFocusInWindow() : boolean;
	requestFocusInWindow(arg1 : CausedFocusEvent.Cause) : boolean;
	requestFocusInWindow(arg1 : boolean) : boolean;
	requestFocusInWindow(arg1 : boolean, arg2 : CausedFocusEvent.Cause) : boolean;
	requestFocusHelper(arg1 : boolean, arg2 : boolean) : boolean;
	requestFocusHelper(arg1 : boolean, arg2 : boolean, arg3 : CausedFocusEvent.Cause) : boolean;
	isRequestFocusAccepted(arg1 : boolean, arg2 : boolean, arg3 : CausedFocusEvent.Cause) : boolean;
	static setRequestFocusController(arg1 : RequestFocusController) : void;
	getFocusCycleRootAncestor() : Container;
	isFocusCycleRoot(arg1 : Container) : boolean;
	getTraversalRoot() : Container;
	transferFocus() : void;
	nextFocus() : void;
	transferFocus(arg1 : boolean) : boolean;
	getNextFocusCandidate() : Component;
	transferFocusBackward() : void;
	transferFocusBackward(arg1 : boolean) : boolean;
	transferFocusUpCycle() : void;
	hasFocus() : boolean;
	isFocusOwner() : boolean;
	setAutoFocusTransferOnDisposal(arg1 : boolean) : void;
	isAutoFocusTransferOnDisposal() : boolean;
	add(arg1 : PopupMenu) : void;
	paramString() : string;
	list() : void;
	list(arg1 : PrintStream) : void;
	list(arg1 : PrintStream, arg2 : number) : void;
	list(arg1 : PrintWriter) : void;
	list(arg1 : PrintWriter, arg2 : number) : void;
	getNativeContainer() : Container;
	addPropertyChangeListener(arg1 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : PropertyChangeListener) : void;
	getPropertyChangeListeners() : PropertyChangeListener[];
	addPropertyChangeListener(arg1 : string, arg2 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : string, arg2 : PropertyChangeListener) : void;
	getPropertyChangeListeners(arg1 : string) : PropertyChangeListener[];
	firePropertyChange(arg1 : string, arg2 : Object, arg3 : Object) : void;
	firePropertyChange(arg1 : string, arg2 : boolean, arg3 : boolean) : void;
	firePropertyChange(arg1 : string, arg2 : number, arg3 : number) : void;
	firePropertyChange(arg1 : string, arg2 : number, arg3 : number) : void;
	firePropertyChange(arg1 : string, arg2 : string, arg3 : string) : void;
	firePropertyChange(arg1 : string, arg2 : number, arg3 : number) : void;
	firePropertyChange(arg1 : string, arg2 : number, arg3 : number) : void;
	firePropertyChange(arg1 : string, arg2 : number, arg3 : number) : void;
	firePropertyChange(arg1 : string, arg2 : number, arg3 : number) : void;
	doSwingSerialization() : void;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	setComponentOrientation(arg1 : ComponentOrientation) : void;
	getComponentOrientation() : ComponentOrientation;
	applyComponentOrientation(arg1 : ComponentOrientation) : void;
	canBeFocusOwner() : boolean;
	canBeFocusOwnerRecursively() : boolean;
	relocateComponent() : void;
	getContainingWindow() : Window;
	static initIDs() : void;
	getAccessibleContext() : AccessibleContext;
	getAccessibleIndexInParent() : number;
	getAccessibleStateSet() : AccessibleStateSet;
	static isInstanceOf(arg1 : Object, arg2 : string) : boolean;
	areBoundsValid() : boolean;
	applyCompoundShape(arg1 : Region) : void;
	getAppliedShape() : Region;
	getLocationOnWindow() : Point;
	getNormalShape() : Region;
	getOpaqueShape() : Region;
	getSiblingIndexAbove() : number;
	getHWPeerAboveMe() : ComponentPeer;
	getSiblingIndexBelow() : number;
	isNonOpaqueForMixing() : boolean;
	calculateCurrentShape() : Region;
	applyCurrentShape() : void;
	subtractAndApplyShape(arg1 : Region) : void;
	applyCurrentShapeBelowMe() : void;
	subtractAndApplyShapeBelowMe() : void;
	mixOnShowing() : void;
	mixOnHiding(arg1 : boolean) : void;
	mixOnReshaping() : void;
	mixOnZOrderChanging(arg1 : number, arg2 : number) : void;
	mixOnValidating() : void;
	isMixingNeeded() : boolean;
	updateZOrder() : void;
}


declare interface Component extends ImageObserver, MenuContainer, Serializable {}

declare module Component {
	class AWTTreeLock extends Object {
	}
	class AccessibleAWTComponent {
		accessibleName : string;
		accessibleDescription : string;
		accessibleRole : AccessibleRole;
		accessibleStateSet : AccessibleStateSet;
		accessibleParent : Accessible;
		accessibleIndexInParent : number;
		accessibleChildrenCount : number;
		locale : Locale;
		accessibleComponent : AccessibleComponent;
		background : Color;
		foreground : Color;
		cursor : Cursor;
		font : Font;
		enabled : boolean;
		visible : boolean;
		showing : boolean;
		locationOnScreen : Point;
		location : Point;
		bounds : Rectangle;
		size : Dimension;
		focusTraversable : boolean;
	}


	interface AccessibleAWTComponent extends AccessibleContext, Serializable, AccessibleComponent {}

	module AccessibleAWTComponent {
		class AccessibleAWTComponentHandler {
		}


		interface AccessibleAWTComponentHandler extends ComponentListener {}		class AccessibleAWTFocusHandler {
		}


		interface AccessibleAWTFocusHandler extends FocusListener {}	}
	class BaselineResizeBehavior {
		static CONSTANT_ASCENT : Component.BaselineResizeBehavior;
		static CONSTANT_DESCENT : Component.BaselineResizeBehavior;
		static CENTER_OFFSET : Component.BaselineResizeBehavior;
		static OTHER : Component.BaselineResizeBehavior;
	}


	interface BaselineResizeBehavior extends Enum<Component.BaselineResizeBehavior> {}	class BltBufferStrategy {
		capabilities : BufferCapabilities;
		drawGraphics : Graphics;
		createBackBuffers(arg1 : number) : void;
		getBackBuffer() : Image;
		showSubRegion(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
		revalidate() : void;
		revalidate(arg1 : boolean) : void;
	}


	interface BltBufferStrategy extends BufferStrategy {}	class BltSubRegionBufferStrategy {
	}


	interface BltSubRegionBufferStrategy extends Component.BltBufferStrategy, SubRegionShowable {}	class DummyRequestFocusController {
	}


	interface DummyRequestFocusController extends RequestFocusController {}	class FlipBufferStrategy {
		capabilities : BufferCapabilities;
		drawGraphics : Graphics;
		createBuffers(arg1 : number, arg2 : BufferCapabilities) : void;
		updateInternalBuffers() : void;
		getBackBuffer() : Image;
		flip(arg1 : BufferCapabilities.FlipContents) : void;
		flipSubRegion(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : BufferCapabilities.FlipContents) : void;
		destroyBuffers() : void;
		revalidate() : void;
		revalidate(arg1 : boolean) : void;
		showSubRegion(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	}


	interface FlipBufferStrategy extends BufferStrategy {}	class FlipSubRegionBufferStrategy {
	}


	interface FlipSubRegionBufferStrategy extends Component.FlipBufferStrategy, SubRegionShowable {}	class ProxyCapabilities {
	}


	interface ProxyCapabilities extends ExtendedBufferCapabilities {}	class SingleBufferStrategy {
		capabilities : BufferCapabilities;
		drawGraphics : Graphics;
		constructor(arg1 : BufferCapabilities);
	}


	interface SingleBufferStrategy extends BufferStrategy {}}

export = Component
