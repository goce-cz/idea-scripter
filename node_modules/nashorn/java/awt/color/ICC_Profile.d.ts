import InputStream = require('nashorn/java/io/InputStream');
import ProfileDeferralInfo = require('nashorn/sun/java2d/cmm/ProfileDeferralInfo');
import Profile = require('nashorn/sun/java2d/cmm/Profile');
import OutputStream = require('nashorn/java/io/OutputStream');
import File = require('nashorn/java/io/File');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Object = require('nashorn/java/lang/Object');
import Serializable = require('nashorn/java/io/Serializable');

declare class ICC_Profile {
	static CLASS_INPUT : number;
	static CLASS_DISPLAY : number;
	static CLASS_OUTPUT : number;
	static CLASS_DEVICELINK : number;
	static CLASS_COLORSPACECONVERSION : number;
	static CLASS_ABSTRACT : number;
	static CLASS_NAMEDCOLOR : number;
	static icSigXYZData : number;
	static icSigLabData : number;
	static icSigLuvData : number;
	static icSigYCbCrData : number;
	static icSigYxyData : number;
	static icSigRgbData : number;
	static icSigGrayData : number;
	static icSigHsvData : number;
	static icSigHlsData : number;
	static icSigCmykData : number;
	static icSigCmyData : number;
	static icSigSpace2CLR : number;
	static icSigSpace3CLR : number;
	static icSigSpace4CLR : number;
	static icSigSpace5CLR : number;
	static icSigSpace6CLR : number;
	static icSigSpace7CLR : number;
	static icSigSpace8CLR : number;
	static icSigSpace9CLR : number;
	static icSigSpaceACLR : number;
	static icSigSpaceBCLR : number;
	static icSigSpaceCCLR : number;
	static icSigSpaceDCLR : number;
	static icSigSpaceECLR : number;
	static icSigSpaceFCLR : number;
	static icSigInputClass : number;
	static icSigDisplayClass : number;
	static icSigOutputClass : number;
	static icSigLinkClass : number;
	static icSigAbstractClass : number;
	static icSigColorSpaceClass : number;
	static icSigNamedColorClass : number;
	static icPerceptual : number;
	static icRelativeColorimetric : number;
	static icMediaRelativeColorimetric : number;
	static icSaturation : number;
	static icAbsoluteColorimetric : number;
	static icICCAbsoluteColorimetric : number;
	static icSigHead : number;
	static icSigAToB0Tag : number;
	static icSigAToB1Tag : number;
	static icSigAToB2Tag : number;
	static icSigBlueColorantTag : number;
	static icSigBlueMatrixColumnTag : number;
	static icSigBlueTRCTag : number;
	static icSigBToA0Tag : number;
	static icSigBToA1Tag : number;
	static icSigBToA2Tag : number;
	static icSigCalibrationDateTimeTag : number;
	static icSigCharTargetTag : number;
	static icSigCopyrightTag : number;
	static icSigCrdInfoTag : number;
	static icSigDeviceMfgDescTag : number;
	static icSigDeviceModelDescTag : number;
	static icSigDeviceSettingsTag : number;
	static icSigGamutTag : number;
	static icSigGrayTRCTag : number;
	static icSigGreenColorantTag : number;
	static icSigGreenMatrixColumnTag : number;
	static icSigGreenTRCTag : number;
	static icSigLuminanceTag : number;
	static icSigMeasurementTag : number;
	static icSigMediaBlackPointTag : number;
	static icSigMediaWhitePointTag : number;
	static icSigNamedColor2Tag : number;
	static icSigOutputResponseTag : number;
	static icSigPreview0Tag : number;
	static icSigPreview1Tag : number;
	static icSigPreview2Tag : number;
	static icSigProfileDescriptionTag : number;
	static icSigProfileSequenceDescTag : number;
	static icSigPs2CRD0Tag : number;
	static icSigPs2CRD1Tag : number;
	static icSigPs2CRD2Tag : number;
	static icSigPs2CRD3Tag : number;
	static icSigPs2CSATag : number;
	static icSigPs2RenderingIntentTag : number;
	static icSigRedColorantTag : number;
	static icSigRedMatrixColumnTag : number;
	static icSigRedTRCTag : number;
	static icSigScreeningDescTag : number;
	static icSigScreeningTag : number;
	static icSigTechnologyTag : number;
	static icSigUcrBgTag : number;
	static icSigViewingCondDescTag : number;
	static icSigViewingConditionsTag : number;
	static icSigChromaticityTag : number;
	static icSigChromaticAdaptationTag : number;
	static icSigColorantOrderTag : number;
	static icSigColorantTableTag : number;
	static icHdrSize : number;
	static icHdrCmmId : number;
	static icHdrVersion : number;
	static icHdrDeviceClass : number;
	static icHdrColorSpace : number;
	static icHdrPcs : number;
	static icHdrDate : number;
	static icHdrMagic : number;
	static icHdrPlatform : number;
	static icHdrFlags : number;
	static icHdrManufacturer : number;
	static icHdrModel : number;
	static icHdrAttributes : number;
	static icHdrRenderingIntent : number;
	static icHdrIlluminant : number;
	static icHdrCreator : number;
	static icHdrProfileID : number;
	static icTagType : number;
	static icTagReserved : number;
	static icCurveCount : number;
	static icCurveData : number;
	static icXYZNumberX : number;
	majorVersion : number;
	minorVersion : number;
	profileClass : number;
	colorSpaceType : number;
	pCSType : number;
	data : number[];
	numComponents : number;
	static getInstance(arg1 : number[]) : ICC_Profile;
	static getInstance(arg1 : number) : ICC_Profile;
	static getStandardProfile(arg1 : string) : ICC_Profile;
	static getInstance(arg1 : string) : ICC_Profile;
	static getInstance(arg1 : InputStream) : ICC_Profile;
	static getProfileDataFromStream(arg1 : InputStream) : number[];
	static getDeferredInstance(arg1 : ProfileDeferralInfo) : ICC_Profile;
	activateDeferredProfile() : void;
	getMajorVersion() : number;
	getMinorVersion() : number;
	getProfileClass() : number;
	getColorSpaceType() : number;
	static getColorSpaceType(arg1 : Profile) : number;
	getPCSType() : number;
	static getPCSType(arg1 : Profile) : number;
	write(arg1 : string) : void;
	write(arg1 : OutputStream) : void;
	getData() : number[];
	getData(arg1 : number) : number[];
	static getData(arg1 : Profile, arg2 : number) : number[];
	setData(arg1 : number, arg2 : number[]) : void;
	setRenderingIntent(arg1 : number) : void;
	getRenderingIntent() : number;
	getNumComponents() : number;
	getMediaWhitePoint() : number[];
	getXYZTag(arg1 : number) : number[];
	getGamma(arg1 : number) : number;
	getTRC(arg1 : number) : number[];
	static iccCStoJCS(arg1 : number) : number;
	static intFromBigEndian(arg1 : number[], arg2 : number) : number;
	static intToBigEndian(arg1 : number, arg2 : number[], arg3 : number) : void;
	static shortFromBigEndian(arg1 : number[], arg2 : number) : number;
	static shortToBigEndian(arg1 : number, arg2 : number[], arg3 : number) : void;
	static getProfileFile(arg1 : string) : File;
	static getStandardProfileFile(arg1 : string) : File;
	static isChildOf(arg1 : File, arg2 : string) : boolean;
	static standardProfileExists(arg1 : string) : boolean;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	readResolve() : Object;
}


declare interface ICC_Profile extends Serializable {}
export = ICC_Profile
