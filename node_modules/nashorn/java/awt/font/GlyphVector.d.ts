import Font = require('nashorn/java/awt/Font');
import FontRenderContext = require('nashorn/java/awt/font/FontRenderContext');
import Rectangle2D = require('nashorn/java/awt/geom/Rectangle2D');
import Shape = require('nashorn/java/awt/Shape');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Point2D = require('nashorn/java/awt/geom/Point2D');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import GlyphMetrics = require('nashorn/java/awt/font/GlyphMetrics');
import GlyphJustificationInfo = require('nashorn/java/awt/font/GlyphJustificationInfo');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class GlyphVector {
	static FLAG_HAS_TRANSFORMS : number;
	static FLAG_HAS_POSITION_ADJUSTMENTS : number;
	static FLAG_RUN_RTL : number;
	static FLAG_COMPLEX_GLYPHS : number;
	static FLAG_MASK : number;
	font : Font;
	fontRenderContext : FontRenderContext;
	numGlyphs : number;
	logicalBounds : Rectangle2D;
	visualBounds : Rectangle2D;
	outline : Shape;
	layoutFlags : number;
	constructor();
	getFont() : Font;
	getFontRenderContext() : FontRenderContext;
	performDefaultLayout() : void;
	getNumGlyphs() : number;
	getGlyphCode(arg1 : number) : number;
	getGlyphCodes(arg1 : number, arg2 : number, arg3 : number[]) : number[];
	getGlyphCharIndex(arg1 : number) : number;
	getGlyphCharIndices(arg1 : number, arg2 : number, arg3 : number[]) : number[];
	getLogicalBounds() : Rectangle2D;
	getVisualBounds() : Rectangle2D;
	getPixelBounds(arg1 : FontRenderContext, arg2 : number, arg3 : number) : Rectangle;
	getOutline() : Shape;
	getOutline(arg1 : number, arg2 : number) : Shape;
	getGlyphOutline(arg1 : number) : Shape;
	getGlyphOutline(arg1 : number, arg2 : number, arg3 : number) : Shape;
	getGlyphPosition(arg1 : number) : Point2D;
	setGlyphPosition(arg1 : number, arg2 : Point2D) : void;
	getGlyphTransform(arg1 : number) : AffineTransform;
	setGlyphTransform(arg1 : number, arg2 : AffineTransform) : void;
	getLayoutFlags() : number;
	getGlyphPositions(arg1 : number, arg2 : number, arg3 : number[]) : number[];
	getGlyphLogicalBounds(arg1 : number) : Shape;
	getGlyphVisualBounds(arg1 : number) : Shape;
	getGlyphPixelBounds(arg1 : number, arg2 : FontRenderContext, arg3 : number, arg4 : number) : Rectangle;
	getGlyphMetrics(arg1 : number) : GlyphMetrics;
	getGlyphJustificationInfo(arg1 : number) : GlyphJustificationInfo;
	equals(arg1 : GlyphVector) : boolean;
}


declare interface GlyphVector extends Cloneable {}
export = GlyphVector
