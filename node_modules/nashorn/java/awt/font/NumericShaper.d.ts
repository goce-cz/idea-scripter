import Set = require('nashorn/java/util/Set');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import Serializable = require('nashorn/java/io/Serializable');
import Enum = require('nashorn/java/lang/Enum');

declare class NumericShaper {
	static EUROPEAN : number;
	static ARABIC : number;
	static EASTERN_ARABIC : number;
	static DEVANAGARI : number;
	static BENGALI : number;
	static GURMUKHI : number;
	static GUJARATI : number;
	static ORIYA : number;
	static TAMIL : number;
	static TELUGU : number;
	static KANNADA : number;
	static MALAYALAM : number;
	static THAI : number;
	static LAO : number;
	static TIBETAN : number;
	static MYANMAR : number;
	static ETHIOPIC : number;
	static KHMER : number;
	static MONGOLIAN : number;
	static ALL_RANGES : number;
	contextual : boolean;
	ranges : number;
	rangeSet : Set<NumericShaper.Range>;
	static getContextKey(arg1 : string) : number;
	rangeForCodePoint(arg1 : number) : NumericShaper.Range;
	isStrongDirectional(arg1 : string) : boolean;
	static getKeyFromMask(arg1 : number) : number;
	static getShaper(arg1 : number) : NumericShaper;
	static getShaper(arg1 : NumericShaper.Range) : NumericShaper;
	static getContextualShaper(arg1 : number) : NumericShaper;
	static getContextualShaper(arg1 : Set<NumericShaper.Range>) : NumericShaper;
	static getContextualShaper(arg1 : number, arg2 : number) : NumericShaper;
	static getContextualShaper(arg1 : Set<NumericShaper.Range>, arg2 : NumericShaper.Range) : NumericShaper;
	shape(arg1 : string[], arg2 : number, arg3 : number) : void;
	shape(arg1 : string[], arg2 : number, arg3 : number, arg4 : number) : void;
	shape(arg1 : string[], arg2 : number, arg3 : number, arg4 : NumericShaper.Range) : void;
	checkParams(arg1 : string[], arg2 : number, arg3 : number) : void;
	isContextual() : boolean;
	getRanges() : number;
	getRangeSet() : Set<NumericShaper.Range>;
	shapeNonContextually(arg1 : string[], arg2 : number, arg3 : number) : void;
	shapeContextually(arg1 : string[], arg2 : number, arg3 : number, arg4 : number) : void;
	shapeContextually(arg1 : string[], arg2 : number, arg3 : number, arg4 : NumericShaper.Range) : void;
	static getHighBit(arg1 : number) : number;
	static search(arg1 : number, arg2 : number[], arg3 : number, arg4 : number) : number;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface NumericShaper extends Serializable {}

declare module NumericShaper {
	class Range {
		static EUROPEAN : NumericShaper.Range;
		static ARABIC : NumericShaper.Range;
		static EASTERN_ARABIC : NumericShaper.Range;
		static DEVANAGARI : NumericShaper.Range;
		static BENGALI : NumericShaper.Range;
		static GURMUKHI : NumericShaper.Range;
		static GUJARATI : NumericShaper.Range;
		static ORIYA : NumericShaper.Range;
		static TAMIL : NumericShaper.Range;
		static TELUGU : NumericShaper.Range;
		static KANNADA : NumericShaper.Range;
		static MALAYALAM : NumericShaper.Range;
		static THAI : NumericShaper.Range;
		static LAO : NumericShaper.Range;
		static TIBETAN : NumericShaper.Range;
		static MYANMAR : NumericShaper.Range;
		static ETHIOPIC : NumericShaper.Range;
		static KHMER : NumericShaper.Range;
		static MONGOLIAN : NumericShaper.Range;
		static NKO : NumericShaper.Range;
		static MYANMAR_SHAN : NumericShaper.Range;
		static LIMBU : NumericShaper.Range;
		static NEW_TAI_LUE : NumericShaper.Range;
		static BALINESE : NumericShaper.Range;
		static SUNDANESE : NumericShaper.Range;
		static LEPCHA : NumericShaper.Range;
		static OL_CHIKI : NumericShaper.Range;
		static VAI : NumericShaper.Range;
		static SAURASHTRA : NumericShaper.Range;
		static KAYAH_LI : NumericShaper.Range;
		static CHAM : NumericShaper.Range;
		static TAI_THAM_HORA : NumericShaper.Range;
		static TAI_THAM_THAM : NumericShaper.Range;
		static JAVANESE : NumericShaper.Range;
		static MEETEI_MAYEK : NumericShaper.Range;
		static toRangeIndex(arg1 : NumericShaper.Range) : number;
		static indexToRange(arg1 : number) : NumericShaper.Range;
		static toRangeMask(arg1 : Set<NumericShaper.Range>) : number;
		static maskToRangeSet(arg1 : number) : Set<NumericShaper.Range>;
		getDigitBase() : number;
		getNumericBase() : string;
		inRange(arg1 : number) : boolean;
	}


	interface Range extends Enum<NumericShaper.Range> {}}

export = NumericShaper
