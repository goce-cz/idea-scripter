import Object = require('nashorn/java/lang/Object');
import Rectangle2D = require('nashorn/java/awt/geom/Rectangle2D');
import FontRenderContext = require('nashorn/java/awt/font/FontRenderContext');
import TextLineComponent = require('nashorn/sun/font/TextLineComponent');
import Rectangle = require('nashorn/java/awt/Rectangle');
import BufferedImage = require('nashorn/java/awt/image/BufferedImage');
import CoreMetrics = require('nashorn/sun/font/CoreMetrics');
import Graphics2D = require('nashorn/java/awt/Graphics2D');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import Shape = require('nashorn/java/awt/Shape');
import Font = require('nashorn/java/awt/Font');
import Map = require('nashorn/java/util/Map');
import AttributedCharacterIterator = require('nashorn/java/text/AttributedCharacterIterator');
import TextLabelFactory = require('nashorn/sun/font/TextLabelFactory');
import Decoration = require('nashorn/sun/font/Decoration');
import StyledParagraph = require('nashorn/java/awt/font/StyledParagraph');
import LayoutPathImpl = require('nashorn/sun/font/LayoutPathImpl');

declare class TextLine extends Object {
	directionLTR : boolean;
	metrics : TextLine.TextLineMetrics;
	visualBounds : Rectangle2D;
	italicBounds : Rectangle2D;
	constructor(arg1 : FontRenderContext, arg2 : TextLineComponent[], arg3 : number[], arg4 : string[], arg5 : number, arg6 : number, arg7 : number[], arg8 : number[], arg9 : boolean);
	checkCtorArgs() : void;
	init() : void;
	getPixelBounds(arg1 : FontRenderContext, arg2 : number, arg3 : number) : Rectangle;
	static computePixelBounds(arg1 : BufferedImage) : Rectangle;
	characterCount() : number;
	isDirectionLTR() : boolean;
	getMetrics() : TextLine.TextLineMetrics;
	visualToLogical(arg1 : number) : number;
	logicalToVisual(arg1 : number) : number;
	getCharLevel(arg1 : number) : number;
	isCharLTR(arg1 : number) : boolean;
	getCharType(arg1 : number) : number;
	isCharSpace(arg1 : number) : boolean;
	isCharWhitespace(arg1 : number) : boolean;
	getCharAngle(arg1 : number) : number;
	getCoreMetricsAt(arg1 : number) : CoreMetrics;
	getCharAscent(arg1 : number) : number;
	getCharDescent(arg1 : number) : number;
	getCharShift(arg1 : number) : number;
	applyFunctionAtIndex(arg1 : number, arg2 : TextLine.Function) : number;
	getCharAdvance(arg1 : number) : number;
	getCharXPosition(arg1 : number) : number;
	getCharYPosition(arg1 : number) : number;
	getCharLinePosition(arg1 : number) : number;
	getCharLinePosition(arg1 : number, arg2 : boolean) : number;
	caretAtOffsetIsValid(arg1 : number) : boolean;
	getComponentLogicalIndex(arg1 : number) : number;
	getComponentVisualIndex(arg1 : number) : number;
	getCharBounds(arg1 : number) : Rectangle2D;
	getComponentShift(arg1 : number) : number;
	draw(arg1 : Graphics2D, arg2 : number, arg3 : number) : void;
	getVisualBounds() : Rectangle2D;
	getItalicBounds() : Rectangle2D;
	getOutline(arg1 : AffineTransform) : Shape;
	static fastCreateTextLine(arg1 : FontRenderContext, arg2 : string[], arg3 : Font, arg4 : CoreMetrics, arg5 : Map<AttributedCharacterIterator.Attribute, any>) : TextLine;
	static expandArray(arg1 : TextLineComponent[]) : TextLineComponent[];
	static createComponentsOnRun(arg1 : number, arg2 : number, arg3 : string[], arg4 : number[], arg5 : number[], arg6 : TextLabelFactory, arg7 : Font, arg8 : CoreMetrics, arg9 : FontRenderContext, arg10 : Decoration, arg11 : TextLineComponent[], arg12 : number) : TextLineComponent[];
	static getComponents(arg1 : StyledParagraph, arg2 : string[], arg3 : number, arg4 : number, arg5 : number[], arg6 : number[], arg7 : TextLabelFactory) : TextLineComponent[];
	static createLineFromText(arg1 : string[], arg2 : StyledParagraph, arg3 : TextLabelFactory, arg4 : boolean, arg5 : number[]) : TextLine;
	static computeComponentOrder(arg1 : TextLineComponent[], arg2 : number[]) : number[];
	static standardCreateTextLine(arg1 : FontRenderContext, arg2 : AttributedCharacterIterator, arg3 : string[], arg4 : number[]) : TextLine;
	static advanceToFirstFont(arg1 : AttributedCharacterIterator) : boolean;
	static getNormalizedOffsets(arg1 : number[], arg2 : number) : number[];
	static getFontAtCurrentPos(arg1 : AttributedCharacterIterator) : Font;
	static firstVisualChunk(arg1 : number[], arg2 : number[], arg3 : number, arg4 : number) : number;
	getJustifiedLine(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : TextLine;
	static getAdvanceBetween(arg1 : TextLineComponent[], arg2 : number, arg3 : number) : number;
	getLayoutPath() : LayoutPathImpl;
}


declare module TextLine {
	class Function extends Object {
		computeFunction(arg1 : TextLine, arg2 : number, arg3 : number) : number;
	}
	class TextLineMetrics extends Object {
		ascent : number;
		descent : number;
		leading : number;
		advance : number;
		constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number);
	}
}

export = TextLine
