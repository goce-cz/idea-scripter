import Rectangle2D = require('nashorn/java/awt/geom/Rectangle2D');
import LayoutPath = require('nashorn/java/awt/font/LayoutPath');
import Font = require('nashorn/java/awt/Font');
import FontRenderContext = require('nashorn/java/awt/font/FontRenderContext');
import Map = require('nashorn/java/util/Map');
import AttributedCharacterIterator = require('nashorn/java/text/AttributedCharacterIterator');
import CoreMetrics = require('nashorn/sun/font/CoreMetrics');
import TextHitInfo = require('nashorn/java/awt/font/TextHitInfo');
import Rectangle = require('nashorn/java/awt/Rectangle');
import LayoutPathImpl = require('nashorn/sun/font/LayoutPathImpl');
import GeneralPath = require('nashorn/java/awt/geom/GeneralPath');
import Shape = require('nashorn/java/awt/Shape');
import Graphics2D = require('nashorn/java/awt/Graphics2D');
import TextLine = require('nashorn/java/awt/font/TextLine');
import GraphicAttribute = require('nashorn/java/awt/font/GraphicAttribute');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import Point2D = require('nashorn/java/awt/geom/Point2D');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Object = require('nashorn/java/lang/Object');

declare class TextLayout {
	static DEFAULT_CARET_POLICY : TextLayout.CaretPolicy;
	baseline : number;
	baselineOffsets : number[];
	advance : number;
	visibleAdvance : number;
	ascent : number;
	descent : number;
	leading : number;
	bounds : Rectangle2D;
	leftToRight : boolean;
	vertical : boolean;
	characterCount : number;
	layoutPath : LayoutPath;
	constructor(arg1 : string, arg2 : Font, arg3 : FontRenderContext);
	constructor(arg1 : string, arg2 : Map<AttributedCharacterIterator.Attribute, any>, arg3 : FontRenderContext);
	constructor(arg1 : AttributedCharacterIterator, arg2 : FontRenderContext);
	static singleFont(arg1 : string[], arg2 : number, arg3 : number, arg4 : Map<AttributedCharacterIterator.Attribute, any>) : Font;
	paragraphInit(arg1 : number, arg2 : CoreMetrics, arg3 : Map<AttributedCharacterIterator.Attribute, any>, arg4 : string[]) : void;
	fastInit(arg1 : string[], arg2 : Font, arg3 : Map<AttributedCharacterIterator.Attribute, any>, arg4 : FontRenderContext) : void;
	standardInit(arg1 : AttributedCharacterIterator, arg2 : string[], arg3 : FontRenderContext) : void;
	ensureCache() : void;
	buildCache() : void;
	getNaturalBounds() : Rectangle2D;
	checkTextHit(arg1 : TextHitInfo) : void;
	getJustifiedLayout(arg1 : number) : TextLayout;
	handleJustify(arg1 : number) : void;
	getBaseline() : number;
	getBaselineOffsets() : number[];
	getAdvance() : number;
	getVisibleAdvance() : number;
	getAscent() : number;
	getDescent() : number;
	getLeading() : number;
	getBounds() : Rectangle2D;
	getPixelBounds(arg1 : FontRenderContext, arg2 : number, arg3 : number) : Rectangle;
	isLeftToRight() : boolean;
	isVertical() : boolean;
	getCharacterCount() : number;
	getCaretInfo(arg1 : number, arg2 : Rectangle2D, arg3 : number[]) : number[];
	getCaretInfo(arg1 : TextHitInfo, arg2 : Rectangle2D) : number[];
	getCaretInfoTestInternal(arg1 : TextHitInfo, arg2 : Rectangle2D) : number[];
	getCaretInfo(arg1 : TextHitInfo) : number[];
	hitToCaret(arg1 : TextHitInfo) : number;
	caretToHit(arg1 : number) : TextHitInfo;
	caretIsValid(arg1 : number) : boolean;
	getNextRightHit(arg1 : TextHitInfo) : TextHitInfo;
	getNextRightHit(arg1 : number, arg2 : TextLayout.CaretPolicy) : TextHitInfo;
	getNextRightHit(arg1 : number) : TextHitInfo;
	getNextLeftHit(arg1 : TextHitInfo) : TextHitInfo;
	getNextLeftHit(arg1 : number, arg2 : TextLayout.CaretPolicy) : TextHitInfo;
	getNextLeftHit(arg1 : number) : TextHitInfo;
	getVisualOtherHit(arg1 : TextHitInfo) : TextHitInfo;
	getCaretPath(arg1 : TextHitInfo, arg2 : Rectangle2D) : number[];
	getCaretPath(arg1 : number, arg2 : Rectangle2D, arg3 : boolean) : number[];
	static pathToShape(arg1 : number[], arg2 : boolean, arg3 : LayoutPathImpl) : GeneralPath;
	getCaretShape(arg1 : TextHitInfo, arg2 : Rectangle2D) : Shape;
	getCaretShape(arg1 : TextHitInfo) : Shape;
	getStrongHit(arg1 : TextHitInfo, arg2 : TextHitInfo) : TextHitInfo;
	getCharacterLevel(arg1 : number) : number;
	getCaretShapes(arg1 : number, arg2 : Rectangle2D, arg3 : TextLayout.CaretPolicy) : Shape[];
	getCaretShapes(arg1 : number, arg2 : Rectangle2D) : Shape[];
	getCaretShapes(arg1 : number) : Shape[];
	boundingShape(arg1 : number[], arg2 : number[]) : GeneralPath;
	caretBoundingShape(arg1 : number, arg2 : number, arg3 : Rectangle2D) : GeneralPath;
	leftShape(arg1 : Rectangle2D) : GeneralPath;
	rightShape(arg1 : Rectangle2D) : GeneralPath;
	getLogicalRangesForVisualSelection(arg1 : TextHitInfo, arg2 : TextHitInfo) : number[];
	getVisualHighlightShape(arg1 : TextHitInfo, arg2 : TextHitInfo, arg3 : Rectangle2D) : Shape;
	getVisualHighlightShape(arg1 : TextHitInfo, arg2 : TextHitInfo) : Shape;
	getLogicalHighlightShape(arg1 : number, arg2 : number, arg3 : Rectangle2D) : Shape;
	getLogicalHighlightShape(arg1 : number, arg2 : number) : Shape;
	getBlackBoxBounds(arg1 : number, arg2 : number) : Shape;
	caretToPointDistance(arg1 : number[], arg2 : number, arg3 : number) : number;
	hitTestChar(arg1 : number, arg2 : number, arg3 : Rectangle2D) : TextHitInfo;
	hitTestChar(arg1 : number, arg2 : number) : TextHitInfo;
	equals(arg1 : TextLayout) : boolean;
	draw(arg1 : Graphics2D, arg2 : number, arg3 : number) : void;
	getTextLineForTesting() : TextLine;
	static sameBaselineUpTo(arg1 : Font, arg2 : string[], arg3 : number, arg4 : number) : number;
	static getBaselineFromGraphic(arg1 : GraphicAttribute) : number;
	getOutline(arg1 : AffineTransform) : Shape;
	getLayoutPath() : LayoutPath;
	hitToPoint(arg1 : TextHitInfo, arg2 : Point2D) : void;
}


declare interface TextLayout extends Cloneable {}

declare module TextLayout {
	class CaretPolicy extends Object {
		constructor();
		getStrongCaret(arg1 : TextHitInfo, arg2 : TextHitInfo, arg3 : TextLayout) : TextHitInfo;
	}
}

export = TextLayout
