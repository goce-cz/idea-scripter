import Object = require('nashorn/java/lang/Object');
import AttributedCharacterIterator = require('nashorn/java/text/AttributedCharacterIterator');
import Decoration = require('nashorn/sun/font/Decoration');
import Vector = require('nashorn/java/util/Vector');
import Map = require('nashorn/java/util/Map');

declare class StyledParagraph extends Object {
	constructor(arg1 : AttributedCharacterIterator, arg2 : string[]);
	static insertInto(arg1 : number, arg2 : number[], arg3 : number) : void;
	static insertChar(arg1 : AttributedCharacterIterator, arg2 : string[], arg3 : number, arg4 : StyledParagraph) : StyledParagraph;
	static deleteFrom(arg1 : number, arg2 : number[], arg3 : number) : void;
	static deleteChar(arg1 : AttributedCharacterIterator, arg2 : string[], arg3 : number, arg4 : StyledParagraph) : StyledParagraph;
	getRunLimit(arg1 : number) : number;
	getDecorationAt(arg1 : number) : Decoration;
	getFontOrGraphicAt(arg1 : number) : Object;
	static findRunContaining(arg1 : number, arg2 : number[]) : number;
	static addToVector(arg1 : Object, arg2 : number, arg3 : Vector, arg4 : number[]) : number[];
	addDecoration(arg1 : Decoration, arg2 : number) : void;
	addFont(arg1 : Object, arg2 : number) : void;
	addFonts(arg1 : string[], arg2 : Map<AttributedCharacterIterator.Attribute, any>, arg3 : number, arg4 : number) : void;
	static addInputMethodAttrs(arg1 : Map<AttributedCharacterIterator.Attribute, any>) : Map<AttributedCharacterIterator.Attribute, any>;
	static getGraphicOrFont(arg1 : Map<AttributedCharacterIterator.Attribute, any>) : Object;
}

export = StyledParagraph
