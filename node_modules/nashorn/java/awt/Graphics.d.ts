import Object = require('nashorn/java/lang/Object');
import Color = require('nashorn/java/awt/Color');
import Font = require('nashorn/java/awt/Font');
import FontMetrics = require('nashorn/java/awt/FontMetrics');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Shape = require('nashorn/java/awt/Shape');
import Polygon = require('nashorn/java/awt/Polygon');
import AttributedCharacterIterator = require('nashorn/java/text/AttributedCharacterIterator');
import Image = require('nashorn/java/awt/Image');
import ImageObserver = require('nashorn/java/awt/image/ImageObserver');

declare class Graphics extends Object {
	color : Color;
	font : Font;
	fontMetrics : FontMetrics;
	clipBounds : Rectangle;
	clip : Shape;
	clipRect : Rectangle;
	create() : Graphics;
	create(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Graphics;
	translate(arg1 : number, arg2 : number) : void;
	getColor() : Color;
	setColor(arg1 : Color) : void;
	setPaintMode() : void;
	setXORMode(arg1 : Color) : void;
	getFont() : Font;
	setFont(arg1 : Font) : void;
	getFontMetrics() : FontMetrics;
	getFontMetrics(arg1 : Font) : FontMetrics;
	getClipBounds() : Rectangle;
	clipRect(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	setClip(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	getClip() : Shape;
	setClip(arg1 : Shape) : void;
	copyArea(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : void;
	drawLine(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	fillRect(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	drawRect(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	clearRect(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	drawRoundRect(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : void;
	fillRoundRect(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : void;
	draw3DRect(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : boolean) : void;
	fill3DRect(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : boolean) : void;
	drawOval(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	fillOval(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	drawArc(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : void;
	fillArc(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : void;
	drawPolyline(arg1 : number[], arg2 : number[], arg3 : number) : void;
	drawPolygon(arg1 : number[], arg2 : number[], arg3 : number) : void;
	drawPolygon(arg1 : Polygon) : void;
	fillPolygon(arg1 : number[], arg2 : number[], arg3 : number) : void;
	fillPolygon(arg1 : Polygon) : void;
	drawString(arg1 : string, arg2 : number, arg3 : number) : void;
	drawString(arg1 : AttributedCharacterIterator, arg2 : number, arg3 : number) : void;
	drawChars(arg1 : string[], arg2 : number, arg3 : number, arg4 : number, arg5 : number) : void;
	drawBytes(arg1 : number[], arg2 : number, arg3 : number, arg4 : number, arg5 : number) : void;
	drawImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : ImageObserver) : boolean;
	drawImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : ImageObserver) : boolean;
	drawImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : Color, arg5 : ImageObserver) : boolean;
	drawImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : Color, arg7 : ImageObserver) : boolean;
	drawImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number, arg7 : number, arg8 : number, arg9 : number, arg10 : ImageObserver) : boolean;
	drawImage(arg1 : Image, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number, arg7 : number, arg8 : number, arg9 : number, arg10 : Color, arg11 : ImageObserver) : boolean;
	dispose() : void;
	getClipRect() : Rectangle;
	hitClip(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : boolean;
	getClipBounds(arg1 : Rectangle) : Rectangle;
}

export = Graphics
