import Rectangle2D = require('nashorn/java/awt/geom/Rectangle2D');
import Point = require('nashorn/java/awt/Point');
import Dimension = require('nashorn/java/awt/Dimension');
import Shape = require('nashorn/java/awt/Shape');
import Serializable = require('nashorn/java/io/Serializable');

declare class Rectangle {
	x : number;
	y : number;
	width : number;
	height : number;
	bounds : Rectangle;
	bounds2D : Rectangle2D;
	location : Point;
	size : Dimension;
	empty : boolean;
	constructor();
	constructor(arg1 : Rectangle);
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number);
	constructor(arg1 : number, arg2 : number);
	constructor(arg1 : Point, arg2 : Dimension);
	constructor(arg1 : Point);
	constructor(arg1 : Dimension);
	static initIDs() : void;
	setBounds(arg1 : Rectangle) : void;
	setBounds(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	static clip(arg1 : number, arg2 : boolean) : number;
	reshape(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	getLocation() : Point;
	setLocation(arg1 : Point) : void;
	setLocation(arg1 : number, arg2 : number) : void;
	move(arg1 : number, arg2 : number) : void;
	translate(arg1 : number, arg2 : number) : void;
	getSize() : Dimension;
	setSize(arg1 : Dimension) : void;
	setSize(arg1 : number, arg2 : number) : void;
	resize(arg1 : number, arg2 : number) : void;
	contains(arg1 : Point) : boolean;
	contains(arg1 : number, arg2 : number) : boolean;
	contains(arg1 : Rectangle) : boolean;
	contains(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : boolean;
	inside(arg1 : number, arg2 : number) : boolean;
	intersects(arg1 : Rectangle) : boolean;
	intersection(arg1 : Rectangle) : Rectangle;
	union(arg1 : Rectangle) : Rectangle;
	add(arg1 : number, arg2 : number) : void;
	add(arg1 : Point) : void;
	add(arg1 : Rectangle) : void;
	grow(arg1 : number, arg2 : number) : void;
}


declare interface Rectangle extends Rectangle2D, Shape, Serializable {}
export = Rectangle
