import List = require('nashorn/java/util/List');
import Image = require('nashorn/java/awt/Image');
import Toolkit = require('nashorn/java/awt/Toolkit');
import Locale = require('nashorn/java/util/Locale');
import InputContext = require('nashorn/java/awt/im/InputContext');
import Dialog = require('nashorn/java/awt/Dialog');
import WindowListener = require('nashorn/java/awt/event/WindowListener');
import WindowFocusListener = require('nashorn/java/awt/event/WindowFocusListener');
import WindowStateListener = require('nashorn/java/awt/event/WindowStateListener');
import Component = require('nashorn/java/awt/Component');
import Container = require('nashorn/java/awt/Container');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import BufferStrategy = require('nashorn/java/awt/image/BufferStrategy');
import Shape = require('nashorn/java/awt/Shape');
import Color = require('nashorn/java/awt/Color');
import Frame = require('nashorn/java/awt/Frame');
import GraphicsConfiguration = require('nashorn/java/awt/GraphicsConfiguration');
import IdentityArrayList = require('nashorn/sun/awt/util/IdentityArrayList');
import AppContext = require('nashorn/sun/awt/AppContext');
import WindowEvent = require('nashorn/java/awt/event/WindowEvent');
import ResourceBundle = require('nashorn/java/util/ResourceBundle');
import WeakReference = require('nashorn/java/lang/ref/WeakReference');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import MouseWheelEvent = require('nashorn/java/awt/event/MouseWheelEvent');
import Point2D = require('nashorn/java/awt/geom/Point2D');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import Enum = require('nashorn/java/lang/Enum');
import DisposerRecord = require('nashorn/sun/java2d/DisposerRecord');

declare class Window {
	iconImages : List<Image>;
	toolkit : Toolkit;
	warningString : string;
	locale : Locale;
	inputContext : InputContext;
	owner : Window;
	ownedWindows : Window[];
	static windows : Window[];
	static ownerlessWindows : Window[];
	modalExclusionType : Dialog.ModalExclusionType;
	windowListeners : WindowListener[];
	windowFocusListeners : WindowFocusListener[];
	windowStateListeners : WindowStateListener[];
	alwaysOnTopSupported : boolean;
	alwaysOnTop : boolean;
	focusOwner : Component;
	mostRecentFocusOwner : Component;
	active : boolean;
	focused : boolean;
	focusCycleRoot : boolean;
	focusCycleRootAncestor : Container;
	focusableWindow : boolean;
	focusableWindowState : boolean;
	autoRequestFocus : boolean;
	validateRoot : boolean;
	showing : boolean;
	type : Window.Type;
	accessibleContext : AccessibleContext;
	bufferStrategy : BufferStrategy;
	locationByPlatform : boolean;
	opacity : number;
	shape : Shape;
	background : Color;
	opaque : boolean;
	constructor(arg1 : Frame);
	constructor(arg1 : Window);
	constructor(arg1 : Window, arg2 : GraphicsConfiguration);
	static initIDs() : void;
	initGC(arg1 : GraphicsConfiguration) : GraphicsConfiguration;
	init(arg1 : GraphicsConfiguration) : void;
	ownedInit(arg1 : Window) : void;
	getIconImages() : List<Image>;
	setIconImages(arg1 : List<Image>) : void;
	setIconImage(arg1 : Image) : void;
	pack() : void;
	setClientSize(arg1 : number, arg2 : number) : void;
	closeSplashScreen() : void;
	static updateChildFocusableWindowState(arg1 : Window) : void;
	postWindowEvent(arg1 : number) : void;
	dispose() : void;
	disposeImpl() : void;
	doDispose() : void;
	toFront() : void;
	toFront_NoClientCode() : void;
	toBack() : void;
	toBack_NoClientCode() : void;
	getWarningString() : string;
	setWarningString() : void;
	getOwner() : Window;
	getOwner_NoClientCode() : Window;
	getOwnedWindows() : Window[];
	getOwnedWindows_NoClientCode() : Window[];
	isModalBlocked() : boolean;
	setModalBlocked(arg1 : Dialog, arg2 : boolean, arg3 : boolean) : void;
	getModalBlocker() : Dialog;
	static getAllWindows() : IdentityArrayList<Window>;
	static getAllUnblockedWindows() : IdentityArrayList<Window>;
	static getWindows(arg1 : AppContext) : Window[];
	static getWindows() : Window[];
	static getOwnerlessWindows() : Window[];
	getDocumentRoot() : Window;
	setModalExclusionType(arg1 : Dialog.ModalExclusionType) : void;
	getModalExclusionType() : Dialog.ModalExclusionType;
	isModalExcluded(arg1 : Dialog.ModalExclusionType) : boolean;
	updateChildrenBlocking() : void;
	addWindowListener(arg1 : WindowListener) : void;
	addWindowStateListener(arg1 : WindowStateListener) : void;
	addWindowFocusListener(arg1 : WindowFocusListener) : void;
	removeWindowListener(arg1 : WindowListener) : void;
	removeWindowStateListener(arg1 : WindowStateListener) : void;
	removeWindowFocusListener(arg1 : WindowFocusListener) : void;
	getWindowListeners() : WindowListener[];
	getWindowFocusListeners() : WindowFocusListener[];
	getWindowStateListeners() : WindowStateListener[];
	processWindowEvent(arg1 : WindowEvent) : void;
	processWindowFocusEvent(arg1 : WindowEvent) : void;
	processWindowStateEvent(arg1 : WindowEvent) : void;
	setAlwaysOnTop(arg1 : boolean) : void;
	isAlwaysOnTopSupported() : boolean;
	isAlwaysOnTop() : boolean;
	getFocusOwner() : Component;
	getMostRecentFocusOwner() : Component;
	isActive() : boolean;
	isFocused() : boolean;
	isFocusableWindow() : boolean;
	getFocusableWindowState() : boolean;
	setFocusableWindowState(arg1 : boolean) : void;
	setAutoRequestFocus(arg1 : boolean) : void;
	isAutoRequestFocus() : boolean;
	isDisposing() : boolean;
	applyResourceBundle(arg1 : ResourceBundle) : void;
	applyResourceBundle(arg1 : string) : void;
	addOwnedWindow(arg1 : WeakReference<Window>) : void;
	removeOwnedWindow(arg1 : WeakReference<Window>) : void;
	connectOwnedWindow(arg1 : Window) : void;
	addToWindowList() : void;
	static removeFromWindowList(arg1 : AppContext, arg2 : WeakReference<Window>) : void;
	removeFromWindowList() : void;
	setType(arg1 : Window.Type) : void;
	getType() : Window.Type;
	writeObject(arg1 : ObjectOutputStream) : void;
	initDeserializedWindow() : void;
	deserializeResources(arg1 : ObjectInputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	setLocationRelativeTo(arg1 : Component) : void;
	deliverMouseWheelToAncestor(arg1 : MouseWheelEvent) : void;
	getTemporaryLostComponent() : Component;
	setTemporaryLostComponent(arg1 : Component) : Component;
	setLocationByPlatform(arg1 : boolean) : void;
	isLocationByPlatform() : boolean;
	getOpacity() : number;
	setOpacity(arg1 : number) : void;
	getShape() : Shape;
	setShape(arg1 : Shape) : void;
	updateWindow() : void;
	static setLayersOpaque(arg1 : Component, arg2 : boolean) : void;
	static limit(arg1 : number, arg2 : number, arg3 : number) : number;
	calculateSecurityWarningPosition(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Point2D;
}


declare interface Window extends Container, Accessible {}

declare module Window {
	class AccessibleAWTWindow {
		accessibleRole : AccessibleRole;
		accessibleStateSet : AccessibleStateSet;
	}


	interface AccessibleAWTWindow extends Container.AccessibleAWTContainer {}	class Type {
		static NORMAL : Window.Type;
		static UTILITY : Window.Type;
		static POPUP : Window.Type;
	}


	interface Type extends Enum<Window.Type> {}	class WindowDisposerRecord {
		updateOwner() : void;
	}


	interface WindowDisposerRecord extends DisposerRecord {}}

export = Window
