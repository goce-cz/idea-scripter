import Point2D = require('nashorn/java/awt/geom/Point2D');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Shape = require('nashorn/java/awt/Shape');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Rectangle2D = require('nashorn/java/awt/geom/Rectangle2D');
import Serializable = require('nashorn/java/io/Serializable');

declare class Line2D {
	x1 : number;
	y1 : number;
	p1 : Point2D;
	x2 : number;
	y2 : number;
	p2 : Point2D;
	bounds : Rectangle;
	getX1() : number;
	getY1() : number;
	getP1() : Point2D;
	getX2() : number;
	getY2() : number;
	getP2() : Point2D;
	setLine(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	setLine(arg1 : Point2D, arg2 : Point2D) : void;
	setLine(arg1 : Line2D) : void;
	static relativeCCW(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : number;
	relativeCCW(arg1 : number, arg2 : number) : number;
	relativeCCW(arg1 : Point2D) : number;
	static linesIntersect(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number, arg7 : number, arg8 : number) : boolean;
	intersectsLine(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : boolean;
	intersectsLine(arg1 : Line2D) : boolean;
	static ptSegDistSq(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : number;
	static ptSegDist(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : number;
	ptSegDistSq(arg1 : number, arg2 : number) : number;
	ptSegDistSq(arg1 : Point2D) : number;
	ptSegDist(arg1 : number, arg2 : number) : number;
	ptSegDist(arg1 : Point2D) : number;
	static ptLineDistSq(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : number;
	static ptLineDist(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : number;
	ptLineDistSq(arg1 : number, arg2 : number) : number;
	ptLineDistSq(arg1 : Point2D) : number;
	ptLineDist(arg1 : number, arg2 : number) : number;
	ptLineDist(arg1 : Point2D) : number;
}


declare interface Line2D extends Shape, Cloneable {}

declare module Line2D {
	class Double {
		x1 : number;
		y1 : number;
		x2 : number;
		y2 : number;
		p1 : Point2D;
		p2 : Point2D;
		bounds2D : Rectangle2D;
		constructor();
		constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number);
		constructor(arg1 : Point2D, arg2 : Point2D);
	}


	interface Double extends Line2D, Serializable {}	class Float {
		x1 : number;
		y1 : number;
		x2 : number;
		y2 : number;
		p1 : Point2D;
		p2 : Point2D;
		bounds2D : Rectangle2D;
		constructor();
		constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number);
		constructor(arg1 : Point2D, arg2 : Point2D);
		setLine(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	}


	interface Float extends Line2D, Serializable {}}

export = Line2D
