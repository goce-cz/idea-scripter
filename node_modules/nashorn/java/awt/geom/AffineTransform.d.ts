import Point2D = require('nashorn/java/awt/geom/Point2D');
import Shape = require('nashorn/java/awt/Shape');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Serializable = require('nashorn/java/io/Serializable');

declare class AffineTransform {
	static TYPE_IDENTITY : number;
	static TYPE_TRANSLATION : number;
	static TYPE_UNIFORM_SCALE : number;
	static TYPE_GENERAL_SCALE : number;
	static TYPE_MASK_SCALE : number;
	static TYPE_FLIP : number;
	static TYPE_QUADRANT_ROTATION : number;
	static TYPE_GENERAL_ROTATION : number;
	static TYPE_MASK_ROTATION : number;
	static TYPE_GENERAL_TRANSFORM : number;
	type : number;
	determinant : number;
	scaleX : number;
	scaleY : number;
	shearX : number;
	shearY : number;
	translateX : number;
	translateY : number;
	identity : boolean;
	constructor();
	constructor(arg1 : AffineTransform);
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number);
	constructor(arg1 : number[]);
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number);
	constructor(arg1 : number[]);
	static getTranslateInstance(arg1 : number, arg2 : number) : AffineTransform;
	static getRotateInstance(arg1 : number) : AffineTransform;
	static getRotateInstance(arg1 : number, arg2 : number, arg3 : number) : AffineTransform;
	static getRotateInstance(arg1 : number, arg2 : number) : AffineTransform;
	static getRotateInstance(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : AffineTransform;
	static getQuadrantRotateInstance(arg1 : number) : AffineTransform;
	static getQuadrantRotateInstance(arg1 : number, arg2 : number, arg3 : number) : AffineTransform;
	static getScaleInstance(arg1 : number, arg2 : number) : AffineTransform;
	static getShearInstance(arg1 : number, arg2 : number) : AffineTransform;
	getType() : number;
	calculateType() : void;
	getDeterminant() : number;
	updateState() : void;
	stateError() : void;
	getMatrix(arg1 : number[]) : void;
	getScaleX() : number;
	getScaleY() : number;
	getShearX() : number;
	getShearY() : number;
	getTranslateX() : number;
	getTranslateY() : number;
	translate(arg1 : number, arg2 : number) : void;
	rotate90() : void;
	rotate180() : void;
	rotate270() : void;
	rotate(arg1 : number) : void;
	rotate(arg1 : number, arg2 : number, arg3 : number) : void;
	rotate(arg1 : number, arg2 : number) : void;
	rotate(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	quadrantRotate(arg1 : number) : void;
	quadrantRotate(arg1 : number, arg2 : number, arg3 : number) : void;
	scale(arg1 : number, arg2 : number) : void;
	shear(arg1 : number, arg2 : number) : void;
	setToIdentity() : void;
	setToTranslation(arg1 : number, arg2 : number) : void;
	setToRotation(arg1 : number) : void;
	setToRotation(arg1 : number, arg2 : number, arg3 : number) : void;
	setToRotation(arg1 : number, arg2 : number) : void;
	setToRotation(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	setToQuadrantRotation(arg1 : number) : void;
	setToQuadrantRotation(arg1 : number, arg2 : number, arg3 : number) : void;
	setToScale(arg1 : number, arg2 : number) : void;
	setToShear(arg1 : number, arg2 : number) : void;
	setTransform(arg1 : AffineTransform) : void;
	setTransform(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : void;
	concatenate(arg1 : AffineTransform) : void;
	preConcatenate(arg1 : AffineTransform) : void;
	createInverse() : AffineTransform;
	invert() : void;
	transform(arg1 : Point2D, arg2 : Point2D) : Point2D;
	transform(arg1 : Point2D[], arg2 : number, arg3 : Point2D[], arg4 : number, arg5 : number) : void;
	transform(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number, arg5 : number) : void;
	transform(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number, arg5 : number) : void;
	transform(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number, arg5 : number) : void;
	transform(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number, arg5 : number) : void;
	inverseTransform(arg1 : Point2D, arg2 : Point2D) : Point2D;
	inverseTransform(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number, arg5 : number) : void;
	deltaTransform(arg1 : Point2D, arg2 : Point2D) : Point2D;
	deltaTransform(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number, arg5 : number) : void;
	createTransformedShape(arg1 : Shape) : Shape;
	static _matround(arg1 : number) : number;
	isIdentity() : boolean;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface AffineTransform extends Cloneable, Serializable {}
export = AffineTransform
