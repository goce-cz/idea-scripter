import EventQueue = require('nashorn/java/awt/EventQueue');
import Conditional = require('nashorn/java/awt/Conditional');
import Component = require('nashorn/java/awt/Component');
import EventFilter = require('nashorn/java/awt/EventFilter');
import Throwable = require('nashorn/java/lang/Throwable');
import Thread = require('nashorn/java/lang/Thread');

declare class EventDispatchThread {
	eventQueue : EventQueue;
	stopDispatching() : void;
	pumpEvents(arg1 : Conditional) : void;
	pumpEventsForHierarchy(arg1 : Conditional, arg2 : Component) : void;
	pumpEvents(arg1 : number, arg2 : Conditional) : void;
	pumpEventsForHierarchy(arg1 : number, arg2 : Conditional, arg3 : Component) : void;
	pumpEventsForFilter(arg1 : Conditional, arg2 : EventFilter) : void;
	pumpEventsForFilter(arg1 : number, arg2 : Conditional, arg3 : EventFilter) : void;
	addEventFilter(arg1 : EventFilter) : void;
	removeEventFilter(arg1 : EventFilter) : void;
	pumpOneEventForFilters(arg1 : number) : void;
	processException(arg1 : Throwable) : void;
	getEventQueue() : EventQueue;
	setEventQueue(arg1 : EventQueue) : void;
}


declare interface EventDispatchThread extends Thread {}

declare module EventDispatchThread {
	class HierarchyEventFilter {
		constructor(arg1 : Component);
	}


	interface HierarchyEventFilter extends EventFilter {}}

export = EventDispatchThread
