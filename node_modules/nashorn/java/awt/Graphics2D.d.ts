import GraphicsConfiguration = require('nashorn/java/awt/GraphicsConfiguration');
import RenderingHints = require('nashorn/java/awt/RenderingHints');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import Paint = require('nashorn/java/awt/Paint');
import Composite = require('nashorn/java/awt/Composite');
import Color = require('nashorn/java/awt/Color');
import Stroke = require('nashorn/java/awt/Stroke');
import FontRenderContext = require('nashorn/java/awt/font/FontRenderContext');
import Shape = require('nashorn/java/awt/Shape');
import Image = require('nashorn/java/awt/Image');
import ImageObserver = require('nashorn/java/awt/image/ImageObserver');
import BufferedImage = require('nashorn/java/awt/image/BufferedImage');
import BufferedImageOp = require('nashorn/java/awt/image/BufferedImageOp');
import RenderedImage = require('nashorn/java/awt/image/RenderedImage');
import RenderableImage = require('nashorn/java/awt/image/renderable/RenderableImage');
import AttributedCharacterIterator = require('nashorn/java/text/AttributedCharacterIterator');
import GlyphVector = require('nashorn/java/awt/font/GlyphVector');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Object = require('nashorn/java/lang/Object');
import Map = require('nashorn/java/util/Map');
import Graphics = require('nashorn/java/awt/Graphics');

declare class Graphics2D {
	deviceConfiguration : GraphicsConfiguration;
	renderingHints : RenderingHints;
	transform : AffineTransform;
	paint : Paint;
	composite : Composite;
	background : Color;
	stroke : Stroke;
	fontRenderContext : FontRenderContext;
	draw(arg1 : Shape) : void;
	drawImage(arg1 : Image, arg2 : AffineTransform, arg3 : ImageObserver) : boolean;
	drawImage(arg1 : BufferedImage, arg2 : BufferedImageOp, arg3 : number, arg4 : number) : void;
	drawRenderedImage(arg1 : RenderedImage, arg2 : AffineTransform) : void;
	drawRenderableImage(arg1 : RenderableImage, arg2 : AffineTransform) : void;
	drawString(arg1 : string, arg2 : number, arg3 : number) : void;
	drawString(arg1 : AttributedCharacterIterator, arg2 : number, arg3 : number) : void;
	drawGlyphVector(arg1 : GlyphVector, arg2 : number, arg3 : number) : void;
	fill(arg1 : Shape) : void;
	hit(arg1 : Rectangle, arg2 : Shape, arg3 : boolean) : boolean;
	getDeviceConfiguration() : GraphicsConfiguration;
	setComposite(arg1 : Composite) : void;
	setPaint(arg1 : Paint) : void;
	setStroke(arg1 : Stroke) : void;
	setRenderingHint(arg1 : RenderingHints.Key, arg2 : Object) : void;
	getRenderingHint(arg1 : RenderingHints.Key) : Object;
	setRenderingHints(arg1 : Map<any, any>) : void;
	addRenderingHints(arg1 : Map<any, any>) : void;
	getRenderingHints() : RenderingHints;
	translate(arg1 : number, arg2 : number) : void;
	rotate(arg1 : number) : void;
	rotate(arg1 : number, arg2 : number, arg3 : number) : void;
	scale(arg1 : number, arg2 : number) : void;
	shear(arg1 : number, arg2 : number) : void;
	transform(arg1 : AffineTransform) : void;
	setTransform(arg1 : AffineTransform) : void;
	getTransform() : AffineTransform;
	getPaint() : Paint;
	getComposite() : Composite;
	setBackground(arg1 : Color) : void;
	getBackground() : Color;
	getStroke() : Stroke;
	clip(arg1 : Shape) : void;
	getFontRenderContext() : FontRenderContext;
}


declare interface Graphics2D extends Graphics {}
export = Graphics2D
