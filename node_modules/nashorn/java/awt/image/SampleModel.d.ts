import Object = require('nashorn/java/lang/Object');
import DataBuffer = require('nashorn/java/awt/image/DataBuffer');

declare class SampleModel extends Object {
	width : number;
	height : number;
	numBands : number;
	numDataElements : number;
	dataType : number;
	transferType : number;
	sampleSize : number[];
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number);
	static initIDs() : void;
	getWidth() : number;
	getHeight() : number;
	getNumBands() : number;
	getNumDataElements() : number;
	getDataType() : number;
	getTransferType() : number;
	getPixel(arg1 : number, arg2 : number, arg3 : number[], arg4 : DataBuffer) : number[];
	getDataElements(arg1 : number, arg2 : number, arg3 : Object, arg4 : DataBuffer) : Object;
	getDataElements(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : Object, arg6 : DataBuffer) : Object;
	setDataElements(arg1 : number, arg2 : number, arg3 : Object, arg4 : DataBuffer) : void;
	setDataElements(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : Object, arg6 : DataBuffer) : void;
	getPixel(arg1 : number, arg2 : number, arg3 : number[], arg4 : DataBuffer) : number[];
	getPixel(arg1 : number, arg2 : number, arg3 : number[], arg4 : DataBuffer) : number[];
	getPixels(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : DataBuffer) : number[];
	getPixels(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : DataBuffer) : number[];
	getPixels(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : DataBuffer) : number[];
	getSample(arg1 : number, arg2 : number, arg3 : number, arg4 : DataBuffer) : number;
	getSampleFloat(arg1 : number, arg2 : number, arg3 : number, arg4 : DataBuffer) : number;
	getSampleDouble(arg1 : number, arg2 : number, arg3 : number, arg4 : DataBuffer) : number;
	getSamples(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[], arg7 : DataBuffer) : number[];
	getSamples(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[], arg7 : DataBuffer) : number[];
	getSamples(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[], arg7 : DataBuffer) : number[];
	setPixel(arg1 : number, arg2 : number, arg3 : number[], arg4 : DataBuffer) : void;
	setPixel(arg1 : number, arg2 : number, arg3 : number[], arg4 : DataBuffer) : void;
	setPixel(arg1 : number, arg2 : number, arg3 : number[], arg4 : DataBuffer) : void;
	setPixels(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : DataBuffer) : void;
	setPixels(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : DataBuffer) : void;
	setPixels(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : DataBuffer) : void;
	setSample(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : DataBuffer) : void;
	setSample(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : DataBuffer) : void;
	setSample(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : DataBuffer) : void;
	setSamples(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[], arg7 : DataBuffer) : void;
	setSamples(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[], arg7 : DataBuffer) : void;
	setSamples(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[], arg7 : DataBuffer) : void;
	createCompatibleSampleModel(arg1 : number, arg2 : number) : SampleModel;
	createSubsetSampleModel(arg1 : number[]) : SampleModel;
	createDataBuffer() : DataBuffer;
	getSampleSize() : number[];
	getSampleSize(arg1 : number) : number;
}

export = SampleModel
