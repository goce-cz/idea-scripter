import Object = require('nashorn/java/lang/Object');
import Rectangle = require('nashorn/java/awt/Rectangle');
import DataBuffer = require('nashorn/java/awt/image/DataBuffer');
import SampleModel = require('nashorn/java/awt/image/SampleModel');
import Point = require('nashorn/java/awt/Point');
import WritableRaster = require('nashorn/java/awt/image/WritableRaster');

declare class Raster extends Object {
	parent : Raster;
	sampleModelTranslateX : number;
	sampleModelTranslateY : number;
	bounds : Rectangle;
	minX : number;
	minY : number;
	width : number;
	height : number;
	numBands : number;
	numDataElements : number;
	transferType : number;
	dataBuffer : DataBuffer;
	sampleModel : SampleModel;
	static initIDs() : void;
	static createInterleavedRaster(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : Point) : WritableRaster;
	static createInterleavedRaster(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[], arg7 : Point) : WritableRaster;
	static createBandedRaster(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : Point) : WritableRaster;
	static createBandedRaster(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : number[], arg7 : Point) : WritableRaster;
	static createPackedRaster(arg1 : number, arg2 : number, arg3 : number, arg4 : number[], arg5 : Point) : WritableRaster;
	static createPackedRaster(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : Point) : WritableRaster;
	static createInterleavedRaster(arg1 : DataBuffer, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[], arg7 : Point) : WritableRaster;
	static createBandedRaster(arg1 : DataBuffer, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : number[], arg7 : Point) : WritableRaster;
	static createPackedRaster(arg1 : DataBuffer, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : Point) : WritableRaster;
	static createPackedRaster(arg1 : DataBuffer, arg2 : number, arg3 : number, arg4 : number, arg5 : Point) : WritableRaster;
	static createRaster(arg1 : SampleModel, arg2 : DataBuffer, arg3 : Point) : Raster;
	static createWritableRaster(arg1 : SampleModel, arg2 : Point) : WritableRaster;
	static createWritableRaster(arg1 : SampleModel, arg2 : DataBuffer, arg3 : Point) : WritableRaster;
	getParent() : Raster;
	getSampleModelTranslateX() : number;
	getSampleModelTranslateY() : number;
	createCompatibleWritableRaster() : WritableRaster;
	createCompatibleWritableRaster(arg1 : number, arg2 : number) : WritableRaster;
	createCompatibleWritableRaster(arg1 : Rectangle) : WritableRaster;
	createCompatibleWritableRaster(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : WritableRaster;
	createTranslatedChild(arg1 : number, arg2 : number) : Raster;
	createChild(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number, arg7 : number[]) : Raster;
	getBounds() : Rectangle;
	getMinX() : number;
	getMinY() : number;
	getWidth() : number;
	getHeight() : number;
	getNumBands() : number;
	getNumDataElements() : number;
	getTransferType() : number;
	getDataBuffer() : DataBuffer;
	getSampleModel() : SampleModel;
	getDataElements(arg1 : number, arg2 : number, arg3 : Object) : Object;
	getDataElements(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : Object) : Object;
	getPixel(arg1 : number, arg2 : number, arg3 : number[]) : number[];
	getPixel(arg1 : number, arg2 : number, arg3 : number[]) : number[];
	getPixel(arg1 : number, arg2 : number, arg3 : number[]) : number[];
	getPixels(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[]) : number[];
	getPixels(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[]) : number[];
	getPixels(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[]) : number[];
	getSample(arg1 : number, arg2 : number, arg3 : number) : number;
	getSampleFloat(arg1 : number, arg2 : number, arg3 : number) : number;
	getSampleDouble(arg1 : number, arg2 : number, arg3 : number) : number;
	getSamples(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[]) : number[];
	getSamples(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[]) : number[];
	getSamples(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number[]) : number[];
}

export = Raster
