import Object = require('nashorn/java/lang/Object');
import Raster = require('nashorn/java/awt/image/Raster');
import BufferedImage = require('nashorn/java/awt/image/BufferedImage');
import ColorModel = require('nashorn/java/awt/image/ColorModel');

declare class IndexColorModel {
	transparency : number;
	componentSize : number[];
	mapSize : number;
	transparentPixel : number;
	valid : boolean;
	validPixels : number;
	constructor(arg1 : number, arg2 : number, arg3 : number[], arg4 : number[], arg5 : number[]);
	constructor(arg1 : number, arg2 : number, arg3 : number[], arg4 : number[], arg5 : number[], arg6 : number);
	constructor(arg1 : number, arg2 : number, arg3 : number[], arg4 : number[], arg5 : number[], arg6 : number[]);
	constructor(arg1 : number, arg2 : number, arg3 : number[], arg4 : number, arg5 : boolean);
	constructor(arg1 : number, arg2 : number, arg3 : number[], arg4 : number, arg5 : boolean, arg6 : number);
	constructor(arg1 : number, arg2 : number, arg3 : number[], arg4 : number, arg5 : boolean, arg6 : number, arg7 : number);
	constructor(arg1 : number, arg2 : number, arg3 : number[], arg4 : number, arg5 : number, arg6 : number);
	static initIDs() : void;
	setRGBs(arg1 : number, arg2 : number[], arg3 : number[], arg4 : number[], arg5 : number[]) : void;
	setRGBs(arg1 : number, arg2 : number[], arg3 : number, arg4 : boolean) : void;
	calcRealMapSize(arg1 : number, arg2 : number) : number;
	getAllValid() : number;
	getMapSize() : number;
	getTransparentPixel() : number;
	getReds(arg1 : number[]) : void;
	getGreens(arg1 : number[]) : void;
	getBlues(arg1 : number[]) : void;
	getAlphas(arg1 : number[]) : void;
	getRGBs(arg1 : number[]) : void;
	setTransparentPixel(arg1 : number) : void;
	setTransparency(arg1 : number) : void;
	calculatePixelMask() : void;
	installpixel(arg1 : Object, arg2 : number) : Object;
	convertToIntDiscrete(arg1 : Raster, arg2 : boolean) : BufferedImage;
	isValid(arg1 : number) : boolean;
	isValid() : boolean;
	getValidPixels() : number;
}


declare interface IndexColorModel extends ColorModel {}
export = IndexColorModel
