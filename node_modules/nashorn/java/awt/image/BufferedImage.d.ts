import ColorModel = require('nashorn/java/awt/image/ColorModel');
import WritableRaster = require('nashorn/java/awt/image/WritableRaster');
import ImageProducer = require('nashorn/java/awt/image/ImageProducer');
import Graphics = require('nashorn/java/awt/Graphics');
import Vector = require('nashorn/java/util/Vector');
import RenderedImage = require('nashorn/java/awt/image/RenderedImage');
import SampleModel = require('nashorn/java/awt/image/SampleModel');
import Raster = require('nashorn/java/awt/image/Raster');
import Point = require('nashorn/java/awt/Point');
import IndexColorModel = require('nashorn/java/awt/image/IndexColorModel');
import Hashtable = require('nashorn/java/util/Hashtable');
import Graphics2D = require('nashorn/java/awt/Graphics2D');
import Image = require('nashorn/java/awt/Image');
import WritableRenderedImage = require('nashorn/java/awt/image/WritableRenderedImage');
import Transparency = require('nashorn/java/awt/Transparency');

declare class BufferedImage {
	static TYPE_CUSTOM : number;
	static TYPE_INT_RGB : number;
	static TYPE_INT_ARGB : number;
	static TYPE_INT_ARGB_PRE : number;
	static TYPE_INT_BGR : number;
	static TYPE_3BYTE_BGR : number;
	static TYPE_4BYTE_ABGR : number;
	static TYPE_4BYTE_ABGR_PRE : number;
	static TYPE_USHORT_565_RGB : number;
	static TYPE_USHORT_555_RGB : number;
	static TYPE_BYTE_GRAY : number;
	static TYPE_USHORT_GRAY : number;
	static TYPE_BYTE_BINARY : number;
	static TYPE_BYTE_INDEXED : number;
	type : number;
	colorModel : ColorModel;
	raster : WritableRaster;
	alphaRaster : WritableRaster;
	width : number;
	height : number;
	source : ImageProducer;
	graphics : Graphics;
	alphaPremultiplied : boolean;
	sources : Vector<RenderedImage>;
	propertyNames : string[];
	minX : number;
	minY : number;
	sampleModel : SampleModel;
	numXTiles : number;
	numYTiles : number;
	minTileX : number;
	minTileY : number;
	tileWidth : number;
	tileHeight : number;
	tileGridXOffset : number;
	tileGridYOffset : number;
	data : Raster;
	writableTileIndices : Point[];
	transparency : number;
	constructor(arg1 : number, arg2 : number, arg3 : number);
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : IndexColorModel);
	constructor(arg1 : ColorModel, arg2 : WritableRaster, arg3 : boolean, arg4 : Hashtable<any, any>);
	static initIDs() : void;
	static isStandard(arg1 : ColorModel, arg2 : WritableRaster) : boolean;
	getType() : number;
	getRaster() : WritableRaster;
	getAlphaRaster() : WritableRaster;
	getRGB(arg1 : number, arg2 : number) : number;
	getRGB(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : number, arg7 : number) : number[];
	setRGB(arg1 : number, arg2 : number, arg3 : number) : void;
	setRGB(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number[], arg6 : number, arg7 : number) : void;
	createGraphics() : Graphics2D;
	getSubimage(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : BufferedImage;
	isAlphaPremultiplied() : boolean;
	coerceData(arg1 : boolean) : void;
}


declare interface BufferedImage extends Image, WritableRenderedImage, Transparency {}
export = BufferedImage
