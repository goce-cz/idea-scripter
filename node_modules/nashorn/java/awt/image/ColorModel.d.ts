import ColorSpace = require('nashorn/java/awt/color/ColorSpace');
import Object = require('nashorn/java/lang/Object');
import WritableRaster = require('nashorn/java/awt/image/WritableRaster');
import Raster = require('nashorn/java/awt/image/Raster');
import SampleModel = require('nashorn/java/awt/image/SampleModel');
import ICC_ColorSpace = require('nashorn/java/awt/color/ICC_ColorSpace');
import Transparency = require('nashorn/java/awt/Transparency');

declare class ColorModel {
	static rGBdefault : ColorModel;
	alphaPremultiplied : boolean;
	transferType : number;
	pixelSize : number;
	componentSize : number[];
	transparency : number;
	numComponents : number;
	numColorComponents : number;
	colorSpace : ColorSpace;
	constructor(arg1 : number);
	static loadLibraries() : void;
	static initIDs() : void;
	static getRGBdefault() : ColorModel;
	hasAlpha() : boolean;
	isAlphaPremultiplied() : boolean;
	getTransferType() : number;
	getPixelSize() : number;
	getComponentSize(arg1 : number) : number;
	getComponentSize() : number[];
	getNumComponents() : number;
	getNumColorComponents() : number;
	getRed(arg1 : number) : number;
	getGreen(arg1 : number) : number;
	getBlue(arg1 : number) : number;
	getAlpha(arg1 : number) : number;
	getRGB(arg1 : number) : number;
	getRed(arg1 : Object) : number;
	getGreen(arg1 : Object) : number;
	getBlue(arg1 : Object) : number;
	getAlpha(arg1 : Object) : number;
	getRGB(arg1 : Object) : number;
	getDataElements(arg1 : number, arg2 : Object) : Object;
	getComponents(arg1 : number, arg2 : number[], arg3 : number) : number[];
	getComponents(arg1 : Object, arg2 : number[], arg3 : number) : number[];
	getUnnormalizedComponents(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number) : number[];
	getNormalizedComponents(arg1 : number[], arg2 : number, arg3 : number[], arg4 : number) : number[];
	getDataElement(arg1 : number[], arg2 : number) : number;
	getDataElements(arg1 : number[], arg2 : number, arg3 : Object) : Object;
	getDataElement(arg1 : number[], arg2 : number) : number;
	getDataElements(arg1 : number[], arg2 : number, arg3 : Object) : Object;
	getNormalizedComponents(arg1 : Object, arg2 : number[], arg3 : number) : number[];
	getColorSpace() : ColorSpace;
	coerceData(arg1 : WritableRaster, arg2 : boolean) : ColorModel;
	isCompatibleRaster(arg1 : Raster) : boolean;
	createCompatibleWritableRaster(arg1 : number, arg2 : number) : WritableRaster;
	createCompatibleSampleModel(arg1 : number, arg2 : number) : SampleModel;
	isCompatibleSampleModel(arg1 : SampleModel) : boolean;
	getAlphaRaster(arg1 : WritableRaster) : WritableRaster;
	static getDefaultTransferType(arg1 : number) : number;
	static isLinearRGBspace(arg1 : ColorSpace) : boolean;
	static isLinearGRAYspace(arg1 : ColorSpace) : boolean;
	static getLinearRGB8TosRGB8LUT() : number[];
	static getsRGB8ToLinearRGB8LUT() : number[];
	static getLinearRGB16TosRGB8LUT() : number[];
	static getsRGB8ToLinearRGB16LUT() : number[];
	static getGray8TosRGB8LUT(arg1 : ICC_ColorSpace) : number[];
	static getLinearGray16ToOtherGray8LUT(arg1 : ICC_ColorSpace) : number[];
	static getGray16TosRGB8LUT(arg1 : ICC_ColorSpace) : number[];
	static getLinearGray16ToOtherGray16LUT(arg1 : ICC_ColorSpace) : number[];
}


declare interface ColorModel extends Transparency {}
export = ColorModel
