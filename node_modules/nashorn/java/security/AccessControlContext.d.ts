import Object = require('nashorn/java/lang/Object');
import DomainCombiner = require('nashorn/java/security/DomainCombiner');
import ProtectionDomain = require('nashorn/java/security/ProtectionDomain');
import Debug = require('nashorn/sun/security/util/Debug');
import Permission = require('nashorn/java/security/Permission');

declare class AccessControlContext extends Object {
	domainCombiner : DomainCombiner;
	constructor(arg1 : ProtectionDomain[]);
	constructor(arg1 : AccessControlContext, arg2 : DomainCombiner);
	static getDebug() : Debug;
	getContext() : ProtectionDomain[];
	isPrivileged() : boolean;
	getAssignedCombiner() : DomainCombiner;
	getDomainCombiner() : DomainCombiner;
	getCombiner() : DomainCombiner;
	isAuthorized() : boolean;
	checkPermission(arg1 : Permission) : void;
	checkPermission2(arg1 : Permission) : void;
	optimize() : AccessControlContext;
	static combine(arg1 : ProtectionDomain[], arg2 : ProtectionDomain[]) : ProtectionDomain[];
	calculateFields(arg1 : AccessControlContext, arg2 : AccessControlContext, arg3 : Permission[]) : void;
	equalContext(arg1 : AccessControlContext) : boolean;
	equalPDs(arg1 : ProtectionDomain[], arg2 : ProtectionDomain[]) : boolean;
	equalLimitedContext(arg1 : AccessControlContext) : boolean;
	static getNextPC(arg1 : AccessControlContext) : AccessControlContext;
	static containsAllPDs(arg1 : ProtectionDomain[], arg2 : ProtectionDomain[]) : boolean;
	containsAllLimits(arg1 : AccessControlContext) : boolean;
}

export = AccessControlContext
