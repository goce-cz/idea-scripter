import Set = require('nashorn/java/util/Set');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Object = require('nashorn/java/lang/Object');
import Map = require('nashorn/java/util/Map');
import BiFunction = require('nashorn/java/util/function/BiFunction');
import Function = require('nashorn/java/util/function/Function');
import Properties = require('nashorn/java/util/Properties');
import Class = require('nashorn/java/lang/Class');
import List = require('nashorn/java/util/List');
import Key = require('nashorn/java/security/Key');

declare class Provider {
	name : string;
	version : number;
	info : string;
	services : Set<Provider.Service>;
	getName() : string;
	getVersion() : number;
	getInfo() : string;
	checkInitialized() : void;
	check(arg1 : string) : void;
	putId() : void;
	readObject(arg1 : ObjectInputStream) : void;
	checkLegacy(arg1 : Object) : boolean;
	implPutAll(arg1 : Map<any, any>) : void;
	implRemove(arg1 : Object) : Object;
	implRemove(arg1 : Object, arg2 : Object) : boolean;
	implReplace(arg1 : Object, arg2 : Object, arg3 : Object) : boolean;
	implReplace(arg1 : Object, arg2 : Object) : Object;
	implReplaceAll(arg1 : BiFunction<any, any, Object>) : void;
	implMerge(arg1 : Object, arg2 : Object, arg3 : BiFunction<any, any, Object>) : Object;
	implCompute(arg1 : Object, arg2 : BiFunction<any, any, Object>) : Object;
	implComputeIfAbsent(arg1 : Object, arg2 : Function<any, Object>) : Object;
	implComputeIfPresent(arg1 : Object, arg2 : BiFunction<any, any, Object>) : Object;
	implPut(arg1 : Object, arg2 : Object) : Object;
	implPutIfAbsent(arg1 : Object, arg2 : Object) : Object;
	implClear() : void;
	ensureLegacyParsed() : void;
	removeInvalidServices(arg1 : Map<Provider.ServiceKey, Provider.Service>) : void;
	getTypeAndAlgorithm(arg1 : string) : string[];
	parseLegacyPut(arg1 : string, arg2 : string) : void;
	getService(arg1 : string, arg2 : string) : Provider.Service;
	getServices() : Set<Provider.Service>;
	putService(arg1 : Provider.Service) : void;
	putPropertyStrings(arg1 : Provider.Service) : void;
	removePropertyStrings(arg1 : Provider.Service) : void;
	removeService(arg1 : Provider.Service) : void;
	implRemoveService(arg1 : Provider.Service) : void;
	static addEngine(arg1 : string, arg2 : boolean, arg3 : string) : void;
	static getEngineName(arg1 : string) : string;
}


declare interface Provider extends Properties {}

declare module Provider {
	class EngineDescription extends Object {
		getConstructorParameterClass() : Class<any>;
	}
	class Service extends Object {
		type : string;
		algorithm : string;
		provider : Provider;
		className : string;
		constructor(arg1 : Provider, arg2 : string, arg3 : string, arg4 : string, arg5 : List<string>, arg6 : Map<string, string>);
		isValid() : boolean;
		addAlias(arg1 : string) : void;
		addAttribute(arg1 : string, arg2 : string) : void;
		getType() : string;
		getAlgorithm() : string;
		getProvider() : Provider;
		getClassName() : string;
		getAliases() : List<string>;
		getAttribute(arg1 : string) : string;
		newInstance(arg1 : Object) : Object;
		getImplClass() : Class<any>;
		newInstanceGeneric(arg1 : Object) : Object;
		supportsParameter(arg1 : Object) : boolean;
		hasKeyAttributes() : boolean;
		getKeyClass(arg1 : string) : Class<any>;
		supportsKeyFormat(arg1 : Key) : boolean;
		supportsKeyClass(arg1 : Key) : boolean;
	}
	class ServiceKey extends Object {
		matches(arg1 : string, arg2 : string) : boolean;
	}
	class UString extends Object {
	}
}

export = Provider
