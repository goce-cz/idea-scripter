import InternalFrameUI = require('nashorn/javax/swing/plaf/InternalFrameUI');
import JMenuBar = require('nashorn/javax/swing/JMenuBar');
import Container = require('nashorn/java/awt/Container');
import JLayeredPane = require('nashorn/javax/swing/JLayeredPane');
import Component = require('nashorn/java/awt/Component');
import JRootPane = require('nashorn/javax/swing/JRootPane');
import Icon = require('nashorn/javax/swing/Icon');
import Cursor = require('nashorn/java/awt/Cursor');
import JDesktopPane = require('nashorn/javax/swing/JDesktopPane');
import Rectangle = require('nashorn/java/awt/Rectangle');
import InternalFrameListener = require('nashorn/javax/swing/event/InternalFrameListener');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import JComponent = require('nashorn/javax/swing/JComponent');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import WindowConstants = require('nashorn/javax/swing/WindowConstants');
import RootPaneContainer = require('nashorn/javax/swing/RootPaneContainer');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleValue = require('nashorn/javax/accessibility/AccessibleValue');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import DesktopIconUI = require('nashorn/javax/swing/plaf/DesktopIconUI');

declare class JInternalFrame {
	static CONTENT_PANE_PROPERTY : string;
	static MENU_BAR_PROPERTY : string;
	static TITLE_PROPERTY : string;
	static LAYERED_PANE_PROPERTY : string;
	static ROOT_PANE_PROPERTY : string;
	static GLASS_PANE_PROPERTY : string;
	static FRAME_ICON_PROPERTY : string;
	static IS_SELECTED_PROPERTY : string;
	static IS_CLOSED_PROPERTY : string;
	static IS_MAXIMUM_PROPERTY : string;
	static IS_ICON_PROPERTY : string;
	uI : InternalFrameUI;
	uIClassID : string;
	menuBar : JMenuBar;
	jMenuBar : JMenuBar;
	contentPane : Container;
	layeredPane : JLayeredPane;
	glassPane : Component;
	rootPane : JRootPane;
	closable : boolean;
	closed : boolean;
	resizable : boolean;
	iconifiable : boolean;
	icon : boolean;
	maximizable : boolean;
	maximum : boolean;
	title : string;
	selected : boolean;
	frameIcon : Icon;
	lastCursor : Cursor;
	layer : number;
	desktopPane : JDesktopPane;
	desktopIcon : JInternalFrame.JDesktopIcon;
	normalBounds : Rectangle;
	focusOwner : Component;
	mostRecentFocusOwner : Component;
	internalFrameListeners : InternalFrameListener[];
	defaultCloseOperation : number;
	focusCycleRoot : boolean;
	focusCycleRootAncestor : Container;
	warningString : string;
	accessibleContext : AccessibleContext;
	constructor();
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : boolean);
	constructor(arg1 : string, arg2 : boolean, arg3 : boolean);
	constructor(arg1 : string, arg2 : boolean, arg3 : boolean, arg4 : boolean);
	constructor(arg1 : string, arg2 : boolean, arg3 : boolean, arg4 : boolean, arg5 : boolean);
	static addPropertyChangeListenerIfNecessary() : void;
	static updateLastFocusOwner(arg1 : Component) : void;
	createRootPane() : JRootPane;
	getUI() : InternalFrameUI;
	setUI(arg1 : InternalFrameUI) : void;
	updateUIWhenHidden() : void;
	isRootPaneCheckingEnabled() : boolean;
	setRootPaneCheckingEnabled(arg1 : boolean) : void;
	getMenuBar() : JMenuBar;
	getJMenuBar() : JMenuBar;
	setMenuBar(arg1 : JMenuBar) : void;
	setJMenuBar(arg1 : JMenuBar) : void;
	setRootPane(arg1 : JRootPane) : void;
	setClosable(arg1 : boolean) : void;
	isClosable() : boolean;
	isClosed() : boolean;
	setClosed(arg1 : boolean) : void;
	setResizable(arg1 : boolean) : void;
	isResizable() : boolean;
	setIconifiable(arg1 : boolean) : void;
	isIconifiable() : boolean;
	isIcon() : boolean;
	setIcon(arg1 : boolean) : void;
	setMaximizable(arg1 : boolean) : void;
	isMaximizable() : boolean;
	isMaximum() : boolean;
	setMaximum(arg1 : boolean) : void;
	getTitle() : string;
	setTitle(arg1 : string) : void;
	setSelected(arg1 : boolean) : void;
	isSelected() : boolean;
	setFrameIcon(arg1 : Icon) : void;
	getFrameIcon() : Icon;
	moveToFront() : void;
	moveToBack() : void;
	getLastCursor() : Cursor;
	setLayer(arg1 : number) : void;
	setLayer(arg1 : number) : void;
	getLayer() : number;
	getDesktopPane() : JDesktopPane;
	setDesktopIcon(arg1 : JInternalFrame.JDesktopIcon) : void;
	getDesktopIcon() : JInternalFrame.JDesktopIcon;
	getNormalBounds() : Rectangle;
	setNormalBounds(arg1 : Rectangle) : void;
	getFocusOwner() : Component;
	getMostRecentFocusOwner() : Component;
	restoreSubcomponentFocus() : void;
	setLastFocusOwner(arg1 : Component) : void;
	addInternalFrameListener(arg1 : InternalFrameListener) : void;
	removeInternalFrameListener(arg1 : InternalFrameListener) : void;
	getInternalFrameListeners() : InternalFrameListener[];
	fireInternalFrameEvent(arg1 : number) : void;
	doDefaultCloseAction() : void;
	setDefaultCloseOperation(arg1 : number) : void;
	getDefaultCloseOperation() : number;
	pack() : void;
	dispose() : void;
	toFront() : void;
	toBack() : void;
	getWarningString() : string;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface JInternalFrame extends JComponent, Accessible, WindowConstants, RootPaneContainer {}

declare module JInternalFrame {
	class AccessibleJInternalFrame {
		accessibleName : string;
		accessibleRole : AccessibleRole;
		accessibleValue : AccessibleValue;
		currentAccessibleValue : number;
		minimumAccessibleValue : number;
		maximumAccessibleValue : number;
	}


	interface AccessibleJInternalFrame extends JComponent.AccessibleJComponent, AccessibleValue {}	class FocusPropertyChangeListener {
	}


	interface FocusPropertyChangeListener extends PropertyChangeListener {}	class JDesktopIcon {
		uI : DesktopIconUI;
		internalFrame : JInternalFrame;
		desktopPane : JDesktopPane;
		uIClassID : string;
		accessibleContext : AccessibleContext;
		constructor(arg1 : JInternalFrame);
		getUI() : DesktopIconUI;
		setUI(arg1 : DesktopIconUI) : void;
		getInternalFrame() : JInternalFrame;
		setInternalFrame(arg1 : JInternalFrame) : void;
		getDesktopPane() : JDesktopPane;
		updateUIWhenHidden() : void;
		writeObject(arg1 : ObjectOutputStream) : void;
	}


	interface JDesktopIcon extends JComponent, Accessible {}

	module JDesktopIcon {
		class AccessibleJDesktopIcon {
			accessibleRole : AccessibleRole;
			accessibleValue : AccessibleValue;
			currentAccessibleValue : number;
			minimumAccessibleValue : number;
			maximumAccessibleValue : number;
		}


		interface AccessibleJDesktopIcon extends JComponent.AccessibleJComponent, AccessibleValue {}	}
}

export = JInternalFrame
