import Action = require('nashorn/javax/swing/Action');
import Image = require('nashorn/java/awt/Image');
import Point = require('nashorn/java/awt/Point');
import JComponent = require('nashorn/javax/swing/JComponent');
import InputEvent = require('nashorn/java/awt/event/InputEvent');
import Clipboard = require('nashorn/java/awt/datatransfer/Clipboard');
import Transferable = require('nashorn/java/awt/datatransfer/Transferable');
import DataFlavor = require('nashorn/java/awt/datatransfer/DataFlavor');
import Icon = require('nashorn/javax/swing/Icon');
import PropertyDescriptor = require('nashorn/java/beans/PropertyDescriptor');
import Class = require('nashorn/java/lang/Class');
import DropTargetListener = require('nashorn/java/awt/dnd/DropTargetListener');
import Serializable = require('nashorn/java/io/Serializable');
import DragGestureListener = require('nashorn/java/awt/dnd/DragGestureListener');
import DragSourceListener = require('nashorn/java/awt/dnd/DragSourceListener');
import DropTargetDragEvent = require('nashorn/java/awt/dnd/DropTargetDragEvent');
import ActionListener = require('nashorn/java/awt/event/ActionListener');
import Object = require('nashorn/java/lang/Object');
import MouseEvent = require('nashorn/java/awt/event/MouseEvent');
import DragGestureRecognizer = require('nashorn/java/awt/dnd/DragGestureRecognizer');
import DropTarget = require('nashorn/java/awt/dnd/DropTarget');
import UIResource = require('nashorn/javax/swing/plaf/UIResource');
import ActionEvent = require('nashorn/java/awt/event/ActionEvent');
import UIAction = require('nashorn/sun/swing/UIAction');
import Component = require('nashorn/java/awt/Component');
import DropTargetEvent = require('nashorn/java/awt/dnd/DropTargetEvent');

declare class TransferHandler {
	static NONE : number;
	static COPY : number;
	static MOVE : number;
	static COPY_OR_MOVE : number;
	static LINK : number;
	static cutAction : Action;
	static copyAction : Action;
	static pasteAction : Action;
	dragImage : Image;
	dragImageOffset : Point;
	constructor(arg1 : string);
	static getCutAction() : Action;
	static getCopyAction() : Action;
	static getPasteAction() : Action;
	setDragImage(arg1 : Image) : void;
	getDragImage() : Image;
	setDragImageOffset(arg1 : Point) : void;
	getDragImageOffset() : Point;
	exportAsDrag(arg1 : JComponent, arg2 : InputEvent, arg3 : number) : void;
	exportToClipboard(arg1 : JComponent, arg2 : Clipboard, arg3 : number) : void;
	importData(arg1 : TransferHandler.TransferSupport) : boolean;
	importData(arg1 : JComponent, arg2 : Transferable) : boolean;
	canImport(arg1 : TransferHandler.TransferSupport) : boolean;
	canImport(arg1 : JComponent, arg2 : DataFlavor[]) : boolean;
	getSourceActions(arg1 : JComponent) : number;
	getVisualRepresentation(arg1 : Transferable) : Icon;
	createTransferable(arg1 : JComponent) : Transferable;
	exportDone(arg1 : JComponent, arg2 : Transferable, arg3 : number) : void;
	getPropertyDescriptor(arg1 : JComponent) : PropertyDescriptor;
	getPropertyDataFlavor(arg1 : Class<any>, arg2 : DataFlavor[]) : DataFlavor;
	static getDropTargetListener() : DropTargetListener;
}


declare interface TransferHandler extends Serializable {}

declare module TransferHandler {
	class DragHandler {
	}


	interface DragHandler extends DragGestureListener, DragSourceListener {}	class DropHandler {
		updateAutoscrollRegion(arg1 : JComponent) : void;
		autoscroll(arg1 : JComponent, arg2 : Point) : void;
		initPropertiesIfNecessary() : void;
		setComponentDropLocation(arg1 : TransferHandler.TransferSupport, arg2 : boolean) : void;
		handleDrag(arg1 : DropTargetDragEvent) : void;
		cleanup(arg1 : boolean) : void;
	}


	interface DropHandler extends DropTargetListener, Serializable, ActionListener {}	class DropLocation extends Object {
		dropPoint : Point;
		getDropPoint() : Point;
	}
	class HasGetTransferHandler extends Object {
		transferHandler : TransferHandler;
		getTransferHandler() : TransferHandler;
	}
	class PropertyTransferable {
		transferDataFlavors : DataFlavor[];
	}


	interface PropertyTransferable extends Transferable {}	class SwingDragGestureRecognizer {
		gestured(arg1 : JComponent, arg2 : MouseEvent, arg3 : number, arg4 : number) : void;
	}


	interface SwingDragGestureRecognizer extends DragGestureRecognizer {}	class SwingDropTarget {
	}


	interface SwingDropTarget extends DropTarget, UIResource {}	class TransferAction {
		actionPerformedImpl(arg1 : ActionEvent) : void;
		getClipboard(arg1 : JComponent) : Clipboard;
	}


	interface TransferAction extends UIAction, UIResource {}	class TransferSupport extends Object {
		drop : boolean;
		component : Component;
		dropLocation : TransferHandler.DropLocation;
		dropAction : number;
		userDropAction : number;
		sourceDropActions : number;
		dataFlavors : DataFlavor[];
		transferable : Transferable;
		constructor(arg1 : Component, arg2 : Transferable);
		setDNDVariables(arg1 : Component, arg2 : DropTargetEvent) : void;
		isDrop() : boolean;
		getComponent() : Component;
		assureIsDrop() : void;
		getDropLocation() : TransferHandler.DropLocation;
		setShowDropLocation(arg1 : boolean) : void;
		setDropAction(arg1 : number) : void;
		getDropAction() : number;
		getUserDropAction() : number;
		getSourceDropActions() : number;
		getDataFlavors() : DataFlavor[];
		isDataFlavorSupported(arg1 : DataFlavor) : boolean;
		getTransferable() : Transferable;
	}
}

export = TransferHandler
