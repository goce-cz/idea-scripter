import LayoutStyle = require('nashorn/javax/swing/LayoutStyle');
import Container = require('nashorn/java/awt/Container');
import Component = require('nashorn/java/awt/Component');
import Dimension = require('nashorn/java/awt/Dimension');
import StringBuffer = require('nashorn/java/lang/StringBuffer');
import LayoutManager2 = require('nashorn/java/awt/LayoutManager2');
import Enum = require('nashorn/java/lang/Enum');
import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import Insets = require('nashorn/java/awt/Insets');
import JComponent = require('nashorn/javax/swing/JComponent');
import Comparable = require('nashorn/java/lang/Comparable');

declare class GroupLayout {
	static DEFAULT_SIZE : number;
	static PREFERRED_SIZE : number;
	honorsVisibility : boolean;
	autoCreateGaps : boolean;
	autoCreateContainerGaps : boolean;
	layoutStyle : LayoutStyle;
	constructor(arg1 : Container);
	static checkSize(arg1 : number, arg2 : number, arg3 : number, arg4 : boolean) : void;
	static checkResizeType(arg1 : number, arg2 : boolean) : void;
	static checkLessThan(arg1 : number, arg2 : number) : void;
	setHonorsVisibility(arg1 : boolean) : void;
	getHonorsVisibility() : boolean;
	setHonorsVisibility(arg1 : Component, arg2 : boolean) : void;
	setAutoCreateGaps(arg1 : boolean) : void;
	getAutoCreateGaps() : boolean;
	setAutoCreateContainerGaps(arg1 : boolean) : void;
	getAutoCreateContainerGaps() : boolean;
	setHorizontalGroup(arg1 : GroupLayout.Group) : void;
	getHorizontalGroup() : GroupLayout.Group;
	setVerticalGroup(arg1 : GroupLayout.Group) : void;
	getVerticalGroup() : GroupLayout.Group;
	createTopLevelGroup(arg1 : GroupLayout.Group) : GroupLayout.Group;
	createSequentialGroup() : GroupLayout.SequentialGroup;
	createParallelGroup() : GroupLayout.ParallelGroup;
	createParallelGroup(arg1 : GroupLayout.Alignment) : GroupLayout.ParallelGroup;
	createParallelGroup(arg1 : GroupLayout.Alignment, arg2 : boolean) : GroupLayout.ParallelGroup;
	createBaselineGroup(arg1 : boolean, arg2 : boolean) : GroupLayout.ParallelGroup;
	linkSize(arg1 : Component[]) : void;
	linkSize(arg1 : number, arg2 : Component[]) : void;
	replace(arg1 : Component, arg2 : Component) : void;
	setLayoutStyle(arg1 : LayoutStyle) : void;
	getLayoutStyle() : LayoutStyle;
	getLayoutStyle0() : LayoutStyle;
	invalidateHost() : void;
	prepare(arg1 : number) : void;
	calculateAutopadding(arg1 : GroupLayout.Group, arg2 : number, arg3 : number, arg4 : number, arg5 : number) : void;
	checkComponents() : void;
	registerComponents(arg1 : GroupLayout.Group, arg2 : number) : void;
	adjustSize(arg1 : number, arg2 : number) : Dimension;
	checkParent(arg1 : Container) : void;
	getComponentInfo(arg1 : Component) : GroupLayout.ComponentInfo;
	insertAutopadding(arg1 : boolean) : void;
	areParallelSiblings(arg1 : Component, arg2 : Component, arg3 : number) : boolean;
	isLeftToRight() : boolean;
	createSpringDescription(arg1 : StringBuffer, arg2 : GroupLayout.Spring, arg3 : string, arg4 : number) : void;
}


declare interface GroupLayout extends LayoutManager2 {}

declare module GroupLayout {
	class Alignment {
		static LEADING : GroupLayout.Alignment;
		static TRAILING : GroupLayout.Alignment;
		static CENTER : GroupLayout.Alignment;
		static BASELINE : GroupLayout.Alignment;
	}


	interface Alignment extends Enum<GroupLayout.Alignment> {}	class AutoPreferredGapMatch extends Object {
		source : GroupLayout.ComponentSpring;
		target : GroupLayout.ComponentSpring;
		toString(arg1 : GroupLayout.ComponentSpring) : string;
	}
	class AutoPreferredGapSpring {
		userCreated : boolean;
		setSource(arg1 : GroupLayout.ComponentSpring) : void;
		setSources(arg1 : List<GroupLayout.ComponentSpring>) : void;
		setUserCreated(arg1 : boolean) : void;
		getUserCreated() : boolean;
		reset() : void;
		calculatePadding(arg1 : number) : void;
		calculatePadding(arg1 : LayoutStyle, arg2 : number, arg3 : GroupLayout.ComponentSpring, arg4 : GroupLayout.ComponentSpring) : number;
		addTarget(arg1 : GroupLayout.ComponentSpring, arg2 : number) : void;
		addValidTarget(arg1 : GroupLayout.ComponentSpring, arg2 : GroupLayout.ComponentSpring) : void;
		getMatchDescription() : string;
	}


	interface AutoPreferredGapSpring extends GroupLayout.Spring {}	class BaselineGroup {
		calculateBaselineAndResizeBehavior() : void;
		calculateMaxSize() : number;
		calculateMinSize() : number;
		baselineLayout(arg1 : number, arg2 : number) : void;
		checkAxis(arg1 : number) : void;
	}


	interface BaselineGroup extends GroupLayout.ParallelGroup {}	class ComponentInfo extends Object {
		visible : boolean;
		component : Component;
		dispose() : void;
		setHonorsVisibility(arg1 : boolean) : void;
		removeSpring(arg1 : GroupLayout.Spring) : void;
		isVisible() : boolean;
		updateVisibility() : boolean;
		setBounds(arg1 : Insets, arg2 : number, arg3 : boolean) : void;
		setComponent(arg1 : Component) : void;
		getComponent() : Component;
		isLinked(arg1 : number) : boolean;
		setLinkInfo(arg1 : number, arg2 : GroupLayout.LinkInfo) : void;
		getLinkInfo(arg1 : number) : GroupLayout.LinkInfo;
		getLinkInfo(arg1 : number, arg2 : boolean) : GroupLayout.LinkInfo;
		clearCachedSize() : void;
		getLinkSize(arg1 : number, arg2 : number) : number;
	}
	class ComponentSpring {
		isVisible() : boolean;
		calculateNonlinkedMinimumSize(arg1 : number) : number;
		calculateNonlinkedPreferredSize(arg1 : number) : number;
		calculateNonlinkedMaximumSize(arg1 : number) : number;
		getSizeAlongAxis(arg1 : number, arg2 : Dimension) : number;
		getLinkSize(arg1 : number, arg2 : number) : number;
		getOrigin() : number;
		setComponent(arg1 : Component) : void;
		getComponent() : Component;
		isLinked(arg1 : number) : boolean;
		installIfNecessary(arg1 : number) : void;
	}


	interface ComponentSpring extends GroupLayout.Spring {}	class ContainerAutoPreferredGapSpring {
		updateSize(arg1 : LayoutStyle, arg2 : GroupLayout.ComponentSpring, arg3 : number) : number;
	}


	interface ContainerAutoPreferredGapSpring extends GroupLayout.AutoPreferredGapSpring {}	class GapSpring {
	}


	interface GapSpring extends GroupLayout.Spring {}	class Group {
		addGroup(arg1 : GroupLayout.Group) : GroupLayout.Group;
		addComponent(arg1 : Component) : GroupLayout.Group;
		addComponent(arg1 : Component, arg2 : number, arg3 : number, arg4 : number) : GroupLayout.Group;
		addGap(arg1 : number) : GroupLayout.Group;
		addGap(arg1 : number, arg2 : number, arg3 : number) : GroupLayout.Group;
		getSpring(arg1 : number) : GroupLayout.Spring;
		indexOf(arg1 : GroupLayout.Spring) : number;
		addSpring(arg1 : GroupLayout.Spring) : GroupLayout.Group;
		setValidSize(arg1 : number, arg2 : number, arg3 : number) : void;
		calculateSize(arg1 : number, arg2 : number) : number;
		getSpringSize(arg1 : GroupLayout.Spring, arg2 : number, arg3 : number) : number;
		operator(arg1 : number, arg2 : number) : number;
		insertAutopadding(arg1 : number, arg2 : List<GroupLayout.AutoPreferredGapSpring>, arg3 : List<GroupLayout.AutoPreferredGapSpring>, arg4 : List<GroupLayout.ComponentSpring>, arg5 : List<GroupLayout.ComponentSpring>, arg6 : boolean) : void;
		removeAutopadding() : void;
		unsetAutopadding() : void;
		calculateAutopadding(arg1 : number) : void;
	}


	interface Group extends GroupLayout.Spring {}	class LinkInfo extends Object {
		add(arg1 : GroupLayout.ComponentInfo) : void;
		remove(arg1 : GroupLayout.ComponentInfo) : void;
		clearCachedSize() : void;
		getSize(arg1 : number) : number;
		calculateLinkedSize(arg1 : number) : number;
	}
	class ParallelGroup {
		addGroup(arg1 : GroupLayout.Alignment, arg2 : GroupLayout.Group) : GroupLayout.ParallelGroup;
		addComponent(arg1 : Component, arg2 : GroupLayout.Alignment) : GroupLayout.ParallelGroup;
		addComponent(arg1 : Component, arg2 : GroupLayout.Alignment, arg3 : number, arg4 : number, arg5 : number) : GroupLayout.ParallelGroup;
		isResizable() : boolean;
		setChildSize(arg1 : GroupLayout.Spring, arg2 : number, arg3 : number, arg4 : number) : void;
		checkChildAlignment(arg1 : GroupLayout.Alignment) : void;
		checkChildAlignment(arg1 : GroupLayout.Alignment, arg2 : boolean) : void;
	}


	interface ParallelGroup extends GroupLayout.Group {}	class PreferredGapSpring {
		getPadding(arg1 : number) : number;
	}


	interface PreferredGapSpring extends GroupLayout.Spring {}	class SequentialGroup {
		addGroup(arg1 : boolean, arg2 : GroupLayout.Group) : GroupLayout.SequentialGroup;
		addComponent(arg1 : boolean, arg2 : Component) : GroupLayout.SequentialGroup;
		addComponent(arg1 : boolean, arg2 : Component, arg3 : number, arg4 : number, arg5 : number) : GroupLayout.SequentialGroup;
		addPreferredGap(arg1 : JComponent, arg2 : JComponent, arg3 : LayoutStyle.ComponentPlacement) : GroupLayout.SequentialGroup;
		addPreferredGap(arg1 : JComponent, arg2 : JComponent, arg3 : LayoutStyle.ComponentPlacement, arg4 : number, arg5 : number) : GroupLayout.SequentialGroup;
		addPreferredGap(arg1 : LayoutStyle.ComponentPlacement) : GroupLayout.SequentialGroup;
		addPreferredGap(arg1 : LayoutStyle.ComponentPlacement, arg2 : number, arg3 : number) : GroupLayout.SequentialGroup;
		addContainerGap() : GroupLayout.SequentialGroup;
		addContainerGap(arg1 : number, arg2 : number) : GroupLayout.SequentialGroup;
		setValidSizeNotPreferred(arg1 : number, arg2 : number, arg3 : number) : void;
		buildResizableList(arg1 : number, arg2 : boolean) : List<GroupLayout.SpringDelta>;
		indexOfNextNonZeroSpring(arg1 : number, arg2 : boolean) : number;
		checkPreferredGapValues(arg1 : number, arg2 : number) : void;
	}


	interface SequentialGroup extends GroupLayout.Group {}	class Spring extends Object {
		calculateMinimumSize(arg1 : number) : number;
		calculatePreferredSize(arg1 : number) : number;
		calculateMaximumSize(arg1 : number) : number;
		setParent(arg1 : GroupLayout.Spring) : void;
		getParent() : GroupLayout.Spring;
		setAlignment(arg1 : GroupLayout.Alignment) : void;
		getAlignment() : GroupLayout.Alignment;
		getMinimumSize(arg1 : number) : number;
		getPreferredSize(arg1 : number) : number;
		getMaximumSize(arg1 : number) : number;
		setSize(arg1 : number, arg2 : number, arg3 : number) : void;
		unset() : void;
		getSize() : number;
		constrain(arg1 : number) : number;
		getBaseline() : number;
		getBaselineResizeBehavior() : Component.BaselineResizeBehavior;
		isResizable(arg1 : number) : boolean;
		willHaveZeroSize(arg1 : boolean) : boolean;
	}
	class SpringDelta {
		index : number;
		delta : number;
		constructor(arg1 : number, arg2 : number);
	}


	interface SpringDelta extends Comparable<GroupLayout.SpringDelta> {}}

export = GroupLayout
