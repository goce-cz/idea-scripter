import List = require('nashorn/java/util/List');
import RowSorter = require('nashorn/javax/swing/RowSorter');
import RowFilter = require('nashorn/javax/swing/RowFilter');
import Comparator = require('nashorn/java/util/Comparator');
import Object = require('nashorn/java/lang/Object');
import Comparable = require('nashorn/java/lang/Comparable');

declare class DefaultRowSorter<M, I> {
	model : M;
	sortKeys : List<RowSorter.SortKey>;
	maxSortKeys : number;
	sortsOnUpdates : boolean;
	rowFilter : RowFilter<any, any>;
	viewRowCount : number;
	modelRowCount : number;
	constructor();
	setModelWrapper(arg1 : DefaultRowSorter.ModelWrapper<M, I>) : void;
	getModelWrapper() : DefaultRowSorter.ModelWrapper<M, I>;
	setSortable(arg1 : number, arg2 : boolean) : void;
	isSortable(arg1 : number) : boolean;
	setMaxSortKeys(arg1 : number) : void;
	getMaxSortKeys() : number;
	setSortsOnUpdates(arg1 : boolean) : void;
	getSortsOnUpdates() : boolean;
	setRowFilter(arg1 : RowFilter<any, any>) : void;
	getRowFilter() : RowFilter<any, any>;
	toggle(arg1 : RowSorter.SortKey) : RowSorter.SortKey;
	isUnsorted() : boolean;
	sortExistingData() : void;
	sort() : void;
	updateUseToString() : void;
	initializeFilteredMapping() : void;
	createModelToView(arg1 : number) : void;
	createViewToModel(arg1 : number) : void;
	cacheSortKeys(arg1 : List<RowSorter.SortKey>) : void;
	useToString(arg1 : number) : boolean;
	setModelToViewFromViewToModel(arg1 : boolean) : void;
	getViewToModelAsInts(arg1 : DefaultRowSorter.Row[]) : number[];
	setComparator(arg1 : number, arg2 : Comparator<any>) : void;
	getComparator(arg1 : number) : Comparator<any>;
	getComparator0(arg1 : number) : Comparator;
	getFilterEntry(arg1 : number) : RowFilter.Entry<M, I>;
	allChanged() : void;
	checkAgainstModel(arg1 : number, arg2 : number) : void;
	include(arg1 : number) : boolean;
	compare(arg1 : number, arg2 : number) : number;
	isTransformed() : boolean;
	insertInOrder(arg1 : List<DefaultRowSorter.Row>, arg2 : DefaultRowSorter.Row[]) : void;
	shouldOptimizeChange(arg1 : number, arg2 : number) : boolean;
	rowsInserted0(arg1 : number, arg2 : number) : void;
	rowsDeleted0(arg1 : number, arg2 : number) : void;
	rowsUpdated0(arg1 : number, arg2 : number) : void;
	checkColumn(arg1 : number) : void;
}


declare interface DefaultRowSorter<M, I> extends RowSorter<M> {}

declare module DefaultRowSorter {
	class FilterEntry {
		model : M;
		valueCount : number;
		identifier : I;
	}


	interface FilterEntry extends RowFilter.Entry<M, I> {}	class ModelWrapper<M, I> extends Object {
		model : M;
		columnCount : number;
		rowCount : number;
		getModel() : M;
		getColumnCount() : number;
		getRowCount() : number;
		getValueAt(arg1 : number, arg2 : number) : Object;
		getStringValueAt(arg1 : number, arg2 : number) : string;
		getIdentifier(arg1 : number) : I;
	}
	class Row {
		constructor(arg1 : DefaultRowSorter, arg2 : number);
	}


	interface Row extends Comparable<DefaultRowSorter.Row> {}}

export = DefaultRowSorter
