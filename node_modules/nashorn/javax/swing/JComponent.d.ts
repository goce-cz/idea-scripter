import JPopupMenu = require('nashorn/javax/swing/JPopupMenu');
import Component = require('nashorn/java/awt/Component');
import Dimension = require('nashorn/java/awt/Dimension');
import Border = require('nashorn/javax/swing/border/Border');
import Insets = require('nashorn/java/awt/Insets');
import InputVerifier = require('nashorn/javax/swing/InputVerifier');
import Graphics = require('nashorn/java/awt/Graphics');
import KeyStroke = require('nashorn/javax/swing/KeyStroke');
import InputMap = require('nashorn/javax/swing/InputMap');
import ActionMap = require('nashorn/javax/swing/ActionMap');
import Locale = require('nashorn/java/util/Locale');
import TransferHandler = require('nashorn/javax/swing/TransferHandler');
import Rectangle = require('nashorn/java/awt/Rectangle');
import VetoableChangeListener = require('nashorn/java/beans/VetoableChangeListener');
import Container = require('nashorn/java/awt/Container');
import AncestorListener = require('nashorn/javax/swing/event/AncestorListener');
import JRootPane = require('nashorn/javax/swing/JRootPane');
import Set = require('nashorn/java/util/Set');
import ComponentUI = require('nashorn/javax/swing/plaf/ComponentUI');
import ActionListener = require('nashorn/java/awt/event/ActionListener');
import ComponentInputMap = require('nashorn/javax/swing/ComponentInputMap');
import KeyEvent = require('nashorn/java/awt/event/KeyEvent');
import MouseEvent = require('nashorn/java/awt/event/MouseEvent');
import Point = require('nashorn/java/awt/Point');
import JToolTip = require('nashorn/javax/swing/JToolTip');
import Object = require('nashorn/java/lang/Object');
import ArrayTable = require('nashorn/javax/swing/ArrayTable');
import AncestorNotifier = require('nashorn/javax/swing/AncestorNotifier');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import Serializable = require('nashorn/java/io/Serializable');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import AccessibleKeyBinding = require('nashorn/javax/accessibility/AccessibleKeyBinding');
import AccessibleExtendedComponent = require('nashorn/javax/accessibility/AccessibleExtendedComponent');
import ContainerListener = require('nashorn/java/awt/event/ContainerListener');
import FocusListener = require('nashorn/java/awt/event/FocusListener');
import Action = require('nashorn/javax/swing/Action');
import ObjectInputValidation = require('nashorn/java/io/ObjectInputValidation');

declare class JComponent {
	static WHEN_FOCUSED : number;
	static WHEN_ANCESTOR_OF_FOCUSED_COMPONENT : number;
	static WHEN_IN_FOCUSED_WINDOW : number;
	static UNDEFINED_CONDITION : number;
	static TOOL_TIP_TEXT_KEY : string;
	inheritsPopupMenu : boolean;
	componentPopupMenu : JPopupMenu;
	uIClassID : string;
	paintingTile : boolean;
	paintingForPrint : boolean;
	managingFocus : boolean;
	nextFocusableComponent : Component;
	requestFocusEnabled : boolean;
	verifyInputWhenFocusTarget : boolean;
	preferredSize : Dimension;
	maximumSize : Dimension;
	minimumSize : Dimension;
	border : Border;
	insets : Insets;
	alignmentY : number;
	alignmentX : number;
	inputVerifier : InputVerifier;
	graphics : Graphics;
	debugGraphicsOptions : number;
	registeredKeyStrokes : KeyStroke[];
	inputMap : InputMap;
	actionMap : ActionMap;
	baselineResizeBehavior : Component.BaselineResizeBehavior;
	static defaultLocale : Locale;
	toolTipText : string;
	autoscrolls : boolean;
	transferHandler : TransferHandler;
	x : number;
	y : number;
	width : number;
	height : number;
	opaque : boolean;
	visibleRect : Rectangle;
	vetoableChangeListeners : VetoableChangeListener[];
	topLevelAncestor : Container;
	ancestorListeners : AncestorListener[];
	validateRoot : boolean;
	optimizedDrawingEnabled : boolean;
	doubleBuffered : boolean;
	rootPane : JRootPane;
	constructor();
	static safelyGetGraphics(arg1 : Component) : Graphics;
	static safelyGetGraphics(arg1 : Component, arg2 : Component) : Graphics;
	static getGraphicsInvoked(arg1 : Component) : void;
	static isComponentObtainingGraphicsFrom(arg1 : Component) : boolean;
	static getManagingFocusForwardTraversalKeys() : Set<KeyStroke>;
	static getManagingFocusBackwardTraversalKeys() : Set<KeyStroke>;
	static fetchRectangle() : Rectangle;
	static recycleRectangle(arg1 : Rectangle) : void;
	setInheritsPopupMenu(arg1 : boolean) : void;
	getInheritsPopupMenu() : boolean;
	setComponentPopupMenu(arg1 : JPopupMenu) : void;
	getComponentPopupMenu() : JPopupMenu;
	updateUI() : void;
	setUI(arg1 : ComponentUI) : void;
	uninstallUIAndProperties() : void;
	getUIClassID() : string;
	getComponentGraphics(arg1 : Graphics) : Graphics;
	paintComponent(arg1 : Graphics) : void;
	paintChildren(arg1 : Graphics) : void;
	paintBorder(arg1 : Graphics) : void;
	paintForceDoubleBuffered(arg1 : Graphics) : void;
	isPainting() : boolean;
	adjustPaintFlags() : void;
	printComponent(arg1 : Graphics) : void;
	printChildren(arg1 : Graphics) : void;
	printBorder(arg1 : Graphics) : void;
	isPaintingTile() : boolean;
	isPaintingForPrint() : boolean;
	isManagingFocus() : boolean;
	registerNextFocusableComponent() : void;
	registerNextFocusableComponent(arg1 : Component) : void;
	deregisterNextFocusableComponent() : void;
	setNextFocusableComponent(arg1 : Component) : void;
	getNextFocusableComponent() : Component;
	setRequestFocusEnabled(arg1 : boolean) : void;
	isRequestFocusEnabled() : boolean;
	grabFocus() : void;
	setVerifyInputWhenFocusTarget(arg1 : boolean) : void;
	getVerifyInputWhenFocusTarget() : boolean;
	setBorder(arg1 : Border) : void;
	getBorder() : Border;
	getInsets(arg1 : Insets) : Insets;
	setAlignmentY(arg1 : number) : void;
	setAlignmentX(arg1 : number) : void;
	setInputVerifier(arg1 : InputVerifier) : void;
	getInputVerifier() : InputVerifier;
	setDebugGraphicsOptions(arg1 : number) : void;
	getDebugGraphicsOptions() : number;
	shouldDebugGraphics() : number;
	registerKeyboardAction(arg1 : ActionListener, arg2 : string, arg3 : KeyStroke, arg4 : number) : void;
	registerWithKeyboardManager(arg1 : boolean) : void;
	unregisterWithKeyboardManager() : void;
	componentInputMapChanged(arg1 : ComponentInputMap) : void;
	registerWithKeyboardManager(arg1 : KeyStroke) : void;
	unregisterWithKeyboardManager(arg1 : KeyStroke) : void;
	registerKeyboardAction(arg1 : ActionListener, arg2 : KeyStroke, arg3 : number) : void;
	unregisterKeyboardAction(arg1 : KeyStroke) : void;
	getRegisteredKeyStrokes() : KeyStroke[];
	getConditionForKeyStroke(arg1 : KeyStroke) : number;
	getActionForKeyStroke(arg1 : KeyStroke) : ActionListener;
	resetKeyboardActions() : void;
	setInputMap(arg1 : number, arg2 : InputMap) : void;
	getInputMap(arg1 : number) : InputMap;
	getInputMap() : InputMap;
	setActionMap(arg1 : ActionMap) : void;
	getActionMap() : ActionMap;
	getInputMap(arg1 : number, arg2 : boolean) : InputMap;
	getActionMap(arg1 : boolean) : ActionMap;
	requestDefaultFocus() : boolean;
	static getDefaultLocale() : Locale;
	static setDefaultLocale(arg1 : Locale) : void;
	processComponentKeyEvent(arg1 : KeyEvent) : void;
	processKeyBinding(arg1 : KeyStroke, arg2 : KeyEvent, arg3 : number, arg4 : boolean) : boolean;
	processKeyBindings(arg1 : KeyEvent, arg2 : boolean) : boolean;
	static processKeyBindingsForAllComponents(arg1 : KeyEvent, arg2 : Container, arg3 : boolean) : boolean;
	setToolTipText(arg1 : string) : void;
	getToolTipText() : string;
	getToolTipText(arg1 : MouseEvent) : string;
	getToolTipLocation(arg1 : MouseEvent) : Point;
	getPopupLocation(arg1 : MouseEvent) : Point;
	createToolTip() : JToolTip;
	scrollRectToVisible(arg1 : Rectangle) : void;
	setAutoscrolls(arg1 : boolean) : void;
	getAutoscrolls() : boolean;
	setTransferHandler(arg1 : TransferHandler) : void;
	dropLocationForPoint(arg1 : Point) : TransferHandler.DropLocation;
	setDropLocation(arg1 : TransferHandler.DropLocation, arg2 : Object, arg3 : boolean) : Object;
	dndDone() : void;
	superProcessMouseMotionEvent(arg1 : MouseEvent) : void;
	setCreatedDoubleBuffer(arg1 : boolean) : void;
	getCreatedDoubleBuffer() : boolean;
	getClientProperties() : ArrayTable;
	getClientProperty(arg1 : Object) : Object;
	putClientProperty(arg1 : Object, arg2 : Object) : void;
	clientPropertyChanged(arg1 : Object, arg2 : Object, arg3 : Object) : void;
	setUIProperty(arg1 : string, arg2 : Object) : void;
	static isLightweightComponent(arg1 : Component) : boolean;
	setOpaque(arg1 : boolean) : void;
	rectangleIsObscured(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : boolean;
	static computeVisibleRect(arg1 : Component, arg2 : Rectangle) : void;
	computeVisibleRect(arg1 : Rectangle) : void;
	getVisibleRect() : Rectangle;
	fireVetoableChange(arg1 : string, arg2 : Object, arg3 : Object) : void;
	addVetoableChangeListener(arg1 : VetoableChangeListener) : void;
	removeVetoableChangeListener(arg1 : VetoableChangeListener) : void;
	getVetoableChangeListeners() : VetoableChangeListener[];
	getTopLevelAncestor() : Container;
	getAncestorNotifier() : AncestorNotifier;
	addAncestorListener(arg1 : AncestorListener) : void;
	removeAncestorListener(arg1 : AncestorListener) : void;
	getAncestorListeners() : AncestorListener[];
	repaint(arg1 : Rectangle) : void;
	isOptimizedDrawingEnabled() : boolean;
	isPaintingOrigin() : boolean;
	paintImmediately(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	paintImmediately(arg1 : Rectangle) : void;
	alwaysOnTop() : boolean;
	setPaintingChild(arg1 : Component) : void;
	_paintImmediately(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	paintToOffscreen(arg1 : Graphics, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : number, arg7 : number) : void;
	getObscuredState(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : number) : number;
	checkIfChildObscuredBySibling() : boolean;
	setFlag(arg1 : number, arg2 : boolean) : void;
	getFlag(arg1 : number) : boolean;
	static setWriteObjCounter(arg1 : JComponent, arg2 : number) : void;
	static getWriteObjCounter(arg1 : JComponent) : number;
	setDoubleBuffered(arg1 : boolean) : void;
	getRootPane() : JRootPane;
	compWriteObjectNotify() : void;
	readObject(arg1 : ObjectInputStream) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface JComponent extends Container, Serializable, TransferHandler.HasGetTransferHandler {}

declare module JComponent {
	class AccessibleJComponent {
		accessibleName : string;
		accessibleDescription : string;
		accessibleRole : AccessibleRole;
		accessibleStateSet : AccessibleStateSet;
		accessibleChildrenCount : number;
		toolTipText : string;
		titledBorderText : string;
		accessibleKeyBinding : AccessibleKeyBinding;
		getBorderTitle(arg1 : Border) : string;
		getAccessibleExtendedComponent() : AccessibleExtendedComponent;
	}


	interface AccessibleJComponent extends Container.AccessibleAWTContainer, AccessibleExtendedComponent {}

	module AccessibleJComponent {
		class AccessibleContainerHandler {
		}


		interface AccessibleContainerHandler extends ContainerListener {}		class AccessibleFocusHandler {
		}


		interface AccessibleFocusHandler extends FocusListener {}	}
	class ActionStandin {
		enabled : boolean;
	}


	interface ActionStandin extends Action {}	class IntVector extends Object {
		size() : number;
		elementAt(arg1 : number) : number;
		addElement(arg1 : number) : void;
		setElementAt(arg1 : number, arg2 : number) : void;
	}
	class KeyboardState {
		static getKeyCodeArray() : JComponent.IntVector;
		static registerKeyPressed(arg1 : number) : void;
		static registerKeyReleased(arg1 : number) : void;
		static keyIsPressed(arg1 : number) : boolean;
		static shouldProcess(arg1 : KeyEvent) : boolean;
	}


	interface KeyboardState extends Serializable {}	class ReadObjectCallback {
		registerComponent(arg1 : JComponent) : void;
	}


	interface ReadObjectCallback extends ObjectInputValidation {}}

export = JComponent
