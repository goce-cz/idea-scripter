import Object = require('nashorn/java/lang/Object');
import TreeModelListener = require('nashorn/javax/swing/event/TreeModelListener');
import TreeNode = require('nashorn/javax/swing/tree/TreeNode');
import MutableTreeNode = require('nashorn/javax/swing/tree/MutableTreeNode');
import TreePath = require('nashorn/javax/swing/tree/TreePath');
import EventListener = require('nashorn/java/util/EventListener');
import Class = require('nashorn/java/lang/Class');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Serializable = require('nashorn/java/io/Serializable');
import TreeModel = require('nashorn/javax/swing/tree/TreeModel');

declare class DefaultTreeModel {
	root : Object;
	treeModelListeners : TreeModelListener[];
	constructor(arg1 : TreeNode);
	constructor(arg1 : TreeNode, arg2 : boolean);
	setAsksAllowsChildren(arg1 : boolean) : void;
	asksAllowsChildren() : boolean;
	setRoot(arg1 : TreeNode) : void;
	reload() : void;
	insertNodeInto(arg1 : MutableTreeNode, arg2 : MutableTreeNode, arg3 : number) : void;
	removeNodeFromParent(arg1 : MutableTreeNode) : void;
	nodeChanged(arg1 : TreeNode) : void;
	reload(arg1 : TreeNode) : void;
	nodesWereInserted(arg1 : TreeNode, arg2 : number[]) : void;
	nodesWereRemoved(arg1 : TreeNode, arg2 : number[], arg3 : Object[]) : void;
	nodesChanged(arg1 : TreeNode, arg2 : number[]) : void;
	nodeStructureChanged(arg1 : TreeNode) : void;
	getPathToRoot(arg1 : TreeNode) : TreeNode[];
	getPathToRoot(arg1 : TreeNode, arg2 : number) : TreeNode[];
	getTreeModelListeners() : TreeModelListener[];
	fireTreeNodesChanged(arg1 : Object, arg2 : Object[], arg3 : number[], arg4 : Object[]) : void;
	fireTreeNodesInserted(arg1 : Object, arg2 : Object[], arg3 : number[], arg4 : Object[]) : void;
	fireTreeNodesRemoved(arg1 : Object, arg2 : Object[], arg3 : number[], arg4 : Object[]) : void;
	fireTreeStructureChanged(arg1 : Object, arg2 : Object[], arg3 : number[], arg4 : Object[]) : void;
	fireTreeStructureChanged(arg1 : Object, arg2 : TreePath) : void;
	getListeners<T extends EventListener>(arg1 : Class<T>) : T[];
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface DefaultTreeModel extends Serializable, TreeModel {}
export = DefaultTreeModel
