import Object = require('nashorn/java/lang/Object');
import TreePath = require('nashorn/javax/swing/tree/TreePath');
import RowMapper = require('nashorn/javax/swing/tree/RowMapper');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import TreeSelectionListener = require('nashorn/javax/swing/event/TreeSelectionListener');

declare class TreeSelectionModel extends Object {
	static SINGLE_TREE_SELECTION : number;
	static CONTIGUOUS_TREE_SELECTION : number;
	static DISCONTIGUOUS_TREE_SELECTION : number;
	selectionMode : number;
	selectionPath : TreePath;
	selectionPaths : TreePath[];
	selectionCount : number;
	selectionEmpty : boolean;
	rowMapper : RowMapper;
	selectionRows : number[];
	minSelectionRow : number;
	maxSelectionRow : number;
	leadSelectionRow : number;
	leadSelectionPath : TreePath;
	setSelectionMode(arg1 : number) : void;
	getSelectionMode() : number;
	setSelectionPath(arg1 : TreePath) : void;
	setSelectionPaths(arg1 : TreePath[]) : void;
	addSelectionPath(arg1 : TreePath) : void;
	addSelectionPaths(arg1 : TreePath[]) : void;
	removeSelectionPath(arg1 : TreePath) : void;
	removeSelectionPaths(arg1 : TreePath[]) : void;
	getSelectionPath() : TreePath;
	getSelectionPaths() : TreePath[];
	getSelectionCount() : number;
	isPathSelected(arg1 : TreePath) : boolean;
	isSelectionEmpty() : boolean;
	clearSelection() : void;
	setRowMapper(arg1 : RowMapper) : void;
	getRowMapper() : RowMapper;
	getSelectionRows() : number[];
	getMinSelectionRow() : number;
	getMaxSelectionRow() : number;
	isRowSelected(arg1 : number) : boolean;
	resetRowSelection() : void;
	getLeadSelectionRow() : number;
	getLeadSelectionPath() : TreePath;
	addPropertyChangeListener(arg1 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : PropertyChangeListener) : void;
	addTreeSelectionListener(arg1 : TreeSelectionListener) : void;
	removeTreeSelectionListener(arg1 : TreeSelectionListener) : void;
}

export = TreeSelectionModel
