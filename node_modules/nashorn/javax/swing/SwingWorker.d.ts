import PropertyChangeSupport = require('nashorn/java/beans/PropertyChangeSupport');
import List = require('nashorn/java/util/List');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import Object = require('nashorn/java/lang/Object');
import ExecutorService = require('nashorn/java/util/concurrent/ExecutorService');
import AccumulativeRunnable = require('nashorn/sun/swing/AccumulativeRunnable');
import Runnable = require('nashorn/java/lang/Runnable');
import RunnableFuture = require('nashorn/java/util/concurrent/RunnableFuture');
import ActionListener = require('nashorn/java/awt/event/ActionListener');
import Enum = require('nashorn/java/lang/Enum');

declare class SwingWorker<T, V> {
	progress : number;
	cancelled : boolean;
	done : boolean;
	propertyChangeSupport : PropertyChangeSupport;
	state : SwingWorker.StateValue;
	constructor();
	doInBackground() : T;
	publish(arg1 : V[]) : void;
	process(arg1 : List<V>) : void;
	done() : void;
	setProgress(arg1 : number) : void;
	getProgress() : number;
	execute() : void;
	addPropertyChangeListener(arg1 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : PropertyChangeListener) : void;
	firePropertyChange(arg1 : string, arg2 : Object, arg3 : Object) : void;
	getPropertyChangeSupport() : PropertyChangeSupport;
	getState() : SwingWorker.StateValue;
	setState(arg1 : SwingWorker.StateValue) : void;
	doneEDT() : void;
	static getWorkersExecutorService() : ExecutorService;
	static getDoSubmit() : AccumulativeRunnable<Runnable>;
}


declare interface SwingWorker<T, V> extends RunnableFuture<T> {}

declare module SwingWorker {
	class DoSubmitAccumulativeRunnable {
	}


	interface DoSubmitAccumulativeRunnable extends AccumulativeRunnable<Runnable>, ActionListener {}	class StateValue {
		static PENDING : SwingWorker.StateValue;
		static STARTED : SwingWorker.StateValue;
		static DONE : SwingWorker.StateValue;
	}


	interface StateValue extends Enum<SwingWorker.StateValue> {}	class SwingWorkerPropertyChangeSupport {
	}


	interface SwingWorkerPropertyChangeSupport extends PropertyChangeSupport {}}

export = SwingWorker
