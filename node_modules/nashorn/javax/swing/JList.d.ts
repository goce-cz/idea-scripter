import ListUI = require('nashorn/javax/swing/plaf/ListUI');
import ListCellRenderer = require('nashorn/javax/swing/ListCellRenderer');
import Color = require('nashorn/java/awt/Color');
import DropMode = require('nashorn/javax/swing/DropMode');
import ListModel = require('nashorn/javax/swing/ListModel');
import ListSelectionModel = require('nashorn/javax/swing/ListSelectionModel');
import ListSelectionListener = require('nashorn/javax/swing/event/ListSelectionListener');
import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import Dimension = require('nashorn/java/awt/Dimension');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import Vector = require('nashorn/java/util/Vector');
import Position = require('nashorn/javax/swing/text/Position');
import Point = require('nashorn/java/awt/Point');
import Rectangle = require('nashorn/java/awt/Rectangle');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import JComponent = require('nashorn/javax/swing/JComponent');
import Scrollable = require('nashorn/javax/swing/Scrollable');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleSelection = require('nashorn/javax/accessibility/AccessibleSelection');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import ListDataListener = require('nashorn/javax/swing/event/ListDataListener');
import Locale = require('nashorn/java/util/Locale');
import AccessibleAction = require('nashorn/javax/accessibility/AccessibleAction');
import AccessibleComponent = require('nashorn/javax/accessibility/AccessibleComponent');
import AccessibleText = require('nashorn/javax/accessibility/AccessibleText');
import AccessibleValue = require('nashorn/javax/accessibility/AccessibleValue');
import Cursor = require('nashorn/java/awt/Cursor');
import Font = require('nashorn/java/awt/Font');
import AccessibleIcon = require('nashorn/javax/accessibility/AccessibleIcon');
import Component = require('nashorn/java/awt/Component');
import TransferHandler = require('nashorn/javax/swing/TransferHandler');
import Serializable = require('nashorn/java/io/Serializable');

declare class JList<E> {
	static VERTICAL : number;
	static VERTICAL_WRAP : number;
	static HORIZONTAL_WRAP : number;
	uI : ListUI;
	uIClassID : string;
	prototypeCellValue : E;
	fixedCellWidth : number;
	fixedCellHeight : number;
	cellRenderer : ListCellRenderer<any>;
	selectionForeground : Color;
	selectionBackground : Color;
	visibleRowCount : number;
	layoutOrientation : number;
	firstVisibleIndex : number;
	lastVisibleIndex : number;
	dragEnabled : boolean;
	dropMode : DropMode;
	dropLocation : JList.DropLocation;
	model : ListModel<E>;
	selectionModel : ListSelectionModel;
	listSelectionListeners : ListSelectionListener[];
	selectionMode : number;
	anchorSelectionIndex : number;
	leadSelectionIndex : number;
	minSelectionIndex : number;
	maxSelectionIndex : number;
	selectionEmpty : boolean;
	valueIsAdjusting : boolean;
	selectedIndices : number[];
	selectedValues : Object[];
	selectedValuesList : List<E>;
	selectedIndex : number;
	selectedValue : E;
	preferredScrollableViewportSize : Dimension;
	scrollableTracksViewportWidth : boolean;
	scrollableTracksViewportHeight : boolean;
	accessibleContext : AccessibleContext;
	constructor(arg1 : ListModel<E>);
	constructor(arg1 : E[]);
	constructor(arg1 : Vector<E>);
	constructor();
	getUI() : ListUI;
	setUI(arg1 : ListUI) : void;
	updateFixedCellSize() : void;
	getPrototypeCellValue() : E;
	setPrototypeCellValue(arg1 : E) : void;
	getFixedCellWidth() : number;
	setFixedCellWidth(arg1 : number) : void;
	getFixedCellHeight() : number;
	setFixedCellHeight(arg1 : number) : void;
	getCellRenderer() : ListCellRenderer<any>;
	setCellRenderer(arg1 : ListCellRenderer<any>) : void;
	getSelectionForeground() : Color;
	setSelectionForeground(arg1 : Color) : void;
	getSelectionBackground() : Color;
	setSelectionBackground(arg1 : Color) : void;
	getVisibleRowCount() : number;
	setVisibleRowCount(arg1 : number) : void;
	getLayoutOrientation() : number;
	setLayoutOrientation(arg1 : number) : void;
	getFirstVisibleIndex() : number;
	getLastVisibleIndex() : number;
	ensureIndexIsVisible(arg1 : number) : void;
	setDragEnabled(arg1 : boolean) : void;
	getDragEnabled() : boolean;
	setDropMode(arg1 : DropMode) : void;
	getDropMode() : DropMode;
	getDropLocation() : JList.DropLocation;
	getNextMatch(arg1 : string, arg2 : number, arg3 : Position.Bias) : number;
	locationToIndex(arg1 : Point) : number;
	indexToLocation(arg1 : number) : Point;
	getCellBounds(arg1 : number, arg2 : number) : Rectangle;
	getModel() : ListModel<E>;
	setModel(arg1 : ListModel<E>) : void;
	setListData(arg1 : E[]) : void;
	setListData(arg1 : Vector<E>) : void;
	createSelectionModel() : ListSelectionModel;
	getSelectionModel() : ListSelectionModel;
	fireSelectionValueChanged(arg1 : number, arg2 : number, arg3 : boolean) : void;
	addListSelectionListener(arg1 : ListSelectionListener) : void;
	removeListSelectionListener(arg1 : ListSelectionListener) : void;
	getListSelectionListeners() : ListSelectionListener[];
	setSelectionModel(arg1 : ListSelectionModel) : void;
	setSelectionMode(arg1 : number) : void;
	getSelectionMode() : number;
	getAnchorSelectionIndex() : number;
	getLeadSelectionIndex() : number;
	getMinSelectionIndex() : number;
	getMaxSelectionIndex() : number;
	isSelectedIndex(arg1 : number) : boolean;
	isSelectionEmpty() : boolean;
	clearSelection() : void;
	setSelectionInterval(arg1 : number, arg2 : number) : void;
	addSelectionInterval(arg1 : number, arg2 : number) : void;
	removeSelectionInterval(arg1 : number, arg2 : number) : void;
	setValueIsAdjusting(arg1 : boolean) : void;
	getValueIsAdjusting() : boolean;
	getSelectedIndices() : number[];
	setSelectedIndex(arg1 : number) : void;
	setSelectedIndices(arg1 : number[]) : void;
	getSelectedValues() : Object[];
	getSelectedValuesList() : List<E>;
	getSelectedIndex() : number;
	getSelectedValue() : E;
	setSelectedValue(arg1 : Object, arg2 : boolean) : void;
	checkScrollableParameters(arg1 : Rectangle, arg2 : number) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface JList<E> extends JComponent, Scrollable, Accessible {}

declare module JList {
	class AccessibleJList {
		accessibleStateSet : AccessibleStateSet;
		accessibleRole : AccessibleRole;
		accessibleChildrenCount : number;
		accessibleSelection : AccessibleSelection;
		accessibleSelectionCount : number;
		constructor();
	}


	interface AccessibleJList extends JComponent.AccessibleJComponent, AccessibleSelection, PropertyChangeListener, ListSelectionListener, ListDataListener {}

	module AccessibleJList {
		class AccessibleJListChild {
			accessibleContext : AccessibleContext;
			accessibleName : string;
			accessibleDescription : string;
			accessibleRole : AccessibleRole;
			accessibleStateSet : AccessibleStateSet;
			accessibleIndexInParent : number;
			accessibleChildrenCount : number;
			locale : Locale;
			accessibleAction : AccessibleAction;
			accessibleComponent : AccessibleComponent;
			accessibleSelection : AccessibleSelection;
			accessibleText : AccessibleText;
			accessibleValue : AccessibleValue;
			background : Color;
			foreground : Color;
			cursor : Cursor;
			font : Font;
			enabled : boolean;
			visible : boolean;
			showing : boolean;
			locationOnScreen : Point;
			location : Point;
			bounds : Rectangle;
			size : Dimension;
			focusTraversable : boolean;
			accessibleIcon : AccessibleIcon[];
			constructor(arg1 : JList<E>, arg2 : number);
			getCurrentComponent() : Component;
			getCurrentAccessibleContext() : AccessibleContext;
			getComponentAtIndex(arg1 : number) : Component;
		}


		interface AccessibleJListChild extends AccessibleContext, Accessible, AccessibleComponent {}	}
	class DropLocation {
		index : number;
		insert : boolean;
		getIndex() : number;
		isInsert() : boolean;
	}


	interface DropLocation extends TransferHandler.DropLocation {}	class ListSelectionHandler {
	}


	interface ListSelectionHandler extends ListSelectionListener, Serializable {}}

export = JList
