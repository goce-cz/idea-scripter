import Comparator = require('nashorn/java/util/Comparator');
import Container = require('nashorn/java/awt/Container');
import List = require('nashorn/java/util/List');
import Component = require('nashorn/java/awt/Component');
import InternalFrameFocusTraversalPolicy = require('nashorn/javax/swing/InternalFrameFocusTraversalPolicy');

declare class SortingFocusTraversalPolicy {
	implicitDownCycleTraversal : boolean;
	constructor(arg1 : Comparator<any>);
	getFocusTraversalCycle(arg1 : Container) : List<Component>;
	getComponentIndex(arg1 : List<Component>, arg2 : Component) : number;
	enumerateAndSortCycle(arg1 : Container, arg2 : List<Component>) : void;
	enumerateCycle(arg1 : Container, arg2 : List<Component>) : void;
	getTopmostProvider(arg1 : Container, arg2 : Component) : Container;
	getComponentDownCycle(arg1 : Component, arg2 : number) : Component;
	setImplicitDownCycleTraversal(arg1 : boolean) : void;
	getImplicitDownCycleTraversal() : boolean;
	setComparator(arg1 : Comparator<any>) : void;
	getComparator() : Comparator<any>;
	accept(arg1 : Component) : boolean;
}


declare interface SortingFocusTraversalPolicy extends InternalFrameFocusTraversalPolicy {}
export = SortingFocusTraversalPolicy
