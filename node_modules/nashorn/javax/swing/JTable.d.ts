import JTableHeader = require('nashorn/javax/swing/table/JTableHeader');
import Dimension = require('nashorn/java/awt/Dimension');
import Color = require('nashorn/java/awt/Color');
import DropMode = require('nashorn/javax/swing/DropMode');
import RowSorter = require('nashorn/javax/swing/RowSorter');
import TableModel = require('nashorn/javax/swing/table/TableModel');
import Component = require('nashorn/java/awt/Component');
import TableUI = require('nashorn/javax/swing/plaf/TableUI');
import TableColumnModel = require('nashorn/javax/swing/table/TableColumnModel');
import ListSelectionModel = require('nashorn/javax/swing/ListSelectionModel');
import TableCellEditor = require('nashorn/javax/swing/table/TableCellEditor');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import Vector = require('nashorn/java/util/Vector');
import Object = require('nashorn/java/lang/Object');
import JScrollPane = require('nashorn/javax/swing/JScrollPane');
import SizeSequence = require('nashorn/javax/swing/SizeSequence');
import Class = require('nashorn/java/lang/Class');
import TableCellRenderer = require('nashorn/javax/swing/table/TableCellRenderer');
import TableColumn = require('nashorn/javax/swing/table/TableColumn');
import Point = require('nashorn/java/awt/Point');
import Rectangle = require('nashorn/java/awt/Rectangle');
import EventObject = require('nashorn/java/util/EventObject');
import RowSorterEvent = require('nashorn/javax/swing/event/RowSorterEvent');
import TableModelEvent = require('nashorn/javax/swing/event/TableModelEvent');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import MessageFormat = require('nashorn/java/text/MessageFormat');
import PrintRequestAttributeSet = require('nashorn/javax/print/attribute/PrintRequestAttributeSet');
import PrintService = require('nashorn/javax/print/PrintService');
import Printable = require('nashorn/java/awt/print/Printable');
import JComponent = require('nashorn/javax/swing/JComponent');
import TableModelListener = require('nashorn/javax/swing/event/TableModelListener');
import Scrollable = require('nashorn/javax/swing/Scrollable');
import TableColumnModelListener = require('nashorn/javax/swing/event/TableColumnModelListener');
import ListSelectionListener = require('nashorn/javax/swing/event/ListSelectionListener');
import CellEditorListener = require('nashorn/javax/swing/event/CellEditorListener');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import RowSorterListener = require('nashorn/javax/swing/event/RowSorterListener');
import AccessibleSelection = require('nashorn/javax/accessibility/AccessibleSelection');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleTable = require('nashorn/javax/accessibility/AccessibleTable');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import AccessibleExtendedTable = require('nashorn/javax/accessibility/AccessibleExtendedTable');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import Locale = require('nashorn/java/util/Locale');
import AccessibleAction = require('nashorn/javax/accessibility/AccessibleAction');
import AccessibleComponent = require('nashorn/javax/accessibility/AccessibleComponent');
import AccessibleText = require('nashorn/javax/accessibility/AccessibleText');
import AccessibleValue = require('nashorn/javax/accessibility/AccessibleValue');
import Cursor = require('nashorn/java/awt/Cursor');
import Font = require('nashorn/java/awt/Font');
import AccessibleTableModelChange = require('nashorn/javax/accessibility/AccessibleTableModelChange');
import DefaultCellEditor = require('nashorn/javax/swing/DefaultCellEditor');
import JCheckBox = require('nashorn/javax/swing/JCheckBox');
import UIResource = require('nashorn/javax/swing/plaf/UIResource');
import KeyboardFocusManager = require('nashorn/java/awt/KeyboardFocusManager');
import DefaultTableCellRenderer = require('nashorn/javax/swing/table/DefaultTableCellRenderer');
import TransferHandler = require('nashorn/javax/swing/TransferHandler');
import Enum = require('nashorn/java/lang/Enum');
import ListSelectionEvent = require('nashorn/javax/swing/event/ListSelectionEvent');

declare class JTable {
	static AUTO_RESIZE_OFF : number;
	static AUTO_RESIZE_NEXT_COLUMN : number;
	static AUTO_RESIZE_SUBSEQUENT_COLUMNS : number;
	static AUTO_RESIZE_LAST_COLUMN : number;
	static AUTO_RESIZE_ALL_COLUMNS : number;
	tableHeader : JTableHeader;
	rowHeight : number;
	rowMargin : number;
	intercellSpacing : Dimension;
	gridColor : Color;
	showHorizontalLines : boolean;
	showVerticalLines : boolean;
	autoResizeMode : number;
	autoCreateColumnsFromModel : boolean;
	dragEnabled : boolean;
	dropMode : DropMode;
	dropLocation : JTable.DropLocation;
	autoCreateRowSorter : boolean;
	updateSelectionOnSort : boolean;
	rowSorter : RowSorter<TableModel>;
	rowSelectionAllowed : boolean;
	columnSelectionAllowed : boolean;
	cellSelectionEnabled : boolean;
	selectedRow : number;
	selectedColumn : number;
	selectedRows : number[];
	selectedColumns : number[];
	selectedRowCount : number;
	selectedColumnCount : number;
	selectionForeground : Color;
	selectionBackground : Color;
	rowCount : number;
	columnCount : number;
	surrendersFocusOnKeystroke : boolean;
	editing : boolean;
	editorComponent : Component;
	editingColumn : number;
	editingRow : number;
	uI : TableUI;
	uIClassID : string;
	model : TableModel;
	columnModel : TableColumnModel;
	selectionModel : ListSelectionModel;
	preferredScrollableViewportSize : Dimension;
	scrollableTracksViewportWidth : boolean;
	scrollableTracksViewportHeight : boolean;
	fillsViewportHeight : boolean;
	cellEditor : TableCellEditor;
	accessibleContext : AccessibleContext;
	constructor();
	constructor(arg1 : TableModel);
	constructor(arg1 : TableModel, arg2 : TableColumnModel);
	constructor(arg1 : TableModel, arg2 : TableColumnModel, arg3 : ListSelectionModel);
	constructor(arg1 : number, arg2 : number);
	constructor(arg1 : Vector, arg2 : Vector);
	constructor(arg1 : Object[][], arg2 : Object[]);
	configureEnclosingScrollPane() : void;
	configureEnclosingScrollPaneUI() : void;
	unconfigureEnclosingScrollPane() : void;
	static createScrollPaneForTable(arg1 : JTable) : JScrollPane;
	setTableHeader(arg1 : JTableHeader) : void;
	getTableHeader() : JTableHeader;
	setRowHeight(arg1 : number) : void;
	getRowHeight() : number;
	getRowModel() : SizeSequence;
	setRowHeight(arg1 : number, arg2 : number) : void;
	getRowHeight(arg1 : number) : number;
	setRowMargin(arg1 : number) : void;
	getRowMargin() : number;
	setIntercellSpacing(arg1 : Dimension) : void;
	getIntercellSpacing() : Dimension;
	setGridColor(arg1 : Color) : void;
	getGridColor() : Color;
	setShowGrid(arg1 : boolean) : void;
	setShowHorizontalLines(arg1 : boolean) : void;
	setShowVerticalLines(arg1 : boolean) : void;
	getShowHorizontalLines() : boolean;
	getShowVerticalLines() : boolean;
	setAutoResizeMode(arg1 : number) : void;
	getAutoResizeMode() : number;
	setAutoCreateColumnsFromModel(arg1 : boolean) : void;
	getAutoCreateColumnsFromModel() : boolean;
	createDefaultColumnsFromModel() : void;
	setDefaultRenderer(arg1 : Class<any>, arg2 : TableCellRenderer) : void;
	getDefaultRenderer(arg1 : Class<any>) : TableCellRenderer;
	setDefaultEditor(arg1 : Class<any>, arg2 : TableCellEditor) : void;
	getDefaultEditor(arg1 : Class<any>) : TableCellEditor;
	setDragEnabled(arg1 : boolean) : void;
	getDragEnabled() : boolean;
	setDropMode(arg1 : DropMode) : void;
	getDropMode() : DropMode;
	getDropLocation() : JTable.DropLocation;
	setAutoCreateRowSorter(arg1 : boolean) : void;
	getAutoCreateRowSorter() : boolean;
	setUpdateSelectionOnSort(arg1 : boolean) : void;
	getUpdateSelectionOnSort() : boolean;
	setRowSorter(arg1 : RowSorter<TableModel>) : void;
	getRowSorter() : RowSorter<TableModel>;
	setSelectionMode(arg1 : number) : void;
	setRowSelectionAllowed(arg1 : boolean) : void;
	getRowSelectionAllowed() : boolean;
	setColumnSelectionAllowed(arg1 : boolean) : void;
	getColumnSelectionAllowed() : boolean;
	setCellSelectionEnabled(arg1 : boolean) : void;
	getCellSelectionEnabled() : boolean;
	selectAll() : void;
	clearSelection() : void;
	clearSelectionAndLeadAnchor() : void;
	getAdjustedIndex(arg1 : number, arg2 : boolean) : number;
	boundRow(arg1 : number) : number;
	boundColumn(arg1 : number) : number;
	setRowSelectionInterval(arg1 : number, arg2 : number) : void;
	setColumnSelectionInterval(arg1 : number, arg2 : number) : void;
	addRowSelectionInterval(arg1 : number, arg2 : number) : void;
	addColumnSelectionInterval(arg1 : number, arg2 : number) : void;
	removeRowSelectionInterval(arg1 : number, arg2 : number) : void;
	removeColumnSelectionInterval(arg1 : number, arg2 : number) : void;
	getSelectedRow() : number;
	getSelectedColumn() : number;
	getSelectedRows() : number[];
	getSelectedColumns() : number[];
	getSelectedRowCount() : number;
	getSelectedColumnCount() : number;
	isRowSelected(arg1 : number) : boolean;
	isColumnSelected(arg1 : number) : boolean;
	isCellSelected(arg1 : number, arg2 : number) : boolean;
	changeSelectionModel(arg1 : ListSelectionModel, arg2 : number, arg3 : boolean, arg4 : boolean, arg5 : boolean, arg6 : number, arg7 : boolean) : void;
	changeSelection(arg1 : number, arg2 : number, arg3 : boolean, arg4 : boolean) : void;
	getSelectionForeground() : Color;
	setSelectionForeground(arg1 : Color) : void;
	getSelectionBackground() : Color;
	setSelectionBackground(arg1 : Color) : void;
	getColumn(arg1 : Object) : TableColumn;
	convertColumnIndexToModel(arg1 : number) : number;
	convertColumnIndexToView(arg1 : number) : number;
	convertRowIndexToView(arg1 : number) : number;
	convertRowIndexToModel(arg1 : number) : number;
	getRowCount() : number;
	getColumnCount() : number;
	getColumnName(arg1 : number) : string;
	getColumnClass(arg1 : number) : Class<any>;
	getValueAt(arg1 : number, arg2 : number) : Object;
	setValueAt(arg1 : Object, arg2 : number, arg3 : number) : void;
	isCellEditable(arg1 : number, arg2 : number) : boolean;
	addColumn(arg1 : TableColumn) : void;
	removeColumn(arg1 : TableColumn) : void;
	moveColumn(arg1 : number, arg2 : number) : void;
	columnAtPoint(arg1 : Point) : number;
	rowAtPoint(arg1 : Point) : number;
	getCellRect(arg1 : number, arg2 : number, arg3 : boolean) : Rectangle;
	viewIndexForColumn(arg1 : TableColumn) : number;
	getResizingColumn() : TableColumn;
	sizeColumnsToFit(arg1 : boolean) : void;
	sizeColumnsToFit(arg1 : number) : void;
	setWidthsFromPreferredWidths(arg1 : boolean) : void;
	accommodateDelta(arg1 : number, arg2 : number) : void;
	adjustSizes(arg1 : number, arg2 : JTable.Resizable3, arg3 : boolean) : void;
	adjustSizes(arg1 : number, arg2 : JTable.Resizable2, arg3 : boolean) : void;
	setSurrendersFocusOnKeystroke(arg1 : boolean) : void;
	getSurrendersFocusOnKeystroke() : boolean;
	editCellAt(arg1 : number, arg2 : number) : boolean;
	editCellAt(arg1 : number, arg2 : number, arg3 : EventObject) : boolean;
	isEditing() : boolean;
	getEditorComponent() : Component;
	getEditingColumn() : number;
	getEditingRow() : number;
	getUI() : TableUI;
	setUI(arg1 : TableUI) : void;
	setModel(arg1 : TableModel) : void;
	getModel() : TableModel;
	setColumnModel(arg1 : TableColumnModel) : void;
	getColumnModel() : TableColumnModel;
	setSelectionModel(arg1 : ListSelectionModel) : void;
	getSelectionModel() : ListSelectionModel;
	sortedTableChanged(arg1 : RowSorterEvent, arg2 : TableModelEvent) : void;
	repaintSortedRows(arg1 : JTable.ModelChange) : void;
	restoreSortingSelection(arg1 : number[], arg2 : number, arg3 : JTable.ModelChange) : void;
	restoreSortingEditingRow(arg1 : number) : void;
	notifySorter(arg1 : JTable.ModelChange) : void;
	convertRowIndexToView(arg1 : number, arg2 : JTable.ModelChange) : number;
	convertSelectionToModel(arg1 : RowSorterEvent) : number[];
	convertRowIndexToModel(arg1 : RowSorterEvent, arg2 : number) : number;
	tableRowsInserted(arg1 : TableModelEvent) : void;
	tableRowsDeleted(arg1 : TableModelEvent) : void;
	limit(arg1 : number, arg2 : number, arg3 : number) : number;
	setPreferredScrollableViewportSize(arg1 : Dimension) : void;
	getPreviousBlockIncrement(arg1 : Rectangle, arg2 : number) : number;
	getNextBlockIncrement(arg1 : Rectangle, arg2 : number) : number;
	getLeadingRow(arg1 : Rectangle) : number;
	getLeadingCol(arg1 : Rectangle) : number;
	getTrailingRow(arg1 : Rectangle) : number;
	getTrailingCol(arg1 : Rectangle) : number;
	leadingEdge(arg1 : Rectangle, arg2 : number) : number;
	trailingEdge(arg1 : Rectangle, arg2 : number) : number;
	setFillsViewportHeight(arg1 : boolean) : void;
	getFillsViewportHeight() : boolean;
	createDefaultRenderers() : void;
	createDefaultEditors() : void;
	initializeLocalVars() : void;
	createDefaultDataModel() : TableModel;
	createDefaultColumnModel() : TableColumnModel;
	createDefaultSelectionModel() : ListSelectionModel;
	createDefaultTableHeader() : JTableHeader;
	resizeAndRepaint() : void;
	getCellEditor() : TableCellEditor;
	setCellEditor(arg1 : TableCellEditor) : void;
	setEditingColumn(arg1 : number) : void;
	setEditingRow(arg1 : number) : void;
	getCellRenderer(arg1 : number, arg2 : number) : TableCellRenderer;
	prepareRenderer(arg1 : TableCellRenderer, arg2 : number, arg3 : number) : Component;
	getCellEditor(arg1 : number, arg2 : number) : TableCellEditor;
	prepareEditor(arg1 : TableCellEditor, arg2 : number, arg3 : number) : Component;
	removeEditor() : void;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	print() : boolean;
	print(arg1 : JTable.PrintMode) : boolean;
	print(arg1 : JTable.PrintMode, arg2 : MessageFormat, arg3 : MessageFormat) : boolean;
	print(arg1 : JTable.PrintMode, arg2 : MessageFormat, arg3 : MessageFormat, arg4 : boolean, arg5 : PrintRequestAttributeSet, arg6 : boolean) : boolean;
	print(arg1 : JTable.PrintMode, arg2 : MessageFormat, arg3 : MessageFormat, arg4 : boolean, arg5 : PrintRequestAttributeSet, arg6 : boolean, arg7 : PrintService) : boolean;
	getPrintable(arg1 : JTable.PrintMode, arg2 : MessageFormat, arg3 : MessageFormat) : Printable;
}


declare interface JTable extends JComponent, TableModelListener, Scrollable, TableColumnModelListener, ListSelectionListener, CellEditorListener, Accessible, RowSorterListener {}

declare module JTable {
	class AccessibleJTable {
		accessibleSelection : AccessibleSelection;
		accessibleRole : AccessibleRole;
		accessibleChildrenCount : number;
		accessibleSelectionCount : number;
		accessibleTable : AccessibleTable;
		accessibleCaption : Accessible;
		accessibleSummary : Accessible;
		accessibleRowCount : number;
		accessibleColumnCount : number;
		accessibleRowHeader : AccessibleTable;
		accessibleColumnHeader : AccessibleTable;
		selectedAccessibleRows : number[];
		selectedAccessibleColumns : number[];
		tableRowsInserted(arg1 : TableModelEvent) : void;
		tableRowsDeleted(arg1 : TableModelEvent) : void;
		getAccessibleRowAtIndex(arg1 : number) : number;
		getAccessibleColumnAtIndex(arg1 : number) : number;
		getAccessibleIndexAt(arg1 : number, arg2 : number) : number;
	}


	interface AccessibleJTable extends JComponent.AccessibleJComponent, AccessibleSelection, ListSelectionListener, TableModelListener, TableColumnModelListener, CellEditorListener, PropertyChangeListener, AccessibleExtendedTable {}

	module AccessibleJTable {
		class AccessibleJTableCell {
			accessibleContext : AccessibleContext;
			accessibleName : string;
			accessibleDescription : string;
			accessibleRole : AccessibleRole;
			accessibleStateSet : AccessibleStateSet;
			accessibleParent : Accessible;
			accessibleIndexInParent : number;
			accessibleChildrenCount : number;
			locale : Locale;
			accessibleAction : AccessibleAction;
			accessibleComponent : AccessibleComponent;
			accessibleSelection : AccessibleSelection;
			accessibleText : AccessibleText;
			accessibleValue : AccessibleValue;
			background : Color;
			foreground : Color;
			cursor : Cursor;
			font : Font;
			enabled : boolean;
			visible : boolean;
			showing : boolean;
			locationOnScreen : Point;
			location : Point;
			bounds : Rectangle;
			size : Dimension;
			focusTraversable : boolean;
			constructor(arg1 : JTable, arg2 : number, arg3 : number, arg4 : number);
			getCurrentAccessibleContext() : AccessibleContext;
			getCurrentComponent() : Component;
		}


		interface AccessibleJTableCell extends AccessibleContext, Accessible, AccessibleComponent {}		class AccessibleJTableHeaderCell {
			accessibleContext : AccessibleContext;
			accessibleName : string;
			accessibleDescription : string;
			accessibleRole : AccessibleRole;
			accessibleStateSet : AccessibleStateSet;
			accessibleParent : Accessible;
			accessibleIndexInParent : number;
			accessibleChildrenCount : number;
			locale : Locale;
			accessibleAction : AccessibleAction;
			accessibleComponent : AccessibleComponent;
			accessibleSelection : AccessibleSelection;
			accessibleText : AccessibleText;
			accessibleValue : AccessibleValue;
			background : Color;
			foreground : Color;
			cursor : Cursor;
			font : Font;
			enabled : boolean;
			visible : boolean;
			showing : boolean;
			locationOnScreen : Point;
			location : Point;
			bounds : Rectangle;
			size : Dimension;
			focusTraversable : boolean;
			constructor(arg1 : number, arg2 : number, arg3 : JTableHeader, arg4 : Component);
			getCurrentAccessibleContext() : AccessibleContext;
			getCurrentComponent() : Component;
		}


		interface AccessibleJTableHeaderCell extends AccessibleContext, Accessible, AccessibleComponent {}		class AccessibleJTableModelChange {
			type : number;
			firstRow : number;
			lastRow : number;
			firstColumn : number;
			lastColumn : number;
		}


		interface AccessibleJTableModelChange extends AccessibleTableModelChange {}		class AccessibleTableHeader {
			accessibleCaption : Accessible;
			accessibleSummary : Accessible;
			accessibleRowCount : number;
			accessibleColumnCount : number;
			accessibleRowHeader : AccessibleTable;
			accessibleColumnHeader : AccessibleTable;
			selectedAccessibleRows : number[];
			selectedAccessibleColumns : number[];
		}


		interface AccessibleTableHeader extends AccessibleTable {}	}
	class BooleanEditor {
		constructor();
	}


	interface BooleanEditor extends DefaultCellEditor {}	class BooleanRenderer {
		constructor();
	}


	interface BooleanRenderer extends JCheckBox, TableCellRenderer, UIResource {}	class CellEditorRemover {
		constructor(arg1 : KeyboardFocusManager);
	}


	interface CellEditorRemover extends PropertyChangeListener {}	class DateRenderer {
		constructor();
	}


	interface DateRenderer extends DefaultTableCellRenderer.UIResource {}	class DoubleRenderer {
		constructor();
	}


	interface DoubleRenderer extends JTable.NumberRenderer {}	class DropLocation {
		row : number;
		column : number;
		insertRow : boolean;
		insertColumn : boolean;
		getRow() : number;
		getColumn() : number;
		isInsertRow() : boolean;
		isInsertColumn() : boolean;
	}


	interface DropLocation extends TransferHandler.DropLocation {}	class GenericEditor {
		cellEditorValue : Object;
		constructor();
	}


	interface GenericEditor extends DefaultCellEditor {}	class IconRenderer {
		constructor();
	}


	interface IconRenderer extends DefaultTableCellRenderer.UIResource {}	class ModelChange extends Object {
	}
	class NumberEditor {
		constructor();
	}


	interface NumberEditor extends JTable.GenericEditor {}	class NumberRenderer {
		constructor();
	}


	interface NumberRenderer extends DefaultTableCellRenderer.UIResource {}	class PrintMode {
		static NORMAL : JTable.PrintMode;
		static FIT_WIDTH : JTable.PrintMode;
	}


	interface PrintMode extends Enum<JTable.PrintMode> {}	class Resizable2 extends Object {
		elementCount : number;
		getElementCount() : number;
		getLowerBoundAt(arg1 : number) : number;
		getUpperBoundAt(arg1 : number) : number;
		setSizeAt(arg1 : number, arg2 : number) : void;
	}
	class Resizable3 {
		getMidPointAt(arg1 : number) : number;
	}


	interface Resizable3 extends JTable.Resizable2 {}	class SortManager extends Object {
		dispose() : void;
		setViewRowHeight(arg1 : number, arg2 : number) : void;
		allChanged() : void;
		viewSelectionChanged(arg1 : ListSelectionEvent) : void;
		prepareForChange(arg1 : RowSorterEvent, arg2 : JTable.ModelChange) : void;
		cacheSelection(arg1 : RowSorterEvent, arg2 : JTable.ModelChange) : void;
		cacheModelSelection(arg1 : RowSorterEvent) : void;
		processChange(arg1 : RowSorterEvent, arg2 : JTable.ModelChange, arg3 : boolean) : void;
		setViewRowHeightsFromModel() : void;
		restoreSelection(arg1 : JTable.ModelChange) : void;
	}
	class ThreadSafePrintable {
		constructor(arg1 : Printable);
	}


	interface ThreadSafePrintable extends Printable {}}

export = JTable
