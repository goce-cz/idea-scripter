import TreeUI = require('nashorn/javax/swing/plaf/TreeUI');
import TreeCellRenderer = require('nashorn/javax/swing/tree/TreeCellRenderer');
import TreeCellEditor = require('nashorn/javax/swing/tree/TreeCellEditor');
import TreeModel = require('nashorn/javax/swing/tree/TreeModel');
import DropMode = require('nashorn/javax/swing/DropMode');
import Object = require('nashorn/java/lang/Object');
import TreePath = require('nashorn/javax/swing/tree/TreePath');
import TreeSelectionModel = require('nashorn/javax/swing/tree/TreeSelectionModel');
import TreeExpansionListener = require('nashorn/javax/swing/event/TreeExpansionListener');
import TreeWillExpandListener = require('nashorn/javax/swing/event/TreeWillExpandListener');
import TreeSelectionListener = require('nashorn/javax/swing/event/TreeSelectionListener');
import Dimension = require('nashorn/java/awt/Dimension');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import Vector = require('nashorn/java/util/Vector');
import Hashtable = require('nashorn/java/util/Hashtable');
import TreeNode = require('nashorn/javax/swing/tree/TreeNode');
import Enumeration = require('nashorn/java/util/Enumeration');
import Rectangle = require('nashorn/java/awt/Rectangle');
import TreeSelectionEvent = require('nashorn/javax/swing/event/TreeSelectionEvent');
import Position = require('nashorn/javax/swing/text/Position');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import TreeModelListener = require('nashorn/javax/swing/event/TreeModelListener');
import TreeModelEvent = require('nashorn/javax/swing/event/TreeModelEvent');
import JComponent = require('nashorn/javax/swing/JComponent');
import Scrollable = require('nashorn/javax/swing/Scrollable');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleSelection = require('nashorn/javax/accessibility/AccessibleSelection');
import Component = require('nashorn/java/awt/Component');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import Locale = require('nashorn/java/util/Locale');
import AccessibleAction = require('nashorn/javax/accessibility/AccessibleAction');
import AccessibleComponent = require('nashorn/javax/accessibility/AccessibleComponent');
import AccessibleText = require('nashorn/javax/accessibility/AccessibleText');
import AccessibleValue = require('nashorn/javax/accessibility/AccessibleValue');
import Color = require('nashorn/java/awt/Color');
import Cursor = require('nashorn/java/awt/Cursor');
import Font = require('nashorn/java/awt/Font');
import Point = require('nashorn/java/awt/Point');
import TransferHandler = require('nashorn/javax/swing/TransferHandler');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import DefaultTreeSelectionModel = require('nashorn/javax/swing/tree/DefaultTreeSelectionModel');
import Serializable = require('nashorn/java/io/Serializable');
import Timer = require('nashorn/javax/swing/Timer');

declare class JTree {
	static CELL_RENDERER_PROPERTY : string;
	static TREE_MODEL_PROPERTY : string;
	static ROOT_VISIBLE_PROPERTY : string;
	static SHOWS_ROOT_HANDLES_PROPERTY : string;
	static ROW_HEIGHT_PROPERTY : string;
	static CELL_EDITOR_PROPERTY : string;
	static EDITABLE_PROPERTY : string;
	static LARGE_MODEL_PROPERTY : string;
	static SELECTION_MODEL_PROPERTY : string;
	static VISIBLE_ROW_COUNT_PROPERTY : string;
	static INVOKES_STOP_CELL_EDITING_PROPERTY : string;
	static SCROLLS_ON_EXPAND_PROPERTY : string;
	static TOGGLE_CLICK_COUNT_PROPERTY : string;
	static LEAD_SELECTION_PATH_PROPERTY : string;
	static ANCHOR_SELECTION_PATH_PROPERTY : string;
	static EXPANDS_SELECTED_PATHS_PROPERTY : string;
	uI : TreeUI;
	uIClassID : string;
	cellRenderer : TreeCellRenderer;
	editable : boolean;
	cellEditor : TreeCellEditor;
	model : TreeModel;
	rootVisible : boolean;
	showsRootHandles : boolean;
	rowHeight : number;
	fixedRowHeight : boolean;
	largeModel : boolean;
	invokesStopCellEditing : boolean;
	scrollsOnExpand : boolean;
	toggleClickCount : number;
	expandsSelectedPaths : boolean;
	dragEnabled : boolean;
	dropMode : DropMode;
	dropLocation : JTree.DropLocation;
	rowCount : number;
	lastSelectedPathComponent : Object;
	leadSelectionPath : TreePath;
	anchorSelectionPath : TreePath;
	selectionPath : TreePath;
	selectionPaths : TreePath[];
	selectionRows : number[];
	selectionCount : number;
	minSelectionRow : number;
	maxSelectionRow : number;
	leadSelectionRow : number;
	editing : boolean;
	editingPath : TreePath;
	selectionModel : TreeSelectionModel;
	selectionEmpty : boolean;
	treeExpansionListeners : TreeExpansionListener[];
	treeWillExpandListeners : TreeWillExpandListener[];
	treeSelectionListeners : TreeSelectionListener[];
	visibleRowCount : number;
	preferredScrollableViewportSize : Dimension;
	scrollableTracksViewportWidth : boolean;
	scrollableTracksViewportHeight : boolean;
	accessibleContext : AccessibleContext;
	constructor();
	constructor(arg1 : Object[]);
	constructor(arg1 : Vector<any>);
	constructor(arg1 : Hashtable<any, any>);
	constructor(arg1 : TreeNode);
	constructor(arg1 : TreeNode, arg2 : boolean);
	constructor(arg1 : TreeModel);
	static getDefaultTreeModel() : TreeModel;
	static createTreeModel(arg1 : Object) : TreeModel;
	getUI() : TreeUI;
	setUI(arg1 : TreeUI) : void;
	getCellRenderer() : TreeCellRenderer;
	setCellRenderer(arg1 : TreeCellRenderer) : void;
	setEditable(arg1 : boolean) : void;
	isEditable() : boolean;
	setCellEditor(arg1 : TreeCellEditor) : void;
	getCellEditor() : TreeCellEditor;
	getModel() : TreeModel;
	setModel(arg1 : TreeModel) : void;
	isRootVisible() : boolean;
	setRootVisible(arg1 : boolean) : void;
	setShowsRootHandles(arg1 : boolean) : void;
	getShowsRootHandles() : boolean;
	setRowHeight(arg1 : number) : void;
	getRowHeight() : number;
	isFixedRowHeight() : boolean;
	setLargeModel(arg1 : boolean) : void;
	isLargeModel() : boolean;
	setInvokesStopCellEditing(arg1 : boolean) : void;
	getInvokesStopCellEditing() : boolean;
	setScrollsOnExpand(arg1 : boolean) : void;
	getScrollsOnExpand() : boolean;
	setToggleClickCount(arg1 : number) : void;
	getToggleClickCount() : number;
	setExpandsSelectedPaths(arg1 : boolean) : void;
	getExpandsSelectedPaths() : boolean;
	setDragEnabled(arg1 : boolean) : void;
	getDragEnabled() : boolean;
	setDropMode(arg1 : DropMode) : void;
	getDropMode() : DropMode;
	getDropLocation() : JTree.DropLocation;
	startDropTimer() : void;
	cancelDropTimer() : void;
	isPathEditable(arg1 : TreePath) : boolean;
	convertValueToText(arg1 : Object, arg2 : boolean, arg3 : boolean, arg4 : boolean, arg5 : number, arg6 : boolean) : string;
	getRowCount() : number;
	setSelectionPath(arg1 : TreePath) : void;
	setSelectionPaths(arg1 : TreePath[]) : void;
	setLeadSelectionPath(arg1 : TreePath) : void;
	setAnchorSelectionPath(arg1 : TreePath) : void;
	setSelectionRow(arg1 : number) : void;
	setSelectionRows(arg1 : number[]) : void;
	addSelectionPath(arg1 : TreePath) : void;
	addSelectionPaths(arg1 : TreePath[]) : void;
	addSelectionRow(arg1 : number) : void;
	addSelectionRows(arg1 : number[]) : void;
	getLastSelectedPathComponent() : Object;
	getLeadSelectionPath() : TreePath;
	getAnchorSelectionPath() : TreePath;
	getSelectionPath() : TreePath;
	getSelectionPaths() : TreePath[];
	getSelectionRows() : number[];
	getSelectionCount() : number;
	getMinSelectionRow() : number;
	getMaxSelectionRow() : number;
	getLeadSelectionRow() : number;
	isPathSelected(arg1 : TreePath) : boolean;
	isRowSelected(arg1 : number) : boolean;
	getExpandedDescendants(arg1 : TreePath) : Enumeration<TreePath>;
	hasBeenExpanded(arg1 : TreePath) : boolean;
	isExpanded(arg1 : TreePath) : boolean;
	isExpanded(arg1 : number) : boolean;
	isCollapsed(arg1 : TreePath) : boolean;
	isCollapsed(arg1 : number) : boolean;
	makeVisible(arg1 : TreePath) : void;
	isVisible(arg1 : TreePath) : boolean;
	getPathBounds(arg1 : TreePath) : Rectangle;
	getRowBounds(arg1 : number) : Rectangle;
	scrollPathToVisible(arg1 : TreePath) : void;
	scrollRowToVisible(arg1 : number) : void;
	getPathForRow(arg1 : number) : TreePath;
	getRowForPath(arg1 : TreePath) : number;
	expandPath(arg1 : TreePath) : void;
	expandRow(arg1 : number) : void;
	collapsePath(arg1 : TreePath) : void;
	collapseRow(arg1 : number) : void;
	getPathForLocation(arg1 : number, arg2 : number) : TreePath;
	getRowForLocation(arg1 : number, arg2 : number) : number;
	getClosestPathForLocation(arg1 : number, arg2 : number) : TreePath;
	getClosestRowForLocation(arg1 : number, arg2 : number) : number;
	isEditing() : boolean;
	stopEditing() : boolean;
	cancelEditing() : void;
	startEditingAtPath(arg1 : TreePath) : void;
	getEditingPath() : TreePath;
	setSelectionModel(arg1 : TreeSelectionModel) : void;
	getSelectionModel() : TreeSelectionModel;
	getPathBetweenRows(arg1 : number, arg2 : number) : TreePath[];
	setSelectionInterval(arg1 : number, arg2 : number) : void;
	addSelectionInterval(arg1 : number, arg2 : number) : void;
	removeSelectionInterval(arg1 : number, arg2 : number) : void;
	removeSelectionPath(arg1 : TreePath) : void;
	removeSelectionPaths(arg1 : TreePath[]) : void;
	removeSelectionRow(arg1 : number) : void;
	removeSelectionRows(arg1 : number[]) : void;
	clearSelection() : void;
	isSelectionEmpty() : boolean;
	addTreeExpansionListener(arg1 : TreeExpansionListener) : void;
	removeTreeExpansionListener(arg1 : TreeExpansionListener) : void;
	getTreeExpansionListeners() : TreeExpansionListener[];
	addTreeWillExpandListener(arg1 : TreeWillExpandListener) : void;
	removeTreeWillExpandListener(arg1 : TreeWillExpandListener) : void;
	getTreeWillExpandListeners() : TreeWillExpandListener[];
	fireTreeExpanded(arg1 : TreePath) : void;
	fireTreeCollapsed(arg1 : TreePath) : void;
	fireTreeWillExpand(arg1 : TreePath) : void;
	fireTreeWillCollapse(arg1 : TreePath) : void;
	addTreeSelectionListener(arg1 : TreeSelectionListener) : void;
	removeTreeSelectionListener(arg1 : TreeSelectionListener) : void;
	getTreeSelectionListeners() : TreeSelectionListener[];
	fireValueChanged(arg1 : TreeSelectionEvent) : void;
	treeDidChange() : void;
	setVisibleRowCount(arg1 : number) : void;
	getVisibleRowCount() : number;
	expandRoot() : void;
	getNextMatch(arg1 : string, arg2 : number, arg3 : Position.Bias) : TreePath;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	getArchivableExpandedState() : Object;
	unarchiveExpandedState(arg1 : Object) : void;
	getModelIndexsForPath(arg1 : TreePath) : number[];
	getPathForIndexs(arg1 : number[]) : TreePath;
	setExpandedState(arg1 : TreePath, arg2 : boolean) : void;
	getDescendantToggledPaths(arg1 : TreePath) : Enumeration<TreePath>;
	removeDescendantToggledPaths(arg1 : Enumeration<TreePath>) : void;
	clearToggledPaths() : void;
	createTreeModelListener() : TreeModelListener;
	removeDescendantSelectedPaths(arg1 : TreePath, arg2 : boolean) : boolean;
	getDescendantSelectedPaths(arg1 : TreePath, arg2 : boolean) : TreePath[];
	removeDescendantSelectedPaths(arg1 : TreeModelEvent) : void;
}


declare interface JTree extends JComponent, Scrollable, Accessible {}

declare module JTree {
	class AccessibleJTree {
		accessibleRole : AccessibleRole;
		accessibleChildrenCount : number;
		accessibleIndexInParent : number;
		accessibleSelection : AccessibleSelection;
		accessibleSelectionCount : number;
		constructor();
		fireVisibleDataPropertyChange() : void;
		fireActiveDescendantPropertyChange(arg1 : TreePath, arg2 : TreePath) : void;
		getCurrentAccessibleContext() : AccessibleContext;
		getCurrentComponent() : Component;
	}


	interface AccessibleJTree extends JComponent.AccessibleJComponent, AccessibleSelection, TreeSelectionListener, TreeModelListener, TreeExpansionListener {}

	module AccessibleJTree {
		class AccessibleJTreeNode {
			accessibleContext : AccessibleContext;
			accessibleName : string;
			accessibleDescription : string;
			accessibleRole : AccessibleRole;
			accessibleStateSet : AccessibleStateSet;
			accessibleParent : Accessible;
			accessibleIndexInParent : number;
			accessibleChildrenCount : number;
			locale : Locale;
			accessibleAction : AccessibleAction;
			accessibleComponent : AccessibleComponent;
			accessibleSelection : AccessibleSelection;
			accessibleText : AccessibleText;
			accessibleValue : AccessibleValue;
			background : Color;
			foreground : Color;
			cursor : Cursor;
			font : Font;
			enabled : boolean;
			visible : boolean;
			showing : boolean;
			locationOnScreen : Point;
			location : Point;
			bounds : Rectangle;
			size : Dimension;
			focusTraversable : boolean;
			accessibleSelectionCount : number;
			accessibleActionCount : number;
			constructor(arg1 : JTree, arg2 : TreePath, arg3 : Accessible);
			getChildTreePath(arg1 : number) : TreePath;
			getCurrentAccessibleContext() : AccessibleContext;
			getCurrentComponent() : Component;
			getLocationInJTree() : Point;
		}


		interface AccessibleJTreeNode extends AccessibleContext, Accessible, AccessibleComponent, AccessibleSelection, AccessibleAction {}	}
	class DropLocation {
		childIndex : number;
		path : TreePath;
		getChildIndex() : number;
		getPath() : TreePath;
	}


	interface DropLocation extends TransferHandler.DropLocation {}	class DynamicUtilTreeNode {
		leaf : boolean;
		childCount : number;
		constructor(arg1 : Object, arg2 : Object);
		static createChildren(arg1 : DefaultMutableTreeNode, arg2 : Object) : void;
		loadChildren() : void;
	}


	interface DynamicUtilTreeNode extends DefaultMutableTreeNode {}	class EmptySelectionModel {
		static sharedInstance() : JTree.EmptySelectionModel;
	}


	interface EmptySelectionModel extends DefaultTreeSelectionModel {}	class TreeModelHandler {
	}


	interface TreeModelHandler extends TreeModelListener {}	class TreeSelectionRedirector {
	}


	interface TreeSelectionRedirector extends Serializable, TreeSelectionListener {}	class TreeTimer {
		constructor();
	}


	interface TreeTimer extends Timer {}}

export = JTree
