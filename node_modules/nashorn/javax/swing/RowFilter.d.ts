import Object = require('nashorn/java/lang/Object');
import Date = require('nashorn/java/util/Date');
import Iterable = require('nashorn/java/lang/Iterable');
import Enum = require('nashorn/java/lang/Enum');

declare class RowFilter<M, I> extends Object {
	constructor();
	static checkIndices(arg1 : number[]) : void;
	static regexFilter<M, I>(arg1 : string, arg2 : number[]) : RowFilter<M, I>;
	static dateFilter<M, I>(arg1 : RowFilter.ComparisonType, arg2 : Date, arg3 : number[]) : RowFilter<M, I>;
	static numberFilter<M, I>(arg1 : RowFilter.ComparisonType, arg2 : number, arg3 : number[]) : RowFilter<M, I>;
	static orFilter<M, I>(arg1 : Iterable<RowFilter<any, any>>) : RowFilter<M, I>;
	static andFilter<M, I>(arg1 : Iterable<RowFilter<any, any>>) : RowFilter<M, I>;
	static notFilter<M, I>(arg1 : RowFilter<M, I>) : RowFilter<M, I>;
	include(arg1 : RowFilter.Entry<M, I>) : boolean;
}


declare module RowFilter {
	class AndFilter<M, I> {
	}


	interface AndFilter<M, I> extends RowFilter.OrFilter<M, I> {}	class ComparisonType {
		static BEFORE : RowFilter.ComparisonType;
		static AFTER : RowFilter.ComparisonType;
		static EQUAL : RowFilter.ComparisonType;
		static NOT_EQUAL : RowFilter.ComparisonType;
	}


	interface ComparisonType extends Enum<RowFilter.ComparisonType> {}	class DateFilter {
	}


	interface DateFilter extends RowFilter.GeneralFilter {}	class Entry<M, I> extends Object {
		model : M;
		valueCount : number;
		identifier : I;
		constructor();
		getModel() : M;
		getValueCount() : number;
		getValue(arg1 : number) : Object;
		getStringValue(arg1 : number) : string;
		getIdentifier() : I;
	}
	class GeneralFilter {
		include(arg1 : RowFilter.Entry<Object, Object>, arg2 : number) : boolean;
	}


	interface GeneralFilter extends RowFilter<Object, Object> {}	class NotFilter<M, I> {
	}


	interface NotFilter<M, I> extends RowFilter<M, I> {}	class NumberFilter {
		longCompare(arg1 : number) : number;
	}


	interface NumberFilter extends RowFilter.GeneralFilter {}	class OrFilter<M, I> {
	}


	interface OrFilter<M, I> extends RowFilter<M, I> {}	class RegexFilter {
	}


	interface RegexFilter extends RowFilter.GeneralFilter {}}

export = RowFilter
