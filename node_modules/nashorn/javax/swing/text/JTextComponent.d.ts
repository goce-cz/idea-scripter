import TextUI = require('nashorn/javax/swing/plaf/TextUI');
import CaretListener = require('nashorn/javax/swing/event/CaretListener');
import Document = require('nashorn/javax/swing/text/Document');
import Action = require('nashorn/javax/swing/Action');
import Insets = require('nashorn/java/awt/Insets');
import NavigationFilter = require('nashorn/javax/swing/text/NavigationFilter');
import Caret = require('nashorn/javax/swing/text/Caret');
import Highlighter = require('nashorn/javax/swing/text/Highlighter');
import DropMode = require('nashorn/javax/swing/DropMode');
import Keymap = require('nashorn/javax/swing/text/Keymap');
import Color = require('nashorn/java/awt/Color');
import Dimension = require('nashorn/java/awt/Dimension');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import InputMethodRequests = require('nashorn/java/awt/im/InputMethodRequests');
import CaretEvent = require('nashorn/javax/swing/event/CaretEvent');
import Point = require('nashorn/java/awt/Point');
import TransferHandler = require('nashorn/javax/swing/TransferHandler');
import Object = require('nashorn/java/lang/Object');
import HashMap = require('nashorn/java/util/HashMap');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Reader = require('nashorn/java/io/Reader');
import Writer = require('nashorn/java/io/Writer');
import MessageFormat = require('nashorn/java/text/MessageFormat');
import PrintService = require('nashorn/javax/print/PrintService');
import PrintRequestAttributeSet = require('nashorn/javax/print/attribute/PrintRequestAttributeSet');
import Printable = require('nashorn/java/awt/print/Printable');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import InputMethodEvent = require('nashorn/java/awt/event/InputMethodEvent');
import AttributedCharacterIterator = require('nashorn/java/text/AttributedCharacterIterator');
import JComponent = require('nashorn/javax/swing/JComponent');
import Scrollable = require('nashorn/javax/swing/Scrollable');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleText = require('nashorn/javax/accessibility/AccessibleText');
import AccessibleEditableText = require('nashorn/javax/accessibility/AccessibleEditableText');
import AccessibleAction = require('nashorn/javax/accessibility/AccessibleAction');
import Element = require('nashorn/javax/swing/text/Element');
import AccessibleTextSequence = require('nashorn/javax/accessibility/AccessibleTextSequence');
import DocumentListener = require('nashorn/javax/swing/event/DocumentListener');
import AccessibleExtendedText = require('nashorn/javax/accessibility/AccessibleExtendedText');
import Segment = require('nashorn/javax/swing/text/Segment');
import DefaultCaret = require('nashorn/javax/swing/text/DefaultCaret');
import Serializable = require('nashorn/java/io/Serializable');
import KeyStroke = require('nashorn/javax/swing/KeyStroke');
import DataFlavor = require('nashorn/java/awt/datatransfer/DataFlavor');
import UIResource = require('nashorn/javax/swing/plaf/UIResource');
import Runnable = require('nashorn/java/lang/Runnable');
import Position = require('nashorn/javax/swing/text/Position');
import ActionMap = require('nashorn/javax/swing/ActionMap');
import InputMap = require('nashorn/javax/swing/InputMap');
import ChangeListener = require('nashorn/javax/swing/event/ChangeListener');
import FocusListener = require('nashorn/java/awt/event/FocusListener');
import MouseListener = require('nashorn/java/awt/event/MouseListener');

declare class JTextComponent {
	static FOCUS_ACCELERATOR_KEY : string;
	static DEFAULT_KEYMAP : string;
	uI : TextUI;
	caretListeners : CaretListener[];
	document : Document;
	actions : Action[];
	margin : Insets;
	navigationFilter : NavigationFilter;
	caret : Caret;
	highlighter : Highlighter;
	dragEnabled : boolean;
	dropMode : DropMode;
	dropLocation : JTextComponent.DropLocation;
	keymap : Keymap;
	caretColor : Color;
	selectionColor : Color;
	selectedTextColor : Color;
	disabledTextColor : Color;
	focusAccelerator : string;
	caretPosition : number;
	text : string;
	selectedText : string;
	editable : boolean;
	selectionStart : number;
	selectionEnd : number;
	preferredScrollableViewportSize : Dimension;
	scrollableTracksViewportWidth : boolean;
	scrollableTracksViewportHeight : boolean;
	accessibleContext : AccessibleContext;
	inputMethodRequests : InputMethodRequests;
	constructor();
	getUI() : TextUI;
	setUI(arg1 : TextUI) : void;
	addCaretListener(arg1 : CaretListener) : void;
	removeCaretListener(arg1 : CaretListener) : void;
	getCaretListeners() : CaretListener[];
	fireCaretUpdate(arg1 : CaretEvent) : void;
	setDocument(arg1 : Document) : void;
	getDocument() : Document;
	getActions() : Action[];
	setMargin(arg1 : Insets) : void;
	getMargin() : Insets;
	setNavigationFilter(arg1 : NavigationFilter) : void;
	getNavigationFilter() : NavigationFilter;
	getCaret() : Caret;
	setCaret(arg1 : Caret) : void;
	getHighlighter() : Highlighter;
	setHighlighter(arg1 : Highlighter) : void;
	setKeymap(arg1 : Keymap) : void;
	setDragEnabled(arg1 : boolean) : void;
	getDragEnabled() : boolean;
	setDropMode(arg1 : DropMode) : void;
	getDropMode() : DropMode;
	dropLocationForPoint(arg1 : Point) : JTextComponent.DropLocation;
	setDropLocation(arg1 : TransferHandler.DropLocation, arg2 : Object, arg3 : boolean) : Object;
	getDropLocation() : JTextComponent.DropLocation;
	updateInputMap(arg1 : Keymap, arg2 : Keymap) : void;
	getKeymap() : Keymap;
	static addKeymap(arg1 : string, arg2 : Keymap) : Keymap;
	static removeKeymap(arg1 : string) : Keymap;
	static getKeymap(arg1 : string) : Keymap;
	static getKeymapTable() : HashMap<string, Keymap>;
	static loadKeymap(arg1 : Keymap, arg2 : JTextComponent.KeyBinding[], arg3 : Action[]) : void;
	getCaretColor() : Color;
	setCaretColor(arg1 : Color) : void;
	getSelectionColor() : Color;
	setSelectionColor(arg1 : Color) : void;
	getSelectedTextColor() : Color;
	setSelectedTextColor(arg1 : Color) : void;
	getDisabledTextColor() : Color;
	setDisabledTextColor(arg1 : Color) : void;
	replaceSelection(arg1 : string) : void;
	getText(arg1 : number, arg2 : number) : string;
	modelToView(arg1 : number) : Rectangle;
	viewToModel(arg1 : Point) : number;
	cut() : void;
	copy() : void;
	paste() : void;
	invokeAction(arg1 : string, arg2 : Action) : void;
	installDefaultTransferHandlerIfNecessary() : void;
	moveCaretPosition(arg1 : number) : void;
	setFocusAccelerator(arg1 : string) : void;
	getFocusAccelerator() : string;
	read(arg1 : Reader, arg2 : Object) : void;
	write(arg1 : Writer) : void;
	setCaretPosition(arg1 : number) : void;
	getCaretPosition() : number;
	setText(arg1 : string) : void;
	getText() : string;
	getSelectedText() : string;
	isEditable() : boolean;
	setEditable(arg1 : boolean) : void;
	getSelectionStart() : number;
	setSelectionStart(arg1 : number) : void;
	getSelectionEnd() : number;
	setSelectionEnd(arg1 : number) : void;
	select(arg1 : number, arg2 : number) : void;
	selectAll() : void;
	print() : boolean;
	print(arg1 : MessageFormat, arg2 : MessageFormat) : boolean;
	print(arg1 : MessageFormat, arg2 : MessageFormat, arg3 : boolean, arg4 : PrintService, arg5 : PrintRequestAttributeSet, arg6 : boolean) : boolean;
	getPrintable(arg1 : MessageFormat, arg2 : MessageFormat) : Printable;
	readObject(arg1 : ObjectInputStream) : void;
	static getFocusedComponent() : JTextComponent;
	getCurrentEventModifiers() : number;
	replaceInputMethodText(arg1 : InputMethodEvent) : void;
	createComposedTextAttribute(arg1 : number, arg2 : AttributedCharacterIterator) : void;
	saveComposedText(arg1 : number) : boolean;
	restoreComposedText() : void;
	mapCommittedTextToAction(arg1 : string) : void;
	setInputMethodCaretPosition(arg1 : InputMethodEvent) : void;
	exchangeCaret(arg1 : Caret, arg2 : Caret) : void;
	shouldSynthensizeKeyEvents() : boolean;
	composedTextExists() : boolean;
}


declare interface JTextComponent extends JComponent, Scrollable, Accessible {}

declare module JTextComponent {
	class AccessibleJTextComponent {
		accessibleStateSet : AccessibleStateSet;
		accessibleRole : AccessibleRole;
		accessibleText : AccessibleText;
		charCount : number;
		caretPosition : number;
		selectionStart : number;
		selectionEnd : number;
		selectedText : string;
		accessibleEditableText : AccessibleEditableText;
		accessibleAction : AccessibleAction;
		accessibleActionCount : number;
		constructor();
		getRootEditorRect() : Rectangle;
		getAtIndex(arg1 : number, arg2 : number, arg3 : number) : string;
		getParagraphElement(arg1 : number) : Element;
		getParagraphElementText(arg1 : number) : JTextComponent.AccessibleJTextComponent.IndexedSegment;
		getSegmentAt(arg1 : number, arg2 : number) : JTextComponent.AccessibleJTextComponent.IndexedSegment;
		getSequenceAtIndex(arg1 : number, arg2 : number, arg3 : number) : AccessibleTextSequence;
		getRunEdge(arg1 : number, arg2 : number) : number;
	}


	interface AccessibleJTextComponent extends JComponent.AccessibleJComponent, AccessibleText, CaretListener, DocumentListener, AccessibleAction, AccessibleEditableText, AccessibleExtendedText {}

	module AccessibleJTextComponent {
		class IndexedSegment {
			modelOffset : number;
		}


		interface IndexedSegment extends Segment {}	}
	class ComposedTextCaret {
	}


	interface ComposedTextCaret extends DefaultCaret, Serializable {}	class DefaultKeymap {
		defaultAction : Action;
		name : string;
		boundKeyStrokes : KeyStroke[];
		boundActions : Action[];
		resolveParent : Keymap;
	}


	interface DefaultKeymap extends Keymap {}	class DefaultTransferHandler {
		getFlavor(arg1 : DataFlavor[]) : DataFlavor;
	}


	interface DefaultTransferHandler extends TransferHandler, UIResource {}	class DoSetCaretPosition {
	}


	interface DoSetCaretPosition extends Runnable {}	class DropLocation {
		index : number;
		bias : Position.Bias;
		getIndex() : number;
		getBias() : Position.Bias;
	}


	interface DropLocation extends TransferHandler.DropLocation {}	class InputMethodRequestsHandler {
		committedTextLength : number;
		insertPositionOffset : number;
	}


	interface InputMethodRequestsHandler extends InputMethodRequests, DocumentListener {}	class KeyBinding extends Object {
		key : KeyStroke;
		actionName : string;
		constructor(arg1 : KeyStroke, arg2 : string);
	}
	class KeymapActionMap {
	}


	interface KeymapActionMap extends ActionMap {}	class KeymapWrapper {
	}


	interface KeymapWrapper extends InputMap {}	class MutableCaretEvent {
		dot : number;
		mark : number;
		fire() : void;
	}


	interface MutableCaretEvent extends CaretEvent, ChangeListener, FocusListener, MouseListener {}}

export = JTextComponent
