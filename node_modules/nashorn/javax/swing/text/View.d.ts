import Document = require('nashorn/javax/swing/text/Document');
import Element = require('nashorn/javax/swing/text/Element');
import Graphics = require('nashorn/java/awt/Graphics');
import AttributeSet = require('nashorn/javax/swing/text/AttributeSet');
import Container = require('nashorn/java/awt/Container');
import ViewFactory = require('nashorn/javax/swing/text/ViewFactory');
import Shape = require('nashorn/java/awt/Shape');
import Position = require('nashorn/javax/swing/text/Position');
import DocumentEvent = require('nashorn/javax/swing/event/DocumentEvent');
import SwingConstants = require('nashorn/javax/swing/SwingConstants');

declare class View {
	static BadBreakWeight : number;
	static GoodBreakWeight : number;
	static ExcellentBreakWeight : number;
	static ForcedBreakWeight : number;
	static X_AXIS : number;
	static Y_AXIS : number;
	parent : View;
	visible : boolean;
	viewCount : number;
	document : Document;
	startOffset : number;
	endOffset : number;
	element : Element;
	graphics : Graphics;
	attributes : AttributeSet;
	container : Container;
	viewFactory : ViewFactory;
	constructor(arg1 : Element);
	getParent() : View;
	isVisible() : boolean;
	getPreferredSpan(arg1 : number) : number;
	getMinimumSpan(arg1 : number) : number;
	getMaximumSpan(arg1 : number) : number;
	preferenceChanged(arg1 : View, arg2 : boolean, arg3 : boolean) : void;
	getAlignment(arg1 : number) : number;
	paint(arg1 : Graphics, arg2 : Shape) : void;
	setParent(arg1 : View) : void;
	getViewCount() : number;
	getView(arg1 : number) : View;
	removeAll() : void;
	remove(arg1 : number) : void;
	insert(arg1 : number, arg2 : View) : void;
	append(arg1 : View) : void;
	replace(arg1 : number, arg2 : number, arg3 : View[]) : void;
	getViewIndex(arg1 : number, arg2 : Position.Bias) : number;
	getChildAllocation(arg1 : number, arg2 : Shape) : Shape;
	getNextVisualPositionFrom(arg1 : number, arg2 : Position.Bias, arg3 : Shape, arg4 : number, arg5 : Position.Bias[]) : number;
	modelToView(arg1 : number, arg2 : Shape, arg3 : Position.Bias) : Shape;
	modelToView(arg1 : number, arg2 : Position.Bias, arg3 : number, arg4 : Position.Bias, arg5 : Shape) : Shape;
	viewToModel(arg1 : number, arg2 : number, arg3 : Shape, arg4 : Position.Bias[]) : number;
	insertUpdate(arg1 : DocumentEvent, arg2 : Shape, arg3 : ViewFactory) : void;
	removeUpdate(arg1 : DocumentEvent, arg2 : Shape, arg3 : ViewFactory) : void;
	changedUpdate(arg1 : DocumentEvent, arg2 : Shape, arg3 : ViewFactory) : void;
	getDocument() : Document;
	getStartOffset() : number;
	getEndOffset() : number;
	getElement() : Element;
	getGraphics() : Graphics;
	getAttributes() : AttributeSet;
	breakView(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : View;
	createFragment(arg1 : number, arg2 : number) : View;
	getBreakWeight(arg1 : number, arg2 : number, arg3 : number) : number;
	getResizeWeight(arg1 : number) : number;
	setSize(arg1 : number, arg2 : number) : void;
	getContainer() : Container;
	getViewFactory() : ViewFactory;
	getToolTipText(arg1 : number, arg2 : number, arg3 : Shape) : string;
	getViewIndex(arg1 : number, arg2 : number, arg3 : Shape) : number;
	updateChildren(arg1 : DocumentEvent.ElementChange, arg2 : DocumentEvent, arg3 : ViewFactory) : boolean;
	forwardUpdate(arg1 : DocumentEvent.ElementChange, arg2 : DocumentEvent, arg3 : Shape, arg4 : ViewFactory) : void;
	calculateUpdateIndexes(arg1 : DocumentEvent) : void;
	forwardUpdateToView(arg1 : View, arg2 : DocumentEvent, arg3 : Shape, arg4 : ViewFactory) : void;
	updateLayout(arg1 : DocumentEvent.ElementChange, arg2 : DocumentEvent, arg3 : Shape) : void;
	modelToView(arg1 : number, arg2 : Shape) : Shape;
	viewToModel(arg1 : number, arg2 : number, arg3 : Shape) : number;
}


declare interface View extends SwingConstants {}
export = View
