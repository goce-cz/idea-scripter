import ChangeListener = require('nashorn/javax/swing/event/ChangeListener');
import Position = require('nashorn/javax/swing/text/Position');
import Point = require('nashorn/java/awt/Point');
import JTextComponent = require('nashorn/javax/swing/text/JTextComponent');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Highlighter = require('nashorn/javax/swing/text/Highlighter');
import MouseEvent = require('nashorn/java/awt/event/MouseEvent');
import EventListener = require('nashorn/java/util/EventListener');
import Class = require('nashorn/java/lang/Class');
import Clipboard = require('nashorn/java/awt/datatransfer/Clipboard');
import ClipboardOwner = require('nashorn/java/awt/datatransfer/ClipboardOwner');
import NavigationFilter = require('nashorn/javax/swing/text/NavigationFilter');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import Caret = require('nashorn/javax/swing/text/Caret');
import FocusListener = require('nashorn/java/awt/event/FocusListener');
import MouseListener = require('nashorn/java/awt/event/MouseListener');
import MouseMotionListener = require('nashorn/java/awt/event/MouseMotionListener');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import DocumentListener = require('nashorn/javax/swing/event/DocumentListener');
import ActionListener = require('nashorn/java/awt/event/ActionListener');
import Runnable = require('nashorn/java/lang/Runnable');

declare class DefaultCaret {
	static UPDATE_WHEN_ON_EDT : number;
	static NEVER_UPDATE : number;
	static ALWAYS_UPDATE : number;
	updatePolicy : number;
	changeListeners : ChangeListener[];
	selectionVisible : boolean;
	active : boolean;
	visible : boolean;
	blinkRate : number;
	dot : number;
	mark : number;
	dotBias : Position.Bias;
	markBias : Position.Bias;
	magicCaretPosition : Point;
	constructor();
	setUpdatePolicy(arg1 : number) : void;
	getUpdatePolicy() : number;
	getComponent() : JTextComponent;
	repaint() : void;
	damage(arg1 : Rectangle) : void;
	adjustVisibility(arg1 : Rectangle) : void;
	getSelectionPainter() : Highlighter.HighlightPainter;
	positionCaret(arg1 : MouseEvent) : void;
	moveCaret(arg1 : MouseEvent) : void;
	selectWord(arg1 : MouseEvent) : void;
	adjustCaretAndFocus(arg1 : MouseEvent) : void;
	adjustCaret(arg1 : MouseEvent) : void;
	adjustFocus(arg1 : boolean) : void;
	getChangeListeners() : ChangeListener[];
	fireStateChanged() : void;
	getListeners<T extends EventListener>(arg1 : Class<T>) : T[];
	isActive() : boolean;
	moveDot(arg1 : number, arg2 : Position.Bias) : void;
	handleMoveDot(arg1 : number, arg2 : Position.Bias) : void;
	setDot(arg1 : number, arg2 : Position.Bias) : void;
	handleSetDot(arg1 : number, arg2 : Position.Bias) : void;
	getDotBias() : Position.Bias;
	getMarkBias() : Position.Bias;
	isDotLeftToRight() : boolean;
	isMarkLeftToRight() : boolean;
	isPositionLTR(arg1 : number, arg2 : Position.Bias) : boolean;
	guessBiasForOffset(arg1 : number, arg2 : Position.Bias, arg3 : boolean) : Position.Bias;
	changeCaretPosition(arg1 : number, arg2 : Position.Bias) : void;
	repaintNewCaret() : void;
	updateSystemSelection() : void;
	getSystemSelection() : Clipboard;
	getClipboardOwner() : ClipboardOwner;
	ensureValidPosition() : void;
	getFilterBypass() : NavigationFilter.FilterBypass;
	_contains(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : boolean;
	getCaretWidth(arg1 : number) : number;
	readObject(arg1 : ObjectInputStream) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface DefaultCaret extends Rectangle, Caret, FocusListener, MouseListener, MouseMotionListener {}

declare module DefaultCaret {
	class DefaultFilterBypass {
		caret : Caret;
	}


	interface DefaultFilterBypass extends NavigationFilter.FilterBypass {}	class Handler {
	}


	interface Handler extends PropertyChangeListener, DocumentListener, ActionListener, ClipboardOwner {}	class SafeScroller {
	}


	interface SafeScroller extends Runnable {}}

export = DefaultCaret
