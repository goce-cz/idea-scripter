import Element = require('nashorn/javax/swing/text/Element');
import ViewFactory = require('nashorn/javax/swing/text/ViewFactory');
import Rectangle = require('nashorn/java/awt/Rectangle');
import View = require('nashorn/javax/swing/text/View');
import Shape = require('nashorn/java/awt/Shape');
import AttributeSet = require('nashorn/javax/swing/text/AttributeSet');
import Position = require('nashorn/javax/swing/text/Position');

declare class CompositeView {
	viewCount : number;
	constructor(arg1 : Element);
	loadChildren(arg1 : ViewFactory) : void;
	isBefore(arg1 : number, arg2 : number, arg3 : Rectangle) : boolean;
	isAfter(arg1 : number, arg2 : number, arg3 : Rectangle) : boolean;
	getViewAtPoint(arg1 : number, arg2 : number, arg3 : Rectangle) : View;
	childAllocation(arg1 : number, arg2 : Rectangle) : void;
	getViewAtPosition(arg1 : number, arg2 : Rectangle) : View;
	getViewIndexAtPosition(arg1 : number) : number;
	getInsideAllocation(arg1 : Shape) : Rectangle;
	setParagraphInsets(arg1 : AttributeSet) : void;
	setInsets(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	getLeftInset() : number;
	getRightInset() : number;
	getTopInset() : number;
	getBottomInset() : number;
	getNextNorthSouthVisualPositionFrom(arg1 : number, arg2 : Position.Bias, arg3 : Shape, arg4 : number, arg5 : Position.Bias[]) : number;
	getNextEastWestVisualPositionFrom(arg1 : number, arg2 : Position.Bias, arg3 : Shape, arg4 : number, arg5 : Position.Bias[]) : number;
	flipEastAndWestAtEnds(arg1 : number, arg2 : Position.Bias) : boolean;
}


declare interface CompositeView extends View {}
export = CompositeView
