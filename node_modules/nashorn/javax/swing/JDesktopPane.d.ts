import DesktopPaneUI = require('nashorn/javax/swing/plaf/DesktopPaneUI');
import DesktopManager = require('nashorn/javax/swing/DesktopManager');
import JInternalFrame = require('nashorn/javax/swing/JInternalFrame');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import Container = require('nashorn/java/awt/Container');
import Collection = require('nashorn/java/util/Collection');
import List = require('nashorn/java/util/List');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import JLayeredPane = require('nashorn/javax/swing/JLayeredPane');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import JComponent = require('nashorn/javax/swing/JComponent');
import Comparable = require('nashorn/java/lang/Comparable');

declare class JDesktopPane {
	static LIVE_DRAG_MODE : number;
	static OUTLINE_DRAG_MODE : number;
	uI : DesktopPaneUI;
	dragMode : number;
	desktopManager : DesktopManager;
	uIClassID : string;
	allFrames : JInternalFrame[];
	selectedFrame : JInternalFrame;
	accessibleContext : AccessibleContext;
	constructor();
	getUI() : DesktopPaneUI;
	setUI(arg1 : DesktopPaneUI) : void;
	setDragMode(arg1 : number) : void;
	getDragMode() : number;
	getDesktopManager() : DesktopManager;
	setDesktopManager(arg1 : DesktopManager) : void;
	getAllFrames() : JInternalFrame[];
	static getAllFrames(arg1 : Container) : Collection<JInternalFrame>;
	getSelectedFrame() : JInternalFrame;
	setSelectedFrame(arg1 : JInternalFrame) : void;
	getAllFramesInLayer(arg1 : number) : JInternalFrame[];
	getFrames() : List<JInternalFrame>;
	getNextFrame(arg1 : JInternalFrame, arg2 : boolean) : JInternalFrame;
	getNextFrame(arg1 : JInternalFrame) : JInternalFrame;
	getTopInternalFrame() : JInternalFrame;
	updateFramesCache() : void;
	verifyFramesCache() : void;
	selectFrame(arg1 : boolean) : JInternalFrame;
	setComponentOrderCheckingEnabled(arg1 : boolean) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface JDesktopPane extends JLayeredPane, Accessible {}

declare module JDesktopPane {
	class AccessibleJDesktopPane {
		accessibleRole : AccessibleRole;
	}


	interface AccessibleJDesktopPane extends JComponent.AccessibleJComponent {}	class ComponentPosition {
	}


	interface ComponentPosition extends Comparable<JDesktopPane.ComponentPosition> {}}

export = JDesktopPane
