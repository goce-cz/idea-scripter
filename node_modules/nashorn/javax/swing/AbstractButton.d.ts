import Insets = require('nashorn/java/awt/Insets');
import Icon = require('nashorn/javax/swing/Icon');
import Action = require('nashorn/javax/swing/Action');
import ButtonModel = require('nashorn/javax/swing/ButtonModel');
import ButtonUI = require('nashorn/javax/swing/plaf/ButtonUI');
import ChangeListener = require('nashorn/javax/swing/event/ChangeListener');
import ActionListener = require('nashorn/java/awt/event/ActionListener');
import ItemListener = require('nashorn/java/awt/event/ItemListener');
import Object = require('nashorn/java/lang/Object');
import Class = require('nashorn/java/lang/Class');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import ActionEvent = require('nashorn/java/awt/event/ActionEvent');
import ItemEvent = require('nashorn/java/awt/event/ItemEvent');
import JComponent = require('nashorn/javax/swing/JComponent');
import ItemSelectable = require('nashorn/java/awt/ItemSelectable');
import SwingConstants = require('nashorn/javax/swing/SwingConstants');
import AccessibleIcon = require('nashorn/javax/accessibility/AccessibleIcon');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import AccessibleRelationSet = require('nashorn/javax/accessibility/AccessibleRelationSet');
import AccessibleAction = require('nashorn/javax/accessibility/AccessibleAction');
import AccessibleValue = require('nashorn/javax/accessibility/AccessibleValue');
import AccessibleText = require('nashorn/javax/accessibility/AccessibleText');
import AccessibleKeyBinding = require('nashorn/javax/accessibility/AccessibleKeyBinding');
import Rectangle = require('nashorn/java/awt/Rectangle');
import AccessibleExtendedComponent = require('nashorn/javax/accessibility/AccessibleExtendedComponent');
import ActionPropertyChangeListener = require('nashorn/javax/swing/ActionPropertyChangeListener');
import Serializable = require('nashorn/java/io/Serializable');

declare class AbstractButton {
	static MODEL_CHANGED_PROPERTY : string;
	static TEXT_CHANGED_PROPERTY : string;
	static MNEMONIC_CHANGED_PROPERTY : string;
	static MARGIN_CHANGED_PROPERTY : string;
	static VERTICAL_ALIGNMENT_CHANGED_PROPERTY : string;
	static HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY : string;
	static VERTICAL_TEXT_POSITION_CHANGED_PROPERTY : string;
	static HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY : string;
	static BORDER_PAINTED_CHANGED_PROPERTY : string;
	static FOCUS_PAINTED_CHANGED_PROPERTY : string;
	static ROLLOVER_ENABLED_CHANGED_PROPERTY : string;
	static CONTENT_AREA_FILLED_CHANGED_PROPERTY : string;
	static ICON_CHANGED_PROPERTY : string;
	static PRESSED_ICON_CHANGED_PROPERTY : string;
	static SELECTED_ICON_CHANGED_PROPERTY : string;
	static ROLLOVER_ICON_CHANGED_PROPERTY : string;
	static ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY : string;
	static DISABLED_ICON_CHANGED_PROPERTY : string;
	static DISABLED_SELECTED_ICON_CHANGED_PROPERTY : string;
	hideActionText : boolean;
	text : string;
	selected : boolean;
	margin : Insets;
	icon : Icon;
	pressedIcon : Icon;
	selectedIcon : Icon;
	rolloverIcon : Icon;
	rolloverSelectedIcon : Icon;
	disabledIcon : Icon;
	disabledSelectedIcon : Icon;
	verticalAlignment : number;
	horizontalAlignment : number;
	verticalTextPosition : number;
	horizontalTextPosition : number;
	iconTextGap : number;
	actionCommand : string;
	action : Action;
	borderPainted : boolean;
	focusPainted : boolean;
	contentAreaFilled : boolean;
	rolloverEnabled : boolean;
	mnemonic : number;
	displayedMnemonicIndex : number;
	multiClickThreshhold : number;
	model : ButtonModel;
	uI : ButtonUI;
	changeListeners : ChangeListener[];
	actionListeners : ActionListener[];
	label : string;
	itemListeners : ItemListener[];
	selectedObjects : Object[];
	constructor();
	setHideActionText(arg1 : boolean) : void;
	getHideActionText() : boolean;
	getText() : string;
	setText(arg1 : string) : void;
	isSelected() : boolean;
	setSelected(arg1 : boolean) : void;
	doClick() : void;
	doClick(arg1 : number) : void;
	setMargin(arg1 : Insets) : void;
	getMargin() : Insets;
	getIcon() : Icon;
	setIcon(arg1 : Icon) : void;
	getPressedIcon() : Icon;
	setPressedIcon(arg1 : Icon) : void;
	getSelectedIcon() : Icon;
	setSelectedIcon(arg1 : Icon) : void;
	getRolloverIcon() : Icon;
	setRolloverIcon(arg1 : Icon) : void;
	getRolloverSelectedIcon() : Icon;
	setRolloverSelectedIcon(arg1 : Icon) : void;
	getDisabledIcon() : Icon;
	setDisabledIcon(arg1 : Icon) : void;
	getDisabledSelectedIcon() : Icon;
	setDisabledSelectedIcon(arg1 : Icon) : void;
	getVerticalAlignment() : number;
	setVerticalAlignment(arg1 : number) : void;
	getHorizontalAlignment() : number;
	setHorizontalAlignment(arg1 : number) : void;
	getVerticalTextPosition() : number;
	setVerticalTextPosition(arg1 : number) : void;
	getHorizontalTextPosition() : number;
	setHorizontalTextPosition(arg1 : number) : void;
	getIconTextGap() : number;
	setIconTextGap(arg1 : number) : void;
	checkHorizontalKey(arg1 : number, arg2 : string) : number;
	checkVerticalKey(arg1 : number, arg2 : string) : number;
	setActionCommand(arg1 : string) : void;
	getActionCommand() : string;
	setAction(arg1 : Action) : void;
	isListener(arg1 : Class, arg2 : ActionListener) : boolean;
	getAction() : Action;
	configurePropertiesFromAction(arg1 : Action) : void;
	shouldUpdateSelectedStateFromAction() : boolean;
	actionPropertyChanged(arg1 : Action, arg2 : string) : void;
	setDisplayedMnemonicIndexFromAction(arg1 : Action, arg2 : boolean) : void;
	setMnemonicFromAction(arg1 : Action) : void;
	setTextFromAction(arg1 : Action, arg2 : boolean) : void;
	setIconFromAction(arg1 : Action) : void;
	smallIconChanged(arg1 : Action) : void;
	largeIconChanged(arg1 : Action) : void;
	setActionCommandFromAction(arg1 : Action) : void;
	setSelectedFromAction(arg1 : Action) : void;
	createActionPropertyChangeListener(arg1 : Action) : PropertyChangeListener;
	createActionPropertyChangeListener0(arg1 : Action) : PropertyChangeListener;
	isBorderPainted() : boolean;
	setBorderPainted(arg1 : boolean) : void;
	isFocusPainted() : boolean;
	setFocusPainted(arg1 : boolean) : void;
	isContentAreaFilled() : boolean;
	setContentAreaFilled(arg1 : boolean) : void;
	isRolloverEnabled() : boolean;
	setRolloverEnabled(arg1 : boolean) : void;
	getMnemonic() : number;
	setMnemonic(arg1 : number) : void;
	setMnemonic(arg1 : string) : void;
	setDisplayedMnemonicIndex(arg1 : number) : void;
	getDisplayedMnemonicIndex() : number;
	updateDisplayedMnemonicIndex(arg1 : string, arg2 : number) : void;
	updateMnemonicProperties() : void;
	setMultiClickThreshhold(arg1 : number) : void;
	getMultiClickThreshhold() : number;
	getModel() : ButtonModel;
	setModel(arg1 : ButtonModel) : void;
	getUI() : ButtonUI;
	setUI(arg1 : ButtonUI) : void;
	addChangeListener(arg1 : ChangeListener) : void;
	removeChangeListener(arg1 : ChangeListener) : void;
	getChangeListeners() : ChangeListener[];
	fireStateChanged() : void;
	addActionListener(arg1 : ActionListener) : void;
	removeActionListener(arg1 : ActionListener) : void;
	getActionListeners() : ActionListener[];
	createChangeListener() : ChangeListener;
	fireActionPerformed(arg1 : ActionEvent) : void;
	fireItemStateChanged(arg1 : ItemEvent) : void;
	createActionListener() : ActionListener;
	createItemListener() : ItemListener;
	getLabel() : string;
	setLabel(arg1 : string) : void;
	getItemListeners() : ItemListener[];
	init(arg1 : string, arg2 : Icon) : void;
	getHandler() : AbstractButton.Handler;
}


declare interface AbstractButton extends JComponent, ItemSelectable, SwingConstants {}

declare module AbstractButton {
	class AccessibleAbstractButton {
		accessibleName : string;
		accessibleIcon : AccessibleIcon[];
		accessibleStateSet : AccessibleStateSet;
		accessibleRelationSet : AccessibleRelationSet;
		accessibleAction : AccessibleAction;
		accessibleValue : AccessibleValue;
		accessibleActionCount : number;
		currentAccessibleValue : number;
		minimumAccessibleValue : number;
		maximumAccessibleValue : number;
		accessibleText : AccessibleText;
		charCount : number;
		caretPosition : number;
		selectionStart : number;
		selectionEnd : number;
		selectedText : string;
		toolTipText : string;
		titledBorderText : string;
		accessibleKeyBinding : AccessibleKeyBinding;
		getText(arg1 : number, arg2 : number) : string;
		getTextRectangle() : Rectangle;
	}


	interface AccessibleAbstractButton extends JComponent.AccessibleJComponent, AccessibleAction, AccessibleValue, AccessibleText, AccessibleExtendedComponent {}

	module AccessibleAbstractButton {
		class ButtonKeyBinding {
			accessibleKeyBindingCount : number;
		}


		interface ButtonKeyBinding extends AccessibleKeyBinding {}	}
	class ButtonActionPropertyChangeListener {
	}


	interface ButtonActionPropertyChangeListener extends ActionPropertyChangeListener<AbstractButton> {}	class ButtonChangeListener {
	}


	interface ButtonChangeListener extends ChangeListener, Serializable {}	class Handler {
	}


	interface Handler extends ActionListener, ChangeListener, ItemListener, Serializable {}}

export = AbstractButton
