import LazyActionMap = require('nashorn/javax/swing/plaf/basic/LazyActionMap');
import JComponent = require('nashorn/javax/swing/JComponent');
import ComponentUI = require('nashorn/javax/swing/plaf/ComponentUI');
import InputMap = require('nashorn/javax/swing/InputMap');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import JButton = require('nashorn/javax/swing/JButton');
import Graphics = require('nashorn/java/awt/Graphics');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Dimension = require('nashorn/java/awt/Dimension');
import JScrollBar = require('nashorn/javax/swing/JScrollBar');
import ScrollBarUI = require('nashorn/javax/swing/plaf/ScrollBarUI');
import LayoutManager = require('nashorn/java/awt/LayoutManager');
import SwingConstants = require('nashorn/javax/swing/SwingConstants');
import UIAction = require('nashorn/sun/swing/UIAction');
import MouseAdapter = require('nashorn/java/awt/event/MouseAdapter');
import FocusListener = require('nashorn/java/awt/event/FocusListener');
import ChangeListener = require('nashorn/javax/swing/event/ChangeListener');
import ActionListener = require('nashorn/java/awt/event/ActionListener');
import MouseEvent = require('nashorn/java/awt/event/MouseEvent');
import MouseMotionListener = require('nashorn/java/awt/event/MouseMotionListener');

declare class BasicScrollBarUI {
	thumbRollover : boolean;
	supportsAbsolutePositioning : boolean;
	constructor();
	static loadActionMap(arg1 : LazyActionMap) : void;
	static createUI(arg1 : JComponent) : ComponentUI;
	configureScrollBarColors() : void;
	installDefaults() : void;
	installComponents() : void;
	uninstallComponents() : void;
	installListeners() : void;
	installKeyboardActions() : void;
	uninstallKeyboardActions() : void;
	getInputMap(arg1 : number) : InputMap;
	uninstallListeners() : void;
	uninstallDefaults() : void;
	getHandler() : BasicScrollBarUI.Handler;
	createTrackListener() : BasicScrollBarUI.TrackListener;
	createArrowButtonListener() : BasicScrollBarUI.ArrowButtonListener;
	createModelListener() : BasicScrollBarUI.ModelListener;
	createScrollListener() : BasicScrollBarUI.ScrollListener;
	createPropertyChangeListener() : PropertyChangeListener;
	updateThumbState(arg1 : number, arg2 : number) : void;
	setThumbRollover(arg1 : boolean) : void;
	isThumbRollover() : boolean;
	createDecreaseButton(arg1 : number) : JButton;
	createIncreaseButton(arg1 : number) : JButton;
	paintDecreaseHighlight(arg1 : Graphics) : void;
	paintIncreaseHighlight(arg1 : Graphics) : void;
	paintTrack(arg1 : Graphics, arg2 : JComponent, arg3 : Rectangle) : void;
	paintThumb(arg1 : Graphics, arg2 : JComponent, arg3 : Rectangle) : void;
	getMinimumThumbSize() : Dimension;
	getMaximumThumbSize() : Dimension;
	getValue(arg1 : JScrollBar) : number;
	layoutVScrollbar(arg1 : JScrollBar) : void;
	layoutHScrollbar(arg1 : JScrollBar) : void;
	setThumbBounds(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	getThumbBounds() : Rectangle;
	getTrackBounds() : Rectangle;
	static scrollByBlock(arg1 : JScrollBar, arg2 : number) : void;
	scrollByBlock(arg1 : number) : void;
	static scrollByUnits(arg1 : JScrollBar, arg2 : number, arg3 : number, arg4 : boolean) : void;
	scrollByUnit(arg1 : number) : void;
	getSupportsAbsolutePositioning() : boolean;
	isMouseLeftOfThumb() : boolean;
	isMouseRightOfThumb() : boolean;
	isMouseBeforeThumb() : boolean;
	isMouseAfterThumb() : boolean;
	updateButtonDirections() : void;
}


declare interface BasicScrollBarUI extends ScrollBarUI, LayoutManager, SwingConstants {}

declare module BasicScrollBarUI {
	class Actions {
		scroll(arg1 : JScrollBar, arg2 : number, arg3 : boolean) : void;
	}


	interface Actions extends UIAction {}	class ArrowButtonListener {
	}


	interface ArrowButtonListener extends MouseAdapter {}	class Handler {
	}


	interface Handler extends FocusListener, PropertyChangeListener {}	class ModelListener {
	}


	interface ModelListener extends ChangeListener {}	class PropertyChangeHandler {
		constructor();
	}


	interface PropertyChangeHandler extends PropertyChangeListener {}	class ScrollListener {
		constructor();
		constructor(arg1 : number, arg2 : boolean);
		setDirection(arg1 : number) : void;
		setScrollByBlock(arg1 : boolean) : void;
	}


	interface ScrollListener extends ActionListener {}	class TrackListener {
		setValueFrom(arg1 : MouseEvent) : void;
		adjustValueIfNecessary(arg1 : number) : number;
		startScrollTimerIfNecessary() : void;
	}


	interface TrackListener extends MouseAdapter, MouseMotionListener {}}

export = BasicScrollBarUI
