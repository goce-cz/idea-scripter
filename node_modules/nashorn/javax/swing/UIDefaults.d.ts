import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import Locale = require('nashorn/java/util/Locale');
import Object = require('nashorn/java/lang/Object');
import Map = require('nashorn/java/util/Map');
import Font = require('nashorn/java/awt/Font');
import Color = require('nashorn/java/awt/Color');
import Icon = require('nashorn/javax/swing/Icon');
import Border = require('nashorn/javax/swing/border/Border');
import Insets = require('nashorn/java/awt/Insets');
import Dimension = require('nashorn/java/awt/Dimension');
import ClassLoader = require('nashorn/java/lang/ClassLoader');
import Class = require('nashorn/java/lang/Class');
import ComponentUI = require('nashorn/javax/swing/plaf/ComponentUI');
import JComponent = require('nashorn/javax/swing/JComponent');
import Hashtable = require('nashorn/java/util/Hashtable');
import HashMap = require('nashorn/java/util/HashMap');

declare class UIDefaults {
	propertyChangeListeners : PropertyChangeListener[];
	defaultLocale : Locale;
	constructor();
	constructor(arg1 : number, arg2 : number);
	constructor(arg1 : Object[]);
	getFromHashtable(arg1 : Object) : Object;
	get(arg1 : Object, arg2 : Locale) : Object;
	getFromResourceBundle(arg1 : Object, arg2 : Locale) : Object;
	getResourceCache(arg1 : Locale) : Map<string, Object>;
	putDefaults(arg1 : Object[]) : void;
	getFont(arg1 : Object) : Font;
	getFont(arg1 : Object, arg2 : Locale) : Font;
	getColor(arg1 : Object) : Color;
	getColor(arg1 : Object, arg2 : Locale) : Color;
	getIcon(arg1 : Object) : Icon;
	getIcon(arg1 : Object, arg2 : Locale) : Icon;
	getBorder(arg1 : Object) : Border;
	getBorder(arg1 : Object, arg2 : Locale) : Border;
	getString(arg1 : Object) : string;
	getString(arg1 : Object, arg2 : Locale) : string;
	getInt(arg1 : Object) : number;
	getInt(arg1 : Object, arg2 : Locale) : number;
	getBoolean(arg1 : Object) : boolean;
	getBoolean(arg1 : Object, arg2 : Locale) : boolean;
	getInsets(arg1 : Object) : Insets;
	getInsets(arg1 : Object, arg2 : Locale) : Insets;
	getDimension(arg1 : Object) : Dimension;
	getDimension(arg1 : Object, arg2 : Locale) : Dimension;
	getUIClass(arg1 : string, arg2 : ClassLoader) : Class<ComponentUI>;
	getUIClass(arg1 : string) : Class<ComponentUI>;
	getUIError(arg1 : string) : void;
	getUI(arg1 : JComponent) : ComponentUI;
	addPropertyChangeListener(arg1 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : PropertyChangeListener) : void;
	getPropertyChangeListeners() : PropertyChangeListener[];
	firePropertyChange(arg1 : string, arg2 : Object, arg3 : Object) : void;
	addResourceBundle(arg1 : string) : void;
	removeResourceBundle(arg1 : string) : void;
	setDefaultLocale(arg1 : Locale) : void;
	getDefaultLocale() : Locale;
}


declare interface UIDefaults extends Hashtable<Object, Object> {}

declare module UIDefaults {
	class ActiveValue extends Object {
		createValue(arg1 : UIDefaults) : Object;
	}
	class LazyInputMap {
		constructor(arg1 : Object[]);
	}


	interface LazyInputMap extends UIDefaults.LazyValue {}	class LazyValue extends Object {
		createValue(arg1 : UIDefaults) : Object;
	}
	class ProxyLazyValue {
		constructor(arg1 : string);
		constructor(arg1 : string, arg2 : string);
		constructor(arg1 : string, arg2 : Object[]);
		constructor(arg1 : string, arg2 : string, arg3 : Object[]);
		getClassArray(arg1 : Object[]) : Class[];
		printArgs(arg1 : Object[]) : string;
	}


	interface ProxyLazyValue extends UIDefaults.LazyValue {}	class TextAndMnemonicHashMap {
		composeKey(arg1 : string, arg2 : number, arg3 : string) : string;
		getTextFromProperty(arg1 : string) : string;
		getMnemonicFromProperty(arg1 : string) : string;
		getIndexFromProperty(arg1 : string) : string;
	}


	interface TextAndMnemonicHashMap extends HashMap<string, Object> {}}

export = UIDefaults
