import HyperlinkListener = require('nashorn/javax/swing/event/HyperlinkListener');
import URL = require('nashorn/java/net/URL');
import EditorKit = require('nashorn/javax/swing/text/EditorKit');
import Dimension = require('nashorn/java/awt/Dimension');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import HyperlinkEvent = require('nashorn/javax/swing/event/HyperlinkEvent');
import Document = require('nashorn/javax/swing/text/Document');
import InputStream = require('nashorn/java/io/InputStream');
import Object = require('nashorn/java/lang/Object');
import URLConnection = require('nashorn/java/net/URLConnection');
import HttpURLConnection = require('nashorn/java/net/HttpURLConnection');
import ClassLoader = require('nashorn/java/lang/ClassLoader');
import Hashtable = require('nashorn/java/util/Hashtable');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import JTextComponent = require('nashorn/javax/swing/text/JTextComponent');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import AccessibleText = require('nashorn/javax/accessibility/AccessibleText');
import AccessibleHypertext = require('nashorn/javax/accessibility/AccessibleHypertext');
import Element = require('nashorn/javax/swing/text/Element');
import AccessibleHyperlink = require('nashorn/javax/accessibility/AccessibleHyperlink');
import Vector = require('nashorn/java/util/Vector');
import SwingWorker = require('nashorn/javax/swing/SwingWorker');
import ViewFactory = require('nashorn/javax/swing/text/ViewFactory');
import View = require('nashorn/javax/swing/text/View');
import DefaultEditorKit = require('nashorn/javax/swing/text/DefaultEditorKit');
import ParagraphView = require('nashorn/javax/swing/text/ParagraphView');
import CompositeView = require('nashorn/javax/swing/text/CompositeView');

declare class JEditorPane {
	static W3C_LENGTH_UNITS : string;
	static HONOR_DISPLAY_PROPERTIES : string;
	hyperlinkListeners : HyperlinkListener[];
	page : URL;
	uIClassID : string;
	editorKit : EditorKit;
	contentType : string;
	preferredSize : Dimension;
	text : string;
	scrollableTracksViewportWidth : boolean;
	scrollableTracksViewportHeight : boolean;
	accessibleContext : AccessibleContext;
	constructor();
	constructor(arg1 : URL);
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : string);
	addHyperlinkListener(arg1 : HyperlinkListener) : void;
	removeHyperlinkListener(arg1 : HyperlinkListener) : void;
	getHyperlinkListeners() : HyperlinkListener[];
	fireHyperlinkUpdate(arg1 : HyperlinkEvent) : void;
	setPage(arg1 : URL) : void;
	initializeModel(arg1 : EditorKit, arg2 : URL) : Document;
	getAsynchronousLoadPriority(arg1 : Document) : number;
	read(arg1 : InputStream, arg2 : Object) : void;
	read(arg1 : InputStream, arg2 : Document) : void;
	getStream(arg1 : URL) : InputStream;
	handleConnectionProperties(arg1 : URLConnection) : void;
	getPostData() : Object;
	handlePostData(arg1 : HttpURLConnection, arg2 : Object) : void;
	scrollToReference(arg1 : string) : void;
	getPage() : URL;
	setPage(arg1 : string) : void;
	createDefaultEditorKit() : EditorKit;
	getEditorKit() : EditorKit;
	getContentType() : string;
	setContentType(arg1 : string) : void;
	setCharsetFromContentTypeParameters(arg1 : string) : void;
	setEditorKit(arg1 : EditorKit) : void;
	getEditorKitForContentType(arg1 : string) : EditorKit;
	setEditorKitForContentType(arg1 : string, arg2 : EditorKit) : void;
	static createEditorKitForContentType(arg1 : string) : EditorKit;
	static registerEditorKitForContentType(arg1 : string, arg2 : string) : void;
	static registerEditorKitForContentType(arg1 : string, arg2 : string, arg3 : ClassLoader) : void;
	static getEditorKitClassNameForContentType(arg1 : string) : string;
	static getKitTypeRegistry() : Hashtable<string, string>;
	static getKitLoaderRegistry() : Hashtable<string, ClassLoader>;
	static getKitRegisty() : Hashtable<string, EditorKit>;
	static loadDefaultKitsIfNecessary() : void;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface JEditorPane extends JTextComponent {}

declare module JEditorPane {
	class AccessibleJEditorPane {
		accessibleDescription : string;
		accessibleStateSet : AccessibleStateSet;
	}


	interface AccessibleJEditorPane extends JTextComponent.AccessibleJTextComponent {}	class AccessibleJEditorPaneHTML {
		accessibleText : AccessibleText;
		accessibleChildrenCount : number;
	}


	interface AccessibleJEditorPaneHTML extends JEditorPane.AccessibleJEditorPane {}	class HeaderParser extends Object {
		constructor(arg1 : string);
		parse() : void;
		findKey(arg1 : number) : string;
		findValue(arg1 : number) : string;
		findValue(arg1 : string) : string;
		findValue(arg1 : string, arg2 : string) : string;
		findInt(arg1 : string, arg2 : number) : number;
	}
	class JEditorPaneAccessibleHypertextSupport {
		linkCount : number;
		constructor();
		buildLinkTable() : void;
		getLinkText(arg1 : number) : string;
	}


	interface JEditorPaneAccessibleHypertextSupport extends JEditorPane.AccessibleJEditorPane, AccessibleHypertext {}

	module JEditorPaneAccessibleHypertextSupport {
		class HTMLLink {
			valid : boolean;
			accessibleActionCount : number;
			startIndex : number;
			endIndex : number;
			constructor(arg1 : Element);
		}


		interface HTMLLink extends AccessibleHyperlink {}		class LinkVector {
			baseElementIndex(arg1 : Element) : number;
		}


		interface LinkVector extends Vector<JEditorPane.JEditorPaneAccessibleHypertextSupport.HTMLLink> {}	}
	class PageLoader {
	}


	interface PageLoader extends SwingWorker<URL, Object> {}	class PlainEditorKit {
		viewFactory : ViewFactory;
		createI18N(arg1 : Element) : View;
	}


	interface PlainEditorKit extends DefaultEditorKit, ViewFactory {}

	module PlainEditorKit {
		class PlainParagraph {
		}


		interface PlainParagraph extends ParagraphView {}

		module PlainParagraph {
			class LogicalView {
			}


			interface LogicalView extends CompositeView {}		}
	}
}

export = JEditorPane
