import Set = require('nashorn/java/util/Set');
import Principal = require('nashorn/java/security/Principal');
import Object = require('nashorn/java/lang/Object');
import AccessControlContext = require('nashorn/java/security/AccessControlContext');
import PrivilegedAction = require('nashorn/java/security/PrivilegedAction');
import PrivilegedExceptionAction = require('nashorn/java/security/PrivilegedExceptionAction');
import Class = require('nashorn/java/lang/Class');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Serializable = require('nashorn/java/io/Serializable');
import AbstractSet = require('nashorn/java/util/AbstractSet');

declare class Subject {
	readOnly : boolean;
	principals : Set<Principal>;
	publicCredentials : Set<Object>;
	privateCredentials : Set<Object>;
	constructor();
	constructor(arg1 : boolean, arg2 : Set<Principal>, arg3 : Set<any>, arg4 : Set<any>);
	setReadOnly() : void;
	isReadOnly() : boolean;
	static getSubject(arg1 : AccessControlContext) : Subject;
	static doAs<T>(arg1 : Subject, arg2 : PrivilegedAction<T>) : T;
	static doAs<T>(arg1 : Subject, arg2 : PrivilegedExceptionAction<T>) : T;
	static doAsPrivileged<T>(arg1 : Subject, arg2 : PrivilegedAction<T>, arg3 : AccessControlContext) : T;
	static doAsPrivileged<T>(arg1 : Subject, arg2 : PrivilegedExceptionAction<T>, arg3 : AccessControlContext) : T;
	static createContext(arg1 : Subject, arg2 : AccessControlContext) : AccessControlContext;
	getPrincipals() : Set<Principal>;
	getPrincipals<T extends Principal>(arg1 : Class<T>) : Set<T>;
	getPublicCredentials() : Set<Object>;
	getPrivateCredentials() : Set<Object>;
	getPublicCredentials<T>(arg1 : Class<T>) : Set<T>;
	getPrivateCredentials<T>(arg1 : Class<T>) : Set<T>;
	toString(arg1 : boolean) : string;
	getCredHashCode(arg1 : Object) : number;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface Subject extends Serializable {}

declare module Subject {
	class AuthPermissionHolder extends Object {
	}
	class ClassSet<T> {
		populateSet() : void;
	}


	interface ClassSet<T> extends AbstractSet<T> {}	class SecureSet<E> {
		writeObject(arg1 : ObjectOutputStream) : void;
		readObject(arg1 : ObjectInputStream) : void;
	}


	interface SecureSet<E> extends AbstractSet<E>, Serializable {}}

export = Subject
