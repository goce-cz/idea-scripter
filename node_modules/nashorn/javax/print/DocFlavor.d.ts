import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Serializable = require('nashorn/java/io/Serializable');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class DocFlavor {
	static hostEncoding : string;
	mimeType : string;
	mediaType : string;
	mediaSubtype : string;
	representationClassName : string;
	constructor(arg1 : string, arg2 : string);
	getMimeType() : string;
	getMediaType() : string;
	getMediaSubtype() : string;
	getParameter(arg1 : string) : string;
	getRepresentationClassName() : string;
	getStringValue() : string;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface DocFlavor extends Serializable, Cloneable {}

declare module DocFlavor {
	class BYTE_ARRAY {
		static TEXT_PLAIN_HOST : DocFlavor.BYTE_ARRAY;
		static TEXT_PLAIN_UTF_8 : DocFlavor.BYTE_ARRAY;
		static TEXT_PLAIN_UTF_16 : DocFlavor.BYTE_ARRAY;
		static TEXT_PLAIN_UTF_16BE : DocFlavor.BYTE_ARRAY;
		static TEXT_PLAIN_UTF_16LE : DocFlavor.BYTE_ARRAY;
		static TEXT_PLAIN_US_ASCII : DocFlavor.BYTE_ARRAY;
		static TEXT_HTML_HOST : DocFlavor.BYTE_ARRAY;
		static TEXT_HTML_UTF_8 : DocFlavor.BYTE_ARRAY;
		static TEXT_HTML_UTF_16 : DocFlavor.BYTE_ARRAY;
		static TEXT_HTML_UTF_16BE : DocFlavor.BYTE_ARRAY;
		static TEXT_HTML_UTF_16LE : DocFlavor.BYTE_ARRAY;
		static TEXT_HTML_US_ASCII : DocFlavor.BYTE_ARRAY;
		static PDF : DocFlavor.BYTE_ARRAY;
		static POSTSCRIPT : DocFlavor.BYTE_ARRAY;
		static PCL : DocFlavor.BYTE_ARRAY;
		static GIF : DocFlavor.BYTE_ARRAY;
		static JPEG : DocFlavor.BYTE_ARRAY;
		static PNG : DocFlavor.BYTE_ARRAY;
		static AUTOSENSE : DocFlavor.BYTE_ARRAY;
		constructor(arg1 : string);
	}


	interface BYTE_ARRAY extends DocFlavor {}	class CHAR_ARRAY {
		static TEXT_PLAIN : DocFlavor.CHAR_ARRAY;
		static TEXT_HTML : DocFlavor.CHAR_ARRAY;
		constructor(arg1 : string);
	}


	interface CHAR_ARRAY extends DocFlavor {}	class INPUT_STREAM {
		static TEXT_PLAIN_HOST : DocFlavor.INPUT_STREAM;
		static TEXT_PLAIN_UTF_8 : DocFlavor.INPUT_STREAM;
		static TEXT_PLAIN_UTF_16 : DocFlavor.INPUT_STREAM;
		static TEXT_PLAIN_UTF_16BE : DocFlavor.INPUT_STREAM;
		static TEXT_PLAIN_UTF_16LE : DocFlavor.INPUT_STREAM;
		static TEXT_PLAIN_US_ASCII : DocFlavor.INPUT_STREAM;
		static TEXT_HTML_HOST : DocFlavor.INPUT_STREAM;
		static TEXT_HTML_UTF_8 : DocFlavor.INPUT_STREAM;
		static TEXT_HTML_UTF_16 : DocFlavor.INPUT_STREAM;
		static TEXT_HTML_UTF_16BE : DocFlavor.INPUT_STREAM;
		static TEXT_HTML_UTF_16LE : DocFlavor.INPUT_STREAM;
		static TEXT_HTML_US_ASCII : DocFlavor.INPUT_STREAM;
		static PDF : DocFlavor.INPUT_STREAM;
		static POSTSCRIPT : DocFlavor.INPUT_STREAM;
		static PCL : DocFlavor.INPUT_STREAM;
		static GIF : DocFlavor.INPUT_STREAM;
		static JPEG : DocFlavor.INPUT_STREAM;
		static PNG : DocFlavor.INPUT_STREAM;
		static AUTOSENSE : DocFlavor.INPUT_STREAM;
		constructor(arg1 : string);
	}


	interface INPUT_STREAM extends DocFlavor {}	class READER {
		static TEXT_PLAIN : DocFlavor.READER;
		static TEXT_HTML : DocFlavor.READER;
		constructor(arg1 : string);
	}


	interface READER extends DocFlavor {}	class SERVICE_FORMATTED {
		static RENDERABLE_IMAGE : DocFlavor.SERVICE_FORMATTED;
		static PRINTABLE : DocFlavor.SERVICE_FORMATTED;
		static PAGEABLE : DocFlavor.SERVICE_FORMATTED;
		constructor(arg1 : string);
	}


	interface SERVICE_FORMATTED extends DocFlavor {}	class STRING {
		static TEXT_PLAIN : DocFlavor.STRING;
		static TEXT_HTML : DocFlavor.STRING;
		constructor(arg1 : string);
	}


	interface STRING extends DocFlavor {}	class URL {
		static TEXT_PLAIN_HOST : DocFlavor.URL;
		static TEXT_PLAIN_UTF_8 : DocFlavor.URL;
		static TEXT_PLAIN_UTF_16 : DocFlavor.URL;
		static TEXT_PLAIN_UTF_16BE : DocFlavor.URL;
		static TEXT_PLAIN_UTF_16LE : DocFlavor.URL;
		static TEXT_PLAIN_US_ASCII : DocFlavor.URL;
		static TEXT_HTML_HOST : DocFlavor.URL;
		static TEXT_HTML_UTF_8 : DocFlavor.URL;
		static TEXT_HTML_UTF_16 : DocFlavor.URL;
		static TEXT_HTML_UTF_16BE : DocFlavor.URL;
		static TEXT_HTML_UTF_16LE : DocFlavor.URL;
		static TEXT_HTML_US_ASCII : DocFlavor.URL;
		static PDF : DocFlavor.URL;
		static POSTSCRIPT : DocFlavor.URL;
		static PCL : DocFlavor.URL;
		static GIF : DocFlavor.URL;
		static JPEG : DocFlavor.URL;
		static PNG : DocFlavor.URL;
		static AUTOSENSE : DocFlavor.URL;
		constructor(arg1 : string);
	}


	interface URL extends DocFlavor {}}

export = DocFlavor
