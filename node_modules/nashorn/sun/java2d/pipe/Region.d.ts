import Object = require('nashorn/java/lang/Object');
import RegionIterator = require('nashorn/sun/java2d/pipe/RegionIterator');
import SpanIterator = require('nashorn/sun/java2d/pipe/SpanIterator');
import Shape = require('nashorn/java/awt/Shape');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import Rectangle = require('nashorn/java/awt/Rectangle');

declare class Region extends Object {
	static EMPTY_REGION : Region;
	static WHOLE_REGION : Region;
	loX : number;
	loY : number;
	hiX : number;
	hiY : number;
	width : number;
	height : number;
	empty : boolean;
	rectangular : boolean;
	iterator : RegionIterator;
	spanIterator : SpanIterator;
	static initIDs() : void;
	static dimAdd(arg1 : number, arg2 : number) : number;
	static clipAdd(arg1 : number, arg2 : number) : number;
	static clipScale(arg1 : number, arg2 : number) : number;
	static getInstance(arg1 : Shape, arg2 : AffineTransform) : Region;
	static getInstance(arg1 : Region, arg2 : Shape, arg3 : AffineTransform) : Region;
	static getInstance(arg1 : Region, arg2 : boolean, arg3 : Shape, arg4 : AffineTransform) : Region;
	static getInstance(arg1 : Rectangle) : Region;
	static getInstanceXYWH(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Region;
	static getInstance(arg1 : number[]) : Region;
	static getInstanceXYXY(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Region;
	setOutputArea(arg1 : Rectangle) : void;
	setOutputAreaXYWH(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	setOutputArea(arg1 : number[]) : void;
	setOutputAreaXYXY(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
	appendSpans(arg1 : SpanIterator) : void;
	getScaledRegion(arg1 : number, arg2 : number) : Region;
	getTranslatedRegion(arg1 : number, arg2 : number) : Region;
	getSafeTranslatedRegion(arg1 : number, arg2 : number) : Region;
	getIntersection(arg1 : Rectangle) : Region;
	getIntersectionXYWH(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Region;
	getIntersectionXYXY(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Region;
	getIntersection(arg1 : Region) : Region;
	getUnion(arg1 : Region) : Region;
	getDifference(arg1 : Region) : Region;
	getExclusiveOr(arg1 : Region) : Region;
	filterSpans(arg1 : Region, arg2 : Region, arg3 : number) : void;
	getBoundsIntersection(arg1 : Rectangle) : Region;
	getBoundsIntersectionXYWH(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Region;
	getBoundsIntersectionXYXY(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Region;
	getBoundsIntersection(arg1 : Region) : Region;
	appendSpan(arg1 : number[]) : void;
	needSpace(arg1 : number) : void;
	endRow(arg1 : number[]) : void;
	calcBBox() : void;
	getLoX() : number;
	getLoY() : number;
	getHiX() : number;
	getHiY() : number;
	getWidth() : number;
	getHeight() : number;
	isEmpty() : boolean;
	isRectangular() : boolean;
	contains(arg1 : number, arg2 : number) : boolean;
	isInsideXYWH(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : boolean;
	isInsideXYXY(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : boolean;
	isInsideQuickCheck(arg1 : Region) : boolean;
	intersectsQuickCheckXYXY(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : boolean;
	intersectsQuickCheck(arg1 : Region) : boolean;
	encompasses(arg1 : Region) : boolean;
	encompassesXYWH(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : boolean;
	encompassesXYXY(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : boolean;
	getBounds(arg1 : number[]) : void;
	clipBoxToBounds(arg1 : number[]) : void;
	getIterator() : RegionIterator;
	getSpanIterator() : SpanIterator;
	getSpanIterator(arg1 : number[]) : SpanIterator;
	filter(arg1 : SpanIterator) : SpanIterator;
}


declare module Region {
	class ImmutableRegion {
	}


	interface ImmutableRegion extends Region {}}

export = Region
