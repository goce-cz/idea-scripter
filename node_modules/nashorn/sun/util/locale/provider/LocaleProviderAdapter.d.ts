import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import BreakIteratorProvider = require('nashorn/java/text/spi/BreakIteratorProvider');
import CollatorProvider = require('nashorn/java/text/spi/CollatorProvider');
import DateFormatProvider = require('nashorn/java/text/spi/DateFormatProvider');
import DateFormatSymbolsProvider = require('nashorn/java/text/spi/DateFormatSymbolsProvider');
import DecimalFormatSymbolsProvider = require('nashorn/java/text/spi/DecimalFormatSymbolsProvider');
import NumberFormatProvider = require('nashorn/java/text/spi/NumberFormatProvider');
import CurrencyNameProvider = require('nashorn/java/util/spi/CurrencyNameProvider');
import LocaleNameProvider = require('nashorn/java/util/spi/LocaleNameProvider');
import TimeZoneNameProvider = require('nashorn/java/util/spi/TimeZoneNameProvider');
import CalendarDataProvider = require('nashorn/java/util/spi/CalendarDataProvider');
import CalendarNameProvider = require('nashorn/java/util/spi/CalendarNameProvider');
import CalendarProvider = require('nashorn/sun/util/spi/CalendarProvider');
import Locale = require('nashorn/java/util/Locale');
import Class = require('nashorn/java/lang/Class');
import LocaleServiceProvider = require('nashorn/java/util/spi/LocaleServiceProvider');
import Set = require('nashorn/java/util/Set');
import LocaleResources = require('nashorn/sun/util/locale/provider/LocaleResources');
import Enum = require('nashorn/java/lang/Enum');

declare class LocaleProviderAdapter extends Object {
	static resourceBundleBased : LocaleProviderAdapter;
	static adapterPreference : List<LocaleProviderAdapter.Type>;
	adapterType : LocaleProviderAdapter.Type;
	breakIteratorProvider : BreakIteratorProvider;
	collatorProvider : CollatorProvider;
	dateFormatProvider : DateFormatProvider;
	dateFormatSymbolsProvider : DateFormatSymbolsProvider;
	decimalFormatSymbolsProvider : DecimalFormatSymbolsProvider;
	numberFormatProvider : NumberFormatProvider;
	currencyNameProvider : CurrencyNameProvider;
	localeNameProvider : LocaleNameProvider;
	timeZoneNameProvider : TimeZoneNameProvider;
	calendarDataProvider : CalendarDataProvider;
	calendarNameProvider : CalendarNameProvider;
	calendarProvider : CalendarProvider;
	availableLocales : Locale[];
	constructor();
	static forType(arg1 : LocaleProviderAdapter.Type) : LocaleProviderAdapter;
	static forJRE() : LocaleProviderAdapter;
	static getResourceBundleBased() : LocaleProviderAdapter;
	static getAdapterPreference() : List<LocaleProviderAdapter.Type>;
	static getAdapter(arg1 : Class<LocaleServiceProvider>, arg2 : Locale) : LocaleProviderAdapter;
	static findAdapter(arg1 : Class<LocaleServiceProvider>, arg2 : Locale) : LocaleProviderAdapter;
	static isSupportedLocale(arg1 : Locale, arg2 : LocaleProviderAdapter.Type, arg3 : Set<string>) : boolean;
	static toLocaleArray(arg1 : Set<string>) : Locale[];
	getAdapterType() : LocaleProviderAdapter.Type;
	getLocaleServiceProvider<P extends LocaleServiceProvider>(arg1 : Class<P>) : P;
	getBreakIteratorProvider() : BreakIteratorProvider;
	getCollatorProvider() : CollatorProvider;
	getDateFormatProvider() : DateFormatProvider;
	getDateFormatSymbolsProvider() : DateFormatSymbolsProvider;
	getDecimalFormatSymbolsProvider() : DecimalFormatSymbolsProvider;
	getNumberFormatProvider() : NumberFormatProvider;
	getCurrencyNameProvider() : CurrencyNameProvider;
	getLocaleNameProvider() : LocaleNameProvider;
	getTimeZoneNameProvider() : TimeZoneNameProvider;
	getCalendarDataProvider() : CalendarDataProvider;
	getCalendarNameProvider() : CalendarNameProvider;
	getCalendarProvider() : CalendarProvider;
	getLocaleResources(arg1 : Locale) : LocaleResources;
	getAvailableLocales() : Locale[];
}


declare module LocaleProviderAdapter {
	class Type {
		static JRE : LocaleProviderAdapter.Type;
		static CLDR : LocaleProviderAdapter.Type;
		static SPI : LocaleProviderAdapter.Type;
		static HOST : LocaleProviderAdapter.Type;
		static FALLBACK : LocaleProviderAdapter.Type;
		utilResourcesPackage : string;
		textResourcesPackage : string;
		getUtilResourcesPackage() : string;
		getTextResourcesPackage() : string;
	}


	interface Type extends Enum<LocaleProviderAdapter.Type> {}}

export = LocaleProviderAdapter
