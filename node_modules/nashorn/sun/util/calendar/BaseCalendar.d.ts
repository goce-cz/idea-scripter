import CalendarDate = require('nashorn/sun/util/calendar/CalendarDate');
import AbstractCalendar = require('nashorn/sun/util/calendar/AbstractCalendar');

declare class BaseCalendar {
	static JANUARY : number;
	static FEBRUARY : number;
	static MARCH : number;
	static APRIL : number;
	static MAY : number;
	static JUNE : number;
	static JULY : number;
	static AUGUST : number;
	static SEPTEMBER : number;
	static OCTOBER : number;
	static NOVEMBER : number;
	static DECEMBER : number;
	static SUNDAY : number;
	static MONDAY : number;
	static TUESDAY : number;
	static WEDNESDAY : number;
	static THURSDAY : number;
	static FRIDAY : number;
	static SATURDAY : number;
	constructor();
	normalizeMonth(arg1 : CalendarDate) : void;
	getMonthLength(arg1 : number, arg2 : number) : number;
	getDayOfYear(arg1 : CalendarDate) : number;
	getDayOfYear(arg1 : number, arg2 : number, arg3 : number) : number;
	getFixedDate(arg1 : number, arg2 : number, arg3 : number, arg4 : BaseCalendar.Date) : number;
	getDayOfWeek(arg1 : CalendarDate) : number;
	static getDayOfWeekFromFixedDate(arg1 : number) : number;
	getYearFromFixedDate(arg1 : number) : number;
	getGregorianYearFromFixedDate(arg1 : number) : number;
	isLeapYear(arg1 : number) : boolean;
}


declare interface BaseCalendar extends AbstractCalendar {}

declare module BaseCalendar {
	class Date {
		normalizedYear : number;
		setNormalizedDate(arg1 : number, arg2 : number, arg3 : number) : BaseCalendar.Date;
		getNormalizedYear() : number;
		setNormalizedYear(arg1 : number) : void;
		hit(arg1 : number) : boolean;
		hit(arg1 : number) : boolean;
		getCachedYear() : number;
		getCachedJan1() : number;
		setCache(arg1 : number, arg2 : number, arg3 : number) : void;
	}


	interface Date extends CalendarDate {}}

export = BaseCalendar
