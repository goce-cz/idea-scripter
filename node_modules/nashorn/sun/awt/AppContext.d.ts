import Object = require('nashorn/java/lang/Object');
import Set = require('nashorn/java/util/Set');
import ThreadGroup = require('nashorn/java/lang/ThreadGroup');
import ClassLoader = require('nashorn/java/lang/ClassLoader');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import Supplier = require('nashorn/java/util/function/Supplier');
import Runnable = require('nashorn/java/lang/Runnable');
import PrivilegedAction = require('nashorn/java/security/PrivilegedAction');
import Thread = require('nashorn/java/lang/Thread');
import Enum = require('nashorn/java/lang/Enum');

declare class AppContext extends Object {
	static EVENT_QUEUE_KEY : Object;
	static EVENT_QUEUE_LOCK_KEY : Object;
	static EVENT_QUEUE_COND_KEY : Object;
	static DISPOSED_PROPERTY_NAME : string;
	static GUI_DISPOSED : string;
	static appContexts : Set<AppContext>;
	disposed : boolean;
	static appContext : AppContext;
	threadGroup : ThreadGroup;
	contextClassLoader : ClassLoader;
	propertyChangeListeners : PropertyChangeListener[];
	static getAppContexts() : Set<AppContext>;
	isDisposed() : boolean;
	static initMainAppContext() : void;
	static getAppContext() : AppContext;
	static isMainContext(arg1 : AppContext) : boolean;
	static getExecutionAppContext() : AppContext;
	dispose() : void;
	static stopEventDispatchThreads() : void;
	get(arg1 : Object) : Object;
	put(arg1 : Object, arg2 : Object) : Object;
	remove(arg1 : Object) : Object;
	getThreadGroup() : ThreadGroup;
	getContextClassLoader() : ClassLoader;
	getPropertyChangeListeners() : PropertyChangeListener[];
	addPropertyChangeListener(arg1 : string, arg2 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : string, arg2 : PropertyChangeListener) : void;
	getPropertyChangeListeners(arg1 : string) : PropertyChangeListener[];
	static getSoftReferenceValue<T>(arg1 : Object, arg2 : Supplier<T>) : T;
}


declare module AppContext {
	class CreateThreadAction {
		constructor(arg1 : AppContext, arg2 : Runnable);
	}


	interface CreateThreadAction extends PrivilegedAction<Thread> {}	class GetAppContextLock extends Object {
	}
	class PostShutdownEventRunnable {
		constructor(arg1 : AppContext);
	}


	interface PostShutdownEventRunnable extends Runnable {}	class State {
		static VALID : AppContext.State;
		static BEING_DISPOSED : AppContext.State;
		static DISPOSED : AppContext.State;
	}


	interface State extends Enum<AppContext.State> {}}

export = AppContext
