import Object = require('nashorn/java/lang/Object');
import URL = require('nashorn/java/net/URL');
import URLStreamHandlerFactory = require('nashorn/java/net/URLStreamHandlerFactory');
import List = require('nashorn/java/util/List');
import IOException = require('nashorn/java/io/IOException');
import Resource = require('nashorn/sun/misc/Resource');
import Enumeration = require('nashorn/java/util/Enumeration');
import JarFile = require('nashorn/java/util/jar/JarFile');
import JarIndex = require('nashorn/sun/misc/JarIndex');
import JarEntry = require('nashorn/java/util/jar/JarEntry');
import Set = require('nashorn/java/util/Set');
import Closeable = require('nashorn/java/io/Closeable');

declare class URLClassPath extends Object {
	uRLs : URL[];
	constructor(arg1 : URL[], arg2 : URLStreamHandlerFactory);
	constructor(arg1 : URL[]);
	closeLoaders() : List<IOException>;
	addURL(arg1 : URL) : void;
	getURLs() : URL[];
	findResource(arg1 : string, arg2 : boolean) : URL;
	getResource(arg1 : string, arg2 : boolean) : Resource;
	findResources(arg1 : string, arg2 : boolean) : Enumeration<URL>;
	getResource(arg1 : string) : Resource;
	getResources(arg1 : string, arg2 : boolean) : Enumeration<Resource>;
	getResources(arg1 : string) : Enumeration<Resource>;
	getLoader(arg1 : number) : URLClassPath.Loader;
	getLoader(arg1 : URL) : URLClassPath.Loader;
	push(arg1 : URL[]) : void;
	static pathToURLs(arg1 : string) : URL[];
	checkURL(arg1 : URL) : URL;
	static check(arg1 : URL) : void;
}


declare module URLClassPath {
	class FileLoader {
	}


	interface FileLoader extends URLClassPath.Loader {}	class JarLoader {
		getJarFile() : JarFile;
		isOptimizable(arg1 : URL) : boolean;
		ensureOpen() : void;
		static checkJar(arg1 : JarFile) : JarFile;
		getJarFile(arg1 : URL) : JarFile;
		getIndex() : JarIndex;
		checkResource(arg1 : string, arg2 : boolean, arg3 : JarEntry) : Resource;
		validIndex(arg1 : string) : boolean;
		getResource(arg1 : string, arg2 : boolean, arg3 : Set<string>) : Resource;
		parseExtensionsDependencies() : void;
		parseClassPath(arg1 : URL, arg2 : string) : URL[];
	}


	interface JarLoader extends URLClassPath.Loader {}	class Loader {
		getBaseURL() : URL;
		findResource(arg1 : string, arg2 : boolean) : URL;
		getResource(arg1 : string, arg2 : boolean) : Resource;
		getResource(arg1 : string) : Resource;
		getClassPath() : URL[];
	}


	interface Loader extends Closeable {}}

export = URLClassPath
