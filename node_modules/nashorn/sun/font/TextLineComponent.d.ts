import Object = require('nashorn/java/lang/Object');
import CoreMetrics = require('nashorn/sun/font/CoreMetrics');
import Rectangle2D = require('nashorn/java/awt/geom/Rectangle2D');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import Graphics2D = require('nashorn/java/awt/Graphics2D');
import Shape = require('nashorn/java/awt/Shape');
import FontRenderContext = require('nashorn/java/awt/font/FontRenderContext');
import Rectangle = require('nashorn/java/awt/Rectangle');
import GlyphJustificationInfo = require('nashorn/java/awt/font/GlyphJustificationInfo');

declare class TextLineComponent extends Object {
	static LEFT_TO_RIGHT : number;
	static RIGHT_TO_LEFT : number;
	static UNCHANGED : number;
	coreMetrics : CoreMetrics;
	visualBounds : Rectangle2D;
	advance : number;
	numCharacters : number;
	logicalBounds : Rectangle2D;
	italicBounds : Rectangle2D;
	baselineTransform : AffineTransform;
	simple : boolean;
	numJustificationInfos : number;
	getCoreMetrics() : CoreMetrics;
	draw(arg1 : Graphics2D, arg2 : number, arg3 : number) : void;
	getCharVisualBounds(arg1 : number) : Rectangle2D;
	getVisualBounds() : Rectangle2D;
	getAdvance() : number;
	getOutline(arg1 : number, arg2 : number) : Shape;
	getNumCharacters() : number;
	getCharX(arg1 : number) : number;
	getCharY(arg1 : number) : number;
	getCharAdvance(arg1 : number) : number;
	caretAtOffsetIsValid(arg1 : number) : boolean;
	getLineBreakIndex(arg1 : number, arg2 : number) : number;
	getAdvanceBetween(arg1 : number, arg2 : number) : number;
	getLogicalBounds() : Rectangle2D;
	getItalicBounds() : Rectangle2D;
	getBaselineTransform() : AffineTransform;
	isSimple() : boolean;
	getPixelBounds(arg1 : FontRenderContext, arg2 : number, arg3 : number) : Rectangle;
	getSubset(arg1 : number, arg2 : number, arg3 : number) : TextLineComponent;
	getNumJustificationInfos() : number;
	getJustificationInfos(arg1 : GlyphJustificationInfo[], arg2 : number, arg3 : number, arg4 : number) : void;
	applyJustificationDeltas(arg1 : number[], arg2 : number, arg3 : boolean[]) : TextLineComponent;
}

export = TextLineComponent
