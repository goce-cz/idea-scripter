import Object = require('nashorn/java/lang/Object');
import Font2DHandle = require('nashorn/sun/font/Font2DHandle');
import CharToGlyphMapper = require('nashorn/sun/font/CharToGlyphMapper');
import FontStrikeDesc = require('nashorn/sun/font/FontStrikeDesc');
import FontStrike = require('nashorn/sun/font/FontStrike');
import Font = require('nashorn/java/awt/Font');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import FontRenderContext = require('nashorn/java/awt/font/FontRenderContext');
import Locale = require('nashorn/java/util/Locale');

declare class Font2D extends Object {
	static FONT_CONFIG_RANK : number;
	static JRE_RANK : number;
	static TTF_RANK : number;
	static TYPE1_RANK : number;
	static NATIVE_RANK : number;
	static UNKNOWN_RANK : number;
	static DEFAULT_RANK : number;
	handle : Font2DHandle;
	style : number;
	postscriptName : string;
	numGlyphs : number;
	missingGlyphCode : number;
	constructor();
	getStyle() : number;
	setStyle() : void;
	getRank() : number;
	setRank(arg1 : number) : void;
	getMapper() : CharToGlyphMapper;
	getValidatedGlyphCode(arg1 : number) : number;
	createStrike(arg1 : FontStrikeDesc) : FontStrike;
	getStrike(arg1 : Font) : FontStrike;
	getStrike(arg1 : Font, arg2 : AffineTransform, arg3 : number, arg4 : number) : FontStrike;
	getStrike(arg1 : Font, arg2 : AffineTransform, arg3 : AffineTransform, arg4 : number, arg5 : number) : FontStrike;
	getStrike(arg1 : Font, arg2 : FontRenderContext) : FontStrike;
	getStrike(arg1 : FontStrikeDesc) : FontStrike;
	getStrike(arg1 : FontStrikeDesc, arg2 : boolean) : FontStrike;
	removeFromCache(arg1 : FontStrikeDesc) : void;
	getFontMetrics(arg1 : Font, arg2 : AffineTransform, arg3 : Object, arg4 : Object, arg5 : number[]) : void;
	getStyleMetrics(arg1 : number, arg2 : number[], arg3 : number) : void;
	getFontMetrics(arg1 : Font, arg2 : FontRenderContext, arg3 : number[]) : void;
	getTableBytes(arg1 : number) : number[];
	getUnitsPerEm() : number;
	supportsEncoding(arg1 : string) : boolean;
	canDoStyle(arg1 : number) : boolean;
	useAAForPtSize(arg1 : number) : boolean;
	hasSupplementaryChars() : boolean;
	getPostscriptName() : string;
	getFontName(arg1 : Locale) : string;
	getFamilyName(arg1 : Locale) : string;
	getNumGlyphs() : number;
	charToGlyph(arg1 : number) : number;
	getMissingGlyphCode() : number;
	canDisplay(arg1 : string) : boolean;
	canDisplay(arg1 : number) : boolean;
	getBaselineFor(arg1 : string) : number;
	getItalicAngle(arg1 : Font, arg2 : AffineTransform, arg3 : Object, arg4 : Object) : number;
}

export = Font2D
