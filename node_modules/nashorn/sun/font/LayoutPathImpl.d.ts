import Point2D = require('nashorn/java/awt/geom/Point2D');
import Shape = require('nashorn/java/awt/Shape');
import LayoutPath = require('nashorn/java/awt/font/LayoutPath');
import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import Enum = require('nashorn/java/lang/Enum');
import Object = require('nashorn/java/lang/Object');

declare class LayoutPathImpl {
	constructor();
	pointToPath(arg1 : number, arg2 : number) : Point2D;
	pathToPoint(arg1 : number, arg2 : number, arg3 : boolean) : Point2D;
	pointToPath(arg1 : number, arg2 : number, arg3 : Point2D) : void;
	pathToPoint(arg1 : number, arg2 : number, arg3 : boolean, arg4 : Point2D) : void;
	start() : number;
	end() : number;
	length() : number;
	mapShape(arg1 : Shape) : Shape;
	static getPath(arg1 : LayoutPathImpl.EndType, arg2 : number[]) : LayoutPathImpl;
}


declare interface LayoutPathImpl extends LayoutPath {}

declare module LayoutPathImpl {
	class EmptyPath {
		constructor(arg1 : AffineTransform);
	}


	interface EmptyPath extends LayoutPathImpl {}	class EndType {
		static PINNED : LayoutPathImpl.EndType;
		static EXTENDED : LayoutPathImpl.EndType;
		static CLOSED : LayoutPathImpl.EndType;
		pinned : boolean;
		extended : boolean;
		closed : boolean;
		isPinned() : boolean;
		isExtended() : boolean;
		isClosed() : boolean;
	}


	interface EndType extends Enum<LayoutPathImpl.EndType> {}	class SegmentPath {
		static get(arg1 : LayoutPathImpl.EndType, arg2 : number[]) : LayoutPathImpl.SegmentPath;
		calcoffset(arg1 : number, arg2 : boolean, arg3 : Point2D) : void;
		getClosedAdvance(arg1 : number, arg2 : boolean) : number;
		getSegmentIndexForAdvance(arg1 : number, arg2 : boolean) : number;
		map(arg1 : number, arg2 : number, arg3 : number, arg4 : Point2D) : void;
		locateAndGetIndex(arg1 : Point2D, arg2 : boolean, arg3 : Point2D) : number;
	}


	interface SegmentPath extends LayoutPathImpl {}

	module SegmentPath {
		class LineInfo extends Object {
			set(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : void;
			set(arg1 : LayoutPathImpl.SegmentPath.LineInfo) : void;
			pin(arg1 : number, arg2 : number, arg3 : LayoutPathImpl.SegmentPath.LineInfo) : boolean;
			pin(arg1 : number, arg2 : LayoutPathImpl.SegmentPath.LineInfo) : boolean;
		}
		class Mapper extends Object {
			init() : void;
			moveTo(arg1 : number, arg2 : number) : void;
			lineTo(arg1 : number, arg2 : number) : void;
			close() : void;
			mapShape(arg1 : Shape) : Shape;
		}
		class Segment extends Object {
			init() : void;
			move() : void;
			close() : void;
			line(arg1 : LayoutPathImpl.SegmentPath.LineInfo) : void;
		}
	}
	class SegmentPathBuilder extends Object {
		constructor();
		reset(arg1 : number) : void;
		build(arg1 : LayoutPathImpl.EndType, arg2 : number[]) : LayoutPathImpl.SegmentPath;
		moveTo(arg1 : number, arg2 : number) : void;
		lineTo(arg1 : number, arg2 : number) : void;
		nextPoint(arg1 : number, arg2 : number, arg3 : boolean) : void;
		complete() : LayoutPathImpl.SegmentPath;
		complete(arg1 : LayoutPathImpl.EndType) : LayoutPathImpl.SegmentPath;
	}
}

export = LayoutPathImpl
