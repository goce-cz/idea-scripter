import AffineTransform = require('nashorn/java/awt/geom/AffineTransform');
import Font = require('nashorn/java/awt/Font');
import GraphicAttribute = require('nashorn/java/awt/font/GraphicAttribute');
import Paint = require('nashorn/java/awt/Paint');
import Object = require('nashorn/java/lang/Object');
import NumericShaper = require('nashorn/java/awt/font/NumericShaper');
import TransformAttribute = require('nashorn/java/awt/font/TransformAttribute');
import Annotation = require('nashorn/java/text/Annotation');
import InputMethodHighlight = require('nashorn/java/awt/im/InputMethodHighlight');
import EAttribute = require('nashorn/sun/font/EAttribute');
import Map = require('nashorn/java/util/Map');
import AttributedCharacterIterator = require('nashorn/java/text/AttributedCharacterIterator');
import TextAttribute = require('nashorn/java/awt/font/TextAttribute');
import Hashtable = require('nashorn/java/util/Hashtable');
import Point2D = require('nashorn/java/awt/geom/Point2D');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class AttributeValues {
	static MASK_ALL : number;
	family : string;
	weight : number;
	width : number;
	posture : number;
	size : number;
	transform : AffineTransform;
	superscript : number;
	font : Font;
	charReplacement : GraphicAttribute;
	foreground : Paint;
	background : Paint;
	underline : number;
	strikethrough : boolean;
	runDirection : number;
	bidiEmbedding : number;
	justification : number;
	inputMethodHighlight : Object;
	inputMethodUnderline : number;
	swapColors : boolean;
	numericShaping : NumericShaper;
	kerning : number;
	tracking : number;
	ligatures : number;
	baselineTransform : AffineTransform;
	charTransform : AffineTransform;
	constructor();
	getFamily() : string;
	setFamily(arg1 : string) : void;
	getWeight() : number;
	setWeight(arg1 : number) : void;
	getWidth() : number;
	setWidth(arg1 : number) : void;
	getPosture() : number;
	setPosture(arg1 : number) : void;
	getSize() : number;
	setSize(arg1 : number) : void;
	getTransform() : AffineTransform;
	setTransform(arg1 : AffineTransform) : void;
	setTransform(arg1 : TransformAttribute) : void;
	getSuperscript() : number;
	setSuperscript(arg1 : number) : void;
	getFont() : Font;
	setFont(arg1 : Font) : void;
	getCharReplacement() : GraphicAttribute;
	setCharReplacement(arg1 : GraphicAttribute) : void;
	getForeground() : Paint;
	setForeground(arg1 : Paint) : void;
	getBackground() : Paint;
	setBackground(arg1 : Paint) : void;
	getUnderline() : number;
	setUnderline(arg1 : number) : void;
	getStrikethrough() : boolean;
	setStrikethrough(arg1 : boolean) : void;
	getRunDirection() : number;
	setRunDirection(arg1 : number) : void;
	getBidiEmbedding() : number;
	setBidiEmbedding(arg1 : number) : void;
	getJustification() : number;
	setJustification(arg1 : number) : void;
	getInputMethodHighlight() : Object;
	setInputMethodHighlight(arg1 : Annotation) : void;
	setInputMethodHighlight(arg1 : InputMethodHighlight) : void;
	getInputMethodUnderline() : number;
	setInputMethodUnderline(arg1 : number) : void;
	getSwapColors() : boolean;
	setSwapColors(arg1 : boolean) : void;
	getNumericShaping() : NumericShaper;
	setNumericShaping(arg1 : NumericShaper) : void;
	getKerning() : number;
	setKerning(arg1 : number) : void;
	getTracking() : number;
	setTracking(arg1 : number) : void;
	getLigatures() : number;
	setLigatures(arg1 : number) : void;
	getBaselineTransform() : AffineTransform;
	getCharTransform() : AffineTransform;
	static getMask(arg1 : EAttribute) : number;
	static getMask(arg1 : EAttribute[]) : number;
	unsetDefault() : void;
	defineAll(arg1 : number) : void;
	allDefined(arg1 : number) : boolean;
	anyDefined(arg1 : number) : boolean;
	anyNonDefault(arg1 : number) : boolean;
	isDefined(arg1 : EAttribute) : boolean;
	isNonDefault(arg1 : EAttribute) : boolean;
	setDefault(arg1 : EAttribute) : void;
	unset(arg1 : EAttribute) : void;
	set(arg1 : EAttribute, arg2 : AttributeValues) : void;
	set(arg1 : EAttribute, arg2 : Object) : void;
	get(arg1 : EAttribute) : Object;
	merge(arg1 : Map<AttributedCharacterIterator.Attribute, any>) : AttributeValues;
	merge(arg1 : Map<AttributedCharacterIterator.Attribute, any>, arg2 : number) : AttributeValues;
	merge(arg1 : AttributeValues) : AttributeValues;
	merge(arg1 : AttributeValues, arg2 : number) : AttributeValues;
	static fromMap(arg1 : Map<AttributedCharacterIterator.Attribute, any>) : AttributeValues;
	static fromMap(arg1 : Map<AttributedCharacterIterator.Attribute, any>, arg2 : number) : AttributeValues;
	toMap(arg1 : Map<TextAttribute, Object>) : Map<TextAttribute, Object>;
	static is16Hashtable(arg1 : Hashtable<Object, Object>) : boolean;
	static fromSerializableHashtable(arg1 : Hashtable<Object, Object>) : AttributeValues;
	toSerializableHashtable() : Hashtable<Object, Object>;
	equals(arg1 : AttributeValues) : boolean;
	static equals(arg1 : Object, arg2 : Object) : boolean;
	update(arg1 : EAttribute) : void;
	i_set(arg1 : EAttribute, arg2 : AttributeValues) : void;
	i_equals(arg1 : EAttribute, arg2 : AttributeValues) : boolean;
	i_set(arg1 : EAttribute, arg2 : Object) : void;
	i_get(arg1 : EAttribute) : Object;
	i_validate(arg1 : EAttribute) : boolean;
	static getJustification(arg1 : Map<any, any>) : number;
	static getNumericShaping(arg1 : Map<any, any>) : NumericShaper;
	applyIMHighlight() : AttributeValues;
	static getBaselineTransform(arg1 : Map<any, any>) : AffineTransform;
	static getCharTransform(arg1 : Map<any, any>) : AffineTransform;
	updateDerivedTransforms() : void;
	static extractXRotation(arg1 : AffineTransform, arg2 : boolean) : AffineTransform;
	static extractYRotation(arg1 : AffineTransform, arg2 : boolean) : AffineTransform;
	static extractRotation(arg1 : Point2D.Double, arg2 : AffineTransform, arg3 : boolean) : AffineTransform;
}


declare interface AttributeValues extends Cloneable {}
export = AttributeValues
