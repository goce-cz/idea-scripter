import Object = require('nashorn/java/lang/Object');
import Class = require('nashorn/java/lang/Class');
import Field = require('nashorn/java/lang/reflect/Field');
import Method = require('nashorn/java/lang/reflect/Method');
import Constructor = require('nashorn/java/lang/reflect/Constructor');
import MethodAccessor = require('nashorn/sun/reflect/MethodAccessor');
import ConstructorAccessor = require('nashorn/sun/reflect/ConstructorAccessor');
import Executable = require('nashorn/java/lang/reflect/Executable');

declare class LangReflectAccess extends Object {
	newField(arg1 : Class<any>, arg2 : string, arg3 : Class<any>, arg4 : number, arg5 : number, arg6 : string, arg7 : number[]) : Field;
	newMethod(arg1 : Class<any>, arg2 : string, arg3 : Class<any>[], arg4 : Class<any>, arg5 : Class<any>[], arg6 : number, arg7 : number, arg8 : string, arg9 : number[], arg10 : number[], arg11 : number[]) : Method;
	newConstructor<T>(arg1 : Class<T>, arg2 : Class<any>[], arg3 : Class<any>[], arg4 : number, arg5 : number, arg6 : string, arg7 : number[], arg8 : number[]) : Constructor<T>;
	getMethodAccessor(arg1 : Method) : MethodAccessor;
	setMethodAccessor(arg1 : Method, arg2 : MethodAccessor) : void;
	getConstructorAccessor(arg1 : Constructor<any>) : ConstructorAccessor;
	setConstructorAccessor(arg1 : Constructor<any>, arg2 : ConstructorAccessor) : void;
	getExecutableTypeAnnotationBytes(arg1 : Executable) : number[];
	getConstructorSlot(arg1 : Constructor<any>) : number;
	getConstructorSignature(arg1 : Constructor<any>) : string;
	getConstructorAnnotations(arg1 : Constructor<any>) : number[];
	getConstructorParameterAnnotations(arg1 : Constructor<any>) : number[];
	copyMethod(arg1 : Method) : Method;
	copyField(arg1 : Field) : Field;
	copyConstructor<T>(arg1 : Constructor<T>) : Constructor<T>;
}

export = LangReflectAccess
