import Object = require('nashorn/java/lang/Object');
import FormalTypeParameter = require('nashorn/sun/reflect/generics/tree/FormalTypeParameter');
import ClassTypeSignature = require('nashorn/sun/reflect/generics/tree/ClassTypeSignature');
import ArrayTypeSignature = require('nashorn/sun/reflect/generics/tree/ArrayTypeSignature');
import TypeVariableSignature = require('nashorn/sun/reflect/generics/tree/TypeVariableSignature');
import Wildcard = require('nashorn/sun/reflect/generics/tree/Wildcard');
import SimpleClassTypeSignature = require('nashorn/sun/reflect/generics/tree/SimpleClassTypeSignature');
import BottomSignature = require('nashorn/sun/reflect/generics/tree/BottomSignature');
import ByteSignature = require('nashorn/sun/reflect/generics/tree/ByteSignature');
import BooleanSignature = require('nashorn/sun/reflect/generics/tree/BooleanSignature');
import ShortSignature = require('nashorn/sun/reflect/generics/tree/ShortSignature');
import CharSignature = require('nashorn/sun/reflect/generics/tree/CharSignature');
import IntSignature = require('nashorn/sun/reflect/generics/tree/IntSignature');
import LongSignature = require('nashorn/sun/reflect/generics/tree/LongSignature');
import FloatSignature = require('nashorn/sun/reflect/generics/tree/FloatSignature');
import DoubleSignature = require('nashorn/sun/reflect/generics/tree/DoubleSignature');
import VoidDescriptor = require('nashorn/sun/reflect/generics/tree/VoidDescriptor');

declare class TypeTreeVisitor<T> extends Object {
	result : T;
	getResult() : T;
	visitFormalTypeParameter(arg1 : FormalTypeParameter) : void;
	visitClassTypeSignature(arg1 : ClassTypeSignature) : void;
	visitArrayTypeSignature(arg1 : ArrayTypeSignature) : void;
	visitTypeVariableSignature(arg1 : TypeVariableSignature) : void;
	visitWildcard(arg1 : Wildcard) : void;
	visitSimpleClassTypeSignature(arg1 : SimpleClassTypeSignature) : void;
	visitBottomSignature(arg1 : BottomSignature) : void;
	visitByteSignature(arg1 : ByteSignature) : void;
	visitBooleanSignature(arg1 : BooleanSignature) : void;
	visitShortSignature(arg1 : ShortSignature) : void;
	visitCharSignature(arg1 : CharSignature) : void;
	visitIntSignature(arg1 : IntSignature) : void;
	visitLongSignature(arg1 : LongSignature) : void;
	visitFloatSignature(arg1 : FloatSignature) : void;
	visitDoubleSignature(arg1 : DoubleSignature) : void;
	visitVoidDescriptor(arg1 : VoidDescriptor) : void;
}

export = TypeTreeVisitor
