import FormalTypeParameter = require('nashorn/sun/reflect/generics/tree/FormalTypeParameter');
import TypeSignature = require('nashorn/sun/reflect/generics/tree/TypeSignature');
import ReturnType = require('nashorn/sun/reflect/generics/tree/ReturnType');
import FieldTypeSignature = require('nashorn/sun/reflect/generics/tree/FieldTypeSignature');
import Visitor = require('nashorn/sun/reflect/generics/visitor/Visitor');
import Signature = require('nashorn/sun/reflect/generics/tree/Signature');

declare class MethodTypeSignature {
	formalTypeParameters : FormalTypeParameter[];
	parameterTypes : TypeSignature[];
	returnType : ReturnType;
	exceptionTypes : FieldTypeSignature[];
	static make(arg1 : FormalTypeParameter[], arg2 : TypeSignature[], arg3 : ReturnType, arg4 : FieldTypeSignature[]) : MethodTypeSignature;
	getParameterTypes() : TypeSignature[];
	getReturnType() : ReturnType;
	getExceptionTypes() : FieldTypeSignature[];
	accept(arg1 : Visitor<any>) : void;
}


declare interface MethodTypeSignature extends Signature {}
export = MethodTypeSignature
