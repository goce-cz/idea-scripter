import Object = require('nashorn/java/lang/Object');
import Set = require('nashorn/java/util/Set');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import ScriptingFrameworkDescriptor = require('nashorn/com/intellij/webcore/ScriptingFrameworkDescriptor');
import Library = require('nashorn/com/intellij/openapi/roots/libraries/Library');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import Collection = require('nashorn/java/util/Collection');
import Enum = require('nashorn/java/lang/Enum');

declare class ScriptingLibraryModel extends Object {
	static DUMMY_INSTANCE : ScriptingLibraryModel;
	sourceFiles : Set<VirtualFile>;
	compactFiles : Set<VirtualFile>;
	docUrls : Set<string>;
	allFiles : Set<VirtualFile>;
	name : string;
	empty : boolean;
	predefined : boolean;
	libraryLevel : ScriptingLibraryModel.LibraryLevel;
	frameworkDescriptor : ScriptingFrameworkDescriptor;
	originalLibrary : Library;
	associatedModules : Set<Module>;
	onByDefault : boolean;
	constructor(arg1 : string, arg2 : ScriptingLibraryModel.LibraryLevel);
	static createPredefinedLibrary(arg1 : string, arg2 : VirtualFile[], arg3 : boolean) : ScriptingLibraryModel;
	static createPredefinedLibrary(arg1 : string, arg2 : VirtualFile[], arg3 : string, arg4 : boolean) : ScriptingLibraryModel;
	setName(arg1 : string) : void;
	setSourceFiles(arg1 : VirtualFile[]) : void;
	setCompactFiles(arg1 : VirtualFile[]) : void;
	setDocUrls(arg1 : string[]) : void;
	getSourceFiles() : Set<VirtualFile>;
	getCompactFiles() : Set<VirtualFile>;
	getDocUrls() : Set<string>;
	getAllFiles() : Set<VirtualFile>;
	getName() : string;
	containsFile(arg1 : VirtualFile) : boolean;
	getMatchingFile(arg1 : string) : VirtualFile;
	isEmpty() : boolean;
	isPredefined() : boolean;
	getLibraryLevel() : ScriptingLibraryModel.LibraryLevel;
	getFrameworkDescriptor() : ScriptingFrameworkDescriptor;
	setFrameworkDescriptor(arg1 : ScriptingFrameworkDescriptor) : void;
	setOriginalLibrary(arg1 : Library) : void;
	getOriginalLibrary() : Library;
	setLibraryLevel(arg1 : ScriptingLibraryModel.LibraryLevel) : void;
	setAssociatedModules(arg1 : Set<Module>) : void;
	hasAssociatedModules() : boolean;
	isAssociatedWith(arg1 : Module) : boolean;
	getAssociatedModules() : Set<Module>;
	isOnByDefault() : boolean;
	static toArray(arg1 : Collection<ScriptingLibraryModel>) : ScriptingLibraryModel[];
	addSignificantFiles(arg1 : Collection<VirtualFile>) : void;
}


declare module ScriptingLibraryModel {
	class LibraryLevel {
		static PREDEFINED : ScriptingLibraryModel.LibraryLevel;
		static GLOBAL : ScriptingLibraryModel.LibraryLevel;
		static PROJECT : ScriptingLibraryModel.LibraryLevel;
	}


	interface LibraryLevel extends Enum<ScriptingLibraryModel.LibraryLevel> {}}

export = ScriptingLibraryModel
