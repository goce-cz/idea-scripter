import Object = require('nashorn/java/lang/Object');
import Language = require('nashorn/com/intellij/lang/Language');
import PersistentLibraryKind = require('nashorn/com/intellij/openapi/roots/libraries/PersistentLibraryKind');
import Icon = require('nashorn/javax/swing/Icon');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import ScriptingLibraryManager = require('nashorn/com/intellij/webcore/libraries/ScriptingLibraryManager');
import ScriptingLibraryMappings = require('nashorn/com/intellij/webcore/libraries/ScriptingLibraryMappings');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import OrderRootType = require('nashorn/com/intellij/openapi/roots/OrderRootType');
import ScriptingFrameworkDescriptor = require('nashorn/com/intellij/webcore/ScriptingFrameworkDescriptor');
import JComponent = require('nashorn/javax/swing/JComponent');
import DownloadableFileSetVersions = require('nashorn/com/intellij/util/download/DownloadableFileSetVersions');
import DownloadableFileSetDescription = require('nashorn/com/intellij/util/download/DownloadableFileSetDescription');
import Runnable = require('nashorn/java/lang/Runnable');
import List = require('nashorn/java/util/List');

declare class LangScriptingContextProvider extends Object {
	language : Language;
	libraryKind : PersistentLibraryKind;
	fileIcon : Icon;
	constructor();
	getLanguage() : Language;
	getLibraryKind() : PersistentLibraryKind;
	getLibraryManager(arg1 : Project) : ScriptingLibraryManager;
	acceptsExtension(arg1 : string) : boolean;
	getLibraryMappings(arg1 : Project) : ScriptingLibraryMappings;
	isCompact(arg1 : VirtualFile) : boolean;
	getLibraryTypeName(arg1 : OrderRootType) : string;
	getDefaultDocUrl(arg1 : ScriptingFrameworkDescriptor) : string;
	detectFramework(arg1 : VirtualFile) : ScriptingFrameworkDescriptor;
	getOfflineDocUrl(arg1 : string) : string;
	downloadOfflineDoc(arg1 : Project, arg2 : string, arg3 : JComponent) : VirtualFile;
	isPredefinedLibrary(arg1 : Project, arg2 : string) : boolean;
	getDownloadableLibraryDescriptors(arg1 : Project) : DownloadableFileSetVersions<DownloadableFileSetDescription>;
	downloadLibrary(arg1 : Project, arg2 : DownloadableFileSetDescription, arg3 : JComponent, arg4 : Runnable) : void;
	filterExistingLibraries(arg1 : Project, arg2 : List<DownloadableFileSetDescription>) : void;
	static getIdeLibraryName(arg1 : DownloadableFileSetDescription) : string;
	getSupportedFrameworks(arg1 : Project) : ScriptingFrameworkDescriptor[];
	getFileIcon() : Icon;
}

export = LangScriptingContextProvider
