import Object = require('nashorn/java/lang/Object');
import ScriptingLibraryModel = require('nashorn/com/intellij/webcore/libraries/ScriptingLibraryModel');
import LibraryKind = require('nashorn/com/intellij/openapi/roots/libraries/LibraryKind');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import LibraryTable = require('nashorn/com/intellij/openapi/roots/libraries/LibraryTable');
import LibraryEx = require('nashorn/com/intellij/openapi/roots/impl/libraries/LibraryEx');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Set = require('nashorn/java/util/Set');
import ThreeState = require('nashorn/com/intellij/util/ThreeState');
import Library = require('nashorn/com/intellij/openapi/roots/libraries/Library');

declare class ScriptingLibraryTable extends Object {
	allLibraries : ScriptingLibraryModel[];
	constructor(arg1 : LibraryKind, arg2 : Project);
	readFrom(arg1 : LibraryTable) : void;
	readLibrary(arg1 : LibraryEx, arg2 : ScriptingLibraryModel.LibraryLevel) : void;
	getDocUrlsFor(arg1 : VirtualFile) : Set<string>;
	findLibrary(arg1 : VirtualFile) : ScriptingLibraryModel;
	getFileState(arg1 : VirtualFile) : ThreeState;
	getMatchingFile(arg1 : string) : VirtualFile;
	invalidateCache() : void;
	getLibraryByName(arg1 : string) : ScriptingLibraryModel;
	removeLibrary(arg1 : ScriptingLibraryModel) : void;
	createPredefinedLibrary(arg1 : string, arg2 : VirtualFile[], arg3 : VirtualFile[], arg4 : string[], arg5 : boolean) : ScriptingLibraryModel;
	createLibrary(arg1 : string, arg2 : VirtualFile[], arg3 : VirtualFile[], arg4 : string[], arg5 : ScriptingLibraryModel.LibraryLevel, arg6 : boolean) : ScriptingLibraryModel;
	getLibraries(arg1 : ScriptingLibraryModel.LibraryLevel) : ScriptingLibraryModel[];
	getAllLibraries() : ScriptingLibraryModel[];
	renameLibrary(arg1 : string, arg2 : string) : void;
	getModel(arg1 : Library) : ScriptingLibraryModel;
	findLibraryByFramework(arg1 : string) : ScriptingLibraryModel;
}


declare module ScriptingLibraryTable {
	class FileStateFinder extends Object {
		getFileState(arg1 : VirtualFile) : ThreeState;
	}
}

export = ScriptingLibraryTable
