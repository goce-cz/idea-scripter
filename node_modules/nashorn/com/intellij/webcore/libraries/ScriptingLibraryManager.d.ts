import Object = require('nashorn/java/lang/Object');
import ScriptingLibraryTable = require('nashorn/com/intellij/webcore/libraries/ScriptingLibraryTable');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Set = require('nashorn/java/util/Set');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import ScriptingLibraryModel = require('nashorn/com/intellij/webcore/libraries/ScriptingLibraryModel');
import ScriptingLibraryMappings = require('nashorn/com/intellij/webcore/libraries/ScriptingLibraryMappings');
import Library = require('nashorn/com/intellij/openapi/roots/libraries/Library');
import LibraryTable = require('nashorn/com/intellij/openapi/roots/libraries/LibraryTable');
import Collection = require('nashorn/java/util/Collection');
import LibraryKind = require('nashorn/com/intellij/openapi/roots/libraries/LibraryKind');
import ThreeState = require('nashorn/com/intellij/util/ThreeState');

declare class ScriptingLibraryManager extends Object {
	scriptingLibraryTable : ScriptingLibraryTable;
	project : Project;
	predefinedLibraryFiles : Set<VirtualFile>;
	predefinedLibraries : ScriptingLibraryModel[];
	allLibraries : ScriptingLibraryModel[];
	libraryMappings : ScriptingLibraryMappings;
	getScriptingLibraryTable() : ScriptingLibraryTable;
	readLibraryTable() : ScriptingLibraryTable;
	commitChanges() : void;
	static updateOpenProjects() : void;
	updateLibraries(arg1 : ScriptingLibraryModel.LibraryLevel) : void;
	static copyRoots(arg1 : ScriptingLibraryModel, arg2 : Library.ModifiableModel) : void;
	removeLibraryAndDependencies(arg1 : LibraryTable.ModifiableModel, arg2 : Library) : void;
	updateModuleDependencies(arg1 : ScriptingLibraryModel) : void;
	reset() : void;
	clearCaches() : void;
	createPredefinedLibrary(arg1 : string, arg2 : VirtualFile[], arg3 : VirtualFile[], arg4 : string[], arg5 : boolean) : ScriptingLibraryModel;
	createLibrary(arg1 : string, arg2 : VirtualFile[], arg3 : VirtualFile[], arg4 : string[], arg5 : ScriptingLibraryModel.LibraryLevel, arg6 : boolean) : ScriptingLibraryModel;
	removeLibrary(arg1 : ScriptingLibraryModel) : void;
	updateLibrary(arg1 : string, arg2 : string, arg3 : VirtualFile[], arg4 : VirtualFile[], arg5 : string[]) : ScriptingLibraryModel;
	getLibraries(arg1 : ScriptingLibraryModel.LibraryLevel) : ScriptingLibraryModel[];
	getLibraryByName(arg1 : string) : ScriptingLibraryModel;
	getLibraryTable(arg1 : ScriptingLibraryModel.LibraryLevel) : LibraryTable;
	static getLibraryTable(arg1 : Project, arg2 : ScriptingLibraryModel.LibraryLevel) : LibraryTable;
	static collectLibraryFiles(arg1 : Collection<VirtualFile>, arg2 : Project, arg3 : LibraryKind, arg4 : ScriptingLibraryModel.LibraryLevel) : void;
	static getAllLibraryFiles(arg1 : Project, arg2 : LibraryKind) : Set<VirtualFile>;
	getProject() : Project;
	getFileState(arg1 : VirtualFile) : ThreeState;
	getMatchingFile(arg1 : string) : VirtualFile;
	isLibraryFile(arg1 : VirtualFile) : boolean;
	getDocUrlsFor(arg1 : VirtualFile) : Set<string>;
	isPredefinedLibrary(arg1 : string) : boolean;
	initPredefinedLibraries(arg1 : ScriptingLibraryTable) : void;
	getPredefinedLibraryFiles() : Set<VirtualFile>;
	getPredefinedLibraries() : ScriptingLibraryModel[];
	getAllLibraries() : ScriptingLibraryModel[];
	static getLibraryLevel(arg1 : LibraryTable) : ScriptingLibraryModel.LibraryLevel;
	getLibraryMappings() : ScriptingLibraryMappings;
	associateWithProject(arg1 : string) : void;
	associate(arg1 : VirtualFile, arg2 : string) : void;
	findLibraryByFramework(arg1 : string) : ScriptingLibraryModel;
	findLibrary(arg1 : VirtualFile) : ScriptingLibraryModel;
}

export = ScriptingLibraryManager
