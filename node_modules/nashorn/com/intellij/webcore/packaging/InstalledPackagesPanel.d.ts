import Project = require('nashorn/com/intellij/openapi/project/Project');
import PackagesNotificationPanel = require('nashorn/com/intellij/webcore/packaging/PackagesNotificationPanel');
import ManagePackagesDialog = require('nashorn/com/intellij/webcore/packaging/ManagePackagesDialog');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import Sdk = require('nashorn/com/intellij/openapi/projectRoots/Sdk');
import Set = require('nashorn/java/util/Set');
import InstalledPackage = require('nashorn/com/intellij/webcore/packaging/InstalledPackage');
import PackageManagementServiceEx = require('nashorn/com/intellij/webcore/packaging/PackageManagementServiceEx');
import List = require('nashorn/java/util/List');
import PackageManagementService = require('nashorn/com/intellij/webcore/packaging/PackageManagementService');
import RepoPackage = require('nashorn/com/intellij/webcore/packaging/RepoPackage');
import Map = require('nashorn/java/util/Map');
import JPanel = require('nashorn/javax/swing/JPanel');
import DefaultTableCellRenderer = require('nashorn/javax/swing/table/DefaultTableCellRenderer');

declare class InstalledPackagesPanel {
	constructor(arg1 : Project, arg2 : PackagesNotificationPanel);
	createManagePackagesDialog() : ManagePackagesDialog;
	addPathChangedListener(arg1 : Consumer<Sdk>) : void;
	a() : void;
	b() : void;
	getPackagesToPostpone() : Set<string>;
	a(arg1 : InstalledPackage, arg2 : string) : void;
	c() : PackageManagementServiceEx;
	d() : void;
	canUninstallPackage(arg1 : InstalledPackage) : boolean;
	canInstallPackage(arg1 : InstalledPackage) : boolean;
	canUpgradePackage(arg1 : InstalledPackage) : boolean;
	e() : void;
	f() : List<InstalledPackage>;
	updatePackages(arg1 : PackageManagementService) : void;
	g() : void;
	h() : void;
	doUpdatePackages(arg1 : PackageManagementService) : void;
	a(arg1 : number) : InstalledPackage;
	i() : void;
	j() : boolean;
	a(arg1 : PackageManagementService) : void;
	static a(arg1 : List<RepoPackage>) : Map<string, RepoPackage>;
}


declare interface InstalledPackagesPanel extends JPanel {}

declare module InstalledPackagesPanel {
	class MyTableCellRenderer {
	}


	interface MyTableCellRenderer extends DefaultTableCellRenderer {}}

export = InstalledPackagesPanel
