import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import RepoPackage = require('nashorn/com/intellij/webcore/packaging/RepoPackage');
import Collection = require('nashorn/java/util/Collection');
import InstalledPackage = require('nashorn/com/intellij/webcore/packaging/InstalledPackage');
import CatchingConsumer = require('nashorn/com/intellij/util/CatchingConsumer');
import Exception = require('nashorn/java/lang/Exception');

declare class PackageManagementService extends Object {
	allRepositories : List<string>;
	allPackages : List<RepoPackage>;
	allPackagesCached : List<RepoPackage>;
	installToUserText : string;
	installToUserSelected : boolean;
	installedPackages : Collection<InstalledPackage>;
	constructor();
	getAllRepositories() : List<string>;
	canModifyRepository(arg1 : string) : boolean;
	addRepository(arg1 : string) : void;
	removeRepository(arg1 : string) : void;
	getAllPackages() : List<RepoPackage>;
	reloadAllPackages() : List<RepoPackage>;
	getAllPackagesCached() : List<RepoPackage>;
	canInstallToUser() : boolean;
	getInstallToUserText() : string;
	isInstallToUserSelected() : boolean;
	installToUserChanged(arg1 : boolean) : void;
	getInstalledPackages() : Collection<InstalledPackage>;
	installPackage(arg1 : RepoPackage, arg2 : string, arg3 : boolean, arg4 : string, arg5 : PackageManagementService.Listener, arg6 : boolean) : void;
	uninstallPackages(arg1 : List<InstalledPackage>, arg2 : PackageManagementService.Listener) : void;
	fetchPackageVersions(arg1 : string, arg2 : CatchingConsumer<List<string>, Exception>) : void;
	fetchPackageDetails(arg1 : string, arg2 : CatchingConsumer<string, Exception>) : void;
}


declare module PackageManagementService {
	class ErrorDescription extends Object {
		message : string;
		command : string;
		output : string;
		solution : string;
		constructor(arg1 : string, arg2 : string, arg3 : string, arg4 : string);
		static fromMessage(arg1 : string) : PackageManagementService.ErrorDescription;
		getMessage() : string;
		getCommand() : string;
		getOutput() : string;
		getSolution() : string;
	}
	class Listener extends Object {
		operationStarted(arg1 : string) : void;
		operationFinished(arg1 : string, arg2 : PackageManagementService.ErrorDescription) : void;
	}
}

export = PackageManagementService
