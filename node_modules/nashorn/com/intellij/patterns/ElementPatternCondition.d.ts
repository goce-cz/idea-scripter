import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import PatternCondition = require('nashorn/com/intellij/patterns/PatternCondition');
import InitialPatternCondition = require('nashorn/com/intellij/patterns/InitialPatternCondition');
import ProcessingContext = require('nashorn/com/intellij/util/ProcessingContext');
import StringBuilder = require('nashorn/java/lang/StringBuilder');

declare class ElementPatternCondition<T> extends Object {
	conditions : List<PatternCondition<any>>;
	initialCondition : InitialPatternCondition<T>;
	constructor(arg1 : InitialPatternCondition<T>);
	accepts(arg1 : Object, arg2 : ProcessingContext) : boolean;
	append(arg1 : StringBuilder, arg2 : string) : void;
	getConditions() : List<PatternCondition<any>>;
	getInitialCondition() : InitialPatternCondition<T>;
	append(arg1 : PatternCondition<any>) : ElementPatternCondition<T>;
}

export = ElementPatternCondition
