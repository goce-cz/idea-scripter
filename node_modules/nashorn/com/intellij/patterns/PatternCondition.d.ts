import Object = require('nashorn/java/lang/Object');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import ProcessingContext = require('nashorn/com/intellij/util/ProcessingContext');
import PairProcessor = require('nashorn/com/intellij/util/PairProcessor');
import Field = require('nashorn/java/lang/reflect/Field');

declare class PatternCondition<T> extends Object {
	debugMethodName : string;
	constructor(arg1 : string);
	getDebugMethodName() : string;
	static appendValue(arg1 : StringBuilder, arg2 : string, arg3 : Object) : void;
	static appendArray(arg1 : StringBuilder, arg2 : string, arg3 : Object[]) : void;
	accepts(arg1 : T, arg2 : ProcessingContext) : boolean;
	append(arg1 : StringBuilder, arg2 : string) : void;
	appendParams(arg1 : StringBuilder, arg2 : string) : void;
	processParameters(arg1 : PairProcessor<string, Object>) : boolean;
	getFieldValue(arg1 : Field) : Object;
}

export = PatternCondition
