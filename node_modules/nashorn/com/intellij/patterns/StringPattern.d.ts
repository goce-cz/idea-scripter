import ElementPattern = require('nashorn/com/intellij/patterns/ElementPattern');
import CharSequence = require('nashorn/java/lang/CharSequence');
import ObjectPattern = require('nashorn/com/intellij/patterns/ObjectPattern');

declare class StringPattern {
	startsWith(arg1 : string) : StringPattern;
	endsWith(arg1 : string) : StringPattern;
	contains(arg1 : string) : StringPattern;
	containsChars(arg1 : string) : StringPattern;
	matches(arg1 : string) : StringPattern;
	matchesBrics(arg1 : string) : StringPattern;
	contains(arg1 : ElementPattern<string>) : StringPattern;
	longerThan(arg1 : number) : StringPattern;
	shorterThan(arg1 : number) : StringPattern;
	withLength(arg1 : number) : StringPattern;
	oneOfIgnoreCase(arg1 : string[]) : StringPattern;
	static newBombedCharSequence(arg1 : CharSequence) : CharSequence;
}


declare interface StringPattern extends ObjectPattern<string, StringPattern> {}
export = StringPattern
