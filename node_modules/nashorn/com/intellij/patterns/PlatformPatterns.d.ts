import PsiElementPattern = require('nashorn/com/intellij/patterns/PsiElementPattern');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiComment = require('nashorn/com/intellij/psi/PsiComment');
import ElementPattern = require('nashorn/com/intellij/patterns/ElementPattern');
import PomTarget = require('nashorn/com/intellij/pom/PomTarget');
import PomTargetPsiElement = require('nashorn/com/intellij/pom/PomTargetPsiElement');
import PsiFilePattern = require('nashorn/com/intellij/patterns/PsiFilePattern');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Class = require('nashorn/java/lang/Class');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import IElementTypePattern = require('nashorn/com/intellij/patterns/IElementTypePattern');
import VirtualFilePattern = require('nashorn/com/intellij/patterns/VirtualFilePattern');
import StandardPatterns = require('nashorn/com/intellij/patterns/StandardPatterns');

declare class PlatformPatterns {
	constructor();
	static psiElement() : PsiElementPattern.Capture<PsiElement>;
	static psiComment() : PsiElementPattern.Capture<PsiComment>;
	static pomElement(arg1 : ElementPattern<PomTarget>) : PsiElementPattern.Capture<PomTargetPsiElement>;
	static psiFile() : PsiFilePattern.Capture<PsiFile>;
	static psiFile<T extends PsiFile>(arg1 : Class<T>) : PsiFilePattern.Capture<T>;
	static psiElement(arg1 : IElementType) : PsiElementPattern.Capture<PsiElement>;
	static psiElement<T extends PsiElement>(arg1 : Class<T>) : PsiElementPattern.Capture<T>;
	static elementType() : IElementTypePattern;
	static virtualFile() : VirtualFilePattern;
}


declare interface PlatformPatterns extends StandardPatterns {}
export = PlatformPatterns
