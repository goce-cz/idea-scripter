import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import StringPattern = require('nashorn/com/intellij/patterns/StringPattern');
import ElementPattern = require('nashorn/com/intellij/patterns/ElementPattern');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import PsiElementPattern = require('nashorn/com/intellij/patterns/PsiElementPattern');
import InitialPatternCondition = require('nashorn/com/intellij/patterns/InitialPatternCondition');

declare class PsiFilePattern<T extends PsiFile, Self extends PsiFilePattern<T, Self>> {
	withParentDirectoryName(arg1 : StringPattern) : Self;
	withOriginalFile(arg1 : ElementPattern<T>) : Self;
	withVirtualFile(arg1 : ElementPattern<VirtualFile>) : Self;
	withFileType(arg1 : ElementPattern<FileType>) : Self;
}


declare interface PsiFilePattern<T extends PsiFile, Self extends PsiFilePattern<T, Self>> extends PsiElementPattern<T, Self> {}

declare module PsiFilePattern {
	class Capture<T extends PsiFile> {
		constructor(arg1 : InitialPatternCondition<T>);
	}


	interface Capture<T extends PsiFile> extends PsiFilePattern<T, PsiFilePattern.Capture<T>> {}}

export = PsiFilePattern
