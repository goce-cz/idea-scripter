import ElementPatternCondition = require('nashorn/com/intellij/patterns/ElementPatternCondition');
import ElementPattern = require('nashorn/com/intellij/patterns/ElementPattern');
import Collection = require('nashorn/java/util/Collection');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import PatternCondition = require('nashorn/com/intellij/patterns/PatternCondition');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Class = require('nashorn/java/lang/Class');
import InitialPatternCondition = require('nashorn/com/intellij/patterns/InitialPatternCondition');

declare class ObjectPattern<T, Self extends ObjectPattern<T, Self>> {
	condition : ElementPatternCondition;
	null : Self;
	andNot(arg1 : ElementPattern) : Self;
	andOr(arg1 : ElementPattern[]) : Self;
	and(arg1 : ElementPattern) : Self;
	equalTo(arg1 : T) : Self;
	oneOf(arg1 : T[]) : Self;
	oneOf(arg1 : Collection<T>) : Self;
	isNull() : Self;
	notNull() : Self;
	save(arg1 : Key<any>) : Self;
	save(arg1 : string) : Self;
	with(arg1 : PatternCondition<any>) : Self;
	adapt(arg1 : ElementPatternCondition<T>) : Self;
	without(arg1 : PatternCondition<any>) : Self;
}


declare interface ObjectPattern<T, Self extends ObjectPattern<T, Self>> extends Cloneable, ElementPattern<T> {}

declare module ObjectPattern {
	class Capture<T> {
		constructor(arg1 : Class<T>);
		constructor(arg1 : InitialPatternCondition<T>);
	}


	interface Capture<T> extends ObjectPattern<T, ObjectPattern.Capture<T>> {}}

export = ObjectPattern
