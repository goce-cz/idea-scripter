import ElementPattern = require('nashorn/com/intellij/patterns/ElementPattern');
import Collection = require('nashorn/java/util/Collection');
import ObjectPattern = require('nashorn/com/intellij/patterns/ObjectPattern');

declare class CollectionPattern<T> {
	all(arg1 : ElementPattern<T>) : CollectionPattern<T>;
	atLeastOne(arg1 : ElementPattern<T>) : CollectionPattern<T>;
	filter(arg1 : ElementPattern<T>, arg2 : ElementPattern<Collection<T>>) : CollectionPattern<T>;
	first(arg1 : ElementPattern<T>) : CollectionPattern<T>;
	empty() : CollectionPattern<T>;
	notEmpty() : CollectionPattern<T>;
	atLeast(arg1 : number) : CollectionPattern<T>;
	size(arg1 : number) : CollectionPattern<T>;
	last(arg1 : ElementPattern) : CollectionPattern<T>;
}


declare interface CollectionPattern<T> extends ObjectPattern<Collection<T>, CollectionPattern<T>> {}
export = CollectionPattern
