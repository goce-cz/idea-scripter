import Object = require('nashorn/java/lang/Object');
import StringPattern = require('nashorn/com/intellij/patterns/StringPattern');
import CharPattern = require('nashorn/com/intellij/patterns/CharPattern');
import Class = require('nashorn/java/lang/Class');
import ObjectPattern = require('nashorn/com/intellij/patterns/ObjectPattern');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import ElementPattern = require('nashorn/com/intellij/patterns/ElementPattern');
import CollectionPattern = require('nashorn/com/intellij/patterns/CollectionPattern');
import ElementPatternCondition = require('nashorn/com/intellij/patterns/ElementPatternCondition');

declare class StandardPatterns extends Object {
	constructor();
	static string() : StringPattern;
	static character() : CharPattern;
	static instanceOf<T>(arg1 : Class<T>) : ObjectPattern.Capture<T>;
	static save<T>(arg1 : Key<T>) : ElementPattern;
	static object() : ObjectPattern.Capture<Object>;
	static object<T>(arg1 : T) : ObjectPattern.Capture<T>;
	static collection<T>(arg1 : Class<T>) : CollectionPattern<T>;
	static get(arg1 : string) : ElementPattern;
	static collection<T>() : CollectionPattern<T>;
	static or<E>(arg1 : ElementPattern<E>[]) : ElementPattern<E>;
	static and<E>(arg1 : ElementPattern<E>[]) : ElementPattern<E>;
	static not<E>(arg1 : ElementPattern<E>) : ObjectPattern.Capture<E>;
	static optional<T>(arg1 : ElementPattern<T>) : ObjectPattern.Capture<T>;
	static alwaysFalse<E>() : ElementPattern<E>;
}


declare module StandardPatterns {
	class FalsePattern {
		condition : ElementPatternCondition;
	}


	interface FalsePattern extends ElementPattern {}}

export = StandardPatterns
