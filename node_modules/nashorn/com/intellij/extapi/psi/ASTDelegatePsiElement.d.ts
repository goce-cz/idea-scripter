import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiManagerEx = require('nashorn/com/intellij/psi/impl/PsiManagerEx');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import Language = require('nashorn/com/intellij/lang/Language');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import Class = require('nashorn/java/lang/Class');
import List = require('nashorn/java/util/List');
import TreeElement = require('nashorn/com/intellij/psi/impl/source/tree/TreeElement');
import PsiElementBase = require('nashorn/com/intellij/psi/impl/PsiElementBase');

declare class ASTDelegatePsiElement {
	containingFile : PsiFile;
	manager : PsiManagerEx;
	children : PsiElement[];
	firstChild : PsiElement;
	lastChild : PsiElement;
	nextSibling : PsiElement;
	prevSibling : PsiElement;
	textRange : TextRange;
	startOffsetInParent : number;
	textLength : number;
	textOffset : number;
	text : string;
	node : ASTNode;
	language : Language;
	constructor();
	subtreeChanged() : void;
	findChildByType<T extends PsiElement>(arg1 : IElementType) : T;
	findLastChildByType<T extends PsiElement>(arg1 : IElementType) : T;
	findNotNullChildByType<T extends PsiElement>(arg1 : IElementType) : T;
	findChildByType<T extends PsiElement>(arg1 : TokenSet) : T;
	findNotNullChildByType(arg1 : TokenSet) : PsiElement;
	findChildByFilter(arg1 : TokenSet) : PsiElement;
	findNotNullChildByFilter(arg1 : TokenSet) : PsiElement;
	findChildrenByType<T extends PsiElement>(arg1 : IElementType, arg2 : Class<T>) : T[];
	findChildrenByType<T extends PsiElement>(arg1 : TokenSet) : List<T>;
	findChildrenByType<T extends PsiElement>(arg1 : IElementType) : List<T>;
	findChildrenByType<T extends PsiElement>(arg1 : TokenSet, arg2 : Class<T>) : T[];
	a(arg1 : PsiElement, arg2 : PsiElement) : PsiElement;
	addInternal(arg1 : ASTNode, arg2 : ASTNode, arg3 : ASTNode, arg4 : boolean) : ASTNode;
	deleteChildInternal(arg1 : ASTNode) : void;
	replaceChildInternal(arg1 : PsiElement, arg2 : TreeElement) : void;
	a(arg1 : ASTNode, arg2 : boolean) : ASTNode;
}


declare interface ASTDelegatePsiElement extends PsiElementBase {}
export = ASTDelegatePsiElement
