import Object = require('nashorn/java/lang/Object');
import ByteBuffer = require('nashorn/java/nio/ByteBuffer');
import RandomAccessDataFile = require('nashorn/com/intellij/util/io/RandomAccessDataFile');
import PoolPageKey = require('nashorn/com/intellij/util/io/PoolPageKey');
import BitSet = require('nashorn/java/util/BitSet');
import FinalizationRequest = require('nashorn/com/intellij/util/io/FinalizationRequest');

declare class Page extends Object {
	static PAGE_SIZE : number;
	buf : ByteBuffer;
	offset : number;
	owner : RandomAccessDataFile;
	key : PoolPageKey;
	constructor(arg1 : RandomAccessDataFile, arg2 : number);
	ensureRead() : void;
	ensureReadOrWriteMaskExists() : void;
	calcContinousRange(arg1 : BitSet) : Page.Range;
	flush() : void;
	getBuf() : ByteBuffer;
	recycle() : void;
	getOffset() : number;
	put(arg1 : number, arg2 : number[], arg3 : number, arg4 : number) : number;
	get(arg1 : number, arg2 : number[], arg3 : number, arg4 : number) : number;
	prepareForFinalization(arg1 : number) : FinalizationRequest;
	getOwner() : RandomAccessDataFile;
	getKey() : PoolPageKey;
	flushIfFinalizationIdIsEqualTo(arg1 : number) : boolean;
	recycleIfFinalizationIdIsEqualTo(arg1 : number) : boolean;
}


declare module Page {
	class Range extends Object {
	}
	class PageLock extends Object {
	}
}

export = Page
