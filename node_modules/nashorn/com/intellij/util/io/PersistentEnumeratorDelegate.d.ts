import File = require('nashorn/java/io/File');
import KeyDescriptor = require('nashorn/com/intellij/util/io/KeyDescriptor');
import PagedFileStorage = require('nashorn/com/intellij/util/io/PagedFileStorage');
import PersistentEnumeratorBase = require('nashorn/com/intellij/util/io/PersistentEnumeratorBase');
import Collection = require('nashorn/java/util/Collection');
import Closeable = require('nashorn/java/io/Closeable');
import Forceable = require('nashorn/com/intellij/openapi/Forceable');

declare class PersistentEnumeratorDelegate<Data> {
	closed : boolean;
	dirty : boolean;
	constructor(arg1 : File, arg2 : KeyDescriptor<Data>, arg3 : number);
	constructor(arg1 : File, arg2 : KeyDescriptor<Data>, arg3 : number, arg4 : PagedFileStorage.StorageLockContext);
	static useBtree() : boolean;
	isClosed() : boolean;
	valueOf(arg1 : number) : Data;
	enumerate(arg1 : Data) : number;
	tryEnumerate(arg1 : Data) : number;
	traverseAllRecords(arg1 : PersistentEnumeratorBase.RecordsProcessor) : boolean;
	getAllDataObjects(arg1 : PersistentEnumeratorBase.DataFilter) : Collection<Data>;
}


declare interface PersistentEnumeratorDelegate<Data> extends Closeable, Forceable {}
export = PersistentEnumeratorDelegate
