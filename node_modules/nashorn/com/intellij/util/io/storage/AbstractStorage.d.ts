import PagePool = require('nashorn/com/intellij/util/io/PagePool');
import File = require('nashorn/java/io/File');
import AbstractRecordsTable = require('nashorn/com/intellij/util/io/storage/AbstractRecordsTable');
import DataInputStream = require('nashorn/java/io/DataInputStream');
import ByteSequence = require('nashorn/com/intellij/openapi/util/io/ByteSequence');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Forceable = require('nashorn/com/intellij/openapi/Forceable');
import DataOutputStream = require('nashorn/com/intellij/util/io/DataOutputStream');
import BufferExposingByteArrayOutputStream = require('nashorn/com/intellij/openapi/util/io/BufferExposingByteArrayOutputStream');
import RecordDataOutput = require('nashorn/com/intellij/util/io/RecordDataOutput');

declare class AbstractStorage {
	static INDEX_EXTENSION : string;
	static DATA_EXTENSION : string;
	version : number;
	dirty : boolean;
	static deleteFiles(arg1 : string) : boolean;
	static convertFromOldExtensions(arg1 : string) : void;
	tryInit(arg1 : string, arg2 : PagePool, arg3 : number) : void;
	createRecordsTable(arg1 : PagePool, arg2 : File) : AbstractRecordsTable;
	compact(arg1 : string) : void;
	getVersion() : number;
	setVersion(arg1 : number) : void;
	flushSome() : boolean;
	writeStream(arg1 : number) : AbstractStorage.StorageDataOutput;
	writeStream(arg1 : number, arg2 : boolean) : AbstractStorage.StorageDataOutput;
	appendStream(arg1 : number) : AbstractStorage.AppenderStream;
	readStream(arg1 : number) : DataInputStream;
	readBytes(arg1 : number) : number[];
	appendBytes(arg1 : number, arg2 : ByteSequence) : void;
	writeBytes(arg1 : number, arg2 : ByteSequence, arg3 : boolean) : void;
	doDeleteRecord(arg1 : number) : void;
	checkSanity(arg1 : number) : void;
}


declare interface AbstractStorage extends Disposable, Forceable {}

declare module AbstractStorage {
	class AppenderStream {
	}


	interface AppenderStream extends DataOutputStream {}	class StorageDataOutput {
		recordId : number;
		getByteStream() : BufferExposingByteArrayOutputStream;
	}


	interface StorageDataOutput extends DataOutputStream, RecordDataOutput {}}

export = AbstractStorage
