import CapacityAllocationPolicy = require('nashorn/com/intellij/util/io/storage/CapacityAllocationPolicy');
import BufferExposingByteArrayOutputStream = require('nashorn/com/intellij/openapi/util/io/BufferExposingByteArrayOutputStream');
import ByteSequence = require('nashorn/com/intellij/openapi/util/io/ByteSequence');
import AbstractStorage = require('nashorn/com/intellij/util/io/storage/AbstractStorage');
import InflaterInputStream = require('nashorn/java/util/zip/InflaterInputStream');

declare class RefCountingStorage {
	dirty : boolean;
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : CapacityAllocationPolicy);
	internalReadStream(arg1 : number) : BufferExposingByteArrayOutputStream;
	waitForPendingWriteForRecord(arg1 : number) : void;
	zipAndWrite(arg1 : ByteSequence, arg2 : number, arg3 : boolean) : void;
	doWrite(arg1 : number, arg2 : boolean, arg3 : BufferExposingByteArrayOutputStream) : void;
	acquireNewRecord() : number;
	createNewRecord() : number;
	acquireRecord(arg1 : number) : void;
	releaseRecord(arg1 : number) : void;
	releaseRecord(arg1 : number, arg2 : boolean) : void;
	getRefCount(arg1 : number) : number;
	flushPendingWrites() : void;
}


declare interface RefCountingStorage extends AbstractStorage {}

declare module RefCountingStorage {
	class CustomInflaterInputStream {
		constructor(arg1 : number[]);
	}


	interface CustomInflaterInputStream extends InflaterInputStream {}}

export = RefCountingStorage
