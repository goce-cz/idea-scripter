import File = require('nashorn/java/io/File');
import KeyDescriptor = require('nashorn/com/intellij/util/io/KeyDescriptor');
import PagedFileStorage = require('nashorn/com/intellij/util/io/PagedFileStorage');
import PersistentEnumeratorBase = require('nashorn/com/intellij/util/io/PersistentEnumeratorBase');

declare class PersistentBTreeEnumerator<Data> {
	constructor(arg1 : File, arg2 : KeyDescriptor<Data>, arg3 : number);
	constructor(arg1 : File, arg2 : KeyDescriptor<Data>, arg3 : number, arg4 : PagedFileStorage.StorageLockContext);
	indexFile(arg1 : File) : File;
	wantKeyMapping() : boolean;
	initBtree(arg1 : boolean) : void;
	storeVars(arg1 : boolean) : void;
	storeBTreeVars(arg1 : boolean) : void;
	store(arg1 : number, arg2 : number, arg3 : boolean) : number;
	allocPage() : number;
	addrToIndex(arg1 : number) : number;
	getNonnegativeValue(arg1 : Data) : number;
	keyIdToNonnegattiveOffset(arg1 : number) : number;
	putNonnegativeValue(arg1 : Data, arg2 : number) : void;
	nextLongValueRecord() : number;
	nextDuplicatedValueRecord() : number;
}


declare interface PersistentBTreeEnumerator<Data> extends PersistentEnumeratorBase<Data> {}

declare module PersistentBTreeEnumerator {
	class RecordBufferHandler {
	}


	interface RecordBufferHandler extends PersistentEnumeratorBase.RecordBufferHandler<PersistentBTreeEnumerator> {}}

export = PersistentBTreeEnumerator
