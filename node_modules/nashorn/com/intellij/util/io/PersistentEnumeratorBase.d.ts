import File = require('nashorn/java/io/File');
import ResizeableMappedFile = require('nashorn/com/intellij/util/io/ResizeableMappedFile');
import KeyDescriptor = require('nashorn/com/intellij/util/io/KeyDescriptor');
import Object = require('nashorn/java/lang/Object');
import Flushable = require('nashorn/java/io/Flushable');
import Processor = require('nashorn/com/intellij/util/Processor');
import Collection = require('nashorn/java/util/Collection');
import Forceable = require('nashorn/com/intellij/openapi/Forceable');
import Closeable = require('nashorn/java/io/Closeable');
import ShareableKey = require('nashorn/com/intellij/util/containers/ShareableKey');
import IOException = require('nashorn/java/io/IOException');

declare class PersistentEnumeratorBase<Data> {
	recordHandler : PersistentEnumeratorBase.RecordBufferHandler<PersistentEnumeratorBase>;
	largestId : number;
	closed : boolean;
	dirty : boolean;
	constructor(arg1 : File, arg2 : ResizeableMappedFile, arg3 : KeyDescriptor<Data>, arg4 : number, arg5 : PersistentEnumeratorBase.Version, arg6 : PersistentEnumeratorBase.RecordBufferHandler<PersistentEnumeratorBase>, arg7 : boolean);
	static sharedKey(arg1 : Object, arg2 : PersistentEnumeratorBase) : PersistentEnumeratorBase.CacheKey;
	static clearCacheForTests() : void;
	lockStorage() : void;
	unlockStorage() : void;
	setupEmptyFile() : void;
	getRecordHandler() : PersistentEnumeratorBase.RecordBufferHandler<PersistentEnumeratorBase>;
	setRecordHandler(arg1 : PersistentEnumeratorBase.RecordBufferHandler<PersistentEnumeratorBase>) : void;
	setMarkCleanCallback(arg1 : Flushable) : void;
	getValue(arg1 : number, arg2 : number) : Data;
	tryEnumerate(arg1 : Data) : number;
	doEnumerate(arg1 : Data, arg2 : boolean, arg3 : boolean) : number;
	enumerate(arg1 : Data) : number;
	putMetaData(arg1 : number) : void;
	getMetaData() : number;
	putMetaData2(arg1 : number) : void;
	getMetaData2() : number;
	processAllDataObject(arg1 : Processor<Data>, arg2 : PersistentEnumeratorBase.DataFilter) : boolean;
	getAllDataObjects(arg1 : PersistentEnumeratorBase.DataFilter) : Collection<Data>;
	traverseAllRecords(arg1 : PersistentEnumeratorBase.RecordsProcessor) : boolean;
	enumerateImpl(arg1 : Data, arg2 : boolean, arg3 : boolean) : number;
	isKeyAtIndex(arg1 : Data, arg2 : number) : boolean;
	writeData(arg1 : Data, arg2 : number) : number;
	getLargestId() : number;
	doWriteData(arg1 : Data) : number;
	setupValueId(arg1 : number, arg2 : number) : number;
	iterateData(arg1 : Processor<Data>) : boolean;
	keystreamFile() : File;
	valueOf(arg1 : number) : Data;
	reenumerate(arg1 : Data) : number;
	canReEnumerate() : boolean;
	indexToAddr(arg1 : number) : number;
	doClose() : void;
	isClosed() : boolean;
	flush() : void;
	doFlush() : void;
	markDirty(arg1 : boolean) : void;
	markCorrupted() : void;
}


declare interface PersistentEnumeratorBase<Data> extends Forceable, Closeable {}

declare module PersistentEnumeratorBase {
	class FlyweightKey {
		stableCopy : ShareableKey;
		constructor();
	}


	interface FlyweightKey extends PersistentEnumeratorBase.CacheKey {}	class RecordsProcessor extends Object {
		constructor();
		process(arg1 : number) : boolean;
		setCurrentKey(arg1 : number) : void;
		getCurrentKey() : number;
	}
	class DataFilter extends Object {
		accept(arg1 : number) : boolean;
	}
	class VersionUpdatedException {
		constructor(arg1 : File);
	}


	interface VersionUpdatedException extends PersistentEnumeratorBase.CorruptedException {}	class CorruptedException {
		constructor(arg1 : File);
	}


	interface CorruptedException extends IOException {}	class CacheKey {
		owner : PersistentEnumeratorBase;
		key : Object;
		stableCopy : ShareableKey;
	}


	interface CacheKey extends ShareableKey {}	class RecordBufferHandler<T extends PersistentEnumeratorBase> extends Object {
		constructor();
		recordWriteOffset(arg1 : T, arg2 : number[]) : number;
		getRecordBuffer(arg1 : T) : number[];
		setupRecord(arg1 : T, arg2 : number, arg3 : number, arg4 : number[]) : void;
	}
	class Version extends Object {
		constructor(arg1 : number, arg2 : number);
	}
}

export = PersistentEnumeratorBase
