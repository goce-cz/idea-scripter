import Object = require('nashorn/java/lang/Object');
import Runnable = require('nashorn/java/lang/Runnable');
import Future = require('nashorn/java/util/concurrent/Future');

declare class BaseDataReader extends Object {
	constructor(arg1 : BaseDataReader.SleepingPolicy);
	start() : void;
	executeOnPooledThread(arg1 : Runnable) : Future<any>;
	doRun() : void;
	readAvailable() : boolean;
	close() : void;
	stop() : void;
	waitFor() : void;
}


declare module BaseDataReader {
	class AdaptiveSleepingPolicy {
		constructor();
	}


	interface AdaptiveSleepingPolicy extends BaseDataReader.SleepingPolicy {}	class SleepingPolicy extends Object {
		static sleepTimeWhenWasActive : number;
		static sleepTimeWhenIdle : number;
		static SIMPLE : BaseDataReader.SleepingPolicy;
		static BLOCKING : BaseDataReader.SleepingPolicy;
		getTimeToSleep(arg1 : boolean) : number;
	}
}

export = BaseDataReader
