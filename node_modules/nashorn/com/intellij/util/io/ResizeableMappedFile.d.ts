import PagedFileStorage = require('nashorn/com/intellij/util/io/PagedFileStorage');
import File = require('nashorn/java/io/File');
import Forceable = require('nashorn/com/intellij/openapi/Forceable');

declare class ResizeableMappedFile {
	dirty : boolean;
	pagedFileStorage : PagedFileStorage;
	constructor(arg1 : File, arg2 : number, arg3 : PagedFileStorage.StorageLockContext, arg4 : number, arg5 : boolean);
	constructor(arg1 : File, arg2 : number, arg3 : PagedFileStorage.StorageLockContext, arg4 : number, arg5 : boolean, arg6 : boolean);
	constructor(arg1 : File, arg2 : number, arg3 : PagedFileStorage.StorageLock, arg4 : number, arg5 : boolean);
	constructor(arg1 : File, arg2 : number, arg3 : PagedFileStorage.StorageLock);
	length() : number;
	realSize() : number;
	resize(arg1 : number) : void;
	ensureSize(arg1 : number) : void;
	expand() : void;
	getLengthFile() : File;
	writeLength(arg1 : number) : void;
	readLength() : number;
	getInt(arg1 : number) : number;
	putInt(arg1 : number, arg2 : number) : void;
	getShort(arg1 : number) : number;
	putShort(arg1 : number, arg2 : number) : void;
	getLong(arg1 : number) : number;
	putLong(arg1 : number, arg2 : number) : void;
	get(arg1 : number) : number;
	put(arg1 : number, arg2 : number) : void;
	get(arg1 : number, arg2 : number[], arg3 : number, arg4 : number) : void;
	put(arg1 : number, arg2 : number[], arg3 : number, arg4 : number) : void;
	close() : void;
	getPagedFileStorage() : PagedFileStorage;
}


declare interface ResizeableMappedFile extends Forceable {}
export = ResizeableMappedFile
