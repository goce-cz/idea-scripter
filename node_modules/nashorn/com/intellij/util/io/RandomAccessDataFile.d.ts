import File = require('nashorn/java/io/File');
import PagePool = require('nashorn/com/intellij/util/io/PagePool');
import RandomAccessFile = require('nashorn/java/io/RandomAccessFile');
import Page = require('nashorn/com/intellij/util/io/Page');
import ByteBuffer = require('nashorn/java/nio/ByteBuffer');
import Forceable = require('nashorn/com/intellij/openapi/Forceable');
import Closeable = require('nashorn/java/io/Closeable');

declare class RandomAccessDataFile {
	static totalReads : number;
	static totalReadBytes : number;
	static seekcount : number;
	static totalWrites : number;
	static totalWriteBytes : number;
	file : File;
	dirty : boolean;
	disposed : boolean;
	constructor(arg1 : File);
	constructor(arg1 : File, arg2 : PagePool);
	getFile() : File;
	put(arg1 : number, arg2 : number[], arg3 : number, arg4 : number) : void;
	get(arg1 : number, arg2 : number[], arg3 : number, arg4 : number) : void;
	releaseFile() : void;
	getRandomAccessFile() : RandomAccessFile;
	putInt(arg1 : number, arg2 : number) : void;
	getInt(arg1 : number) : number;
	putLong(arg1 : number, arg2 : number) : void;
	putByte(arg1 : number, arg2 : number) : void;
	getByte(arg1 : number) : number;
	getLong(arg1 : number) : number;
	getUTF(arg1 : number) : string;
	putUTF(arg1 : number, arg2 : string) : void;
	length() : number;
	physicalLength() : number;
	dispose() : void;
	sync() : void;
	flushSomePages(arg1 : number) : void;
	isDisposed() : boolean;
	assertNotDisposed() : void;
	loadPage(arg1 : Page) : void;
	flushPage(arg1 : Page, arg2 : number, arg3 : number) : void;
	flush(arg1 : ByteBuffer, arg2 : number, arg3 : number, arg4 : number) : void;
	seek(arg1 : RandomAccessFile, arg2 : number) : void;
}


declare interface RandomAccessDataFile extends Forceable, Closeable {}
export = RandomAccessDataFile
