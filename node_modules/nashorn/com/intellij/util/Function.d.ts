import Object = require('nashorn/java/lang/Object');
import Collection = require('nashorn/java/util/Collection');
import Class = require('nashorn/java/lang/Class');
import NullableFunction = require('nashorn/com/intellij/util/NullableFunction');

declare class Function<Param, Result> extends Object {
	static ID : Function;
	static NULL : Function;
	static TO_STRING : Function;
	fun(arg1 : Param) : Result;
}


declare module Function {
	class Predefined extends Object {
		constructor();
		static NULL<I, O>() : Function<I, O>;
		static TO_STRING<I, O>() : Function<I, O>;
	}
	class FirstInCollection<P, R extends P> {
		constructor();
	}


	interface FirstInCollection<P, R extends P> extends Function<Collection<P>, R> {}	class First<P, R extends P> {
		constructor();
	}


	interface First<P, R extends P> extends Function<P[], R> {}	class InstanceOf<P, R extends P> {
		constructor(arg1 : Class<R>);
	}


	interface InstanceOf<P, R extends P> extends NullableFunction<P, R> {}	class Mono<T> {
	}


	interface Mono<T> extends Function<T, T> {}	class Self<P, R> {
		constructor();
	}


	interface Self<P, R> extends Function<P, R> {}}

export = Function
