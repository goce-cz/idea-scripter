import Map = require('nashorn/java/util/Map');
import Collection = require('nashorn/java/util/Collection');
import Set = require('nashorn/java/util/Set');
import TObjectHashingStrategy = require('nashorn/gnu/trove/TObjectHashingStrategy');
import Serializable = require('nashorn/java/io/Serializable');

declare class MultiMap<K, V> {
	static EMPTY : MultiMap;
	empty : boolean;
	constructor();
	constructor(arg1 : MultiMap<K, V>);
	constructor(arg1 : number, arg2 : number);
	createMap() : Map<K, Collection<V>>;
	createMap(arg1 : number, arg2 : number) : Map<K, Collection<V>>;
	createCollection() : Collection<V>;
	createEmptyCollection() : Collection<V>;
	putAllValues<Kk extends K, Vv extends V>(arg1 : MultiMap<Kk, Vv>) : void;
	putValues(arg1 : K, arg2 : Collection<V>) : void;
	putValue(arg1 : K, arg2 : V) : void;
	entrySet() : Set<Map.Entry<K, Collection<V>>>;
	isEmpty() : boolean;
	containsKey(arg1 : K) : boolean;
	containsScalarValue(arg1 : V) : boolean;
	get(arg1 : K) : Collection<V>;
	getModifiable(arg1 : K) : Collection<V>;
	keySet() : Set<K>;
	size() : number;
	put(arg1 : K, arg2 : Collection<V>) : void;
	removeValue(arg1 : K, arg2 : V) : void;
	remove(arg1 : K, arg2 : V) : boolean;
	values() : Collection<V>;
	clear() : void;
	remove(arg1 : K) : Collection<V>;
	static emptyInstance<K, V>() : MultiMap<K, V>;
	static create<K, V>() : MultiMap<K, V>;
	static create<K, V>(arg1 : TObjectHashingStrategy<K>) : MultiMap<K, V>;
	static createLinked<K, V>() : MultiMap<K, V>;
	static createLinkedSet<K, V>() : MultiMap<K, V>;
	static createSmartList<K, V>() : MultiMap<K, V>;
	static createSmart<K, V>() : MultiMap<K, V>;
	static createConcurrentSet<K, V>() : MultiMap<K, V>;
	static createSet<K, V>() : MultiMap<K, V>;
	static createWeakKey<K, V>() : MultiMap<K, V>;
	static create<K, V>(arg1 : number, arg2 : number) : MultiMap<K, V>;
}


declare interface MultiMap<K, V> extends Serializable {}

declare module MultiMap {
	class EmptyMap {
	}


	interface EmptyMap extends MultiMap {}}

export = MultiMap
