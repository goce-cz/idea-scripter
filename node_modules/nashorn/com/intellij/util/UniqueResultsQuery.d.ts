import Query = require('nashorn/com/intellij/util/Query');
import TObjectHashingStrategy = require('nashorn/gnu/trove/TObjectHashingStrategy');
import Function = require('nashorn/com/intellij/util/Function');
import Processor = require('nashorn/com/intellij/util/Processor');
import Set = require('nashorn/java/util/Set');
import AsyncFuture = require('nashorn/com/intellij/concurrency/AsyncFuture');

declare class UniqueResultsQuery<T, M> {
	constructor(arg1 : Query<T>);
	constructor(arg1 : Query<T>, arg2 : TObjectHashingStrategy<M>);
	constructor(arg1 : Query<T>, arg2 : TObjectHashingStrategy<M>, arg3 : Function<T, M>);
	process(arg1 : Processor<T>, arg2 : Set<M>) : boolean;
	processAsync(arg1 : Processor<T>, arg2 : Set<M>) : AsyncFuture<boolean>;
}


declare interface UniqueResultsQuery<T, M> extends Query<T> {}

declare module UniqueResultsQuery {
	class MyProcessor {
		constructor(arg1 : Set<M>, arg2 : Processor<T>);
	}


	interface MyProcessor extends Processor<T> {}}

export = UniqueResultsQuery
