import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Runnable = require('nashorn/java/lang/Runnable');
import ModalityState = require('nashorn/com/intellij/openapi/application/ModalityState');
import List = require('nashorn/java/util/List');
import JComponent = require('nashorn/javax/swing/JComponent');
import AbstractExecutorService = require('nashorn/java/util/concurrent/AbstractExecutorService');
import ScheduledFuture = require('nashorn/java/util/concurrent/ScheduledFuture');
import Enum = require('nashorn/java/lang/Enum');

declare class Alarm {
	activeRequestCount : number;
	empty : boolean;
	static eventDispatchThread : boolean;
	disposed : boolean;
	constructor();
	constructor(arg1 : Disposable);
	constructor(arg1 : Alarm.ThreadToUse);
	constructor(arg1 : Alarm.ThreadToUse, arg2 : Disposable);
	checkDisposed() : void;
	addRequest(arg1 : Runnable, arg2 : number, arg3 : boolean) : void;
	addRequest(arg1 : Runnable, arg2 : number) : void;
	addRequest(arg1 : Runnable, arg2 : number) : void;
	addComponentRequest(arg1 : Runnable, arg2 : number) : void;
	addComponentRequest(arg1 : Runnable, arg2 : number) : void;
	addRequest(arg1 : Runnable, arg2 : number, arg3 : ModalityState) : void;
	addRequest(arg1 : Runnable, arg2 : number, arg3 : ModalityState) : void;
	_addRequest(arg1 : Runnable, arg2 : number, arg3 : ModalityState) : void;
	_add(arg1 : Alarm.Request) : void;
	flushPending() : void;
	cancelRequest(arg1 : Runnable) : boolean;
	cancelRequest(arg1 : Runnable, arg2 : List<Alarm.Request>) : void;
	cancelAllRequests() : number;
	cancelAllRequests(arg1 : List<Alarm.Request>) : number;
	flush() : void;
	getActiveRequestCount() : number;
	isEmpty() : boolean;
	isEdt() : boolean;
	static isEventDispatchThread() : boolean;
	setActivationComponent(arg1 : JComponent) : Alarm;
	isDisposed() : boolean;
}


declare interface Alarm extends Disposable {}

declare module Alarm {
	class MyExecutor {
		shutdown : boolean;
		terminated : boolean;
	}


	interface MyExecutor extends AbstractExecutorService {}	class Request {
		modalityState : ModalityState;
		getTask() : Runnable;
		setFuture(arg1 : ScheduledFuture<any>) : void;
		getModalityState() : ModalityState;
		cancel() : Runnable;
	}


	interface Request extends Runnable {}	class ThreadToUse {
		static SWING_THREAD : Alarm.ThreadToUse;
		static SHARED_THREAD : Alarm.ThreadToUse;
		static POOLED_THREAD : Alarm.ThreadToUse;
		static OWN_THREAD : Alarm.ThreadToUse;
	}


	interface ThreadToUse extends Enum<Alarm.ThreadToUse> {}}

export = Alarm
