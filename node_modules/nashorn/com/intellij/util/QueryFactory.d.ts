import Object = require('nashorn/java/lang/Object');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import Query = require('nashorn/com/intellij/util/Query');
import List = require('nashorn/java/util/List');
import TObjectHashingStrategy = require('nashorn/gnu/trove/TObjectHashingStrategy');
import Function = require('nashorn/com/intellij/util/Function');

declare class QueryFactory<Result, Parameters> extends Object {
	constructor();
	registerExecutor(arg1 : QueryExecutor<Result, Parameters>) : void;
	unregisterExecutor(arg1 : QueryExecutor<Result, Parameters>) : void;
	createQuery(arg1 : Parameters) : Query<Result>;
	getExecutors() : List<QueryExecutor<Result, Parameters>>;
	hasAnyExecutors() : boolean;
	createUniqueResultsQuery(arg1 : Parameters) : Query<Result>;
	createUniqueResultsQuery(arg1 : Parameters, arg2 : TObjectHashingStrategy<Result>) : Query<Result>;
	createUniqueResultsQuery<T>(arg1 : Parameters, arg2 : TObjectHashingStrategy<T>, arg3 : Function<Result, T>) : Query<Result>;
}

export = QueryFactory
