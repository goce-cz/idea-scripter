import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import ID = require('nashorn/com/intellij/util/indexing/ID');
import DataIndexer = require('nashorn/com/intellij/util/indexing/DataIndexer');
import FileContent = require('nashorn/com/intellij/util/indexing/FileContent');
import KeyDescriptor = require('nashorn/com/intellij/util/io/KeyDescriptor');
import DataExternalizer = require('nashorn/com/intellij/util/io/DataExternalizer');
import FileBasedIndex = require('nashorn/com/intellij/util/indexing/FileBasedIndex');
import Collection = require('nashorn/java/util/Collection');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');

declare class FileBasedIndexExtension<K, V> extends Object {
	static EXTENSION_POINT_NAME : ExtensionPointName<FileBasedIndexExtension>;
	static DEFAULT_CACHE_SIZE : number;
	name : ID<K, V>;
	indexer : DataIndexer<K, V, FileContent>;
	keyDescriptor : KeyDescriptor<K>;
	valueExternalizer : DataExternalizer<V>;
	inputFilter : FileBasedIndex.InputFilter;
	version : number;
	cacheSize : number;
	fileTypesWithSizeLimitNotApplicable : Collection<FileType>;
	constructor();
	getName() : ID<K, V>;
	getIndexer() : DataIndexer<K, V, FileContent>;
	getKeyDescriptor() : KeyDescriptor<K>;
	getValueExternalizer() : DataExternalizer<V>;
	getInputFilter() : FileBasedIndex.InputFilter;
	dependsOnFileContent() : boolean;
	indexDirectories() : boolean;
	getVersion() : number;
	getCacheSize() : number;
	getFileTypesWithSizeLimitNotApplicable() : Collection<FileType>;
	keyIsUniqueForIndexedFile() : boolean;
	traceKeyHashToVirtualFileMapping() : boolean;
	hasSnapshotMapping() : boolean;
}

export = FileBasedIndexExtension
