import DataKey = require('nashorn/com/intellij/openapi/actionSystem/DataKey');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Navigatable = require('nashorn/com/intellij/pom/Navigatable');

declare class OpenFileDescriptor {
	static NAVIGATE_IN_EDITOR : DataKey<Editor>;
	file : VirtualFile;
	rangeMarker : RangeMarker;
	offset : number;
	line : number;
	column : number;
	project : Project;
	useCurrentWindow : boolean;
	constructor(arg1 : Project, arg2 : VirtualFile, arg3 : number);
	constructor(arg1 : Project, arg2 : VirtualFile, arg3 : number, arg4 : number);
	constructor(arg1 : Project, arg2 : VirtualFile, arg3 : number, arg4 : number, arg5 : boolean);
	constructor(arg1 : Project, arg2 : VirtualFile);
	getFile() : VirtualFile;
	getRangeMarker() : RangeMarker;
	getOffset() : number;
	getLine() : number;
	getColumn() : number;
	navigateInEditorOrNativeApp(arg1 : Project, arg2 : boolean) : boolean;
	navigateInEditor(arg1 : Project, arg2 : boolean) : boolean;
	navigateInRequestedEditor() : boolean;
	navigateInAnyFileEditor(arg1 : Project, arg2 : boolean) : boolean;
	navigateInProjectView(arg1 : boolean) : void;
	navigateIn(arg1 : Editor) : void;
	static unfoldCurrentLine(arg1 : Editor) : void;
	static getRangeToUnfoldOnNavigation(arg1 : Editor) : TextRange;
	static scrollToCaret(arg1 : Editor) : void;
	getProject() : Project;
	setUseCurrentWindow(arg1 : boolean) : OpenFileDescriptor;
	isUseCurrentWindow() : boolean;
	dispose() : void;
}


declare interface OpenFileDescriptor extends Navigatable {}
export = OpenFileDescriptor
