import Topic = require('nashorn/com/intellij/util/messages/Topic');
import FileEditorManager = require('nashorn/com/intellij/openapi/fileEditor/FileEditorManager');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import FileEditorManagerEvent = require('nashorn/com/intellij/openapi/fileEditor/FileEditorManagerEvent');
import EventListener = require('nashorn/java/util/EventListener');

declare class FileEditorManagerListener {
	static FILE_EDITOR_MANAGER : Topic<FileEditorManagerListener>;
	fileOpened(arg1 : FileEditorManager, arg2 : VirtualFile) : void;
	fileClosed(arg1 : FileEditorManager, arg2 : VirtualFile) : void;
	selectionChanged(arg1 : FileEditorManagerEvent) : void;
}


declare interface FileEditorManagerListener extends EventListener {}

declare module FileEditorManagerListener {
	class Before {
		static FILE_EDITOR_MANAGER : Topic<FileEditorManagerListener.Before>;
		beforeFileOpened(arg1 : FileEditorManager, arg2 : VirtualFile) : void;
		beforeFileClosed(arg1 : FileEditorManager, arg2 : VirtualFile) : void;
	}


	interface Before extends EventListener {}

	module Before {
		class Adapter {
			constructor();
		}


		interface Adapter extends FileEditorManagerListener.Before {}	}
}

export = FileEditorManagerListener
