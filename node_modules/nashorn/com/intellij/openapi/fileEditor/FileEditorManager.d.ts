import Object = require('nashorn/java/lang/Object');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import FileEditor = require('nashorn/com/intellij/openapi/fileEditor/FileEditor');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import OpenFileDescriptor = require('nashorn/com/intellij/openapi/fileEditor/OpenFileDescriptor');
import JComponent = require('nashorn/javax/swing/JComponent');
import FileEditorManagerListener = require('nashorn/com/intellij/openapi/fileEditor/FileEditorManagerListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import List = require('nashorn/java/util/List');
import EditorDataProvider = require('nashorn/com/intellij/openapi/fileEditor/EditorDataProvider');
import Caret = require('nashorn/com/intellij/openapi/editor/Caret');

declare class FileEditorManager extends Object {
	static USE_CURRENT_WINDOW : Key<boolean>;
	selectedTextEditor : Editor;
	openFiles : VirtualFile[];
	selectedFiles : VirtualFile[];
	selectedEditors : FileEditor[];
	allEditors : FileEditor[];
	project : Project;
	constructor();
	static getInstance(arg1 : Project) : FileEditorManager;
	openFile(arg1 : VirtualFile, arg2 : boolean) : FileEditor[];
	openFile(arg1 : VirtualFile, arg2 : boolean, arg3 : boolean) : FileEditor[];
	closeFile(arg1 : VirtualFile) : void;
	openTextEditor(arg1 : OpenFileDescriptor, arg2 : boolean) : Editor;
	getSelectedTextEditor() : Editor;
	isFileOpen(arg1 : VirtualFile) : boolean;
	getOpenFiles() : VirtualFile[];
	getSelectedFiles() : VirtualFile[];
	getSelectedEditors() : FileEditor[];
	getSelectedEditor(arg1 : VirtualFile) : FileEditor;
	getEditors(arg1 : VirtualFile) : FileEditor[];
	getAllEditors(arg1 : VirtualFile) : FileEditor[];
	getAllEditors() : FileEditor[];
	showEditorAnnotation(arg1 : FileEditor, arg2 : JComponent) : void;
	removeEditorAnnotation(arg1 : FileEditor, arg2 : JComponent) : void;
	addTopComponent(arg1 : FileEditor, arg2 : JComponent) : void;
	removeTopComponent(arg1 : FileEditor, arg2 : JComponent) : void;
	addBottomComponent(arg1 : FileEditor, arg2 : JComponent) : void;
	removeBottomComponent(arg1 : FileEditor, arg2 : JComponent) : void;
	addFileEditorManagerListener(arg1 : FileEditorManagerListener) : void;
	addFileEditorManagerListener(arg1 : FileEditorManagerListener, arg2 : Disposable) : void;
	removeFileEditorManagerListener(arg1 : FileEditorManagerListener) : void;
	openEditor(arg1 : OpenFileDescriptor, arg2 : boolean) : List<FileEditor>;
	getProject() : Project;
	registerExtraEditorDataProvider(arg1 : EditorDataProvider, arg2 : Disposable) : void;
	getData(arg1 : string, arg2 : Editor, arg3 : Caret) : Object;
	setSelectedEditor(arg1 : VirtualFile, arg2 : string) : void;
}

export = FileEditorManager
