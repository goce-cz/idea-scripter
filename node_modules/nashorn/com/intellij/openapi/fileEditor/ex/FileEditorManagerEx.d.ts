import JComponent = require('nashorn/javax/swing/JComponent');
import EditorWindow = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorWindow');
import AsyncResult = require('nashorn/com/intellij/openapi/util/AsyncResult');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import EditorsSplitters = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorsSplitters');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import FileEditor = require('nashorn/com/intellij/openapi/fileEditor/FileEditor');
import FileEditorProvider = require('nashorn/com/intellij/openapi/fileEditor/FileEditorProvider');
import EditorComposite = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorComposite');
import Component = require('nashorn/java/awt/Component');
import Runnable = require('nashorn/java/lang/Runnable');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import FileEditorManager = require('nashorn/com/intellij/openapi/fileEditor/FileEditorManager');
import BusyObject = require('nashorn/com/intellij/openapi/util/BusyObject');

declare class FileEditorManagerEx {
	component : JComponent;
	preferredFocusedComponent : JComponent;
	currentWindow : EditorWindow;
	activeWindow : AsyncResult<EditorWindow>;
	windowSplitCount : number;
	windows : EditorWindow[];
	inSplitter : boolean;
	currentFile : VirtualFile;
	splitters : EditorsSplitters;
	insideChange : boolean;
	constructor();
	static getInstanceEx(arg1 : Project) : FileEditorManagerEx;
	getComponent() : JComponent;
	getPreferredFocusedComponent() : JComponent;
	getEditorsWithProviders(arg1 : VirtualFile) : Pair<FileEditor[], FileEditorProvider[]>;
	getFile(arg1 : FileEditor) : VirtualFile;
	updateFilePresentation(arg1 : VirtualFile) : void;
	getCurrentWindow() : EditorWindow;
	getActiveWindow() : AsyncResult<EditorWindow>;
	setCurrentWindow(arg1 : EditorWindow) : void;
	closeFile(arg1 : VirtualFile, arg2 : EditorWindow) : void;
	unsplitWindow() : void;
	unsplitAllWindow() : void;
	getWindowSplitCount() : number;
	hasSplitOrUndockedWindows() : boolean;
	getWindows() : EditorWindow[];
	getSiblings(arg1 : VirtualFile) : VirtualFile[];
	createSplitter(arg1 : number, arg2 : EditorWindow) : void;
	changeSplitterOrientation() : void;
	flipTabs() : void;
	tabsMode() : boolean;
	isInSplitter() : boolean;
	hasOpenedFile() : boolean;
	getCurrentFile() : VirtualFile;
	getSelectedEditorWithProvider(arg1 : VirtualFile) : Pair<FileEditor, FileEditorProvider>;
	closeAllFiles() : void;
	getSplitters() : EditorsSplitters;
	openFileWithProviders(arg1 : VirtualFile, arg2 : boolean, arg3 : boolean) : Pair<FileEditor[], FileEditorProvider[]>;
	openFileWithProviders(arg1 : VirtualFile, arg2 : boolean, arg3 : EditorWindow) : Pair<FileEditor[], FileEditorProvider[]>;
	isChanged(arg1 : EditorComposite) : boolean;
	getNextWindow(arg1 : EditorWindow) : EditorWindow;
	getPrevWindow(arg1 : EditorWindow) : EditorWindow;
	isInsideChange() : boolean;
	refreshIcons() : void;
	getSplittersFor(arg1 : Component) : EditorsSplitters;
	notifyPublisher(arg1 : Runnable) : ActionCallback;
}


declare interface FileEditorManagerEx extends FileEditorManager, BusyObject {}
export = FileEditorManagerEx
