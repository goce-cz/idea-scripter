import Object = require('nashorn/java/lang/Object');
import DataKey = require('nashorn/com/intellij/openapi/actionSystem/DataKey');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import FileEditorManagerImpl = require('nashorn/com/intellij/openapi/fileEditor/impl/FileEditorManagerImpl');
import EditorsSplitters = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorsSplitters');
import Dimension = require('nashorn/java/awt/Dimension');
import EditorTabbedContainer = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorTabbedContainer');
import EditorWithProviderComposite = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorWithProviderComposite');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Color = require('nashorn/java/awt/Color');
import Icon = require('nashorn/javax/swing/Icon');
import EditorComposite = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorComposite');
import FileEditor = require('nashorn/com/intellij/openapi/fileEditor/FileEditor');
import Component = require('nashorn/java/awt/Component');
import LinkedHashSet = require('nashorn/java/util/LinkedHashSet');
import CloseAction = require('nashorn/com/intellij/ide/actions/CloseAction');
import JPanel = require('nashorn/javax/swing/JPanel');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');
import EditorWindowHolder = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorWindowHolder');
import Graphics = require('nashorn/java/awt/Graphics');
import Insets = require('nashorn/java/awt/Insets');
import Splitter = require('nashorn/com/intellij/openapi/ui/Splitter');
import Border = require('nashorn/javax/swing/border/Border');

declare class EditorWindow extends Object {
	static DATA_KEY : DataKey<EditorWindow>;
	static INITIAL_INDEX_KEY : Key<number>;
	showing : boolean;
	disposed : boolean;
	manager : FileEditorManagerImpl;
	tabCount : number;
	owner : EditorsSplitters;
	emptyVisible : boolean;
	size : Dimension;
	tabbedPane : EditorTabbedContainer;
	valid : boolean;
	selectedEditor : EditorWithProviderComposite;
	editors : EditorWithProviderComposite[];
	files : VirtualFile[];
	selectedFile : VirtualFile;
	a(arg1 : number) : void;
	isShowing() : boolean;
	closeAllExcept(arg1 : VirtualFile) : void;
	dispose() : void;
	isDisposed() : boolean;
	a() : void;
	closeFile(arg1 : VirtualFile) : void;
	closeFile(arg1 : VirtualFile, arg2 : boolean) : void;
	hasClosedTabs() : boolean;
	restoreClosedTab() : void;
	closeFile(arg1 : VirtualFile, arg2 : boolean, arg3 : boolean) : void;
	b() : void;
	a(arg1 : VirtualFile, arg2 : number) : number;
	getManager() : FileEditorManagerImpl;
	getTabCount() : number;
	setForegroundAt(arg1 : number, arg2 : Color) : void;
	setWaveColor(arg1 : number, arg2 : Color) : void;
	a(arg1 : number, arg2 : Icon) : void;
	a(arg1 : number, arg2 : string) : void;
	a(arg1 : number, arg2 : Color) : void;
	b(arg1 : number, arg2 : string) : void;
	setTabLayoutPolicy(arg1 : number) : void;
	setTabsPlacement(arg1 : number) : void;
	setAsCurrentWindow(arg1 : boolean) : void;
	updateFileBackgroundColor(arg1 : VirtualFile) : void;
	getOwner() : EditorsSplitters;
	isEmptyVisible() : boolean;
	getSize() : Dimension;
	getTabbedPane() : EditorTabbedContainer;
	requestFocus(arg1 : boolean) : void;
	isValid() : boolean;
	setPaintBlocked(arg1 : boolean) : void;
	c() : void;
	getSelectedEditor() : EditorWithProviderComposite;
	getEditors() : EditorWithProviderComposite[];
	getFiles() : VirtualFile[];
	setSelectedEditor(arg1 : EditorComposite, arg2 : boolean) : void;
	setEditor(arg1 : EditorWithProviderComposite, arg2 : boolean) : void;
	setEditor(arg1 : EditorWithProviderComposite, arg2 : boolean, arg3 : boolean) : void;
	onBeforeSetEditor(arg1 : VirtualFile) : void;
	d() : boolean;
	split(arg1 : number, arg2 : boolean, arg3 : VirtualFile, arg4 : boolean) : EditorWindow;
	a(arg1 : FileEditor[]) : void;
	findSiblings() : EditorWindow[];
	changeOrientation() : void;
	updateFileIcon(arg1 : VirtualFile) : void;
	updateFileName(arg1 : VirtualFile) : void;
	a(arg1 : VirtualFile) : Icon;
	unsplit(arg1 : boolean) : void;
	a(arg1 : EditorWithProviderComposite) : void;
	unsplitAll() : void;
	inSplitter() : boolean;
	getSelectedFile() : VirtualFile;
	findFileComposite(arg1 : VirtualFile) : EditorWithProviderComposite;
	findComponentIndex(arg1 : Component) : number;
	findEditorIndex(arg1 : EditorComposite) : number;
	findFileIndex(arg1 : VirtualFile) : number;
	b(arg1 : number) : EditorWithProviderComposite;
	isFileOpen(arg1 : VirtualFile) : boolean;
	isFilePinned(arg1 : VirtualFile) : boolean;
	setFilePinned(arg1 : VirtualFile, arg2 : boolean) : void;
	trimToSize(arg1 : number, arg2 : VirtualFile, arg3 : boolean) : void;
	a(arg1 : number, arg2 : VirtualFile, arg3 : boolean, arg4 : boolean) : void;
	a(arg1 : boolean) : LinkedHashSet<VirtualFile>;
	static a(arg1 : EditorComposite, arg2 : VirtualFile) : boolean;
	b(arg1 : VirtualFile) : boolean;
	a(arg1 : VirtualFile, arg2 : boolean) : void;
	a(arg1 : VirtualFile, arg2 : VirtualFile) : boolean;
	getFileAt(arg1 : number) : VirtualFile;
}


declare module EditorWindow {
	class TCompForTablessMode {
	}


	interface TCompForTablessMode extends EditorWindow.TComp, CloseAction.CloseTarget {}	class TComp {
		editorWindow : EditorWindow;
	}


	interface TComp extends JPanel, DataProvider, EditorWindowHolder {}	class AdaptiveBorder {
		borderOpaque : boolean;
		static a(arg1 : Graphics, arg2 : number, arg3 : number, arg4 : number, arg5 : number, arg6 : Insets) : void;
		static a(arg1 : Component) : Splitter;
	}


	interface AdaptiveBorder extends Border {}}

export = EditorWindow
