import Key = require('nashorn/com/intellij/openapi/util/Key');
import JComponent = require('nashorn/javax/swing/JComponent');
import EditorsSplitters = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorsSplitters');
import Set = require('nashorn/java/util/Set');
import EditorWindow = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorWindow');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import AsyncResult = require('nashorn/com/intellij/openapi/util/AsyncResult');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import FileEditor = require('nashorn/com/intellij/openapi/fileEditor/FileEditor');
import List = require('nashorn/java/util/List');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import DockManager = require('nashorn/com/intellij/ui/docking/DockManager');
import EditorHistoryManager = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorHistoryManager');
import Color = require('nashorn/java/awt/Color');
import FileEditorProvider = require('nashorn/com/intellij/openapi/fileEditor/FileEditorProvider');
import AWTEvent = require('nashorn/java/awt/AWTEvent');
import HistoryEntry = require('nashorn/com/intellij/openapi/fileEditor/impl/HistoryEntry');
import EditorWithProviderComposite = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorWithProviderComposite');
import NavigatableFileEditor = require('nashorn/com/intellij/openapi/fileEditor/NavigatableFileEditor');
import OpenFileDescriptor = require('nashorn/com/intellij/openapi/fileEditor/OpenFileDescriptor');
import EditorComposite = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorComposite');
import Trinity = require('nashorn/com/intellij/openapi/util/Trinity');
import FileEditorManagerChange = require('nashorn/com/intellij/openapi/fileEditor/impl/FileEditorManagerChange');
import FileEditorManagerEx = require('nashorn/com/intellij/openapi/fileEditor/ex/FileEditorManagerEx');
import ProjectComponent = require('nashorn/com/intellij/openapi/components/ProjectComponent');
import JDOMExternalizable = require('nashorn/com/intellij/openapi/util/JDOMExternalizable');
import UISettingsListener = require('nashorn/com/intellij/ide/ui/UISettingsListener');
import ModuleRootAdapter = require('nashorn/com/intellij/openapi/roots/ModuleRootAdapter');
import FileTypeListener = require('nashorn/com/intellij/openapi/fileTypes/FileTypeListener');
import FileStatusListener = require('nashorn/com/intellij/openapi/vcs/FileStatusListener');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import VirtualFilePropertyEvent = require('nashorn/com/intellij/openapi/vfs/VirtualFilePropertyEvent');
import VirtualFileAdapter = require('nashorn/com/intellij/openapi/vfs/VirtualFileAdapter');
import Border = require('nashorn/javax/swing/border/Border');

declare class FileEditorManagerImpl {
	static CLOSING_TO_REOPEN : Key<boolean>;
	static FILE_EDITOR_MANAGER : string;
	component : JComponent;
	mainSplitters : EditorsSplitters;
	allSplitters : Set<EditorsSplitters>;
	preferredFocusedComponent : JComponent;
	windowSplitCount : number;
	windows : EditorWindow[];
	inSplitter : boolean;
	currentFile : VirtualFile;
	activeWindow : AsyncResult<EditorWindow>;
	currentWindow : EditorWindow;
	project : Project;
	selectedTextEditor : Editor;
	openFiles : VirtualFile[];
	selectedFiles : VirtualFile[];
	selectedEditors : FileEditor[];
	splitters : EditorsSplitters;
	allEditors : FileEditor[];
	componentName : string;
	insideChange : boolean;
	selectionHistory : List<Pair<VirtualFile, EditorWindow>>;
	constructor(arg1 : Project, arg2 : DockManager, arg3 : EditorHistoryManager);
	a(arg1 : Project) : void;
	initDockableContentFactory() : void;
	static isDumbAware(arg1 : FileEditor) : boolean;
	getMainSplitters() : EditorsSplitters;
	getAllSplitters() : Set<EditorsSplitters>;
	a(arg1 : boolean) : AsyncResult<EditorsSplitters>;
	a() : void;
	getFileColor(arg1 : VirtualFile) : Color;
	isProblem(arg1 : VirtualFile) : boolean;
	getFileTooltipText(arg1 : VirtualFile) : string;
	a(arg1 : VirtualFile) : void;
	b(arg1 : VirtualFile) : void;
	updateFileIcon(arg1 : VirtualFile) : void;
	updateFileName(arg1 : VirtualFile) : void;
	b(arg1 : boolean) : void;
	c(arg1 : boolean) : AsyncResult<EditorWindow>;
	closeFile(arg1 : VirtualFile, arg2 : EditorWindow, arg3 : boolean) : void;
	closeFile(arg1 : VirtualFile, arg2 : boolean, arg3 : boolean) : void;
	a(arg1 : VirtualFile, arg2 : boolean, arg3 : boolean) : void;
	openFileInNewWindow(arg1 : VirtualFile) : Pair<FileEditor[], FileEditorProvider[]>;
	static a(arg1 : AWTEvent) : boolean;
	a(arg1 : VirtualFile, arg2 : EditorWindow, arg3 : EditorsSplitters) : void;
	openFileImpl2(arg1 : EditorWindow, arg2 : VirtualFile, arg3 : boolean) : Pair<FileEditor[], FileEditorProvider[]>;
	openFileImpl3(arg1 : EditorWindow, arg2 : VirtualFile, arg3 : boolean, arg4 : HistoryEntry, arg5 : boolean) : Pair<FileEditor[], FileEditorProvider[]>;
	openFileImpl4(arg1 : EditorWindow, arg2 : VirtualFile, arg3 : HistoryEntry, arg4 : boolean, arg5 : boolean, arg6 : boolean, arg7 : number) : Pair<FileEditor[], FileEditorProvider[]>;
	static a(arg1 : EditorWindow) : void;
	a(arg1 : VirtualFile, arg2 : FileEditorProvider, arg3 : FileEditor, arg4 : HistoryEntry, arg5 : boolean) : void;
	newEditorComposite(arg1 : VirtualFile) : EditorWithProviderComposite;
	a(arg1 : NavigatableFileEditor, arg2 : OpenFileDescriptor) : boolean;
	a(arg1 : FileEditor) : void;
	getOpenedEditor(arg1 : Editor, arg2 : boolean) : Editor;
	getSelectedTextEditor(arg1 : boolean) : Editor;
	c(arg1 : VirtualFile) : EditorWithProviderComposite;
	d(arg1 : VirtualFile) : List<EditorWithProviderComposite>;
	getTopComponents(arg1 : FileEditor) : List<JComponent>;
	getBottomComponents(arg1 : FileEditor) : List<JComponent>;
	b(arg1 : FileEditor) : EditorWithProviderComposite;
	static b() : void;
	static c() : void;
	fireSelectionChanged(arg1 : EditorComposite) : void;
	static a(arg1 : EditorComposite) : Trinity<VirtualFile, FileEditor, FileEditorProvider>;
	disposeComposite(arg1 : EditorWithProviderComposite) : void;
	getLastSelected() : EditorComposite;
	runChange(arg1 : FileEditorManagerChange, arg2 : EditorsSplitters) : void;
	static d() : boolean;
	queueUpdateFile(arg1 : VirtualFile) : void;
	getSelectionHistory() : List<Pair<VirtualFile, EditorWindow>>;
	addSelectionRecord(arg1 : VirtualFile, arg2 : EditorWindow) : void;
	removeSelectionRecord(arg1 : VirtualFile, arg2 : EditorWindow) : void;
}


declare interface FileEditorManagerImpl extends FileEditorManagerEx, ProjectComponent, JDOMExternalizable {}

declare module FileEditorManagerImpl {
	class MyUISettingsListener {
	}


	interface MyUISettingsListener extends UISettingsListener {}	class MyRootsListener {
		a() : void;
	}


	interface MyRootsListener extends ModuleRootAdapter {}	class MyFileTypeListener {
	}


	interface MyFileTypeListener extends FileTypeListener.Adapter {}	class MyFileStatusListener {
		a(arg1 : VirtualFile) : void;
	}


	interface MyFileStatusListener extends FileStatusListener {}	class MyEditorPropertyChangeListener {
	}


	interface MyEditorPropertyChangeListener extends PropertyChangeListener {}	class MyVirtualFileListener {
		a(arg1 : VirtualFilePropertyEvent) : void;
	}


	interface MyVirtualFileListener extends VirtualFileAdapter {}	class MyBorder {
		borderOpaque : boolean;
	}


	interface MyBorder extends Border {}}

export = FileEditorManagerImpl
