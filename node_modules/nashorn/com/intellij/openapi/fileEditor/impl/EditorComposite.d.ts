import JComponent = require('nashorn/javax/swing/JComponent');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import FileEditorManager = require('nashorn/com/intellij/openapi/fileEditor/FileEditorManager');
import FileEditor = require('nashorn/com/intellij/openapi/fileEditor/FileEditor');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import FileEditorProvider = require('nashorn/com/intellij/openapi/fileEditor/FileEditorProvider');
import TabbedPaneWrapper = require('nashorn/com/intellij/ui/TabbedPaneWrapper');
import List = require('nashorn/java/util/List');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import JPanel = require('nashorn/javax/swing/JPanel');
import Color = require('nashorn/java/awt/Color');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');
import ChangeListener = require('nashorn/javax/swing/event/ChangeListener');

declare class EditorComposite {
	pinned : boolean;
	preferredFocusedComponent : JComponent;
	file : VirtualFile;
	fileEditorManager : FileEditorManager;
	initialFileTimeStamp : number;
	editors : FileEditor[];
	disposed : boolean;
	selectedEditorWithProvider : Pair<FileEditor, FileEditorProvider>;
	component : JComponent;
	modified : boolean;
	a(arg1 : FileEditor[]) : TabbedPaneWrapper.AsJBTabs;
	a(arg1 : FileEditor) : JComponent;
	isPinned() : boolean;
	setPinned(arg1 : boolean) : void;
	a(arg1 : FileEditor, arg2 : FileEditor) : void;
	getPreferredFocusedComponent() : JComponent;
	getFile() : VirtualFile;
	getFileEditorManager() : FileEditorManager;
	getInitialFileTimeStamp() : number;
	getEditors() : FileEditor[];
	getTopComponents(arg1 : FileEditor) : List<JComponent>;
	getBottomComponents(arg1 : FileEditor) : List<JComponent>;
	a(arg1 : FileEditor, arg2 : boolean) : List<JComponent>;
	addTopComponent(arg1 : FileEditor, arg2 : JComponent) : void;
	removeTopComponent(arg1 : FileEditor, arg2 : JComponent) : void;
	addBottomComponent(arg1 : FileEditor, arg2 : JComponent) : void;
	removeBottomComponent(arg1 : FileEditor, arg2 : JComponent) : void;
	a(arg1 : FileEditor, arg2 : JComponent, arg3 : boolean, arg4 : boolean) : void;
	getSelectedEditor() : FileEditor;
	isDisposed() : boolean;
	getSelectedEditorWithProvider() : Pair<FileEditor, FileEditorProvider>;
	setSelectedEditor(arg1 : number) : void;
	getComponent() : JComponent;
	isModified() : boolean;
	addEditor(arg1 : FileEditor) : void;
}


declare interface EditorComposite extends Disposable {}

declare module EditorComposite {
	class TopBottomComponentWrapper {
		wrappee : JComponent;
		constructor(arg1 : JComponent, arg2 : boolean);
		getWrappee() : JComponent;
	}


	interface TopBottomComponentWrapper extends JPanel {}	class TopBottomPanel {
		background : Color;
	}


	interface TopBottomPanel extends JPanel {}	class MyComponent {
		constructor(arg1 : JComponent, arg2 : JComponent);
		setComponent(arg1 : JComponent) : void;
	}


	interface MyComponent extends JPanel, DataProvider {}	class MyChangeListener {
	}


	interface MyChangeListener extends ChangeListener {}}

export = EditorComposite
