import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import LinkedHashSet = require('nashorn/java/util/LinkedHashSet');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import FileEditor = require('nashorn/com/intellij/openapi/fileEditor/FileEditor');
import FileEditorProvider = require('nashorn/com/intellij/openapi/fileEditor/FileEditorProvider');
import FileEditorState = require('nashorn/com/intellij/openapi/fileEditor/FileEditorState');
import HistoryEntry = require('nashorn/com/intellij/openapi/fileEditor/impl/HistoryEntry');
import AbstractProjectComponent = require('nashorn/com/intellij/openapi/components/AbstractProjectComponent');
import JDOMExternalizable = require('nashorn/com/intellij/openapi/util/JDOMExternalizable');
import UISettingsListener = require('nashorn/com/intellij/ide/ui/UISettingsListener');
import FileEditorManagerListener = require('nashorn/com/intellij/openapi/fileEditor/FileEditorManagerListener');
import FileEditorManagerAdapter = require('nashorn/com/intellij/openapi/fileEditor/FileEditorManagerAdapter');

declare class EditorHistoryManager {
	componentName : string;
	files : VirtualFile[];
	fileSet : LinkedHashSet<VirtualFile>;
	static getInstance(arg1 : Project) : EditorHistoryManager;
	a(arg1 : VirtualFile) : void;
	a(arg1 : VirtualFile, arg2 : FileEditor, arg3 : FileEditorProvider) : void;
	updateHistoryEntry(arg1 : VirtualFile, arg2 : boolean) : void;
	a(arg1 : VirtualFile, arg2 : FileEditor, arg3 : FileEditorProvider, arg4 : boolean) : void;
	a() : void;
	getFiles() : VirtualFile[];
	getFileSet() : LinkedHashSet<VirtualFile>;
	hasBeenOpen(arg1 : VirtualFile) : boolean;
	removeFile(arg1 : VirtualFile) : void;
	getState(arg1 : VirtualFile, arg2 : FileEditorProvider) : FileEditorState;
	getSelectedProvider(arg1 : VirtualFile) : FileEditorProvider;
	b(arg1 : VirtualFile) : HistoryEntry;
	b() : void;
}


declare interface EditorHistoryManager extends AbstractProjectComponent, JDOMExternalizable {}

declare module EditorHistoryManager {
	class MyUISettingsListener {
	}


	interface MyUISettingsListener extends UISettingsListener {}	class MyEditorManagerBeforeListener {
	}


	interface MyEditorManagerBeforeListener extends FileEditorManagerListener.Before.Adapter {}	class MyEditorManagerListener {
	}


	interface MyEditorManagerListener extends FileEditorManagerAdapter {}}

export = EditorHistoryManager
