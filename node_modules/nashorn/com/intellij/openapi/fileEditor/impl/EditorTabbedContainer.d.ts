import Component = require('nashorn/java/awt/Component');
import Object = require('nashorn/java/lang/Object');
import JBTabs = require('nashorn/com/intellij/ui/tabs/JBTabs');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Image = require('nashorn/java/awt/Image');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Presentation = require('nashorn/com/intellij/openapi/actionSystem/Presentation');
import EditorWindow = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorWindow');
import Color = require('nashorn/java/awt/Color');
import Icon = require('nashorn/javax/swing/Icon');
import JComponent = require('nashorn/javax/swing/JComponent');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import CloseAction = require('nashorn/com/intellij/ide/actions/CloseAction');
import JBEditorTabs = require('nashorn/com/intellij/ui/tabs/impl/JBEditorTabs');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Graphics = require('nashorn/java/awt/Graphics');
import Border = require('nashorn/javax/swing/border/Border');
import TransferHandler = require('nashorn/javax/swing/TransferHandler');
import Dimension = require('nashorn/java/awt/Dimension');
import DockableContent = require('nashorn/com/intellij/ui/docking/DockableContent');
import DockManager = require('nashorn/com/intellij/ui/docking/DockManager');
import TabInfo = require('nashorn/com/intellij/ui/tabs/TabInfo');
import SwitchTarget = require('nashorn/com/intellij/ui/switcher/SwitchTarget');
import SwitchProvider = require('nashorn/com/intellij/ui/switcher/SwitchProvider');
import MouseAdapter = require('nashorn/java/awt/event/MouseAdapter');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import DumbAware = require('nashorn/com/intellij/openapi/project/DumbAware');
import Queryable = require('nashorn/com/intellij/openapi/ui/Queryable');

declare class EditorTabbedContainer {
	static HELP_ID : string;
	tabCount : number;
	component : Component;
	selectedIndex : number;
	selectedComponent : Object;
	emptyVisible : boolean;
	tabs : JBTabs;
	getTabCount() : number;
	setSelectedIndex(arg1 : number) : ActionCallback;
	setSelectedIndex(arg1 : number, arg2 : boolean) : ActionCallback;
	static createDockableEditor(arg1 : Project, arg2 : Image, arg3 : VirtualFile, arg4 : Presentation, arg5 : EditorWindow) : EditorTabbedContainer.DockableEditor;
	a() : void;
	getComponent() : Component;
	removeTabAt(arg1 : number, arg2 : number, arg3 : boolean) : ActionCallback;
	removeTabAt(arg1 : number, arg2 : number) : ActionCallback;
	getSelectedIndex() : number;
	setForegroundAt(arg1 : number, arg2 : Color) : void;
	setWaveColor(arg1 : number, arg2 : Color) : void;
	setIconAt(arg1 : number, arg2 : Icon) : void;
	setTitleAt(arg1 : number, arg2 : string) : void;
	setToolTipTextAt(arg1 : number, arg2 : string) : void;
	setBackgroundColorAt(arg1 : number, arg2 : Color) : void;
	setTabLayoutPolicy(arg1 : number) : void;
	setTabPlacement(arg1 : number) : void;
	getSelectedComponent() : Object;
	insertTab(arg1 : VirtualFile, arg2 : Icon, arg3 : JComponent, arg4 : string, arg5 : number) : void;
	isEmptyVisible() : boolean;
	getTabs() : JBTabs;
	requestFocus(arg1 : boolean) : void;
	setPaintBlocked(arg1 : boolean) : void;
	static calcTabTitle(arg1 : Project, arg2 : VirtualFile) : string;
	static calcTabColor(arg1 : Project, arg2 : VirtualFile) : Color;
	getComponentAt(arg1 : number) : Component;
	b() : boolean;
}


declare interface EditorTabbedContainer extends Disposable, CloseAction.CloseTarget {}

declare module EditorTabbedContainer {
	class MyShadowBorder {
		borderOpaque : boolean;
		constructor(arg1 : JBEditorTabs);
		static a(arg1 : Rectangle, arg2 : Rectangle, arg3 : Graphics, arg4 : number) : void;
	}


	interface MyShadowBorder extends Border {}	class MyTransferHandler {
	}


	interface MyTransferHandler extends TransferHandler {}	class DockableEditor {
		key : VirtualFile;
		previewImage : Image;
		preferredSize : Dimension;
		dockContainerType : string;
		presentation : Presentation;
		file : VirtualFile;
		pinned : boolean;
		constructor(arg1 : Project, arg2 : Image, arg3 : VirtualFile, arg4 : Presentation, arg5 : Dimension, arg6 : boolean);
		getFile() : VirtualFile;
		isPinned() : boolean;
	}


	interface DockableEditor extends DockableContent<VirtualFile> {}	class MyDragOutDelegate {
		a() : DockManager;
	}


	interface MyDragOutDelegate extends TabInfo.DragOutDelegate {}	class MySwitchProvider {
		currentTarget : SwitchTarget;
		component : JComponent;
		cycleRoot : boolean;
	}


	interface MySwitchProvider extends SwitchProvider {}	class TabMouseListener {
	}


	interface TabMouseListener extends MouseAdapter {}	class MyDataProvider {
	}


	interface MyDataProvider extends DataProvider {}	class CloseTab {
		constructor(arg1 : JComponent, arg2 : TabInfo);
	}


	interface CloseTab extends AnAction, DumbAware {}	class MyQueryable {
		constructor(arg1 : TabInfo);
	}


	interface MyQueryable extends Queryable {}}

export = EditorTabbedContainer
