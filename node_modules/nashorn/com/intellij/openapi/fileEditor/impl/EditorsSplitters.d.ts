import FileEditorManagerImpl = require('nashorn/com/intellij/openapi/fileEditor/impl/FileEditorManagerImpl');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import FileEditor = require('nashorn/com/intellij/openapi/fileEditor/FileEditor');
import JPanel = require('nashorn/javax/swing/JPanel');
import EditorWindow = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorWindow');
import EditorWithProviderComposite = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorWithProviderComposite');
import DockManager = require('nashorn/com/intellij/ui/docking/DockManager');
import Element = require('nashorn/org/jdom/Element');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import IdeFrame = require('nashorn/com/intellij/openapi/wm/IdeFrame');
import JComponent = require('nashorn/javax/swing/JComponent');
import RelativePoint = require('nashorn/com/intellij/ui/awt/RelativePoint');
import JBTabs = require('nashorn/com/intellij/ui/tabs/JBTabs');
import List = require('nashorn/java/util/List');
import Component = require('nashorn/java/awt/Component');
import IdePanePanel = require('nashorn/com/intellij/openapi/wm/impl/IdePanePanel');
import UISettingsListener = require('nashorn/com/intellij/ide/ui/UISettingsListener');
import Object = require('nashorn/java/lang/Object');
import FocusWatcher = require('nashorn/com/intellij/openapi/wm/FocusWatcher');
import IdeFocusTraversalPolicy = require('nashorn/com/intellij/openapi/wm/ex/IdeFocusTraversalPolicy');

declare class EditorsSplitters {
	manager : FileEditorManagerImpl;
	currentFile : VirtualFile;
	openFiles : VirtualFile[];
	selectedFiles : VirtualFile[];
	selectedEditors : FileEditor[];
	insideChange : boolean;
	splitCount : number;
	emptyVisible : boolean;
	topPanel : JPanel;
	currentWindow : EditorWindow;
	editorsComposites : EditorWithProviderComposite[];
	windows : EditorWindow[];
	orderedWindows : EditorWindow[];
	floating : boolean;
	preview : boolean;
	constructor(arg1 : FileEditorManagerImpl, arg2 : DockManager, arg3 : boolean);
	getManager() : FileEditorManagerImpl;
	clear() : void;
	startListeningFocus() : void;
	a() : void;
	dispose() : void;
	getCurrentFile() : VirtualFile;
	showEmptyText() : boolean;
	writeExternal(arg1 : Element) : void;
	a(arg1 : JPanel) : Element;
	a(arg1 : Element, arg2 : EditorWindow) : void;
	a(arg1 : Element, arg2 : VirtualFile, arg3 : EditorWithProviderComposite, arg4 : boolean, arg5 : EditorWithProviderComposite) : void;
	openFiles() : void;
	b() : void;
	c() : void;
	static a(arg1 : Element) : number;
	readExternal(arg1 : Element) : void;
	getOpenFiles() : VirtualFile[];
	getSelectedFiles() : VirtualFile[];
	getSelectedEditors() : FileEditor[];
	updateFileIcon(arg1 : VirtualFile) : void;
	a(arg1 : VirtualFile) : void;
	b(arg1 : VirtualFile) : void;
	updateFileColor(arg1 : VirtualFile) : void;
	trimToSize(arg1 : number) : void;
	setTabsPlacement(arg1 : number) : void;
	setTabLayoutPolicy(arg1 : number) : void;
	updateFileName(arg1 : VirtualFile) : void;
	getFrame(arg1 : Project) : IdeFrame;
	isInsideChange() : boolean;
	a(arg1 : EditorWindow) : void;
	updateFileBackgroundColor(arg1 : VirtualFile) : void;
	getSplitCount() : number;
	static a(arg1 : JComponent) : number;
	afterFileClosed(arg1 : VirtualFile) : void;
	afterFileOpen(arg1 : VirtualFile) : void;
	getTabsAt(arg1 : RelativePoint) : JBTabs;
	isEmptyVisible() : boolean;
	findNextFile(arg1 : VirtualFile) : VirtualFile;
	closeFile(arg1 : VirtualFile, arg2 : boolean) : void;
	getTopPanel() : JPanel;
	getCurrentWindow() : EditorWindow;
	getOrCreateCurrentWindow(arg1 : VirtualFile) : EditorWindow;
	createCurrentWindow() : void;
	createEditorWindow() : EditorWindow;
	setCurrentWindow(arg1 : EditorWindow, arg2 : boolean) : void;
	addWindow(arg1 : EditorWindow) : void;
	removeWindow(arg1 : EditorWindow) : void;
	containsWindow(arg1 : EditorWindow) : boolean;
	getEditorsComposites() : EditorWithProviderComposite[];
	findEditorComposites(arg1 : VirtualFile) : List<EditorWithProviderComposite>;
	findWindows(arg1 : VirtualFile) : List<EditorWindow>;
	getWindows() : EditorWindow[];
	getOrderedWindows() : EditorWindow[];
	a(arg1 : Component) : EditorWindow;
	isFloating() : boolean;
	isPreview() : boolean;
}


declare interface EditorsSplitters extends IdePanePanel, UISettingsListener {}

declare module EditorsSplitters {
	class UIBuilder {
	}


	interface UIBuilder extends EditorsSplitters.ConfigTreeReader<JPanel> {}	class ConfigTreeReader<T> extends Object {
		process(arg1 : Element, arg2 : T) : T;
		processFiles(arg1 : List<Element>, arg2 : T) : T;
		processSplitter(arg1 : Element, arg2 : Element, arg3 : Element, arg4 : T) : T;
	}
	class MyFocusWatcher {
	}


	interface MyFocusWatcher extends FocusWatcher {}	class MyFocusTraversalPolicy {
	}


	interface MyFocusTraversalPolicy extends IdeFocusTraversalPolicy {}}

export = EditorsSplitters
