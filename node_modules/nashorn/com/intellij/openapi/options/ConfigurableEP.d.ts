import UnnamedConfigurable = require('nashorn/com/intellij/openapi/options/UnnamedConfigurable');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Class = require('nashorn/java/lang/Class');
import AbstractExtensionPointBean = require('nashorn/com/intellij/openapi/extensions/AbstractExtensionPointBean');
import Object = require('nashorn/java/lang/Object');

declare class ConfigurableEP<T extends UnnamedConfigurable> {
	displayName : string;
	key : string;
	bundle : string;
	children : ConfigurableEP[];
	childrenEPName : string;
	dynamic : boolean;
	parentId : string;
	id : string;
	groupId : string;
	groupWeight : number;
	nonDefaultProject : boolean;
	implementationClass : string;
	instanceClass : string;
	providerClass : string;
	available : boolean;
	project : Project;
	configurableType : Class<any>;
	constructor();
	constructor(arg1 : Project);
	getDisplayName() : string;
	getChildren() : ConfigurableEP[];
	isAvailable() : boolean;
	createConfigurable() : T;
	getProject() : Project;
	canCreateConfigurable() : boolean;
	getConfigurableType() : Class<any>;
}


declare interface ConfigurableEP<T extends UnnamedConfigurable> extends AbstractExtensionPointBean {}

declare module ConfigurableEP {
	class ClassProducer {
	}


	interface ClassProducer extends ConfigurableEP.ObjectProducer {}	class ProviderProducer {
	}


	interface ProviderProducer extends ConfigurableEP.ObjectProducer {}	class ObjectProducer extends Object {
		createElement() : Object;
		canCreateElement() : boolean;
		getType() : Class<any>;
	}
}

export = ConfigurableEP
