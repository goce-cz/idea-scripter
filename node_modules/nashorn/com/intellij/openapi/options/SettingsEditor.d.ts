import CompositeSettingsEditor = require('nashorn/com/intellij/openapi/options/CompositeSettingsEditor');
import Factory = require('nashorn/com/intellij/openapi/util/Factory');
import JComponent = require('nashorn/javax/swing/JComponent');
import SettingsEditorListener = require('nashorn/com/intellij/openapi/options/SettingsEditorListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');

declare class SettingsEditor<Settings> {
	snapshot : Settings;
	owner : CompositeSettingsEditor<Settings>;
	factory : Factory<Settings>;
	component : JComponent;
	constructor();
	constructor(arg1 : Factory<Settings>);
	resetEditorFrom(arg1 : Settings) : void;
	applyEditorTo(arg1 : Settings) : void;
	createEditor() : JComponent;
	disposeEditor() : void;
	getSnapshot() : Settings;
	setOwner(arg1 : CompositeSettingsEditor<Settings>) : void;
	getOwner() : CompositeSettingsEditor<Settings>;
	getFactory() : Factory<Settings>;
	resetFrom(arg1 : Settings) : void;
	applyTo(arg1 : Settings) : void;
	getComponent() : JComponent;
	uninstallWatcher() : void;
	installWatcher(arg1 : JComponent) : void;
	addSettingsEditorListener(arg1 : SettingsEditorListener<Settings>) : void;
	removeSettingsEditorListener(arg1 : SettingsEditorListener<Settings>) : void;
	fireEditorStateChanged() : void;
}


declare interface SettingsEditor<Settings> extends Disposable {}
export = SettingsEditor
