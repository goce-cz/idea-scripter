import Project = require('nashorn/com/intellij/openapi/project/Project');
import JComponent = require('nashorn/javax/swing/JComponent');
import Runnable = require('nashorn/java/lang/Runnable');
import IdeFocusManager = require('nashorn/com/intellij/openapi/wm/IdeFocusManager');
import ProgressIndicatorBase = require('nashorn/com/intellij/openapi/progress/util/ProgressIndicatorBase');
import BlockingProgressIndicator = require('nashorn/com/intellij/openapi/progress/util/BlockingProgressIndicator');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Component = require('nashorn/java/awt/Component');
import JPanel = require('nashorn/javax/swing/JPanel');
import DialogWrapper = require('nashorn/com/intellij/openapi/ui/DialogWrapper');

declare class ProgressWindow {
	static DEFAULT_PROGRESS_DIALOG_POSTPONE_TIME_MILLIS : number;
	processId : string;
	backgrounded : boolean;
	title : string;
	popupWasShown : boolean;
	constructor(arg1 : boolean, arg2 : Project);
	constructor(arg1 : boolean, arg2 : boolean, arg3 : Project);
	constructor(arg1 : boolean, arg2 : boolean, arg3 : Project, arg4 : string);
	constructor(arg1 : boolean, arg2 : boolean, arg3 : Project, arg4 : JComponent, arg5 : string);
	setDelayInMillis(arg1 : number) : void;
	c() : boolean;
	prepareShowDialog() : void;
	getProcessId() : string;
	setProcessId(arg1 : string) : void;
	showDialog() : void;
	d() : boolean;
	background() : void;
	isBackgrounded() : boolean;
	e() : void;
	setTitle(arg1 : string) : void;
	getTitle() : string;
	setBackgroundHandler(arg1 : Runnable) : void;
	setCancelButtonText(arg1 : string) : void;
	f() : IdeFocusManager;
}


declare interface ProgressWindow extends ProgressIndicatorBase, BlockingProgressIndicator, Disposable {}

declare module ProgressWindow {
	class MyDialog {
		constructor(arg1 : boolean, arg2 : Project, arg3 : string);
		constructor(arg1 : boolean, arg2 : Component, arg3 : string);
		a(arg1 : string, arg2 : number) : string;
		a(arg1 : boolean, arg2 : string) : void;
		a() : JPanel;
		a(arg1 : boolean) : void;
		a(arg1 : string) : void;
		b() : void;
		c() : void;
		d() : void;
		e() : void;
		f() : void;
		g() : void;
		h() : void;
		i() : boolean;
	}


	interface MyDialog extends Disposable {}

	module MyDialog {
		class MyDialogWrapper {
			constructor(arg1 : Project, arg2 : boolean);
			constructor(arg1 : Component, arg2 : boolean);
		}


		interface MyDialogWrapper extends DialogWrapper {}	}
}

export = ProgressWindow
