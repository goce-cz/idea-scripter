import ProgressIndicator = require('nashorn/com/intellij/openapi/progress/ProgressIndicator');
import Runnable = require('nashorn/java/lang/Runnable');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Exception = require('nashorn/java/lang/Exception');
import ThrowableComputable = require('nashorn/com/intellij/openapi/util/ThrowableComputable');
import JComponent = require('nashorn/javax/swing/JComponent');
import PerformInBackgroundOption = require('nashorn/com/intellij/openapi/progress/PerformInBackgroundOption');
import Task = require('nashorn/com/intellij/openapi/progress/Task');
import ProgressIndicatorProvider = require('nashorn/com/intellij/openapi/progress/ProgressIndicatorProvider');
import Object = require('nashorn/java/lang/Object');

declare class ProgressManager {
	static instance : ProgressManager;
	progressIndicator : ProgressIndicator;
	constructor();
	static getInstance() : ProgressManager;
	hasProgressIndicator() : boolean;
	hasModalProgressIndicator() : boolean;
	hasUnsafeProgressIndicator() : boolean;
	runProcess(arg1 : Runnable, arg2 : ProgressIndicator) : void;
	runProcess<T>(arg1 : Computable<T>, arg2 : ProgressIndicator) : T;
	static progress(arg1 : string) : void;
	static progress2(arg1 : string) : void;
	static progress(arg1 : string, arg2 : string) : void;
	executeNonCancelableSection(arg1 : Runnable) : void;
	setCancelButtonText(arg1 : string) : void;
	runProcessWithProgressSynchronously(arg1 : Runnable, arg2 : string, arg3 : boolean, arg4 : Project) : boolean;
	runProcessWithProgressSynchronously<T, E extends Exception>(arg1 : ThrowableComputable<T, E>, arg2 : string, arg3 : boolean, arg4 : Project) : T;
	runProcessWithProgressSynchronously(arg1 : Runnable, arg2 : string, arg3 : boolean, arg4 : Project, arg5 : JComponent) : boolean;
	runProcessWithProgressAsynchronously(arg1 : Project, arg2 : string, arg3 : Runnable, arg4 : Runnable, arg5 : Runnable) : void;
	runProcessWithProgressAsynchronously(arg1 : Project, arg2 : string, arg3 : Runnable, arg4 : Runnable, arg5 : Runnable, arg6 : PerformInBackgroundOption) : void;
	run(arg1 : Task) : void;
	runProcessWithProgressAsynchronously(arg1 : Task.Backgroundable, arg2 : ProgressIndicator) : void;
	indicatorCanceled(arg1 : ProgressIndicator) : void;
	static canceled(arg1 : ProgressIndicator) : void;
	static checkCanceled() : void;
	executeProcessUnderProgress(arg1 : Runnable, arg2 : ProgressIndicator) : void;
}


declare interface ProgressManager extends ProgressIndicatorProvider {}

declare module ProgressManager {
	class ProgressManagerHolder extends Object {
	}
}

export = ProgressManager
