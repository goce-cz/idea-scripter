import Project = require('nashorn/com/intellij/openapi/project/Project');
import TaskInfo = require('nashorn/com/intellij/openapi/progress/TaskInfo');
import Progressive = require('nashorn/com/intellij/openapi/progress/Progressive');
import Object = require('nashorn/java/lang/Object');
import PerformInBackgroundOption = require('nashorn/com/intellij/openapi/progress/PerformInBackgroundOption');
import DumbModeAction = require('nashorn/com/intellij/openapi/project/DumbModeAction');

declare class Task {
	project : Project;
	processId : string;
	title : string;
	cancelText : string;
	notificationInfo : Task.NotificationInfo;
	headless : boolean;
	cancelTooltipText : string;
	cancellable : boolean;
	modal : boolean;
	constructor(arg1 : Project, arg2 : string, arg3 : boolean);
	onCancel() : void;
	onSuccess() : void;
	getProject() : Project;
	queue() : void;
	setTitle(arg1 : string) : Task;
	setCancelText(arg1 : string) : Task;
	getNotificationInfo() : Task.NotificationInfo;
	notifyFinished() : Task.NotificationInfo;
	isHeadless() : boolean;
	setCancelTooltipText(arg1 : string) : Task;
	isModal() : boolean;
	asModal() : Task.Modal;
	asBackgroundable() : Task.Backgroundable;
}


declare interface Task extends TaskInfo, Progressive {}

declare module Task {
	class NotificationInfo extends Object {
		notificationName : string;
		notificationTitle : string;
		notificationText : string;
		showWhenFocused : boolean;
		constructor(arg1 : string, arg2 : string, arg3 : string);
		constructor(arg1 : string, arg2 : string, arg3 : string, arg4 : boolean);
		getNotificationName() : string;
		getNotificationTitle() : string;
		getNotificationText() : string;
		isShowWhenFocused() : boolean;
	}
	class ConditionalModal {
		conditionalModal : boolean;
		constructor(arg1 : Project, arg2 : string, arg3 : boolean, arg4 : PerformInBackgroundOption);
	}


	interface ConditionalModal extends Task.Backgroundable {}	class Modal {
		modal : boolean;
		constructor(arg1 : Project, arg2 : string, arg3 : boolean);
	}


	interface Modal extends Task {}	class Backgroundable {
		modal : boolean;
		conditionalModal : boolean;
		dumbModeAction : DumbModeAction;
		constructor(arg1 : Project, arg2 : string, arg3 : boolean, arg4 : PerformInBackgroundOption);
		constructor(arg1 : Project, arg2 : string, arg3 : boolean);
		constructor(arg1 : Project, arg2 : string);
		isConditionalModal() : boolean;
		getDumbModeAction() : DumbModeAction;
	}


	interface Backgroundable extends Task, PerformInBackgroundOption {}}

export = Task
