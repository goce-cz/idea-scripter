import Object = require('nashorn/java/lang/Object');
import ExtensionPoint = require('nashorn/com/intellij/openapi/extensions/ExtensionPoint');
import AreaPicoContainer = require('nashorn/com/intellij/openapi/extensions/AreaPicoContainer');
import PluginDescriptor = require('nashorn/com/intellij/openapi/extensions/PluginDescriptor');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import ExtensionPointAvailabilityListener = require('nashorn/com/intellij/openapi/extensions/ExtensionPointAvailabilityListener');
import Element = require('nashorn/org/jdom/Element');
import PicoContainer = require('nashorn/org/picocontainer/PicoContainer');

declare class ExtensionsArea extends Object {
	extensionPoints : ExtensionPoint[];
	picoContainer : AreaPicoContainer;
	areaClass : string;
	registerExtensionPoint(arg1 : string, arg2 : string) : void;
	registerExtensionPoint(arg1 : string, arg2 : string, arg3 : ExtensionPoint.Kind) : void;
	registerExtensionPoint(arg1 : string, arg2 : string, arg3 : PluginDescriptor) : void;
	unregisterExtensionPoint(arg1 : string) : void;
	hasExtensionPoint(arg1 : string) : boolean;
	getExtensionPoint<T>(arg1 : string) : ExtensionPoint<T>;
	getExtensionPoint<T>(arg1 : ExtensionPointName<T>) : ExtensionPoint<T>;
	getExtensionPoints() : ExtensionPoint[];
	suspendInteractions() : void;
	resumeInteractions() : void;
	killPendingInteractions() : void;
	addAvailabilityListener(arg1 : string, arg2 : ExtensionPointAvailabilityListener) : void;
	getPicoContainer() : AreaPicoContainer;
	registerExtensionPoint(arg1 : string, arg2 : Element) : void;
	registerExtensionPoint(arg1 : PluginDescriptor, arg2 : Element) : void;
	registerExtension(arg1 : string, arg2 : Element) : void;
	registerExtension(arg1 : PluginDescriptor, arg2 : Element) : void;
	getPluginContainer(arg1 : string) : PicoContainer;
	getAreaClass() : string;
}

export = ExtensionsArea
