import Object = require('nashorn/java/lang/Object');
import AreaInstance = require('nashorn/com/intellij/openapi/extensions/AreaInstance');
import Class = require('nashorn/java/lang/Class');
import LoadingOrder = require('nashorn/com/intellij/openapi/extensions/LoadingOrder');
import ExtensionPointListener = require('nashorn/com/intellij/openapi/extensions/ExtensionPointListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Enum = require('nashorn/java/lang/Enum');

declare class ExtensionPoint<T> extends Object {
	name : string;
	area : AreaInstance;
	beanClassName : string;
	extensions : T[];
	extension : T;
	extensionClass : Class<T>;
	kind : ExtensionPoint.Kind;
	className : string;
	getName() : string;
	getArea() : AreaInstance;
	getBeanClassName() : string;
	registerExtension(arg1 : T) : void;
	registerExtension(arg1 : T, arg2 : LoadingOrder) : void;
	getExtensions() : T[];
	hasAnyExtensions() : boolean;
	getExtension() : T;
	hasExtension(arg1 : T) : boolean;
	unregisterExtension(arg1 : T) : void;
	addExtensionPointListener(arg1 : ExtensionPointListener<T>, arg2 : Disposable) : void;
	addExtensionPointListener(arg1 : ExtensionPointListener<T>) : void;
	removeExtensionPointListener(arg1 : ExtensionPointListener<T>) : void;
	reset() : void;
	getExtensionClass() : Class<T>;
	getKind() : ExtensionPoint.Kind;
	getClassName() : string;
}


declare module ExtensionPoint {
	class Kind {
		static INTERFACE : ExtensionPoint.Kind;
		static BEAN_CLASS : ExtensionPoint.Kind;
	}


	interface Kind extends Enum<ExtensionPoint.Kind> {}}

export = ExtensionPoint
