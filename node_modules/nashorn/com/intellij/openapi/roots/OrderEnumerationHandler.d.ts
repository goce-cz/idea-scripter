import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import OrderEntry = require('nashorn/com/intellij/openapi/roots/OrderEntry');
import OrderEnumeratorSettings = require('nashorn/com/intellij/openapi/roots/OrderEnumeratorSettings');
import OrderRootType = require('nashorn/com/intellij/openapi/roots/OrderRootType');
import Collection = require('nashorn/java/util/Collection');
import ModuleRootModel = require('nashorn/com/intellij/openapi/roots/ModuleRootModel');
import Enum = require('nashorn/java/lang/Enum');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Module = require('nashorn/com/intellij/openapi/module/Module');

declare class OrderEnumerationHandler extends Object {
	static EP_NAME : ExtensionPointName<OrderEnumerationHandler.Factory>;
	constructor();
	shouldAddDependency(arg1 : OrderEntry, arg2 : OrderEnumeratorSettings) : OrderEnumerationHandler.AddDependencyType;
	shouldAddRuntimeDependenciesToTestCompilationClasspath() : boolean;
	shouldIncludeTestsFromDependentModulesToTestClasspath() : boolean;
	shouldProcessDependenciesRecursively() : boolean;
	addCustomRootsForLibrary(arg1 : OrderEntry, arg2 : OrderRootType, arg3 : Collection<string>) : boolean;
	addCustomModuleRoots(arg1 : OrderRootType, arg2 : ModuleRootModel, arg3 : Collection<string>, arg4 : boolean, arg5 : boolean) : boolean;
}


declare module OrderEnumerationHandler {
	class AddDependencyType {
		static ADD : OrderEnumerationHandler.AddDependencyType;
		static DO_NOT_ADD : OrderEnumerationHandler.AddDependencyType;
		static DEFAULT : OrderEnumerationHandler.AddDependencyType;
	}


	interface AddDependencyType extends Enum<OrderEnumerationHandler.AddDependencyType> {}	class Factory extends Object {
		constructor();
		isApplicable(arg1 : Project) : boolean;
		isApplicable(arg1 : Module) : boolean;
		createHandler(arg1 : Module) : OrderEnumerationHandler;
	}
}

export = OrderEnumerationHandler
