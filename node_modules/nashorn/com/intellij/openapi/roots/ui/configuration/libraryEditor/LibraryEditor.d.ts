import Object = require('nashorn/java/lang/Object');
import LibraryProperties = require('nashorn/com/intellij/openapi/roots/libraries/LibraryProperties');
import LibraryType = require('nashorn/com/intellij/openapi/roots/libraries/LibraryType');
import OrderRootType = require('nashorn/com/intellij/openapi/roots/OrderRootType');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Collection = require('nashorn/java/util/Collection');
import OrderRoot = require('nashorn/com/intellij/openapi/roots/libraries/ui/OrderRoot');

declare class LibraryEditor extends Object {
	name : string;
	excludedRootUrls : string[];
	properties : LibraryProperties;
	type : LibraryType<any>;
	getName() : string;
	getUrls(arg1 : OrderRootType) : string[];
	getFiles(arg1 : OrderRootType) : VirtualFile[];
	getExcludedRootUrls() : string[];
	setName(arg1 : string) : void;
	addRoot(arg1 : VirtualFile, arg2 : OrderRootType) : void;
	addRoot(arg1 : string, arg2 : OrderRootType) : void;
	addJarDirectory(arg1 : VirtualFile, arg2 : boolean, arg3 : OrderRootType) : void;
	addJarDirectory(arg1 : string, arg2 : boolean, arg3 : OrderRootType) : void;
	addExcludedRoot(arg1 : string) : void;
	removeRoot(arg1 : string, arg2 : OrderRootType) : void;
	removeExcludedRoot(arg1 : string) : void;
	removeAllRoots() : void;
	hasChanges() : boolean;
	isJarDirectory(arg1 : string, arg2 : OrderRootType) : boolean;
	isValid(arg1 : string, arg2 : OrderRootType) : boolean;
	getProperties() : LibraryProperties;
	getType() : LibraryType<any>;
	addRoots(arg1 : Collection<OrderRoot>) : void;
}

export = LibraryEditor
