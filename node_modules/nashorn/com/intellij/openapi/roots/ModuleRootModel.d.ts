import Object = require('nashorn/java/lang/Object');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import ContentEntry = require('nashorn/com/intellij/openapi/roots/ContentEntry');
import OrderEntry = require('nashorn/com/intellij/openapi/roots/OrderEntry');
import Sdk = require('nashorn/com/intellij/openapi/projectRoots/Sdk');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import JpsModuleSourceRootType = require('nashorn/org/jetbrains/jps/model/module/JpsModuleSourceRootType');
import List = require('nashorn/java/util/List');
import Set = require('nashorn/java/util/Set');
import RootPolicy = require('nashorn/com/intellij/openapi/roots/RootPolicy');
import OrderEnumerator = require('nashorn/com/intellij/openapi/roots/OrderEnumerator');
import Class = require('nashorn/java/lang/Class');

declare class ModuleRootModel extends Object {
	module : Module;
	contentEntries : ContentEntry[];
	orderEntries : OrderEntry[];
	sdk : Sdk;
	sdkInherited : boolean;
	contentRoots : VirtualFile[];
	contentRootUrls : string[];
	excludeRoots : VirtualFile[];
	excludeRootUrls : string[];
	sourceRoots : VirtualFile[];
	sourceRootUrls : string[];
	dependencyModuleNames : string[];
	moduleDependencies : Module[];
	getModule() : Module;
	getContentEntries() : ContentEntry[];
	getOrderEntries() : OrderEntry[];
	getSdk() : Sdk;
	isSdkInherited() : boolean;
	getContentRoots() : VirtualFile[];
	getContentRootUrls() : string[];
	getExcludeRoots() : VirtualFile[];
	getExcludeRootUrls() : string[];
	getSourceRoots() : VirtualFile[];
	getSourceRoots(arg1 : boolean) : VirtualFile[];
	getSourceRoots(arg1 : JpsModuleSourceRootType<any>) : List<VirtualFile>;
	getSourceRoots(arg1 : Set<JpsModuleSourceRootType<any>>) : List<VirtualFile>;
	getSourceRootUrls() : string[];
	getSourceRootUrls(arg1 : boolean) : string[];
	processOrder<R>(arg1 : RootPolicy<R>, arg2 : R) : R;
	orderEntries() : OrderEnumerator;
	getDependencyModuleNames() : string[];
	getModuleExtension<T>(arg1 : Class<T>) : T;
	getModuleDependencies() : Module[];
	getModuleDependencies(arg1 : boolean) : Module[];
}

export = ModuleRootModel
