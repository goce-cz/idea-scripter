import Object = require('nashorn/java/lang/Object');
import ModificationTracker = require('nashorn/com/intellij/openapi/util/ModificationTracker');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');

declare class FileIndexFacade extends Object {
	rootModificationTracker : ModificationTracker;
	static getInstance(arg1 : Project) : FileIndexFacade;
	isInContent(arg1 : VirtualFile) : boolean;
	isInSource(arg1 : VirtualFile) : boolean;
	isInSourceContent(arg1 : VirtualFile) : boolean;
	isInLibraryClasses(arg1 : VirtualFile) : boolean;
	isInLibrarySource(arg1 : VirtualFile) : boolean;
	isExcludedFile(arg1 : VirtualFile) : boolean;
	isUnderIgnored(arg1 : VirtualFile) : boolean;
	getModuleForFile(arg1 : VirtualFile) : Module;
	isValidAncestor(arg1 : VirtualFile, arg2 : VirtualFile) : boolean;
	shouldBeFound(arg1 : GlobalSearchScope, arg2 : VirtualFile) : boolean;
	getRootModificationTracker() : ModificationTracker;
}

export = FileIndexFacade
