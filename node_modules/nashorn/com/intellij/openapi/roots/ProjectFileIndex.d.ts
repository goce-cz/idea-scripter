import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import List = require('nashorn/java/util/List');
import OrderEntry = require('nashorn/com/intellij/openapi/roots/OrderEntry');
import FileIndex = require('nashorn/com/intellij/openapi/roots/FileIndex');
import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');

declare class ProjectFileIndex {
	getModuleForFile(arg1 : VirtualFile) : Module;
	getModuleForFile(arg1 : VirtualFile, arg2 : boolean) : Module;
	getOrderEntriesForFile(arg1 : VirtualFile) : List<OrderEntry>;
	getClassRootForFile(arg1 : VirtualFile) : VirtualFile;
	getSourceRootForFile(arg1 : VirtualFile) : VirtualFile;
	getContentRootForFile(arg1 : VirtualFile) : VirtualFile;
	getContentRootForFile(arg1 : VirtualFile, arg2 : boolean) : VirtualFile;
	getPackageNameByDirectory(arg1 : VirtualFile) : string;
	isLibraryClassFile(arg1 : VirtualFile) : boolean;
	isInSource(arg1 : VirtualFile) : boolean;
	isInLibraryClasses(arg1 : VirtualFile) : boolean;
	isInLibrarySource(arg1 : VirtualFile) : boolean;
	isIgnored(arg1 : VirtualFile) : boolean;
	isExcluded(arg1 : VirtualFile) : boolean;
	isUnderIgnored(arg1 : VirtualFile) : boolean;
}


declare interface ProjectFileIndex extends FileIndex {}

declare module ProjectFileIndex {
	class SERVICE extends Object {
		static getInstance(arg1 : Project) : ProjectFileIndex;
	}
}

export = ProjectFileIndex
