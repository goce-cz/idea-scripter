import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import MessageBus = require('nashorn/com/intellij/util/messages/MessageBus');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Module = require('nashorn/com/intellij/openapi/module/Module');

declare class FilePropertyPusher<T> extends Object {
	static EP_NAME : ExtensionPointName<FilePropertyPusher>;
	fileDataKey : Key<T>;
	defaultValue : T;
	initExtra(arg1 : Project, arg2 : MessageBus, arg3 : FilePropertyPusher.Engine) : void;
	getFileDataKey() : Key<T>;
	pushDirectoriesOnly() : boolean;
	getDefaultValue() : T;
	getImmediateValue(arg1 : Project, arg2 : VirtualFile) : T;
	getImmediateValue(arg1 : Module) : T;
	acceptsFile(arg1 : VirtualFile) : boolean;
	acceptsDirectory(arg1 : VirtualFile, arg2 : Project) : boolean;
	persistAttribute(arg1 : Project, arg2 : VirtualFile, arg3 : T) : void;
	afterRootsChanged(arg1 : Project) : void;
}


declare module FilePropertyPusher {
	class Engine extends Object {
		pushAll() : void;
		pushRecursively(arg1 : VirtualFile, arg2 : Project) : void;
	}
}

export = FilePropertyPusher
