import PersistentLibraryKind = require('nashorn/com/intellij/openapi/roots/libraries/PersistentLibraryKind');
import LibraryProperties = require('nashorn/com/intellij/openapi/roots/libraries/LibraryProperties');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import OrderRootType = require('nashorn/com/intellij/openapi/roots/OrderRootType');
import List = require('nashorn/java/util/List');
import Library = require('nashorn/com/intellij/openapi/roots/libraries/Library');

declare class LibraryEx {
	disposed : boolean;
	modifiableModel : LibraryEx.ModifiableModelEx;
	kind : PersistentLibraryKind<any>;
	properties : LibraryProperties;
	excludedRootUrls : string[];
	excludedRoots : VirtualFile[];
	getInvalidRootUrls(arg1 : OrderRootType) : List<string>;
	isDisposed() : boolean;
	getKind() : PersistentLibraryKind<any>;
	getProperties() : LibraryProperties;
	getExcludedRootUrls() : string[];
	getExcludedRoots() : VirtualFile[];
}


declare interface LibraryEx extends Library {}

declare module LibraryEx {
	class ModifiableModelEx {
		properties : LibraryProperties;
		kind : PersistentLibraryKind<any>;
		excludedRootUrls : string[];
		setProperties(arg1 : LibraryProperties) : void;
		getProperties() : LibraryProperties;
		setKind(arg1 : PersistentLibraryKind<any>) : void;
		getKind() : PersistentLibraryKind<any>;
		addExcludedRoot(arg1 : string) : void;
		removeExcludedRoot(arg1 : string) : boolean;
		getExcludedRootUrls() : string[];
	}


	interface ModifiableModelEx extends Library.ModifiableModel {}}

export = LibraryEx
