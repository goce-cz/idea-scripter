import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import SourceFolder = require('nashorn/com/intellij/openapi/roots/SourceFolder');
import ExcludeFolder = require('nashorn/com/intellij/openapi/roots/ExcludeFolder');
import List = require('nashorn/java/util/List');
import JpsModuleSourceRootType = require('nashorn/org/jetbrains/jps/model/module/JpsModuleSourceRootType');
import Set = require('nashorn/java/util/Set');
import JpsElement = require('nashorn/org/jetbrains/jps/model/JpsElement');
import Synthetic = require('nashorn/com/intellij/openapi/roots/Synthetic');

declare class ContentEntry {
	file : VirtualFile;
	url : string;
	sourceFolders : SourceFolder[];
	sourceFolderFiles : VirtualFile[];
	excludeFolders : ExcludeFolder[];
	excludeFolderUrls : List<string>;
	excludeFolderFiles : VirtualFile[];
	getFile() : VirtualFile;
	getUrl() : string;
	getSourceFolders() : SourceFolder[];
	getSourceFolders(arg1 : JpsModuleSourceRootType<any>) : List<SourceFolder>;
	getSourceFolders(arg1 : Set<JpsModuleSourceRootType<any>>) : List<SourceFolder>;
	getSourceFolderFiles() : VirtualFile[];
	getExcludeFolders() : ExcludeFolder[];
	getExcludeFolderUrls() : List<string>;
	getExcludeFolderFiles() : VirtualFile[];
	addSourceFolder(arg1 : VirtualFile, arg2 : boolean) : SourceFolder;
	addSourceFolder(arg1 : VirtualFile, arg2 : boolean, arg3 : string) : SourceFolder;
	addSourceFolder<P extends JpsElement>(arg1 : VirtualFile, arg2 : JpsModuleSourceRootType<P>, arg3 : P) : SourceFolder;
	addSourceFolder<P extends JpsElement>(arg1 : VirtualFile, arg2 : JpsModuleSourceRootType<P>) : SourceFolder;
	addSourceFolder(arg1 : string, arg2 : boolean) : SourceFolder;
	addSourceFolder<P extends JpsElement>(arg1 : string, arg2 : JpsModuleSourceRootType<P>) : SourceFolder;
	addSourceFolder<P extends JpsElement>(arg1 : string, arg2 : JpsModuleSourceRootType<P>, arg3 : P) : SourceFolder;
	removeSourceFolder(arg1 : SourceFolder) : void;
	clearSourceFolders() : void;
	addExcludeFolder(arg1 : VirtualFile) : ExcludeFolder;
	addExcludeFolder(arg1 : string) : ExcludeFolder;
	removeExcludeFolder(arg1 : ExcludeFolder) : void;
	removeExcludeFolder(arg1 : string) : boolean;
	clearExcludeFolders() : void;
}


declare interface ContentEntry extends Synthetic {}
export = ContentEntry
