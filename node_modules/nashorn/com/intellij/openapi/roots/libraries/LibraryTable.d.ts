import Object = require('nashorn/java/lang/Object');
import Library = require('nashorn/com/intellij/openapi/roots/libraries/Library');
import Iterator = require('nashorn/java/util/Iterator');
import LibraryTablePresentation = require('nashorn/com/intellij/openapi/roots/libraries/LibraryTablePresentation');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import EventListener = require('nashorn/java/util/EventListener');
import PersistentLibraryKind = require('nashorn/com/intellij/openapi/roots/libraries/PersistentLibraryKind');

declare class LibraryTable extends Object {
	libraries : Library[];
	libraryIterator : Iterator<Library>;
	tableLevel : string;
	presentation : LibraryTablePresentation;
	editable : boolean;
	modifiableModel : LibraryTable.ModifiableModel;
	getLibraries() : Library[];
	createLibrary() : Library;
	createLibrary(arg1 : string) : Library;
	removeLibrary(arg1 : Library) : void;
	getLibraryIterator() : Iterator<Library>;
	getLibraryByName(arg1 : string) : Library;
	getTableLevel() : string;
	getPresentation() : LibraryTablePresentation;
	isEditable() : boolean;
	getModifiableModel() : LibraryTable.ModifiableModel;
	addListener(arg1 : LibraryTable.Listener) : void;
	addListener(arg1 : LibraryTable.Listener, arg2 : Disposable) : void;
	removeListener(arg1 : LibraryTable.Listener) : void;
}


declare module LibraryTable {
	class Listener {
		afterLibraryAdded(arg1 : Library) : void;
		afterLibraryRenamed(arg1 : Library) : void;
		beforeLibraryRemoved(arg1 : Library) : void;
		afterLibraryRemoved(arg1 : Library) : void;
	}


	interface Listener extends EventListener {}	class ModifiableModel extends Object {
		libraryIterator : Iterator<Library>;
		libraries : Library[];
		changed : boolean;
		createLibrary(arg1 : string) : Library;
		createLibrary(arg1 : string, arg2 : PersistentLibraryKind) : Library;
		removeLibrary(arg1 : Library) : void;
		commit() : void;
		getLibraryIterator() : Iterator<Library>;
		getLibraryByName(arg1 : string) : Library;
		getLibraries() : Library[];
		isChanged() : boolean;
	}
}

export = LibraryTable
