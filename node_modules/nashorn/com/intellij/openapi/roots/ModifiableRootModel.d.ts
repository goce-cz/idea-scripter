import Project = require('nashorn/com/intellij/openapi/project/Project');
import LibraryTable = require('nashorn/com/intellij/openapi/roots/libraries/LibraryTable');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import ContentEntry = require('nashorn/com/intellij/openapi/roots/ContentEntry');
import OrderEntry = require('nashorn/com/intellij/openapi/roots/OrderEntry');
import Library = require('nashorn/com/intellij/openapi/roots/libraries/Library');
import LibraryOrderEntry = require('nashorn/com/intellij/openapi/roots/LibraryOrderEntry');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import ModuleOrderEntry = require('nashorn/com/intellij/openapi/roots/ModuleOrderEntry');
import Sdk = require('nashorn/com/intellij/openapi/projectRoots/Sdk');
import Class = require('nashorn/java/lang/Class');
import ModuleRootModel = require('nashorn/com/intellij/openapi/roots/ModuleRootModel');

declare class ModifiableRootModel {
	project : Project;
	moduleLibraryTable : LibraryTable;
	changed : boolean;
	writable : boolean;
	sdkName : string;
	disposed : boolean;
	getProject() : Project;
	addContentEntry(arg1 : VirtualFile) : ContentEntry;
	addContentEntry(arg1 : string) : ContentEntry;
	removeContentEntry(arg1 : ContentEntry) : void;
	addOrderEntry(arg1 : OrderEntry) : void;
	addLibraryEntry(arg1 : Library) : LibraryOrderEntry;
	addInvalidLibrary(arg1 : string, arg2 : string) : LibraryOrderEntry;
	addModuleOrderEntry(arg1 : Module) : ModuleOrderEntry;
	addInvalidModuleEntry(arg1 : string) : ModuleOrderEntry;
	findLibraryOrderEntry(arg1 : Library) : LibraryOrderEntry;
	removeOrderEntry(arg1 : OrderEntry) : void;
	rearrangeOrderEntries(arg1 : OrderEntry[]) : void;
	clear() : void;
	commit() : void;
	dispose() : void;
	getModuleLibraryTable() : LibraryTable;
	setSdk(arg1 : Sdk) : void;
	setInvalidSdk(arg1 : string, arg2 : string) : void;
	inheritSdk() : void;
	isChanged() : boolean;
	isWritable() : boolean;
	replaceEntryOfType<T extends OrderEntry>(arg1 : Class<T>, arg2 : T) : void;
	getSdkName() : string;
	isDisposed() : boolean;
}


declare interface ModifiableRootModel extends ModuleRootModel {}
export = ModifiableRootModel
