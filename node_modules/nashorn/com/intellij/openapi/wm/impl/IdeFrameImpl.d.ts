import Key = require('nashorn/com/intellij/openapi/util/Key');
import Insets = require('nashorn/java/awt/Insets');
import JComponent = require('nashorn/javax/swing/JComponent');
import Window = require('nashorn/java/awt/Window');
import StatusBar = require('nashorn/com/intellij/openapi/wm/StatusBar');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import BalloonLayout = require('nashorn/com/intellij/ui/BalloonLayout');
import ApplicationInfoEx = require('nashorn/com/intellij/openapi/application/ex/ApplicationInfoEx');
import ActionManagerEx = require('nashorn/com/intellij/openapi/actionSystem/ex/ActionManagerEx');
import DataManager = require('nashorn/com/intellij/ide/DataManager');
import Application = require('nashorn/com/intellij/openapi/application/Application');
import UISettings = require('nashorn/com/intellij/ide/ui/UISettings');
import IdeRootPane = require('nashorn/com/intellij/openapi/wm/impl/IdeRootPane');
import JFrame = require('nashorn/javax/swing/JFrame');
import File = require('nashorn/java/io/File');
import Component = require('nashorn/java/awt/Component');
import IdeFrameEx = require('nashorn/com/intellij/openapi/wm/ex/IdeFrameEx');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');
import Object = require('nashorn/java/lang/Object');
import StringBuilder = require('nashorn/java/lang/StringBuilder');

declare class IdeFrameImpl {
	static SHOULD_OPEN_IN_FULL_SCREEN : Key<boolean>;
	insets : Insets;
	component : JComponent;
	static activeFrame : Window;
	statusBar : StatusBar;
	project : Project;
	balloonLayout : BalloonLayout;
	inFullScreen : boolean;
	constructor(arg1 : ApplicationInfoEx, arg2 : ActionManagerEx, arg3 : DataManager, arg4 : Application);
	a() : void;
	createRootPane(arg1 : ActionManagerEx, arg2 : UISettings, arg3 : DataManager, arg4 : Application) : IdeRootPane;
	static getActiveFrame() : Window;
	b() : void;
	setFileTitle(arg1 : string) : void;
	c() : void;
	static updateTitle(arg1 : JFrame, arg2 : string, arg3 : string, arg4 : File) : void;
	updateView() : void;
	setProject(arg1 : Project) : void;
	a(arg1 : Project) : void;
	disposeImpl() : void;
	d() : boolean;
	storeFullScreenStateIfNeeded() : void;
	storeFullScreenStateIfNeeded(arg1 : boolean) : void;
	static shouldRestoreFullScreen(arg1 : Project) : boolean;
	static findNearestModalComponent(arg1 : Component) : Component;
}


declare interface IdeFrameImpl extends JFrame, IdeFrameEx, DataProvider {}

declare module IdeFrameImpl {
	class Builder extends Object {
		sb : StringBuilder;
		append(arg1 : string) : IdeFrameImpl.Builder;
	}
}

export = IdeFrameImpl
