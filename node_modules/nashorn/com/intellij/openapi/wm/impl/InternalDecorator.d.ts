import WindowInfoImpl = require('nashorn/com/intellij/openapi/wm/impl/WindowInfoImpl');
import InternalDecoratorListener = require('nashorn/com/intellij/openapi/wm/impl/InternalDecoratorListener');
import ToolWindowAnchor = require('nashorn/com/intellij/openapi/wm/ToolWindowAnchor');
import ToolWindowType = require('nashorn/com/intellij/openapi/wm/ToolWindowType');
import ToolWindowContentUiType = require('nashorn/com/intellij/openapi/wm/ToolWindowContentUiType');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import ActionGroup = require('nashorn/com/intellij/openapi/actionSystem/ActionGroup');
import DefaultActionGroup = require('nashorn/com/intellij/openapi/actionSystem/DefaultActionGroup');
import ToolWindowImpl = require('nashorn/com/intellij/openapi/wm/impl/ToolWindowImpl');
import JPanel = require('nashorn/javax/swing/JPanel');
import Queryable = require('nashorn/com/intellij/openapi/ui/Queryable');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');
import Cursor = require('nashorn/java/awt/Cursor');
import MouseEvent = require('nashorn/java/awt/event/MouseEvent');
import MouseAdapter = require('nashorn/java/awt/event/MouseAdapter');
import ToggleAction = require('nashorn/com/intellij/openapi/actionSystem/ToggleAction');
import DumbAware = require('nashorn/com/intellij/openapi/project/DumbAware');
import Component = require('nashorn/java/awt/Component');
import Graphics = require('nashorn/java/awt/Graphics');
import Border = require('nashorn/javax/swing/border/Border');

declare class InternalDecorator {
	static TOGGLE_PINNED_MODE_ACTION_ID : string;
	static TOGGLE_DOCK_MODE_ACTION_ID : string;
	static TOGGLE_FLOATING_MODE_ACTION_ID : string;
	static TOGGLE_SIDE_MODE_ACTION_ID : string;
	focused : boolean;
	headerHeight : number;
	isFocused() : boolean;
	apply(arg1 : WindowInfoImpl) : void;
	addInternalDecoratorListener(arg1 : InternalDecoratorListener) : void;
	removeInternalDecoratorListener(arg1 : InternalDecoratorListener) : void;
	dispose() : void;
	a(arg1 : ToolWindowAnchor) : void;
	a(arg1 : boolean) : void;
	fireHidden() : void;
	fireHiddenSide() : void;
	fireActivated() : void;
	a(arg1 : ToolWindowType) : void;
	fireResized() : void;
	b(arg1 : boolean) : void;
	a(arg1 : ToolWindowContentUiType) : void;
	a() : void;
	setTitleActions(arg1 : AnAction[]) : void;
	createPopupGroup() : ActionGroup;
	createPopupGroup(arg1 : boolean) : ActionGroup;
	b() : DefaultActionGroup;
	static a(arg1 : DefaultActionGroup, arg2 : ActionGroup) : void;
	getToolWindow() : ToolWindowImpl;
	getWindowInfo() : WindowInfoImpl;
	getHeaderHeight() : number;
	setAdditionalGearActions(arg1 : ActionGroup) : void;
}


declare interface InternalDecorator extends JPanel, Queryable, DataProvider {}

declare module InternalDecorator {
	class MyDivider {
		cursor : Cursor;
		isInDragZone(arg1 : MouseEvent) : boolean;
	}


	interface MyDivider extends JPanel {}

	module MyDivider {
		class MyMouseAdapter {
			a(arg1 : MouseEvent) : void;
		}


		interface MyMouseAdapter extends MouseAdapter {}	}
	class ToggleContentUiTypeAction {
	}


	interface ToggleContentUiTypeAction extends ToggleAction, DumbAware {}	class HideAction {
		static HIDE_ACTIVE_WINDOW_ACTION_ID : string;
		constructor();
	}


	interface HideAction extends AnAction, DumbAware {}	class ToggleSideModeAction {
		constructor();
	}


	interface ToggleSideModeAction extends ToggleAction, DumbAware {}	class ToggleFloatingModeAction {
		constructor();
	}


	interface ToggleFloatingModeAction extends ToggleAction, DumbAware {}	class ToggleDockModeAction {
		constructor();
	}


	interface ToggleDockModeAction extends ToggleAction, DumbAware {}	class TogglePinnedModeAction {
		constructor();
	}


	interface TogglePinnedModeAction extends ToggleAction, DumbAware {}	class ChangeAnchorAction {
		constructor(arg1 : string, arg2 : ToolWindowAnchor);
	}


	interface ChangeAnchorAction extends AnAction, DumbAware {}	class InnerPanelBorder {
		borderOpaque : boolean;
		a(arg1 : Component, arg2 : Graphics, arg3 : number, arg4 : number, arg5 : number, arg6 : number) : void;
	}


	interface InnerPanelBorder extends Border {}}

export = InternalDecorator
