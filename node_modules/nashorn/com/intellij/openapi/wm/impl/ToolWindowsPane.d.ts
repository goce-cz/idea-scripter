import Project = require('nashorn/com/intellij/openapi/project/Project');
import JComponent = require('nashorn/javax/swing/JComponent');
import StripeButton = require('nashorn/com/intellij/openapi/wm/impl/StripeButton');
import WindowInfoImpl = require('nashorn/com/intellij/openapi/wm/impl/WindowInfoImpl');
import Comparator = require('nashorn/java/util/Comparator');
import Runnable = require('nashorn/java/lang/Runnable');
import FinalizableCommand = require('nashorn/com/intellij/openapi/wm/impl/commands/FinalizableCommand');
import InternalDecorator = require('nashorn/com/intellij/openapi/wm/impl/InternalDecorator');
import Component = require('nashorn/java/awt/Component');
import ToolWindowAnchor = require('nashorn/com/intellij/openapi/wm/ToolWindowAnchor');
import Stripe = require('nashorn/com/intellij/openapi/wm/impl/Stripe');
import Rectangle = require('nashorn/java/awt/Rectangle');
import ToolWindow = require('nashorn/com/intellij/openapi/wm/ToolWindow');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import JBLayeredPane = require('nashorn/com/intellij/ui/components/JBLayeredPane');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Image = require('nashorn/java/awt/Image');
import SoftReference = require('nashorn/com/intellij/reference/SoftReference');
import BufferedImage = require('nashorn/java/awt/image/BufferedImage');
import UISettingsListener = require('nashorn/com/intellij/ide/ui/UISettingsListener');
import Object = require('nashorn/java/lang/Object');

declare class ToolWindowsPane {
	project : Project;
	myLayeredPane : JComponent;
	getProject() : Project;
	createAddButtonCmd(arg1 : StripeButton, arg2 : WindowInfoImpl, arg3 : Comparator<StripeButton>, arg4 : Runnable) : FinalizableCommand;
	createAddDecoratorCmd(arg1 : InternalDecorator, arg2 : WindowInfoImpl, arg3 : boolean, arg4 : Runnable) : FinalizableCommand;
	createRemoveButtonCmd(arg1 : string, arg2 : Runnable) : FinalizableCommand;
	createRemoveDecoratorCmd(arg1 : string, arg2 : boolean, arg3 : Runnable) : FinalizableCommand;
	createSetEditorComponentCmd(arg1 : JComponent, arg2 : Runnable) : FinalizableCommand;
	createUpdateButtonPositionCmd(arg1 : string, arg2 : Runnable) : FinalizableCommand;
	getMyLayeredPane() : JComponent;
	a(arg1 : string) : StripeButton;
	b(arg1 : string) : Component;
	c(arg1 : string) : WindowInfoImpl;
	d(arg1 : string) : WindowInfoImpl;
	a(arg1 : JComponent, arg2 : ToolWindowAnchor, arg3 : number) : void;
	a(arg1 : ToolWindowAnchor) : JComponent;
	a(arg1 : string, arg2 : number) : number;
	a(arg1 : ToolWindowAnchor, arg2 : boolean) : WindowInfoImpl;
	setDocumentComponent(arg1 : JComponent) : void;
	a() : void;
	getStripeFor(arg1 : string) : Stripe;
	getStripeFor(arg1 : Rectangle, arg2 : Stripe) : Stripe;
	startDrag() : void;
	stopDrag() : void;
	stretchWidth(arg1 : ToolWindow, arg2 : number) : void;
	stretchHeight(arg1 : ToolWindow, arg2 : number) : void;
	a(arg1 : ToolWindow, arg2 : number) : void;
	a(arg1 : ToolWindow) : Pair<ToolWindowsPane.Resizer, Component>;
	b() : void;
	isMaximized(arg1 : ToolWindow) : boolean;
	setMaximized(arg1 : ToolWindow, arg2 : boolean) : void;
	setStripesOverlayed(arg1 : boolean) : void;
	static a(arg1 : number) : number;
}


declare interface ToolWindowsPane extends JBLayeredPane, Disposable {}

declare module ToolWindowsPane {
	class MyLayeredPane {
		bottomImage : Image;
		topImage : Image;
		constructor(arg1 : JComponent);
		getBottomImage() : Image;
		getTopImage() : Image;
		a(arg1 : SoftReference<BufferedImage>) : Pair<BufferedImage, SoftReference<BufferedImage>>;
		setBoundsInPaletteLayer(arg1 : Component, arg2 : ToolWindowAnchor, arg3 : number) : void;
	}


	interface MyLayeredPane extends JBLayeredPane {}	class MyUISettingsListenerImpl {
	}


	interface MyUISettingsListenerImpl extends UISettingsListener {}	class UpdateButtonPositionCmd {
	}


	interface UpdateButtonPositionCmd extends FinalizableCommand {}	class SetEditorComponentCmd {
		constructor(arg1 : JComponent, arg2 : Runnable);
	}


	interface SetEditorComponentCmd extends FinalizableCommand {}	class RemoveSlidingComponentCmd {
		constructor(arg1 : Component, arg2 : WindowInfoImpl, arg3 : boolean, arg4 : Runnable);
	}


	interface RemoveSlidingComponentCmd extends FinalizableCommand {}	class RemoveSplitAndDockedComponentCmd {
	}


	interface RemoveSplitAndDockedComponentCmd extends FinalizableCommand {}	class RemoveDockedComponentCmd {
		constructor(arg1 : WindowInfoImpl, arg2 : boolean, arg3 : Runnable);
	}


	interface RemoveDockedComponentCmd extends FinalizableCommand {}	class RemoveToolStripeButtonCmd {
		constructor(arg1 : StripeButton, arg2 : WindowInfoImpl, arg3 : Runnable);
	}


	interface RemoveToolStripeButtonCmd extends FinalizableCommand {}	class AddToolStripeButtonCmd {
		constructor(arg1 : StripeButton, arg2 : WindowInfoImpl, arg3 : Comparator<StripeButton>, arg4 : Runnable);
	}


	interface AddToolStripeButtonCmd extends FinalizableCommand {}	class AddSlidingComponentCmd {
		constructor(arg1 : Component, arg2 : WindowInfoImpl, arg3 : boolean, arg4 : Runnable);
	}


	interface AddSlidingComponentCmd extends FinalizableCommand {}	class AddAndSplitDockedComponentCmd {
	}


	interface AddAndSplitDockedComponentCmd extends FinalizableCommand {}	class AddDockedComponentCmd {
		constructor(arg1 : JComponent, arg2 : WindowInfoImpl, arg3 : boolean, arg4 : Runnable);
	}


	interface AddDockedComponentCmd extends FinalizableCommand {}	class Resizer extends Object {
		setSize(arg1 : number) : void;
	}


	module Resizer {
		class LayeredPane {
			_setSize(arg1 : number) : void;
		}


		interface LayeredPane extends ToolWindowsPane.Resizer {}

		module LayeredPane {
			class Bottom {
			}


			interface Bottom extends ToolWindowsPane.Resizer.LayeredPane {}			class Top {
			}


			interface Top extends ToolWindowsPane.Resizer.LayeredPane {}			class Right {
			}


			interface Right extends ToolWindowsPane.Resizer.LayeredPane {}			class Left {
			}


			interface Left extends ToolWindowsPane.Resizer.LayeredPane {}		}
		class Splitter {
		}


		interface Splitter extends ToolWindowsPane.Resizer {}

		module Splitter {
			class LastComponent {
			}


			interface LastComponent extends ToolWindowsPane.Resizer.Splitter {}			class FirstComponent {
			}


			interface FirstComponent extends ToolWindowsPane.Resizer.Splitter {}		}
	}
}

export = ToolWindowsPane
