import Set = require('nashorn/java/util/Set');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import DesktopLayout = require('nashorn/com/intellij/openapi/wm/impl/DesktopLayout');
import IdeFocusManager = require('nashorn/com/intellij/openapi/wm/IdeFocusManager');
import WindowManagerEx = require('nashorn/com/intellij/openapi/wm/ex/WindowManagerEx');
import FileEditorManager = require('nashorn/com/intellij/openapi/fileEditor/FileEditorManager');
import ActionManager = require('nashorn/com/intellij/openapi/actionSystem/ActionManager');
import LafManager = require('nashorn/com/intellij/ide/ui/LafManager');
import KeyEvent = require('nashorn/java/awt/event/KeyEvent');
import JComponent = require('nashorn/javax/swing/JComponent');
import List = require('nashorn/java/util/List');
import FinalizableCommand = require('nashorn/com/intellij/openapi/wm/impl/commands/FinalizableCommand');
import ArrayList = require('nashorn/java/util/ArrayList');
import WindowInfoImpl = require('nashorn/com/intellij/openapi/wm/impl/WindowInfoImpl');
import FloatingDecorator = require('nashorn/com/intellij/openapi/wm/impl/FloatingDecorator');
import InternalDecorator = require('nashorn/com/intellij/openapi/wm/impl/InternalDecorator');
import StripeButton = require('nashorn/com/intellij/openapi/wm/impl/StripeButton');
import ToolWindowAnchor = require('nashorn/com/intellij/openapi/wm/ToolWindowAnchor');
import ToolWindow = require('nashorn/com/intellij/openapi/wm/ToolWindow');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import ToolWindowContentUiType = require('nashorn/com/intellij/openapi/wm/ToolWindowContentUiType');
import ToolWindowType = require('nashorn/com/intellij/openapi/wm/ToolWindowType');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import EditorsSplitters = require('nashorn/com/intellij/openapi/fileEditor/impl/EditorsSplitters');
import Window = require('nashorn/java/awt/Window');
import ToolWindowImpl = require('nashorn/com/intellij/openapi/wm/impl/ToolWindowImpl');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Component = require('nashorn/java/awt/Component');
import FocusCommand = require('nashorn/com/intellij/openapi/wm/FocusCommand');
import Runnable = require('nashorn/java/lang/Runnable');
import Expirable = require('nashorn/com/intellij/openapi/util/Expirable');
import ToolWindowManagerEx = require('nashorn/com/intellij/openapi/wm/ex/ToolWindowManagerEx');
import ProjectComponent = require('nashorn/com/intellij/openapi/components/ProjectComponent');
import JDOMExternalizable = require('nashorn/com/intellij/openapi/util/JDOMExternalizable');
import LafManagerListener = require('nashorn/com/intellij/ide/ui/LafManagerListener');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import InternalDecoratorListener = require('nashorn/com/intellij/openapi/wm/impl/InternalDecoratorListener');
import FocusWatcher = require('nashorn/com/intellij/openapi/wm/FocusWatcher');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import HyperlinkListener = require('nashorn/javax/swing/event/HyperlinkListener');
import Enum = require('nashorn/java/lang/Enum');

declare class ToolWindowManagerImpl {
	static activateToolWindowVKs : Set<number>;
	project : Project;
	toolWindowIds : string[];
	activeToolWindowId : string;
	lastActiveToolWindowId : string;
	layout : DesktopLayout;
	layoutToRestoreLater : DesktopLayout;
	focusManager : IdeFocusManager;
	editorComponentActive : boolean;
	componentName : string;
	constructor(arg1 : Project, arg2 : WindowManagerEx, arg3 : FileEditorManager, arg4 : ActionManager, arg5 : LafManager);
	isToolWindowRegistered(arg1 : string) : boolean;
	a() : void;
	dispatchKeyEvent(arg1 : KeyEvent) : boolean;
	static getActivateToolWindowVKs() : Set<number>;
	b() : void;
	a(arg1 : boolean) : void;
	c() : void;
	d() : void;
	e() : boolean;
	static a(arg1 : Project) : IdeFocusManager;
	getProject() : Project;
	f() : void;
	b(arg1 : Project) : JComponent;
	g() : void;
	execute(arg1 : List<FinalizableCommand>) : void;
	b(arg1 : boolean) : void;
	a(arg1 : boolean, arg2 : boolean) : void;
	a(arg1 : List<FinalizableCommand>, arg2 : boolean) : void;
	a(arg1 : ArrayList<FinalizableCommand>, arg2 : string) : void;
	a(arg1 : WindowInfoImpl) : boolean;
	a(arg1 : string, arg2 : boolean, arg3 : List<FinalizableCommand>, arg4 : boolean, arg5 : boolean) : void;
	activateToolWindow(arg1 : string, arg2 : boolean, arg3 : boolean) : void;
	a(arg1 : string, arg2 : List<FinalizableCommand>, arg3 : boolean, arg4 : boolean) : void;
	a(arg1 : string) : void;
	a(arg1 : string, arg2 : boolean, arg3 : List<FinalizableCommand>) : void;
	b(arg1 : string) : FloatingDecorator;
	c(arg1 : string) : InternalDecorator;
	d(arg1 : string) : StripeButton;
	e(arg1 : string) : WindowInfoImpl;
	showToolWindow(arg1 : string) : void;
	hideToolWindow(arg1 : string, arg2 : boolean, arg3 : boolean) : void;
	static h() : boolean;
	b(arg1 : string, arg2 : boolean, arg3 : List<FinalizableCommand>) : void;
	a(arg1 : string, arg2 : JComponent, arg3 : ToolWindowAnchor, arg4 : boolean) : ToolWindow;
	a(arg1 : string, arg2 : JComponent, arg3 : ToolWindowAnchor, arg4 : boolean, arg5 : boolean, arg6 : boolean) : ToolWindow;
	a(arg1 : string, arg2 : Disposable, arg3 : ToolWindow) : ToolWindow;
	getToolWindowAnchor(arg1 : string) : ToolWindowAnchor;
	setToolWindowAnchor(arg1 : string, arg2 : ToolWindowAnchor) : void;
	setToolWindowAnchor(arg1 : string, arg2 : ToolWindowAnchor, arg3 : number) : void;
	a(arg1 : string, arg2 : ToolWindowAnchor, arg3 : number, arg4 : ArrayList<FinalizableCommand>) : void;
	isSplitMode(arg1 : string) : boolean;
	getContentUiType(arg1 : string) : ToolWindowContentUiType;
	setSideTool(arg1 : string, arg2 : boolean) : void;
	setContentUiType(arg1 : string, arg2 : ToolWindowContentUiType) : void;
	setSideToolAndAnchor(arg1 : string, arg2 : ToolWindowAnchor, arg3 : number, arg4 : boolean) : void;
	a(arg1 : string, arg2 : boolean, arg3 : ArrayList<FinalizableCommand>) : void;
	getToolWindowInternalType(arg1 : string) : ToolWindowType;
	getToolWindowType(arg1 : string) : ToolWindowType;
	f(arg1 : string) : void;
	i() : void;
	isToolWindowActive(arg1 : string) : boolean;
	isToolWindowAutoHide(arg1 : string) : boolean;
	isToolWindowVisible(arg1 : string) : boolean;
	setToolWindowAutoHide(arg1 : string, arg2 : boolean) : void;
	b(arg1 : string, arg2 : boolean, arg3 : ArrayList<FinalizableCommand>) : void;
	setToolWindowType(arg1 : string, arg2 : ToolWindowType) : void;
	a(arg1 : string, arg2 : ToolWindowType, arg3 : ArrayList<FinalizableCommand>) : void;
	a(arg1 : WindowInfoImpl, arg2 : List<FinalizableCommand>) : void;
	a(arg1 : InternalDecorator, arg2 : WindowInfoImpl, arg3 : boolean, arg4 : List<FinalizableCommand>) : void;
	c(arg1 : string, arg2 : boolean, arg3 : List<FinalizableCommand>) : void;
	b(arg1 : WindowInfoImpl, arg2 : List<FinalizableCommand>) : void;
	a(arg1 : StripeButton, arg2 : WindowInfoImpl, arg3 : List<FinalizableCommand>) : void;
	a(arg1 : string, arg2 : List<FinalizableCommand>) : void;
	b(arg1 : List<FinalizableCommand>, arg2 : boolean) : ActionCallback;
	a(arg1 : string, arg2 : List<FinalizableCommand>, arg3 : boolean) : void;
	appendSetEditorComponentCmd(arg1 : JComponent, arg2 : List<FinalizableCommand>) : void;
	a(arg1 : List<FinalizableCommand>) : void;
	j() : EditorsSplitters;
	b(arg1 : WindowInfoImpl) : boolean;
	static a(arg1 : Window) : boolean;
	b(arg1 : string, arg2 : List<FinalizableCommand>) : void;
	setDefaultState(arg1 : ToolWindowImpl, arg2 : ToolWindowAnchor, arg3 : ToolWindowType, arg4 : Rectangle) : void;
	setDefaultContentUiType(arg1 : ToolWindowImpl, arg2 : ToolWindowContentUiType) : void;
	stretchWidth(arg1 : ToolWindowImpl, arg2 : number) : void;
	stretchHeight(arg1 : ToolWindowImpl, arg2 : number) : void;
	k() : void;
	requestDefaultFocus(arg1 : boolean) : ActionCallback;
	g(arg1 : string) : void;
	c(arg1 : boolean) : ActionCallback;
	requestFocus(arg1 : Component, arg2 : boolean) : ActionCallback;
	requestFocus(arg1 : FocusCommand, arg2 : boolean) : ActionCallback;
	doWhenFocusSettlesDown(arg1 : Runnable) : void;
	dispatch(arg1 : KeyEvent) : boolean;
	getTimestamp(arg1 : boolean) : Expirable;
}


declare interface ToolWindowManagerImpl extends ToolWindowManagerEx, ProjectComponent, JDOMExternalizable {}

declare module ToolWindowManagerImpl {
	class MyLafManagerListener {
	}


	interface MyLafManagerListener extends LafManagerListener {}	class MyUIManagerPropertyChangeListener {
	}


	interface MyUIManagerPropertyChangeListener extends PropertyChangeListener {}	class MyInternalDecoratorListener {
	}


	interface MyInternalDecoratorListener extends InternalDecoratorListener {}	class MyToolWindowPropertyChangeListener {
	}


	interface MyToolWindowPropertyChangeListener extends PropertyChangeListener {}	class ToolWindowFocusWatcher {
		deinstall() : void;
	}


	interface ToolWindowFocusWatcher extends FocusWatcher {}	class EditorComponentFocusWatcher {
	}


	interface EditorComponentFocusWatcher extends FocusWatcher {}	class RemoveFloatingDecoratorCmd {
		expireCondition : Condition;
	}


	interface RemoveFloatingDecoratorCmd extends FinalizableCommand {}	class AddFloatingDecoratorCmd {
	}


	interface AddFloatingDecoratorCmd extends FinalizableCommand {}	class BalloonHyperlinkListener {
		constructor(arg1 : HyperlinkListener);
	}


	interface BalloonHyperlinkListener extends HyperlinkListener {}	class KeyState {
		static waiting : ToolWindowManagerImpl.KeyState;
		static pressed : ToolWindowManagerImpl.KeyState;
		static released : ToolWindowManagerImpl.KeyState;
		static hold : ToolWindowManagerImpl.KeyState;
	}


	interface KeyState extends Enum<ToolWindowManagerImpl.KeyState> {}}

export = ToolWindowManagerImpl
