import Object = require('nashorn/java/lang/Object');
import IdeFocusManager = require('nashorn/com/intellij/openapi/wm/IdeFocusManager');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import JComponent = require('nashorn/javax/swing/JComponent');
import ToolWindowAnchor = require('nashorn/com/intellij/openapi/wm/ToolWindowAnchor');
import ToolWindow = require('nashorn/com/intellij/openapi/wm/ToolWindow');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Runnable = require('nashorn/java/lang/Runnable');
import MessageType = require('nashorn/com/intellij/openapi/ui/MessageType');
import Icon = require('nashorn/javax/swing/Icon');
import HyperlinkListener = require('nashorn/javax/swing/event/HyperlinkListener');
import Balloon = require('nashorn/com/intellij/openapi/ui/popup/Balloon');

declare class ToolWindowManager extends Object {
	editorComponentActive : boolean;
	toolWindowIds : string[];
	activeToolWindowId : string;
	focusManager : IdeFocusManager;
	constructor();
	canShowNotification(arg1 : string) : boolean;
	static getInstance(arg1 : Project) : ToolWindowManager;
	registerToolWindow(arg1 : string, arg2 : JComponent, arg3 : ToolWindowAnchor) : ToolWindow;
	registerToolWindow(arg1 : string, arg2 : JComponent, arg3 : ToolWindowAnchor, arg4 : Disposable) : ToolWindow;
	registerToolWindow(arg1 : string, arg2 : JComponent, arg3 : ToolWindowAnchor, arg4 : Disposable, arg5 : boolean) : ToolWindow;
	registerToolWindow(arg1 : string, arg2 : JComponent, arg3 : ToolWindowAnchor, arg4 : Disposable, arg5 : boolean, arg6 : boolean) : ToolWindow;
	registerToolWindow(arg1 : string, arg2 : boolean, arg3 : ToolWindowAnchor) : ToolWindow;
	registerToolWindow(arg1 : string, arg2 : boolean, arg3 : ToolWindowAnchor, arg4 : boolean) : ToolWindow;
	registerToolWindow(arg1 : string, arg2 : boolean, arg3 : ToolWindowAnchor, arg4 : Disposable, arg5 : boolean) : ToolWindow;
	registerToolWindow(arg1 : string, arg2 : boolean, arg3 : ToolWindowAnchor, arg4 : Disposable) : ToolWindow;
	unregisterToolWindow(arg1 : string) : void;
	activateEditorComponent() : void;
	isEditorComponentActive() : boolean;
	getToolWindowIds() : string[];
	getActiveToolWindowId() : string;
	getToolWindow(arg1 : string) : ToolWindow;
	invokeLater(arg1 : Runnable) : void;
	getFocusManager() : IdeFocusManager;
	notifyByBalloon(arg1 : string, arg2 : MessageType, arg3 : string) : void;
	notifyByBalloon(arg1 : string, arg2 : MessageType, arg3 : string, arg4 : Icon, arg5 : HyperlinkListener) : void;
	getToolWindowBalloon(arg1 : string) : Balloon;
	isMaximized(arg1 : ToolWindow) : boolean;
	setMaximized(arg1 : ToolWindow, arg2 : boolean) : void;
}

export = ToolWindowManager
