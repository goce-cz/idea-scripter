import Object = require('nashorn/java/lang/Object');
import IdeFrame = require('nashorn/com/intellij/openapi/wm/IdeFrame');
import Window = require('nashorn/java/awt/Window');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import StatusBar = require('nashorn/com/intellij/openapi/wm/StatusBar');
import Component = require('nashorn/java/awt/Component');
import JFrame = require('nashorn/javax/swing/JFrame');
import WindowManagerListener = require('nashorn/com/intellij/openapi/wm/WindowManagerListener');

declare class WindowManager extends Object {
	alphaModeSupported : boolean;
	static instance : WindowManager;
	allProjectFrames : IdeFrame[];
	fullScreenSupportedInCurrentOS : boolean;
	constructor();
	isAlphaModeSupported() : boolean;
	setAlphaModeRatio(arg1 : Window, arg2 : number) : void;
	isAlphaModeEnabled(arg1 : Window) : boolean;
	setAlphaModeEnabled(arg1 : Window, arg2 : boolean) : void;
	static getInstance() : WindowManager;
	doNotSuggestAsParent(arg1 : Window) : void;
	suggestParentWindow(arg1 : Project) : Window;
	getStatusBar(arg1 : Project) : StatusBar;
	getStatusBar(arg1 : Component) : StatusBar;
	getStatusBar(arg1 : Component, arg2 : Project) : StatusBar;
	getFrame(arg1 : Project) : JFrame;
	getIdeFrame(arg1 : Project) : IdeFrame;
	isInsideScreenBounds(arg1 : number, arg2 : number, arg3 : number) : boolean;
	isInsideScreenBounds(arg1 : number, arg2 : number) : boolean;
	getAllProjectFrames() : IdeFrame[];
	findVisibleFrame() : JFrame;
	addListener(arg1 : WindowManagerListener) : void;
	removeListener(arg1 : WindowManagerListener) : void;
	isFullScreenSupportedInCurrentOS() : boolean;
	requestUserAttention(arg1 : IdeFrame, arg2 : boolean) : void;
}

export = WindowManager
