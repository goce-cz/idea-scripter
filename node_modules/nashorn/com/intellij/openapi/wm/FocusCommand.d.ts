import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import KeyEventProcessor = require('nashorn/com/intellij/openapi/wm/KeyEventProcessor');
import Component = require('nashorn/java/awt/Component');
import Throwable = require('nashorn/java/lang/Throwable');
import Expirable = require('nashorn/com/intellij/openapi/util/Expirable');
import ActiveRunnable = require('nashorn/com/intellij/openapi/util/ActiveRunnable');

declare class FocusCommand {
	forced : boolean;
	callback : ActionCallback;
	expired : boolean;
	processor : KeyEventProcessor;
	dominationComponent : Component;
	allocation : Throwable;
	isForced() : boolean;
	setForced(arg1 : boolean) : void;
	getCallback() : ActionCallback;
	setCallback(arg1 : ActionCallback) : void;
	canExecuteOnInactiveApp() : boolean;
	getProcessor() : KeyEventProcessor;
	invalidatesRequestors() : boolean;
	setExpirable(arg1 : Expirable) : FocusCommand;
	setToInvalidateRequestors(arg1 : boolean) : FocusCommand;
	getDominationComponent() : Component;
	dominatesOver(arg1 : FocusCommand) : boolean;
	saveAllocation() : FocusCommand;
	getAllocation() : Throwable;
	canFocusChangeFrom(arg1 : Component) : boolean;
}


declare interface FocusCommand extends ActiveRunnable, Expirable {}

declare module FocusCommand {
	class ByComponent {
		expired : boolean;
		component : Component;
		constructor(arg1 : Component, arg2 : Throwable);
		constructor(arg1 : Component, arg2 : Component, arg3 : Throwable);
		clear() : void;
		getComponent() : Component;
	}


	interface ByComponent extends FocusCommand {}}

export = FocusCommand
