import FocusRequestor = require('nashorn/com/intellij/openapi/wm/FocusRequestor');
import Component = require('nashorn/java/awt/Component');
import IdeFrame = require('nashorn/com/intellij/openapi/wm/IdeFrame');
import JComponent = require('nashorn/javax/swing/JComponent');
import Runnable = require('nashorn/java/lang/Runnable');
import ExpirableRunnable = require('nashorn/com/intellij/openapi/util/ExpirableRunnable');
import KeyEvent = require('nashorn/java/awt/event/KeyEvent');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import Expirable = require('nashorn/com/intellij/openapi/util/Expirable');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import Project = require('nashorn/com/intellij/openapi/project/Project');

declare class IdeFocusManager {
	focusBeingTransferred : boolean;
	focusTransferEnabled : boolean;
	furtherRequestor : FocusRequestor;
	focusOwner : Component;
	lastFocusedFrame : IdeFrame;
	static globalInstance : IdeFocusManager;
	constructor();
	getFocusTargetFor(arg1 : JComponent) : JComponent;
	doWhenFocusSettlesDown(arg1 : Runnable) : void;
	doWhenFocusSettlesDown(arg1 : ExpirableRunnable) : void;
	getFocusedDescendantFor(arg1 : Component) : Component;
	dispatch(arg1 : KeyEvent) : boolean;
	typeAheadUntil(arg1 : ActionCallback) : void;
	isFocusBeingTransferred() : boolean;
	requestDefaultFocus(arg1 : boolean) : ActionCallback;
	isFocusTransferEnabled() : boolean;
	getTimestamp(arg1 : boolean) : Expirable;
	getFurtherRequestor() : FocusRequestor;
	revalidateFocus(arg1 : ExpirableRunnable) : void;
	setTypeaheadEnabled(arg1 : boolean) : void;
	getFocusOwner() : Component;
	runOnOwnContext(arg1 : DataContext, arg2 : Runnable) : void;
	getLastFocusedFor(arg1 : IdeFrame) : Component;
	getLastFocusedFrame() : IdeFrame;
	toFront(arg1 : JComponent) : void;
	static getInstance(arg1 : Project) : IdeFocusManager;
	static findInstanceByContext(arg1 : DataContext) : IdeFocusManager;
	static findInstanceByComponent(arg1 : Component) : IdeFocusManager;
	static findByComponent(arg1 : Component) : IdeFocusManager;
	static getInstanceSafe(arg1 : Project) : IdeFocusManager;
	static findInstance() : IdeFocusManager;
	static getGlobalInstance() : IdeFocusManager;
}


declare interface IdeFocusManager extends FocusRequestor {}
export = IdeFocusManager
