import Project = require('nashorn/com/intellij/openapi/project/Project');
import Collection = require('nashorn/java/util/Collection');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import RunResult = require('nashorn/com/intellij/openapi/application/RunResult');
import UndoConfirmationPolicy = require('nashorn/com/intellij/openapi/command/UndoConfirmationPolicy');
import Runnable = require('nashorn/java/lang/Runnable');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import Throwable = require('nashorn/java/lang/Throwable');
import ThrowableComputable = require('nashorn/com/intellij/openapi/util/ThrowableComputable');
import BaseActionRunnable = require('nashorn/com/intellij/openapi/application/BaseActionRunnable');

declare class WriteCommandAction<T> {
	project : Project;
	commandName : string;
	groupID : string;
	getProject() : Project;
	getCommandName() : string;
	getGroupID() : string;
	static ensureFilesWritable(arg1 : Project, arg2 : Collection<PsiFile>) : boolean;
	performWriteCommandAction(arg1 : RunResult<T>) : void;
	isGlobalUndoAction() : boolean;
	getUndoConfirmationPolicy() : UndoConfirmationPolicy;
	performCommand() : void;
	static runWriteCommandAction(arg1 : Project, arg2 : Runnable) : void;
	static runWriteCommandAction<T>(arg1 : Project, arg2 : Computable<T>) : T;
	static runWriteCommandAction<T, E extends Throwable>(arg1 : Project, arg2 : ThrowableComputable<T, E>) : T;
}


declare interface WriteCommandAction<T> extends BaseActionRunnable<T> {}

declare module WriteCommandAction {
	class Simple<T> {
		run() : void;
	}


	interface Simple<T> extends WriteCommandAction<T> {}}

export = WriteCommandAction
