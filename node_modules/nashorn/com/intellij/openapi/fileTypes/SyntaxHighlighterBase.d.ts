import TextAttributesKey = require('nashorn/com/intellij/openapi/editor/colors/TextAttributesKey');
import Map = require('nashorn/java/util/Map');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import SyntaxHighlighter = require('nashorn/com/intellij/openapi/fileTypes/SyntaxHighlighter');

declare class SyntaxHighlighterBase {
	constructor();
	static pack(arg1 : TextAttributesKey) : TextAttributesKey[];
	static pack(arg1 : TextAttributesKey, arg2 : TextAttributesKey) : TextAttributesKey[];
	static pack(arg1 : TextAttributesKey[], arg2 : TextAttributesKey) : TextAttributesKey[];
	static pack(arg1 : TextAttributesKey, arg2 : TextAttributesKey[]) : TextAttributesKey[];
	static pack(arg1 : TextAttributesKey[], arg2 : TextAttributesKey, arg3 : TextAttributesKey) : TextAttributesKey[];
	static fillMap(arg1 : Map<IElementType, TextAttributesKey>, arg2 : TokenSet, arg3 : TextAttributesKey) : void;
	static fillMap(arg1 : Map<IElementType, TextAttributesKey>, arg2 : TextAttributesKey, arg3 : IElementType[]) : void;
	static safeMap(arg1 : Map<IElementType, TextAttributesKey>, arg2 : TokenSet, arg3 : TextAttributesKey) : void;
	static safeMap(arg1 : Map<IElementType, TextAttributesKey>, arg2 : IElementType, arg3 : TextAttributesKey) : void;
}


declare interface SyntaxHighlighterBase extends SyntaxHighlighter {}
export = SyntaxHighlighterBase
