import Object = require('nashorn/java/lang/Object');
import Getter = require('nashorn/com/intellij/openapi/util/Getter');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import ByteSequence = require('nashorn/com/intellij/openapi/util/io/ByteSequence');
import CharSequence = require('nashorn/java/lang/CharSequence');

declare class FileTypeRegistry extends Object {
	static ourInstanceGetter : Getter<FileTypeRegistry>;
	static instance : FileTypeRegistry;
	registeredFileTypes : FileType[];
	constructor();
	isFileIgnored(arg1 : VirtualFile) : boolean;
	static getInstance() : FileTypeRegistry;
	getRegisteredFileTypes() : FileType[];
	getFileTypeByFile(arg1 : VirtualFile) : FileType;
	getFileTypeByFileName(arg1 : string) : FileType;
	getFileTypeByExtension(arg1 : string) : FileType;
	detectFileTypeFromContent(arg1 : VirtualFile) : FileType;
	findFileTypeByName(arg1 : string) : FileType;
}


declare module FileTypeRegistry {
	class FileTypeDetector extends Object {
		static EP_NAME : ExtensionPointName<FileTypeRegistry.FileTypeDetector>;
		version : number;
		detect(arg1 : VirtualFile, arg2 : ByteSequence, arg3 : CharSequence) : FileType;
		getVersion() : number;
	}
}

export = FileTypeRegistry
