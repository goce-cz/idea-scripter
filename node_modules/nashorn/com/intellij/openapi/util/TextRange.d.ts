import Segment = require('nashorn/com/intellij/openapi/util/Segment');
import CharSequence = require('nashorn/java/lang/CharSequence');
import Object = require('nashorn/java/lang/Object');
import Serializable = require('nashorn/java/io/Serializable');

declare class TextRange {
	static EMPTY_RANGE : TextRange;
	startOffset : number;
	endOffset : number;
	length : number;
	empty : boolean;
	constructor(arg1 : number, arg2 : number);
	getLength() : number;
	contains(arg1 : TextRange) : boolean;
	contains(arg1 : Segment) : boolean;
	containsRange(arg1 : number, arg2 : number) : boolean;
	static containsRange(arg1 : Segment, arg2 : Segment) : boolean;
	containsOffset(arg1 : number) : boolean;
	contains(arg1 : number) : boolean;
	substring(arg1 : string) : string;
	subSequence(arg1 : CharSequence) : CharSequence;
	cutOut(arg1 : TextRange) : TextRange;
	shiftRight(arg1 : number) : TextRange;
	grown(arg1 : number) : TextRange;
	static from(arg1 : number, arg2 : number) : TextRange;
	static create(arg1 : number, arg2 : number) : TextRange;
	static create(arg1 : Segment) : TextRange;
	static areSegmentsEqual(arg1 : Segment, arg2 : Segment) : boolean;
	replace(arg1 : string, arg2 : string) : string;
	intersects(arg1 : TextRange) : boolean;
	intersects(arg1 : Segment) : boolean;
	intersects(arg1 : number, arg2 : number) : boolean;
	intersectsStrict(arg1 : TextRange) : boolean;
	intersectsStrict(arg1 : number, arg2 : number) : boolean;
	intersection(arg1 : TextRange) : TextRange;
	isEmpty() : boolean;
	union(arg1 : TextRange) : TextRange;
	equalsToRange(arg1 : number, arg2 : number) : boolean;
	static allOf(arg1 : string) : TextRange;
	static assertProperRange(arg1 : Segment) : void;
	static assertProperRange(arg1 : Segment, arg2 : Object) : void;
	static assertProperRange(arg1 : number, arg2 : number, arg3 : Object) : void;
}


declare interface TextRange extends Segment, Serializable {}
export = TextRange
