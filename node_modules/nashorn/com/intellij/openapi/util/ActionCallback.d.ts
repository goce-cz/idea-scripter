import Runnable = require('nashorn/java/lang/Runnable');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Object = require('nashorn/java/lang/Object');

declare class ActionCallback {
	static DONE : ActionCallback;
	static REJECTED : ActionCallback;
	done : boolean;
	rejected : boolean;
	processed : boolean;
	error : string;
	constructor();
	constructor(arg1 : string);
	constructor(arg1 : number);
	constructor(arg1 : string, arg2 : number);
	setDone() : void;
	isDone() : boolean;
	isRejected() : boolean;
	isProcessed() : boolean;
	setRejected() : void;
	reject(arg1 : string) : ActionCallback;
	getError() : string;
	doWhenDone(arg1 : Runnable) : ActionCallback;
	doWhenRejected(arg1 : Runnable) : ActionCallback;
	doWhenRejected(arg1 : Consumer<string>) : ActionCallback;
	doWhenProcessed(arg1 : Runnable) : ActionCallback;
	notifyWhenDone(arg1 : ActionCallback) : ActionCallback;
	notifyWhenRejected(arg1 : ActionCallback) : ActionCallback;
	notify(arg1 : ActionCallback) : ActionCallback;
	processOnDone(arg1 : Runnable, arg2 : boolean) : ActionCallback;
	createSetDoneRunnable() : Runnable;
	createSetRejectedRunnable() : Runnable;
	waitFor(arg1 : number) : boolean;
}


declare interface ActionCallback extends Disposable {}

declare module ActionCallback {
	class Chunk extends Object {
		empty : boolean;
		size : number;
		whenProcessed : ActionCallback;
		constructor();
		add(arg1 : ActionCallback) : void;
		create() : ActionCallback;
		isEmpty() : boolean;
		getSize() : number;
		getWhenProcessed() : ActionCallback;
	}
	class Rejected {
		constructor();
	}


	interface Rejected extends ActionCallback {}	class Done {
		constructor();
	}


	interface Done extends ActionCallback {}}

export = ActionCallback
