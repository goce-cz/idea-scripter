import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import Set = require('nashorn/java/util/Set');
import ExtensionPoint = require('nashorn/com/intellij/openapi/extensions/ExtensionPoint');
import KeyedLazyInstance = require('nashorn/com/intellij/util/KeyedLazyInstance');
import ExtensionPointListener = require('nashorn/com/intellij/openapi/extensions/ExtensionPointListener');

declare class KeyedExtensionCollector<T, KeyT> extends Object {
	constructor(arg1 : string);
	resetAreaListener() : void;
	addExplicitExtension(arg1 : KeyT, arg2 : T) : void;
	removeExplicitExtension(arg1 : KeyT, arg2 : T) : void;
	keyToString(arg1 : KeyT) : string;
	forKey(arg1 : KeyT) : List<T>;
	findSingle(arg1 : KeyT) : T;
	buildExtensions(arg1 : string, arg2 : KeyT) : List<T>;
	buildExtensions(arg1 : Set<string>) : List<T>;
	getPoint() : ExtensionPoint<KeyedLazyInstance<T>>;
	hasAnyExtensions() : boolean;
	addListener(arg1 : ExtensionPointListener<T>) : void;
	removeListener(arg1 : ExtensionPointListener<T>) : void;
}

export = KeyedExtensionCollector
