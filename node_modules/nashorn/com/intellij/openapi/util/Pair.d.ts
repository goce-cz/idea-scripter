import Object = require('nashorn/java/lang/Object');
import Function = require('nashorn/com/intellij/util/Function');

declare class Pair<A, B> extends Object {
	first : A;
	second : B;
	constructor(arg1 : A, arg2 : B);
	static create<A, B>(arg1 : A, arg2 : B) : Pair<A, B>;
	static createNonNull<A, B>(arg1 : A, arg2 : B) : Pair.NonNull<A, B>;
	static pair<A, B>(arg1 : A, arg2 : B) : Pair<A, B>;
	static createFunction<A, B>(arg1 : B) : Function<A, Pair<A, B>>;
	static getFirst<T>(arg1 : Pair<T, any>) : T;
	static getSecond<T>(arg1 : Pair<any, T>) : T;
	static empty<A, B>() : Pair<A, B>;
	getFirst() : A;
	getSecond() : B;
}


declare module Pair {
	class NonNull<A, B> {
		constructor(arg1 : A, arg2 : B);
	}


	interface NonNull<A, B> extends Pair<A, B> {}}

export = Pair
