import CharSequence = require('nashorn/java/lang/CharSequence');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import DocumentListener = require('nashorn/com/intellij/openapi/editor/event/DocumentListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import UserDataHolder = require('nashorn/com/intellij/openapi/util/UserDataHolder');

declare class Document {
	static EMPTY_ARRAY : Document[];
	static PROP_WRITABLE : string;
	text : string;
	charsSequence : CharSequence;
	immutableCharSequence : CharSequence;
	chars : string[];
	textLength : number;
	lineCount : number;
	writable : boolean;
	modificationStamp : number;
	getText() : string;
	getText(arg1 : TextRange) : string;
	getCharsSequence() : CharSequence;
	getImmutableCharSequence() : CharSequence;
	getChars() : string[];
	getTextLength() : number;
	getLineCount() : number;
	getLineNumber(arg1 : number) : number;
	getLineStartOffset(arg1 : number) : number;
	getLineEndOffset(arg1 : number) : number;
	insertString(arg1 : number, arg2 : CharSequence) : void;
	deleteString(arg1 : number, arg2 : number) : void;
	replaceString(arg1 : number, arg2 : number, arg3 : CharSequence) : void;
	isWritable() : boolean;
	getModificationStamp() : number;
	fireReadOnlyModificationAttempt() : void;
	addDocumentListener(arg1 : DocumentListener) : void;
	addDocumentListener(arg1 : DocumentListener, arg2 : Disposable) : void;
	removeDocumentListener(arg1 : DocumentListener) : void;
	createRangeMarker(arg1 : number, arg2 : number) : RangeMarker;
	createRangeMarker(arg1 : number, arg2 : number, arg3 : boolean) : RangeMarker;
	addPropertyChangeListener(arg1 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : PropertyChangeListener) : void;
	setReadOnly(arg1 : boolean) : void;
	createGuardedBlock(arg1 : number, arg2 : number) : RangeMarker;
	removeGuardedBlock(arg1 : RangeMarker) : void;
	getOffsetGuard(arg1 : number) : RangeMarker;
	getRangeGuard(arg1 : number, arg2 : number) : RangeMarker;
	startGuardedBlockChecking() : void;
	stopGuardedBlockChecking() : void;
	setCyclicBufferSize(arg1 : number) : void;
	setText(arg1 : CharSequence) : void;
	createRangeMarker(arg1 : TextRange) : RangeMarker;
	getLineSeparatorLength(arg1 : number) : number;
}


declare interface Document extends UserDataHolder {}
export = Document
