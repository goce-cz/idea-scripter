import Object = require('nashorn/java/lang/Object');
import VisualPosition = require('nashorn/com/intellij/openapi/editor/VisualPosition');
import LogicalPosition = require('nashorn/com/intellij/openapi/editor/LogicalPosition');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import TextAttributes = require('nashorn/com/intellij/openapi/editor/markup/TextAttributes');
import SelectionListener = require('nashorn/com/intellij/openapi/editor/event/SelectionListener');

declare class SelectionModel extends Object {
	selectionStart : number;
	selectionStartPosition : VisualPosition;
	selectionEnd : number;
	selectionEndPosition : VisualPosition;
	selectedText : string;
	leadSelectionOffset : number;
	leadSelectionPosition : VisualPosition;
	blockSelectionStarts : number[];
	blockSelectionEnds : number[];
	blockStart : LogicalPosition;
	blockEnd : LogicalPosition;
	blockSelectionGuarded : boolean;
	blockSelectionGuard : RangeMarker;
	textAttributes : TextAttributes;
	getSelectionStart() : number;
	getSelectionStartPosition() : VisualPosition;
	getSelectionEnd() : number;
	getSelectionEndPosition() : VisualPosition;
	getSelectedText() : string;
	getSelectedText(arg1 : boolean) : string;
	getLeadSelectionOffset() : number;
	getLeadSelectionPosition() : VisualPosition;
	hasSelection() : boolean;
	hasSelection(arg1 : boolean) : boolean;
	setSelection(arg1 : number, arg2 : number) : void;
	setSelection(arg1 : number, arg2 : VisualPosition, arg3 : number) : void;
	setSelection(arg1 : VisualPosition, arg2 : number, arg3 : VisualPosition, arg4 : number) : void;
	removeSelection() : void;
	removeSelection(arg1 : boolean) : void;
	addSelectionListener(arg1 : SelectionListener) : void;
	removeSelectionListener(arg1 : SelectionListener) : void;
	selectLineAtCaret() : void;
	selectWordAtCaret(arg1 : boolean) : void;
	copySelectionToClipboard() : void;
	setBlockSelection(arg1 : LogicalPosition, arg2 : LogicalPosition) : void;
	removeBlockSelection() : void;
	hasBlockSelection() : boolean;
	getBlockSelectionStarts() : number[];
	getBlockSelectionEnds() : number[];
	getBlockStart() : LogicalPosition;
	getBlockEnd() : LogicalPosition;
	isBlockSelectionGuarded() : boolean;
	getBlockSelectionGuard() : RangeMarker;
	getTextAttributes() : TextAttributes;
}

export = SelectionModel
