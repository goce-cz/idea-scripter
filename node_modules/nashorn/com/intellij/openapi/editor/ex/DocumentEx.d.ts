import List = require('nashorn/java/util/List');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import LineIterator = require('nashorn/com/intellij/openapi/editor/ex/LineIterator');
import EditReadOnlyListener = require('nashorn/com/intellij/openapi/editor/ex/EditReadOnlyListener');
import CharSequence = require('nashorn/java/lang/CharSequence');
import RangeMarkerEx = require('nashorn/com/intellij/openapi/editor/ex/RangeMarkerEx');
import Processor = require('nashorn/com/intellij/util/Processor');
import Document = require('nashorn/com/intellij/openapi/editor/Document');

declare class DocumentEx {
	listenersCount : number;
	inEventsHandling : boolean;
	inBulkUpdate : boolean;
	guardedBlocks : List<RangeMarker>;
	setStripTrailingSpacesEnabled(arg1 : boolean) : void;
	createLineIterator() : LineIterator;
	setModificationStamp(arg1 : number) : void;
	addEditReadOnlyListener(arg1 : EditReadOnlyListener) : void;
	removeEditReadOnlyListener(arg1 : EditReadOnlyListener) : void;
	replaceText(arg1 : CharSequence, arg2 : number) : void;
	moveText(arg1 : number, arg2 : number, arg3 : number) : void;
	getListenersCount() : number;
	suppressGuardedExceptions() : void;
	unSuppressGuardedExceptions() : void;
	isInEventsHandling() : boolean;
	clearLineModificationFlags() : void;
	removeRangeMarker(arg1 : RangeMarkerEx) : boolean;
	registerRangeMarker(arg1 : RangeMarkerEx, arg2 : number, arg3 : number, arg4 : boolean, arg5 : boolean, arg6 : number) : void;
	isInBulkUpdate() : boolean;
	setInBulkUpdate(arg1 : boolean) : void;
	getGuardedBlocks() : List<RangeMarker>;
	processRangeMarkers(arg1 : Processor<RangeMarker>) : boolean;
	processRangeMarkersOverlappingWith(arg1 : number, arg2 : number, arg3 : Processor<RangeMarker>) : boolean;
}


declare interface DocumentEx extends Document {}
export = DocumentEx
