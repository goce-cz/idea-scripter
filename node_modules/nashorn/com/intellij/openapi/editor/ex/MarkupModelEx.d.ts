import TextAttributes = require('nashorn/com/intellij/openapi/editor/markup/TextAttributes');
import RangeHighlighterEx = require('nashorn/com/intellij/openapi/editor/ex/RangeHighlighterEx');
import RangeHighlighter = require('nashorn/com/intellij/openapi/editor/markup/RangeHighlighter');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import MarkupModelListener = require('nashorn/com/intellij/openapi/editor/impl/event/MarkupModelListener');
import Processor = require('nashorn/com/intellij/util/Processor');
import DisposableIterator = require('nashorn/com/intellij/openapi/editor/ex/DisposableIterator');
import HighlighterTargetArea = require('nashorn/com/intellij/openapi/editor/markup/HighlighterTargetArea');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import MarkupModel = require('nashorn/com/intellij/openapi/editor/markup/MarkupModel');

declare class MarkupModelEx {
	dispose() : void;
	addPersistentLineHighlighter(arg1 : number, arg2 : number, arg3 : TextAttributes) : RangeHighlighterEx;
	fireAttributesChanged(arg1 : RangeHighlighterEx, arg2 : boolean) : void;
	fireAfterAdded(arg1 : RangeHighlighterEx) : void;
	fireBeforeRemoved(arg1 : RangeHighlighterEx) : void;
	containsHighlighter(arg1 : RangeHighlighter) : boolean;
	addRangeHighlighter(arg1 : RangeHighlighterEx, arg2 : number, arg3 : number, arg4 : boolean, arg5 : boolean, arg6 : number) : void;
	addMarkupModelListener(arg1 : Disposable, arg2 : MarkupModelListener) : void;
	setRangeHighlighterAttributes(arg1 : RangeHighlighter, arg2 : TextAttributes) : void;
	processRangeHighlightersOverlappingWith(arg1 : number, arg2 : number, arg3 : Processor<any>) : boolean;
	processRangeHighlightersOutside(arg1 : number, arg2 : number, arg3 : Processor<any>) : boolean;
	overlappingIterator(arg1 : number, arg2 : number) : DisposableIterator<RangeHighlighterEx>;
	addRangeHighlighterAndChangeAttributes(arg1 : number, arg2 : number, arg3 : number, arg4 : TextAttributes, arg5 : HighlighterTargetArea, arg6 : boolean, arg7 : Consumer<RangeHighlighterEx>) : RangeHighlighterEx;
	changeAttributesInBatch(arg1 : RangeHighlighterEx, arg2 : Consumer<RangeHighlighterEx>) : void;
}


declare interface MarkupModelEx extends MarkupModel {}
export = MarkupModelEx
