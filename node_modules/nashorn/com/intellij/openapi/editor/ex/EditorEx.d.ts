import Key = require('nashorn/com/intellij/openapi/util/Key');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import DocumentEx = require('nashorn/com/intellij/openapi/editor/ex/DocumentEx');
import MarkupModelEx = require('nashorn/com/intellij/openapi/editor/ex/MarkupModelEx');
import EditorGutterComponentEx = require('nashorn/com/intellij/openapi/editor/ex/EditorGutterComponentEx');
import EditorHighlighter = require('nashorn/com/intellij/openapi/editor/highlighter/EditorHighlighter');
import JComponent = require('nashorn/javax/swing/JComponent');
import CutProvider = require('nashorn/com/intellij/ide/CutProvider');
import CopyProvider = require('nashorn/com/intellij/ide/CopyProvider');
import PasteProvider = require('nashorn/com/intellij/ide/PasteProvider');
import DeleteProvider = require('nashorn/com/intellij/ide/DeleteProvider');
import JScrollPane = require('nashorn/javax/swing/JScrollPane');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import Color = require('nashorn/java/awt/Color');
import Dimension = require('nashorn/java/awt/Dimension');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import TextDrawingCallback = require('nashorn/com/intellij/openapi/editor/impl/TextDrawingCallback');
import FoldingModelEx = require('nashorn/com/intellij/openapi/editor/ex/FoldingModelEx');
import SoftWrapModelEx = require('nashorn/com/intellij/openapi/editor/ex/SoftWrapModelEx');
import ScrollingModelEx = require('nashorn/com/intellij/openapi/editor/ex/ScrollingModelEx');
import EditorColorsScheme = require('nashorn/com/intellij/openapi/editor/colors/EditorColorsScheme');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import FocusChangeListener = require('nashorn/com/intellij/openapi/editor/ex/FocusChangeListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import KeyEvent = require('nashorn/java/awt/event/KeyEvent');
import CharSequence = require('nashorn/java/lang/CharSequence');
import VisualPosition = require('nashorn/com/intellij/openapi/editor/VisualPosition');
import LogicalPosition = require('nashorn/com/intellij/openapi/editor/LogicalPosition');
import SoftWrapAppliancePlaces = require('nashorn/com/intellij/openapi/editor/impl/softwrap/SoftWrapAppliancePlaces');
import TextAttributes = require('nashorn/com/intellij/openapi/editor/markup/TextAttributes');
import ButtonlessScrollBarUI = require('nashorn/com/intellij/util/ui/ButtonlessScrollBarUI');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');

declare class EditorEx {
	static PROP_INSERT_MODE : string;
	static PROP_COLUMN_MODE : string;
	static PROP_FONT_SIZE : string;
	static LAST_PASTED_REGION : Key<TextRange>;
	static VERTICAL_SCROLLBAR_LEFT : number;
	static VERTICAL_SCROLLBAR_RIGHT : number;
	document : DocumentEx;
	markupModel : MarkupModelEx;
	gutterComponentEx : EditorGutterComponentEx;
	highlighter : EditorHighlighter;
	permanentHeaderComponent : JComponent;
	lastColumnNumber : number;
	verticalScrollbarOrientation : number;
	cutProvider : CutProvider;
	copyProvider : CopyProvider;
	pasteProvider : PasteProvider;
	deleteProvider : DeleteProvider;
	scrollPane : JScrollPane;
	rendererMode : boolean;
	dataContext : DataContext;
	backgroundColor : Color;
	contentSize : Dimension;
	embeddedIntoDialogWrapper : boolean;
	virtualFile : VirtualFile;
	textDrawingCallback : TextDrawingCallback;
	foldingModel : FoldingModelEx;
	softWrapModel : SoftWrapModelEx;
	scrollingModel : ScrollingModelEx;
	stickySelection : boolean;
	prefixTextWidthInPixels : number;
	purePaintingMode : boolean;
	getGutterComponentEx() : EditorGutterComponentEx;
	getHighlighter() : EditorHighlighter;
	getPermanentHeaderComponent() : JComponent;
	setPermanentHeaderComponent(arg1 : JComponent) : void;
	setHighlighter(arg1 : EditorHighlighter) : void;
	setColorsScheme(arg1 : EditorColorsScheme) : void;
	setInsertMode(arg1 : boolean) : void;
	setColumnMode(arg1 : boolean) : void;
	setLastColumnNumber(arg1 : number) : void;
	getLastColumnNumber() : number;
	setVerticalScrollbarOrientation(arg1 : number) : void;
	getVerticalScrollbarOrientation() : number;
	setVerticalScrollbarVisible(arg1 : boolean) : void;
	setHorizontalScrollbarVisible(arg1 : boolean) : void;
	getCutProvider() : CutProvider;
	getCopyProvider() : CopyProvider;
	getPasteProvider() : PasteProvider;
	getDeleteProvider() : DeleteProvider;
	repaint(arg1 : number, arg2 : number) : void;
	reinitSettings() : void;
	addPropertyChangeListener(arg1 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : PropertyChangeListener) : void;
	getMaxWidthInRange(arg1 : number, arg2 : number) : number;
	stopOptimizedScrolling() : void;
	setCaretVisible(arg1 : boolean) : boolean;
	setCaretEnabled(arg1 : boolean) : boolean;
	addFocusListener(arg1 : FocusChangeListener) : void;
	addFocusListener(arg1 : FocusChangeListener, arg2 : Disposable) : void;
	setOneLineMode(arg1 : boolean) : void;
	getScrollPane() : JScrollPane;
	isRendererMode() : boolean;
	setRendererMode(arg1 : boolean) : void;
	setFile(arg1 : VirtualFile) : void;
	getDataContext() : DataContext;
	processKeyTyped(arg1 : KeyEvent) : boolean;
	setFontSize(arg1 : number) : void;
	getBackgroundColor() : Color;
	setBackgroundColor(arg1 : Color) : void;
	getContentSize() : Dimension;
	isEmbeddedIntoDialogWrapper() : boolean;
	setEmbeddedIntoDialogWrapper(arg1 : boolean) : void;
	getVirtualFile() : VirtualFile;
	calcColumnNumber(arg1 : CharSequence, arg2 : number, arg3 : number, arg4 : number) : number;
	calcColumnNumber(arg1 : number, arg2 : number) : number;
	getTextDrawingCallback() : TextDrawingCallback;
	visualToLogicalPosition(arg1 : VisualPosition, arg2 : boolean) : LogicalPosition;
	offsetToLogicalPosition(arg1 : number, arg2 : boolean) : LogicalPosition;
	logicalToVisualPosition(arg1 : LogicalPosition, arg2 : boolean) : VisualPosition;
	logicalPositionToOffset(arg1 : LogicalPosition, arg2 : boolean) : number;
	createBoundColorSchemeDelegate(arg1 : EditorColorsScheme) : EditorColorsScheme;
	setSoftWrapAppliancePlace(arg1 : SoftWrapAppliancePlaces) : void;
	setPlaceholder(arg1 : CharSequence) : void;
	setShowPlaceholderWhenFocused(arg1 : boolean) : void;
	isStickySelection() : boolean;
	setStickySelection(arg1 : boolean) : void;
	getPrefixTextWidthInPixels() : number;
	setPrefixTextAndAttributes(arg1 : string, arg2 : TextAttributes) : void;
	isPurePaintingMode() : boolean;
	setPurePaintingMode(arg1 : boolean) : void;
	registerScrollBarRepaintCallback(arg1 : ButtonlessScrollBarUI.ScrollbarRepaintCallback) : void;
}


declare interface EditorEx extends Editor {}
export = EditorEx
