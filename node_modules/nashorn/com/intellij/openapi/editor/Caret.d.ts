import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import CaretModel = require('nashorn/com/intellij/openapi/editor/CaretModel');
import LogicalPosition = require('nashorn/com/intellij/openapi/editor/LogicalPosition');
import VisualPosition = require('nashorn/com/intellij/openapi/editor/VisualPosition');
import UserDataHolderEx = require('nashorn/com/intellij/openapi/util/UserDataHolderEx');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');

declare class Caret {
	editor : Editor;
	caretModel : CaretModel;
	valid : boolean;
	upToDate : boolean;
	logicalPosition : LogicalPosition;
	visualPosition : VisualPosition;
	offset : number;
	visualLineStart : number;
	visualLineEnd : number;
	selectionStart : number;
	selectionStartPosition : VisualPosition;
	selectionEnd : number;
	selectionEndPosition : VisualPosition;
	selectedText : string;
	leadSelectionOffset : number;
	leadSelectionPosition : VisualPosition;
	getEditor() : Editor;
	getCaretModel() : CaretModel;
	isValid() : boolean;
	moveCaretRelatively(arg1 : number, arg2 : number, arg3 : boolean, arg4 : boolean) : void;
	moveToLogicalPosition(arg1 : LogicalPosition) : void;
	moveToVisualPosition(arg1 : VisualPosition) : void;
	moveToOffset(arg1 : number) : void;
	moveToOffset(arg1 : number, arg2 : boolean) : void;
	isUpToDate() : boolean;
	getLogicalPosition() : LogicalPosition;
	getVisualPosition() : VisualPosition;
	getOffset() : number;
	getVisualLineStart() : number;
	getVisualLineEnd() : number;
	getSelectionStart() : number;
	getSelectionStartPosition() : VisualPosition;
	getSelectionEnd() : number;
	getSelectionEndPosition() : VisualPosition;
	getSelectedText() : string;
	getLeadSelectionOffset() : number;
	getLeadSelectionPosition() : VisualPosition;
	hasSelection() : boolean;
	setSelection(arg1 : number, arg2 : number) : void;
	setSelection(arg1 : number, arg2 : number, arg3 : boolean) : void;
	setSelection(arg1 : number, arg2 : VisualPosition, arg3 : number) : void;
	setSelection(arg1 : VisualPosition, arg2 : number, arg3 : VisualPosition, arg4 : number) : void;
	setSelection(arg1 : VisualPosition, arg2 : number, arg3 : VisualPosition, arg4 : number, arg5 : boolean) : void;
	removeSelection() : void;
	selectLineAtCaret() : void;
	selectWordAtCaret(arg1 : boolean) : void;
	clone(arg1 : boolean) : Caret;
}


declare interface Caret extends UserDataHolderEx, Disposable {}
export = Caret
