import Object = require('nashorn/java/lang/Object');
import LogicalPosition = require('nashorn/com/intellij/openapi/editor/LogicalPosition');
import VisualPosition = require('nashorn/com/intellij/openapi/editor/VisualPosition');
import TextAttributes = require('nashorn/com/intellij/openapi/editor/markup/TextAttributes');
import Caret = require('nashorn/com/intellij/openapi/editor/Caret');
import List = require('nashorn/java/util/List');
import CaretState = require('nashorn/com/intellij/openapi/editor/CaretState');
import CaretListener = require('nashorn/com/intellij/openapi/editor/event/CaretListener');
import CaretAction = require('nashorn/com/intellij/openapi/editor/CaretAction');
import Runnable = require('nashorn/java/lang/Runnable');

declare class CaretModel extends Object {
	upToDate : boolean;
	logicalPosition : LogicalPosition;
	visualPosition : VisualPosition;
	offset : number;
	visualLineStart : number;
	visualLineEnd : number;
	textAttributes : TextAttributes;
	currentCaret : Caret;
	primaryCaret : Caret;
	caretCount : number;
	allCarets : List<Caret>;
	caretsAndSelections : List<CaretState>;
	moveCaretRelatively(arg1 : number, arg2 : number, arg3 : boolean, arg4 : boolean, arg5 : boolean) : void;
	moveToLogicalPosition(arg1 : LogicalPosition) : void;
	moveToVisualPosition(arg1 : VisualPosition) : void;
	moveToOffset(arg1 : number) : void;
	moveToOffset(arg1 : number, arg2 : boolean) : void;
	isUpToDate() : boolean;
	getLogicalPosition() : LogicalPosition;
	getVisualPosition() : VisualPosition;
	getOffset() : number;
	addCaretListener(arg1 : CaretListener) : void;
	removeCaretListener(arg1 : CaretListener) : void;
	getVisualLineStart() : number;
	getVisualLineEnd() : number;
	getTextAttributes() : TextAttributes;
	supportsMultipleCarets() : boolean;
	getCurrentCaret() : Caret;
	getPrimaryCaret() : Caret;
	getCaretCount() : number;
	getAllCarets() : List<Caret>;
	getCaretAt(arg1 : VisualPosition) : Caret;
	addCaret(arg1 : VisualPosition) : Caret;
	removeCaret(arg1 : Caret) : boolean;
	removeSecondaryCarets() : void;
	setCaretsAndSelections(arg1 : List<CaretState>) : void;
	setCaretsAndSelections(arg1 : List<CaretState>, arg2 : boolean) : void;
	getCaretsAndSelections() : List<CaretState>;
	runForEachCaret(arg1 : CaretAction) : void;
	runForEachCaret(arg1 : CaretAction, arg2 : boolean) : void;
	runBatchCaretOperation(arg1 : Runnable) : void;
}

export = CaretModel
