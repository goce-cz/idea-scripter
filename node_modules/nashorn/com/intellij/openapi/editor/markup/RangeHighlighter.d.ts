import HighlighterTargetArea = require('nashorn/com/intellij/openapi/editor/markup/HighlighterTargetArea');
import TextAttributes = require('nashorn/com/intellij/openapi/editor/markup/TextAttributes');
import LineMarkerRenderer = require('nashorn/com/intellij/openapi/editor/markup/LineMarkerRenderer');
import CustomHighlighterRenderer = require('nashorn/com/intellij/openapi/editor/markup/CustomHighlighterRenderer');
import GutterIconRenderer = require('nashorn/com/intellij/openapi/editor/markup/GutterIconRenderer');
import Color = require('nashorn/java/awt/Color');
import Object = require('nashorn/java/lang/Object');
import LineSeparatorRenderer = require('nashorn/com/intellij/openapi/editor/markup/LineSeparatorRenderer');
import SeparatorPlacement = require('nashorn/com/intellij/openapi/editor/markup/SeparatorPlacement');
import MarkupEditorFilter = require('nashorn/com/intellij/openapi/editor/markup/MarkupEditorFilter');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');

declare class RangeHighlighter {
	static EMPTY_ARRAY : RangeHighlighter[];
	layer : number;
	targetArea : HighlighterTargetArea;
	textAttributes : TextAttributes;
	lineMarkerRenderer : LineMarkerRenderer;
	customRenderer : CustomHighlighterRenderer;
	gutterIconRenderer : GutterIconRenderer;
	errorStripeMarkColor : Color;
	errorStripeTooltip : Object;
	thinErrorStripeMark : boolean;
	lineSeparatorColor : Color;
	lineSeparatorRenderer : LineSeparatorRenderer;
	lineSeparatorPlacement : SeparatorPlacement;
	editorFilter : MarkupEditorFilter;
	getLayer() : number;
	getTargetArea() : HighlighterTargetArea;
	getTextAttributes() : TextAttributes;
	getLineMarkerRenderer() : LineMarkerRenderer;
	setLineMarkerRenderer(arg1 : LineMarkerRenderer) : void;
	getCustomRenderer() : CustomHighlighterRenderer;
	setCustomRenderer(arg1 : CustomHighlighterRenderer) : void;
	getGutterIconRenderer() : GutterIconRenderer;
	setGutterIconRenderer(arg1 : GutterIconRenderer) : void;
	getErrorStripeMarkColor() : Color;
	setErrorStripeMarkColor(arg1 : Color) : void;
	getErrorStripeTooltip() : Object;
	setErrorStripeTooltip(arg1 : Object) : void;
	isThinErrorStripeMark() : boolean;
	setThinErrorStripeMark(arg1 : boolean) : void;
	getLineSeparatorColor() : Color;
	setLineSeparatorColor(arg1 : Color) : void;
	setLineSeparatorRenderer(arg1 : LineSeparatorRenderer) : void;
	getLineSeparatorRenderer() : LineSeparatorRenderer;
	getLineSeparatorPlacement() : SeparatorPlacement;
	setLineSeparatorPlacement(arg1 : SeparatorPlacement) : void;
	setEditorFilter(arg1 : MarkupEditorFilter) : void;
	getEditorFilter() : MarkupEditorFilter;
}


declare interface RangeHighlighter extends RangeMarker {}
export = RangeHighlighter
