import AttributesFlyweight = require('nashorn/com/intellij/openapi/editor/markup/AttributesFlyweight');
import Color = require('nashorn/java/awt/Color');
import EffectType = require('nashorn/com/intellij/openapi/editor/markup/EffectType');
import Element = require('nashorn/org/jdom/Element');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class TextAttributes {
	static ERASE_MARKER : TextAttributes;
	empty : boolean;
	fallbackEnabled : boolean;
	flyweight : AttributesFlyweight;
	foregroundColor : Color;
	backgroundColor : Color;
	effectColor : Color;
	errorStripeColor : Color;
	effectType : EffectType;
	fontType : number;
	constructor();
	constructor(arg1 : Element);
	constructor(arg1 : Color, arg2 : Color, arg3 : Color, arg4 : EffectType, arg5 : number);
	static merge(arg1 : TextAttributes, arg2 : TextAttributes) : TextAttributes;
	setAttributes(arg1 : Color, arg2 : Color, arg3 : Color, arg4 : Color, arg5 : EffectType, arg6 : number) : void;
	isEmpty() : boolean;
	isFallbackEnabled() : boolean;
	reset() : void;
	getFlyweight() : AttributesFlyweight;
	static fromFlyweight(arg1 : AttributesFlyweight) : TextAttributes;
	getForegroundColor() : Color;
	setForegroundColor(arg1 : Color) : void;
	getBackgroundColor() : Color;
	setBackgroundColor(arg1 : Color) : void;
	getEffectColor() : Color;
	setEffectColor(arg1 : Color) : void;
	getErrorStripeColor() : Color;
	setErrorStripeColor(arg1 : Color) : void;
	getEffectType() : EffectType;
	setEffectType(arg1 : EffectType) : void;
	getFontType() : number;
	setFontType(arg1 : number) : void;
	readExternal(arg1 : Element) : void;
	writeExternal(arg1 : Element) : void;
}


declare interface TextAttributes extends Cloneable {}
export = TextAttributes
