import Shortcut = require('nashorn/com/intellij/openapi/actionSystem/Shortcut');
import KeyStroke = require('nashorn/javax/swing/KeyStroke');
import MouseShortcut = require('nashorn/com/intellij/openapi/actionSystem/MouseShortcut');
import KeyboardShortcut = require('nashorn/com/intellij/openapi/actionSystem/KeyboardShortcut');
import Map = require('nashorn/java/util/Map');
import ArrayList = require('nashorn/java/util/ArrayList');
import Scheme = require('nashorn/com/intellij/openapi/options/Scheme');
import Object = require('nashorn/java/lang/Object');

declare class Keymap {
	name : string;
	presentableName : string;
	parent : Keymap;
	actionIds : string[];
	abbreviations : string[];
	getPresentableName() : string;
	getParent() : Keymap;
	canModify() : boolean;
	getActionIds() : string[];
	getShortcuts(arg1 : string) : Shortcut[];
	getActionIds(arg1 : KeyStroke) : string[];
	getActionIds(arg1 : KeyStroke, arg2 : KeyStroke) : string[];
	getActionIds(arg1 : Shortcut) : string[];
	getActionIds(arg1 : MouseShortcut) : string[];
	addShortcut(arg1 : string, arg2 : Shortcut) : void;
	removeShortcut(arg1 : string, arg2 : Shortcut) : void;
	getConflicts(arg1 : string, arg2 : KeyboardShortcut) : Map<string, ArrayList<KeyboardShortcut>>;
	addShortcutChangeListener(arg1 : Keymap.Listener) : void;
	removeShortcutChangeListener(arg1 : Keymap.Listener) : void;
	removeAllActionShortcuts(arg1 : string) : void;
	getAbbreviations() : string[];
	addAbbreviation(arg1 : string, arg2 : string) : void;
	removeAbbreviation(arg1 : string, arg2 : string) : void;
}


declare interface Keymap extends Scheme {}

declare module Keymap {
	class Listener extends Object {
		onShortcutChanged(arg1 : string) : void;
	}
}

export = Keymap
