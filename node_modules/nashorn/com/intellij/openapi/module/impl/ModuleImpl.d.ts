import Object = require('nashorn/java/lang/Object');
import ModuleStoreImpl = require('nashorn/com/intellij/openapi/components/impl/stores/ModuleStoreImpl');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import List = require('nashorn/java/util/List');
import PlatformComponentManagerImpl = require('nashorn/com/intellij/openapi/components/impl/PlatformComponentManagerImpl');
import ModuleEx = require('nashorn/com/intellij/openapi/module/impl/ModuleEx');
import VirtualFileAdapter = require('nashorn/com/intellij/openapi/vfs/VirtualFileAdapter');

declare class ModuleImpl {
	static MODULE_RENAMING_REQUESTOR : Object;
	stateStore : ModuleStoreImpl;
	moduleFile : VirtualFile;
	moduleFilePath : string;
	project : Project;
	name : string;
	loaded : boolean;
	moduleScope : GlobalSearchScope;
	moduleWithLibrariesScope : GlobalSearchScope;
	moduleWithDependenciesScope : GlobalSearchScope;
	moduleContentScope : GlobalSearchScope;
	moduleContentWithDependenciesScope : GlobalSearchScope;
	moduleWithDependentsScope : GlobalSearchScope;
	moduleTestsWithDependentsScope : GlobalSearchScope;
	constructor(arg1 : string, arg2 : Project);
	getStateStore() : ModuleStoreImpl;
	a(arg1 : string) : void;
	static b(arg1 : string) : List<string>;
	static c(arg1 : string) : string;
}


declare interface ModuleImpl extends PlatformComponentManagerImpl, ModuleEx {}

declare module ModuleImpl {
	class MyVirtualFileListener {
		a(arg1 : string, arg2 : string) : void;
	}


	interface MyVirtualFileListener extends VirtualFileAdapter {}}

export = ModuleImpl
