import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import ComponentManager = require('nashorn/com/intellij/openapi/components/ComponentManager');
import AreaInstance = require('nashorn/com/intellij/openapi/extensions/AreaInstance');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');

declare class Module {
	static EMPTY_ARRAY : Module[];
	static ELEMENT_TYPE : string;
	moduleFile : VirtualFile;
	moduleFilePath : string;
	project : Project;
	name : string;
	disposed : boolean;
	loaded : boolean;
	moduleScope : GlobalSearchScope;
	moduleWithLibrariesScope : GlobalSearchScope;
	moduleWithDependenciesScope : GlobalSearchScope;
	moduleContentScope : GlobalSearchScope;
	moduleContentWithDependenciesScope : GlobalSearchScope;
	moduleWithDependentsScope : GlobalSearchScope;
	moduleTestsWithDependentsScope : GlobalSearchScope;
	getModuleFile() : VirtualFile;
	getModuleFilePath() : string;
	getProject() : Project;
	getName() : string;
	isLoaded() : boolean;
	setOption(arg1 : string, arg2 : string) : void;
	clearOption(arg1 : string) : void;
	getOptionValue(arg1 : string) : string;
	getModuleScope() : GlobalSearchScope;
	getModuleScope(arg1 : boolean) : GlobalSearchScope;
	getModuleWithLibrariesScope() : GlobalSearchScope;
	getModuleWithDependenciesScope() : GlobalSearchScope;
	getModuleContentScope() : GlobalSearchScope;
	getModuleContentWithDependenciesScope() : GlobalSearchScope;
	getModuleWithDependenciesAndLibrariesScope(arg1 : boolean) : GlobalSearchScope;
	getModuleWithDependentsScope() : GlobalSearchScope;
	getModuleTestsWithDependentsScope() : GlobalSearchScope;
	getModuleRuntimeScope(arg1 : boolean) : GlobalSearchScope;
}


declare interface Module extends ComponentManager, AreaInstance, Disposable {}
export = Module
