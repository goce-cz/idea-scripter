import List = require('nashorn/java/util/List');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import Icon = require('nashorn/javax/swing/Icon');
import Object = require('nashorn/java/lang/Object');
import DataKey = require('nashorn/com/intellij/openapi/actionSystem/DataKey');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class FileChooserDescriptor {
	chooseFiles : boolean;
	chooseFolders : boolean;
	chooseJars : boolean;
	chooseJarsAsFiles : boolean;
	chooseJarContents : boolean;
	chooseMultiple : boolean;
	title : string;
	description : string;
	hideIgnored : boolean;
	roots : List<VirtualFile>;
	showFileSystemRoots : boolean;
	treeRootVisible : boolean;
	showHiddenFiles : boolean;
	constructor(arg1 : boolean, arg2 : boolean, arg3 : boolean, arg4 : boolean, arg5 : boolean, arg6 : boolean);
	constructor(arg1 : FileChooserDescriptor);
	isChooseFiles() : boolean;
	isChooseFolders() : boolean;
	isChooseJars() : boolean;
	isChooseJarsAsFiles() : boolean;
	isChooseJarContents() : boolean;
	isChooseMultiple() : boolean;
	getChooseMultiple() : boolean;
	getTitle() : string;
	setTitle(arg1 : string) : void;
	withTitle(arg1 : string) : FileChooserDescriptor;
	getDescription() : string;
	setDescription(arg1 : string) : void;
	withDescription(arg1 : string) : FileChooserDescriptor;
	isHideIgnored() : boolean;
	setHideIgnored(arg1 : boolean) : void;
	withHideIgnored(arg1 : boolean) : FileChooserDescriptor;
	getRoots() : List<VirtualFile>;
	setRoots(arg1 : VirtualFile[]) : void;
	setRoots(arg1 : List<VirtualFile>) : void;
	withRoots(arg1 : VirtualFile[]) : FileChooserDescriptor;
	withRoots(arg1 : List<VirtualFile>) : FileChooserDescriptor;
	isShowFileSystemRoots() : boolean;
	setShowFileSystemRoots(arg1 : boolean) : void;
	withShowFileSystemRoots(arg1 : boolean) : FileChooserDescriptor;
	isTreeRootVisible() : boolean;
	withTreeRootVisible(arg1 : boolean) : FileChooserDescriptor;
	setIsTreeRootVisible(arg1 : boolean) : FileChooserDescriptor;
	isShowHiddenFiles() : boolean;
	withShowHiddenFiles(arg1 : boolean) : FileChooserDescriptor;
	withFileFilter(arg1 : Condition<VirtualFile>) : FileChooserDescriptor;
	isFileVisible(arg1 : VirtualFile, arg2 : boolean) : boolean;
	isFileSelectable(arg1 : VirtualFile) : boolean;
	getIcon(arg1 : VirtualFile) : Icon;
	static dressIcon(arg1 : VirtualFile, arg2 : Icon) : Icon;
	getName(arg1 : VirtualFile) : string;
	getComment(arg1 : VirtualFile) : string;
	validateSelectedFiles(arg1 : VirtualFile[]) : void;
	acceptAsGeneralFile(arg1 : VirtualFile) : boolean;
	acceptAsJarFile(arg1 : VirtualFile) : boolean;
	getFileToSelect(arg1 : VirtualFile) : VirtualFile;
	getUserData(arg1 : string) : Object;
	getUserData<T>(arg1 : DataKey<T>) : T;
	putUserData<T>(arg1 : DataKey<T>, arg2 : T) : void;
}


declare interface FileChooserDescriptor extends Cloneable {}
export = FileChooserDescriptor
