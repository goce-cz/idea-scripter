import Key = require('nashorn/com/intellij/openapi/util/Key');
import Object = require('nashorn/java/lang/Object');
import VirtualFileSystem = require('nashorn/com/intellij/openapi/vfs/VirtualFileSystem');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import Charset = require('nashorn/java/nio/charset/Charset');
import InputStream = require('nashorn/java/io/InputStream');
import CharSequence = require('nashorn/java/lang/CharSequence');
import VFileProperty = require('nashorn/com/intellij/openapi/vfs/VFileProperty');
import Runnable = require('nashorn/java/lang/Runnable');
import OutputStream = require('nashorn/java/io/OutputStream');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');
import ModificationTracker = require('nashorn/com/intellij/openapi/util/ModificationTracker');

declare class VirtualFile {
	static REQUESTOR_MARKER : Key<Object>;
	static EMPTY_ARRAY : VirtualFile[];
	static PROP_NAME : string;
	static PROP_ENCODING : string;
	static PROP_WRITABLE : string;
	static PROP_HIDDEN : string;
	static PROP_SYMLINK_TARGET : string;
	name : string;
	fileSystem : VirtualFileSystem;
	path : string;
	url : string;
	presentableUrl : string;
	extension : string;
	nameWithoutExtension : string;
	writable : boolean;
	directory : boolean;
	symLink : boolean;
	specialFile : boolean;
	canonicalPath : string;
	canonicalFile : VirtualFile;
	valid : boolean;
	parent : VirtualFile;
	children : VirtualFile[];
	fileType : FileType;
	charset : Charset;
	charsetSet : boolean;
	modificationStamp : number;
	timeStamp : number;
	length : number;
	presentableName : string;
	modificationCount : number;
	inputStream : InputStream;
	bOM : number[];
	inLocalFileSystem : boolean;
	detectedLineSeparator : string;
	nameSequence : CharSequence;
	getName() : string;
	getFileSystem() : VirtualFileSystem;
	getPath() : string;
	getUrl() : string;
	getPresentableUrl() : string;
	getExtension() : string;
	getNameWithoutExtension() : string;
	rename(arg1 : Object, arg2 : string) : void;
	isWritable() : boolean;
	setWritable(arg1 : boolean) : void;
	isDirectory() : boolean;
	isSymLink() : boolean;
	isSpecialFile() : boolean;
	is(arg1 : VFileProperty) : boolean;
	getCanonicalPath() : string;
	getCanonicalFile() : VirtualFile;
	isValid() : boolean;
	getParent() : VirtualFile;
	getChildren() : VirtualFile[];
	findChild(arg1 : string) : VirtualFile;
	findOrCreateChildData(arg1 : Object, arg2 : string) : VirtualFile;
	getFileType() : FileType;
	findFileByRelativePath(arg1 : string) : VirtualFile;
	createChildDirectory(arg1 : Object, arg2 : string) : VirtualFile;
	createChildData(arg1 : Object, arg2 : string) : VirtualFile;
	delete(arg1 : Object) : void;
	move(arg1 : Object, arg2 : VirtualFile) : void;
	copy(arg1 : Object, arg2 : VirtualFile, arg3 : string) : VirtualFile;
	getCharset() : Charset;
	getStoredCharset() : Charset;
	storeCharset(arg1 : Charset) : void;
	setCharset(arg1 : Charset) : void;
	setCharset(arg1 : Charset, arg2 : Runnable) : void;
	isCharsetSet() : boolean;
	setBinaryContent(arg1 : number[]) : void;
	setBinaryContent(arg1 : number[], arg2 : number, arg3 : number) : void;
	setBinaryContent(arg1 : number[], arg2 : number, arg3 : number, arg4 : Object) : void;
	getOutputStream(arg1 : Object) : OutputStream;
	getOutputStream(arg1 : Object, arg2 : number, arg3 : number) : OutputStream;
	contentsToByteArray() : number[];
	contentsToByteArray(arg1 : boolean) : number[];
	getModificationStamp() : number;
	getTimeStamp() : number;
	getLength() : number;
	refresh(arg1 : boolean, arg2 : boolean) : void;
	refresh(arg1 : boolean, arg2 : boolean, arg3 : Runnable) : void;
	getPresentableName() : string;
	nameEquals(arg1 : string) : boolean;
	getInputStream() : InputStream;
	getBOM() : number[];
	setBOM(arg1 : number[]) : void;
	exists() : boolean;
	isInLocalFileSystem() : boolean;
	static isValidName(arg1 : string) : boolean;
	getDetectedLineSeparator() : string;
	setDetectedLineSeparator(arg1 : string) : void;
	getNameSequence() : CharSequence;
}


declare interface VirtualFile extends UserDataHolderBase, ModificationTracker {}
export = VirtualFile
