import Object = require('nashorn/java/lang/Object');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Iterable = require('nashorn/java/lang/Iterable');
import Throwable = require('nashorn/java/lang/Throwable');
import RuntimeException = require('nashorn/java/lang/RuntimeException');

declare class VirtualFileVisitor<T> extends Object {
	static NO_FOLLOW_SYMLINKS : VirtualFileVisitor.Option;
	static SKIP_ROOT : VirtualFileVisitor.Option;
	static ONE_LEVEL_DEEP : VirtualFileVisitor.Option;
	static CONTINUE : VirtualFileVisitor.Result;
	static SKIP_CHILDREN : VirtualFileVisitor.Result;
	currentValue : T;
	static limit(arg1 : number) : VirtualFileVisitor.Option;
	static skipTo(arg1 : VirtualFile) : VirtualFileVisitor.Result;
	visitFile(arg1 : VirtualFile) : boolean;
	visitFileEx(arg1 : VirtualFile) : VirtualFileVisitor.Result;
	afterChildrenVisited(arg1 : VirtualFile) : void;
	getChildrenIterable(arg1 : VirtualFile) : Iterable<VirtualFile>;
	setValueForChildren(arg1 : T) : void;
	getCurrentValue() : T;
	allowVisitFile(arg1 : VirtualFile) : boolean;
	allowVisitChildren(arg1 : VirtualFile) : boolean;
	depthLimitReached() : boolean;
	saveValue() : void;
	restoreValue(arg1 : boolean) : void;
}


declare module VirtualFileVisitor {
	class VisitorException {
		constructor(arg1 : Throwable);
	}


	interface VisitorException extends RuntimeException {}	class Result extends Object {
		skipChildren : boolean;
		skipToParent : VirtualFile;
	}
	class Option extends Object {
	}


	module Option {
		class LimitOption {
		}


		interface LimitOption extends VirtualFileVisitor.Option {}	}
}

export = VirtualFileVisitor
