import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Object = require('nashorn/java/lang/Object');
import VirtualFileFilter = require('nashorn/com/intellij/openapi/vfs/VirtualFileFilter');
import Collection = require('nashorn/java/util/Collection');
import URL = require('nashorn/java/net/URL');
import VirtualFileManager = require('nashorn/com/intellij/openapi/vfs/VirtualFileManager');
import File = require('nashorn/java/io/File');
import URI = require('nashorn/java/net/URI');
import List = require('nashorn/java/util/List');
import Processor = require('nashorn/com/intellij/util/Processor');
import Function = require('nashorn/com/intellij/util/Function');
import InputStream = require('nashorn/java/io/InputStream');
import VfsUtilCore = require('nashorn/com/intellij/openapi/vfs/VfsUtilCore');

declare class VfsUtil {
	static VFS_PATH_SEPARATOR : string;
	static userHomeDir : VirtualFile;
	constructor();
	static saveText(arg1 : VirtualFile, arg2 : string) : void;
	static copyDirectory(arg1 : Object, arg2 : VirtualFile, arg3 : VirtualFile, arg4 : VirtualFileFilter) : void;
	static copyFromResource(arg1 : VirtualFile, arg2 : string) : void;
	static copy(arg1 : Object, arg2 : VirtualFile, arg3 : VirtualFile) : VirtualFile;
	static getCommonAncestors(arg1 : VirtualFile[]) : VirtualFile[];
	static getCommonAncestor(arg1 : Collection<VirtualFile>) : VirtualFile;
	static findRelativeFile(arg1 : VirtualFile, arg2 : string[]) : VirtualFile;
	static findFileByURL(arg1 : URL) : VirtualFile;
	static findFileByURL(arg1 : URL, arg2 : VirtualFileManager) : VirtualFile;
	static findFileByIoFile(arg1 : File, arg2 : boolean) : VirtualFile;
	static convertToURL(arg1 : string) : URL;
	static copyFileRelative(arg1 : Object, arg2 : VirtualFile, arg3 : VirtualFile, arg4 : string) : VirtualFile;
	static toIdeaUrl(arg1 : string) : string;
	static toUri(arg1 : VirtualFile) : URI;
	static toUri(arg1 : File) : URI;
	static toUri(arg1 : string) : URI;
	static getPath(arg1 : VirtualFile, arg2 : VirtualFile, arg3 : string) : string;
	static getUrlForLibraryRoot(arg1 : File) : string;
	static createChildSequent(arg1 : Object, arg2 : VirtualFile, arg3 : string, arg4 : string) : VirtualFile;
	static filterNames(arg1 : string[]) : string[];
	static isBadName(arg1 : string) : boolean;
	static createDirectories(arg1 : string) : VirtualFile;
	static createDirectoryIfMissing(arg1 : VirtualFile, arg2 : string) : VirtualFile;
	static createDirectoryIfMissing(arg1 : string) : VirtualFile;
	static collectChildrenRecursively(arg1 : VirtualFile) : List<VirtualFile>;
	static processFileRecursivelyWithoutIgnored(arg1 : VirtualFile, arg2 : Processor<VirtualFile>) : void;
	static processInputStream<T>(arg1 : VirtualFile, arg2 : Function<InputStream, T>) : T;
	static getReadableUrl(arg1 : VirtualFile) : string;
	static getUserHomeDir() : VirtualFile;
	static getChildren(arg1 : VirtualFile) : VirtualFile[];
	static getParentDir(arg1 : string) : string;
	static extractFileName(arg1 : string) : string;
	static markDirty(arg1 : boolean, arg2 : boolean, arg3 : VirtualFile[]) : List<VirtualFile>;
	static markDirtyAndRefresh(arg1 : boolean, arg2 : boolean, arg3 : boolean, arg4 : VirtualFile[]) : void;
}


declare interface VfsUtil extends VfsUtilCore {}
export = VfsUtil
