import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import FileAttribute = require('nashorn/com/intellij/openapi/vfs/newvfs/FileAttribute');
import DataInputStream = require('nashorn/java/io/DataInputStream');
import DataOutputStream = require('nashorn/java/io/DataOutputStream');
import NewVirtualFileSystem = require('nashorn/com/intellij/openapi/vfs/newvfs/NewVirtualFileSystem');
import NewVirtualFile = require('nashorn/com/intellij/openapi/vfs/newvfs/NewVirtualFile');
import FileSystemInterface = require('nashorn/com/intellij/openapi/vfs/newvfs/FileSystemInterface');
import Object = require('nashorn/java/lang/Object');

declare class ManagingFS {
	static instance : ManagingFS;
	cheapFileSystemModificationCount : number;
	filesystemModificationCount : number;
	creationTimestamp : number;
	roots : VirtualFile[];
	localRoots : VirtualFile[];
	constructor();
	static getInstance() : ManagingFS;
	readAttribute(arg1 : VirtualFile, arg2 : FileAttribute) : DataInputStream;
	writeAttribute(arg1 : VirtualFile, arg2 : FileAttribute) : DataOutputStream;
	getModificationCount(arg1 : VirtualFile) : number;
	getCheapFileSystemModificationCount() : number;
	getFilesystemModificationCount() : number;
	getCreationTimestamp() : number;
	areChildrenLoaded(arg1 : VirtualFile) : boolean;
	wereChildrenAccessed(arg1 : VirtualFile) : boolean;
	findRoot(arg1 : string, arg2 : NewVirtualFileSystem) : NewVirtualFile;
	getRoots() : VirtualFile[];
	getRoots(arg1 : NewVirtualFileSystem) : VirtualFile[];
	getLocalRoots() : VirtualFile[];
	findFileById(arg1 : number) : VirtualFile;
}


declare interface ManagingFS extends FileSystemInterface {}

declare module ManagingFS {
	class ManagingFSHolder extends Object {
	}
}

export = ManagingFS
