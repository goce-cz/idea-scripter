import NewVirtualFileSystem = require('nashorn/com/intellij/openapi/vfs/newvfs/NewVirtualFileSystem');
import CharSequence = require('nashorn/java/lang/CharSequence');
import Collection = require('nashorn/java/util/Collection');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Iterable = require('nashorn/java/lang/Iterable');
import VirtualFileWithId = require('nashorn/com/intellij/openapi/vfs/VirtualFileWithId');

declare class NewVirtualFile {
	valid : boolean;
	fileSystem : NewVirtualFileSystem;
	parent : NewVirtualFile;
	canonicalFile : NewVirtualFile;
	nameSequence : CharSequence;
	id : number;
	dirty : boolean;
	cachedChildren : Collection<VirtualFile>;
	constructor();
	refreshAndFindChild(arg1 : string) : NewVirtualFile;
	findChildIfCached(arg1 : string) : NewVirtualFile;
	setTimeStamp(arg1 : number) : void;
	findChildById(arg1 : number) : NewVirtualFile;
	findChildByIdIfCached(arg1 : number) : NewVirtualFile;
	markDirty() : void;
	markDirtyRecursively() : void;
	isDirty() : boolean;
	markClean() : void;
	getCachedChildren() : Collection<VirtualFile>;
	iterInDbChildren() : Iterable<VirtualFile>;
}


declare interface NewVirtualFile extends VirtualFile, VirtualFileWithId {}
export = NewVirtualFile
