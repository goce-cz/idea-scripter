import PersistentStringEnumerator = require('nashorn/com/intellij/util/io/PersistentStringEnumerator');
import FileAttributes = require('nashorn/com/intellij/openapi/util/io/FileAttributes');
import ResizeableMappedFile = require('nashorn/com/intellij/util/io/ResizeableMappedFile');
import PersistentBTreeEnumerator = require('nashorn/com/intellij/util/io/PersistentBTreeEnumerator');
import RefCountingStorage = require('nashorn/com/intellij/util/io/storage/RefCountingStorage');
import Storage = require('nashorn/com/intellij/util/io/storage/Storage');
import DataInputStream = require('nashorn/java/io/DataInputStream');
import FileAttribute = require('nashorn/com/intellij/openapi/vfs/newvfs/FileAttribute');
import DataOutputStream = require('nashorn/com/intellij/util/io/DataOutputStream');
import ByteSequence = require('nashorn/com/intellij/openapi/util/io/ByteSequence');
import IntArrayList = require('nashorn/com/intellij/util/containers/IntArrayList');
import Throwable = require('nashorn/java/lang/Throwable');
import RuntimeException = require('nashorn/java/lang/RuntimeException');
import Forceable = require('nashorn/com/intellij/openapi/Forceable');
import Object = require('nashorn/java/lang/Object');
import CharSequence = require('nashorn/java/lang/CharSequence');
import File = require('nashorn/java/io/File');
import CapacityAllocationPolicy = require('nashorn/com/intellij/util/io/storage/CapacityAllocationPolicy');

declare class FSRecords {
	static weHaveContentHashes : boolean;
	static lazyVfsDataCleaning : boolean;
	static creationTimestamp : number;
	static names : PersistentStringEnumerator;
	static maxId : number;
	dirty : boolean;
	static localModCount : number;
	static modCount : number;
	constructor();
	static writeAttributesToRecord(arg1 : number, arg2 : number, arg3 : FileAttributes, arg4 : string) : void;
	static connect() : void;
	static getCreationTimestamp() : number;
	static a() : ResizeableMappedFile;
	static b() : PersistentBTreeEnumerator<number[]>;
	static c() : RefCountingStorage;
	static d() : Storage;
	static getNames() : PersistentStringEnumerator;
	static createRecord() : number;
	static e() : number;
	static getMaxId() : number;
	static deleteRecordRecursively(arg1 : number) : void;
	static a(arg1 : number) : void;
	static b(arg1 : number) : void;
	static c(arg1 : number) : void;
	static d(arg1 : number) : void;
	static e(arg1 : number) : void;
	static f(arg1 : number) : void;
	static listRoots() : number[];
	static findRootRecord(arg1 : string) : number;
	static deleteRootRecord(arg1 : number) : void;
	static list(arg1 : number) : number[];
	static listAll(arg1 : number) : FSRecords.NameId[];
	static wereChildrenAccessed(arg1 : number) : boolean;
	static updateList(arg1 : number, arg2 : number[]) : void;
	static g(arg1 : number) : void;
	static getLocalModCount() : number;
	static getModCount() : number;
	static getParent(arg1 : number) : number;
	static setParent(arg1 : number, arg2 : number) : void;
	static getNameId(arg1 : number) : number;
	static getNameId(arg1 : string) : number;
	static getName(arg1 : number) : string;
	static getNameByNameId(arg1 : number) : string;
	static setName(arg1 : number, arg2 : string) : void;
	static getFlags(arg1 : number) : number;
	static setFlags(arg1 : number, arg2 : number, arg3 : boolean) : void;
	static getLength(arg1 : number) : number;
	static setLength(arg1 : number, arg2 : number) : void;
	static getTimestamp(arg1 : number) : number;
	static setTimestamp(arg1 : number, arg2 : number) : void;
	static getModCount(arg1 : number) : number;
	static a(arg1 : number, arg2 : number) : void;
	static h(arg1 : number) : number;
	static b(arg1 : number, arg2 : number) : void;
	static i(arg1 : number) : number;
	static c(arg1 : number, arg2 : number) : void;
	static d(arg1 : number, arg2 : number) : number;
	static a(arg1 : number, arg2 : number, arg3 : number) : void;
	static e(arg1 : number, arg2 : number) : number;
	static readContent(arg1 : number) : DataInputStream;
	static readContentById(arg1 : number) : DataInputStream;
	static readAttributeWithLock(arg1 : number, arg2 : FileAttribute) : DataInputStream;
	static a(arg1 : number, arg2 : FileAttribute) : DataInputStream;
	static a(arg1 : number, arg2 : FileAttribute, arg3 : boolean) : number;
	static j(arg1 : number) : void;
	static acquireFileContent(arg1 : number) : number;
	static releaseContent(arg1 : number) : void;
	static getContentId(arg1 : number) : number;
	static writeContent(arg1 : number, arg2 : boolean) : DataOutputStream;
	static writeContent(arg1 : number, arg2 : ByteSequence, arg3 : boolean) : void;
	static storeUnlinkedContent(arg1 : number[]) : number;
	static writeAttribute(arg1 : number, arg2 : FileAttribute) : DataOutputStream;
	static a(arg1 : number[], arg2 : number, arg3 : number) : number;
	static dispose() : void;
	static invalidateCaches() : void;
	static checkSanity() : void;
	static a(arg1 : number, arg2 : number, arg3 : IntArrayList, arg4 : IntArrayList) : void;
	static k(arg1 : number) : void;
	static a(arg1 : number, arg2 : IntArrayList, arg3 : IntArrayList) : void;
	static b(arg1 : number, arg2 : IntArrayList, arg3 : IntArrayList) : void;
	static handleError(arg1 : Throwable) : RuntimeException;
}


declare interface FSRecords extends Forceable {}

declare module FSRecords {
	class AttributeOutputStream {
	}


	interface AttributeOutputStream extends DataOutputStream {}	class ContentOutputStream {
		writeBytes(arg1 : ByteSequence) : void;
	}


	interface ContentOutputStream extends DataOutputStream {}	class NameId extends Object {
		static EMPTY_ARRAY : FSRecords.NameId[];
		id : number;
		name : CharSequence;
		nameId : number;
		constructor(arg1 : number, arg2 : number, arg3 : CharSequence);
	}
	class DbConnection extends Object {
		static dirty : boolean;
		static timestamp : number;
		static names : PersistentStringEnumerator;
		static connect() : void;
		static a() : void;
		static getFreeRecord() : number;
		static a(arg1 : Throwable) : void;
		static b() : File;
		static c() : void;
		static d() : void;
		static e() : File;
		static f() : string;
		static g() : void;
		static h() : void;
		static force() : void;
		static flushSome() : void;
		static isDirty() : boolean;
		static i() : number;
		static getTimestamp() : number;
		static j() : void;
		static cleanRecord(arg1 : number) : void;
		static getNames() : PersistentStringEnumerator;
		static k() : void;
		static l() : void;
		static a(arg1 : string) : number;
		static b(arg1 : Throwable) : RuntimeException;
	}


	module DbConnection {
		class AttrPageAwareCapacityAllocationPolicy {
		}


		interface AttrPageAwareCapacityAllocationPolicy extends CapacityAllocationPolicy {}	}
}

export = FSRecords
