import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import FSRecords = require('nashorn/com/intellij/openapi/vfs/newvfs/persistent/FSRecords');
import NewVirtualFileSystem = require('nashorn/com/intellij/openapi/vfs/newvfs/NewVirtualFileSystem');
import NewVirtualFile = require('nashorn/com/intellij/openapi/vfs/newvfs/NewVirtualFile');
import List = require('nashorn/java/util/List');
import VFileEvent = require('nashorn/com/intellij/openapi/vfs/newvfs/events/VFileEvent');
import ManagingFS = require('nashorn/com/intellij/openapi/vfs/newvfs/ManagingFS');
import Annotation = require('nashorn/java/lang/annotation/Annotation');

declare class PersistentFS {
	static instance : PersistentFS;
	constructor();
	static getInstance() : PersistentFS;
	clearIdCache() : void;
	listPersisted(arg1 : VirtualFile) : string[];
	listAll(arg1 : VirtualFile) : FSRecords.NameId[];
	getId(arg1 : VirtualFile, arg2 : string, arg3 : NewVirtualFileSystem) : number;
	getName(arg1 : number) : string;
	isHidden(arg1 : VirtualFile) : boolean;
	getFileAttributes(arg1 : number) : number;
	static isDirectory(arg1 : number) : boolean;
	static isWritable(arg1 : number) : boolean;
	static isSymLink(arg1 : number) : boolean;
	static isSpecialFile(arg1 : number) : boolean;
	static isHidden(arg1 : number) : boolean;
	findFileByIdIfCached(arg1 : number) : NewVirtualFile;
	storeUnlinkedContent(arg1 : number[]) : number;
	contentsToByteArray(arg1 : number) : number[];
	contentsToByteArray(arg1 : VirtualFile, arg2 : boolean) : number[];
	acquireContent(arg1 : VirtualFile) : number;
	releaseContent(arg1 : number) : void;
	getCurrentContentId(arg1 : VirtualFile) : number;
	processEvents(arg1 : List<VFileEvent>) : void;
	static replaceWithNativeFS(arg1 : NewVirtualFileSystem) : NewVirtualFileSystem;
}


declare interface PersistentFS extends ManagingFS {}

declare module PersistentFS {
	class Attributes {
	}


	interface Attributes extends Annotation {}}

export = PersistentFS
