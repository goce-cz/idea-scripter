import Object = require('nashorn/java/lang/Object');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Set = require('nashorn/java/util/Set');
import Collection = require('nashorn/java/util/Collection');
import File = require('nashorn/java/io/File');
import InputStream = require('nashorn/java/io/InputStream');
import OutputStream = require('nashorn/java/io/OutputStream');
import VirtualFileFilter = require('nashorn/com/intellij/openapi/vfs/VirtualFileFilter');
import ContentIterator = require('nashorn/com/intellij/openapi/roots/ContentIterator');
import VirtualFileVisitor = require('nashorn/com/intellij/openapi/vfs/VirtualFileVisitor');
import Exception = require('nashorn/java/lang/Exception');
import Class = require('nashorn/java/lang/Class');
import List = require('nashorn/java/util/List');
import URL = require('nashorn/java/net/URL');
import Processor = require('nashorn/com/intellij/util/Processor');
import Convertor = require('nashorn/com/intellij/util/containers/Convertor');
import DistinctRootsCollection = require('nashorn/com/intellij/util/containers/DistinctRootsCollection');

declare class VfsUtilCore extends Object {
	static LOCALHOST_URI_PATH_PREFIX : string;
	static VFS_SEPARATOR_CHAR : string;
	constructor();
	static isAncestor(arg1 : VirtualFile, arg2 : VirtualFile, arg3 : boolean) : boolean;
	static isUnder(arg1 : VirtualFile, arg2 : Set<VirtualFile>) : boolean;
	static isUnder(arg1 : string, arg2 : Collection<string>) : boolean;
	static isEqualOrAncestor(arg1 : string, arg2 : string) : boolean;
	static isAncestor(arg1 : File, arg2 : File, arg3 : boolean) : boolean;
	static getRelativePath(arg1 : VirtualFile, arg2 : VirtualFile) : string;
	static getRelativePath(arg1 : VirtualFile, arg2 : VirtualFile, arg3 : string) : string;
	static getVirtualFileForJar(arg1 : VirtualFile) : VirtualFile;
	static copyFile(arg1 : Object, arg2 : VirtualFile, arg3 : VirtualFile) : VirtualFile;
	static copyFile(arg1 : Object, arg2 : VirtualFile, arg3 : VirtualFile, arg4 : string) : VirtualFile;
	static byteStreamSkippingBOM(arg1 : number[], arg2 : VirtualFile) : InputStream;
	static inputStreamSkippingBOM(arg1 : InputStream, arg2 : VirtualFile) : InputStream;
	static outputStreamAddingBOM(arg1 : OutputStream, arg2 : VirtualFile) : OutputStream;
	static iterateChildrenRecursively(arg1 : VirtualFile, arg2 : VirtualFileFilter, arg3 : ContentIterator) : boolean;
	static visitChildrenRecursively(arg1 : VirtualFile, arg2 : VirtualFileVisitor<any>) : VirtualFileVisitor.Result;
	static visitChildrenRecursively<E extends Exception>(arg1 : VirtualFile, arg2 : VirtualFileVisitor, arg3 : Class<E>) : VirtualFileVisitor.Result;
	static isBrokenLink(arg1 : VirtualFile) : boolean;
	static isInvalidLink(arg1 : VirtualFile) : boolean;
	static loadText(arg1 : VirtualFile) : string;
	static loadText(arg1 : VirtualFile, arg2 : number) : string;
	static toVirtualFileArray(arg1 : Collection<VirtualFile>) : VirtualFile[];
	static urlToPath(arg1 : string) : string;
	static virtualToIoFile(arg1 : VirtualFile) : File;
	static pathToUrl(arg1 : string) : string;
	static virtualToIoFiles(arg1 : Collection<VirtualFile>) : List<File>;
	static toIdeaUrl(arg1 : string) : string;
	static toIdeaUrl(arg1 : string, arg2 : boolean) : string;
	static fixURLforIDEA(arg1 : string) : string;
	static convertFromUrl(arg1 : URL) : string;
	static fixIDEAUrl(arg1 : string) : string;
	static findRelativeFile(arg1 : string, arg2 : VirtualFile) : VirtualFile;
	static processFilesRecursively(arg1 : VirtualFile, arg2 : Processor<VirtualFile>) : boolean;
	static getCommonAncestor(arg1 : VirtualFile, arg2 : VirtualFile) : VirtualFile;
	static getPathComponents(arg1 : VirtualFile) : VirtualFile[];
	static processFilesRecursively(arg1 : VirtualFile, arg2 : Processor<VirtualFile>, arg3 : Convertor<VirtualFile, boolean>) : void;
}


declare module VfsUtilCore {
	class DistinctVFilesRootsCollection {
		constructor();
		constructor(arg1 : Collection<VirtualFile>);
		constructor(arg1 : VirtualFile[]);
	}


	interface DistinctVFilesRootsCollection extends DistinctRootsCollection<VirtualFile> {}}

export = VfsUtilCore
