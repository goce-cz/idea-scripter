import Topic = require('nashorn/com/intellij/util/messages/Topic');
import BulkFileListener = require('nashorn/com/intellij/openapi/vfs/newvfs/BulkFileListener');
import VirtualFileSystem = require('nashorn/com/intellij/openapi/vfs/VirtualFileSystem');
import Runnable = require('nashorn/java/lang/Runnable');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import VirtualFileListener = require('nashorn/com/intellij/openapi/vfs/VirtualFileListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import VirtualFileManagerListener = require('nashorn/com/intellij/openapi/vfs/VirtualFileManagerListener');
import Object = require('nashorn/java/lang/Object');
import ModificationTracker = require('nashorn/com/intellij/openapi/util/ModificationTracker');

declare class VirtualFileManager {
	static VFS_CHANGES : Topic<BulkFileListener>;
	static instance : VirtualFileManager;
	constructor();
	static getInstance() : VirtualFileManager;
	getFileSystem(arg1 : string) : VirtualFileSystem;
	syncRefresh() : number;
	asyncRefresh(arg1 : Runnable) : number;
	refreshWithoutFileWatcher(arg1 : boolean) : void;
	findFileByUrl(arg1 : string) : VirtualFile;
	refreshAndFindFileByUrl(arg1 : string) : VirtualFile;
	addVirtualFileListener(arg1 : VirtualFileListener) : void;
	addVirtualFileListener(arg1 : VirtualFileListener, arg2 : Disposable) : void;
	removeVirtualFileListener(arg1 : VirtualFileListener) : void;
	static constructUrl(arg1 : string, arg2 : string) : string;
	static extractProtocol(arg1 : string) : string;
	static extractPath(arg1 : string) : string;
	addVirtualFileManagerListener(arg1 : VirtualFileManagerListener) : void;
	addVirtualFileManagerListener(arg1 : VirtualFileManagerListener, arg2 : Disposable) : void;
	removeVirtualFileManagerListener(arg1 : VirtualFileManagerListener) : void;
	notifyPropertyChanged(arg1 : VirtualFile, arg2 : string, arg3 : Object, arg4 : Object) : void;
}


declare interface VirtualFileManager extends ModificationTracker {}
export = VirtualFileManager
