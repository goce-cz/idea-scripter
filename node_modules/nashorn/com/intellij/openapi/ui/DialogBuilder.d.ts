import Window = require('nashorn/java/awt/Window');
import DialogWrapper = require('nashorn/com/intellij/openapi/ui/DialogWrapper');
import Component = require('nashorn/java/awt/Component');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import JComponent = require('nashorn/javax/swing/JComponent');
import Action = require('nashorn/javax/swing/Action');
import ArrayList = require('nashorn/java/util/ArrayList');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Runnable = require('nashorn/java/lang/Runnable');
import Class = require('nashorn/java/lang/Class');
import Object = require('nashorn/java/lang/Object');

declare class DialogBuilder {
	static REQUEST_FOCUS_ENABLED : string;
	window : Window;
	dialogWrapper : DialogWrapper;
	okAction : DialogBuilder.CustomizableAction;
	cancelAction : DialogBuilder.CustomizableAction;
	centerPanel : Component;
	constructor(arg1 : Project);
	constructor(arg1 : Component);
	constructor();
	show() : number;
	showAndGet() : boolean;
	showNotModal() : void;
	showImpl(arg1 : boolean) : DialogBuilder.MyDialogWrapper;
	setCenterPanel(arg1 : JComponent) : void;
	centerPanel(arg1 : JComponent) : DialogBuilder;
	setNorthPanel(arg1 : JComponent) : DialogBuilder;
	setTitle(arg1 : string) : void;
	title(arg1 : string) : DialogBuilder;
	setPreferredFocusComponent(arg1 : JComponent) : void;
	setDimensionServiceKey(arg1 : string) : void;
	dimensionKey(arg1 : string) : DialogBuilder;
	addAction(arg1 : Action) : void;
	addActionDescriptor<T extends DialogBuilder.ActionDescriptor>(arg1 : T) : T;
	getActionDescriptors() : ArrayList<DialogBuilder.ActionDescriptor>;
	setActionDescriptors(arg1 : DialogBuilder.ActionDescriptor[]) : void;
	removeAllActions() : void;
	getWindow() : Window;
	addOkAction() : DialogBuilder.CustomizableAction;
	addCancelAction() : DialogBuilder.CustomizableAction;
	addCloseButton() : DialogBuilder.CustomizableAction;
	addDisposable(arg1 : Disposable) : void;
	setButtonsAlignment(arg1 : number) : void;
	getDialogWrapper() : DialogWrapper;
	showModal(arg1 : boolean) : void;
	setHelpId(arg1 : string) : void;
	setCancelOperation(arg1 : Runnable) : void;
	setOkOperation(arg1 : Runnable) : void;
	setOkActionEnabled(arg1 : boolean) : void;
	okActionEnabled(arg1 : boolean) : DialogBuilder;
	resizable(arg1 : boolean) : DialogBuilder;
	getOkAction() : DialogBuilder.CustomizableAction;
	static get(arg1 : ArrayList<DialogBuilder.ActionDescriptor>, arg2 : Class) : DialogBuilder.CustomizableAction;
	getCancelAction() : DialogBuilder.CustomizableAction;
	getCenterPanel() : Component;
}


declare interface DialogBuilder extends Disposable {}

declare module DialogBuilder {
	class MyDialogWrapper {
		OKAction : Action;
		cancelAction : Action;
		preferredFocusedComponent : JComponent;
		setHelpId(arg1 : string) : void;
	}


	interface MyDialogWrapper extends DialogWrapper {}	class CancelActionDescriptor {
		constructor();
	}


	interface CancelActionDescriptor extends DialogBuilder.BuiltinAction {}	class OkActionDescriptor {
		constructor();
	}


	interface OkActionDescriptor extends DialogBuilder.BuiltinAction {}	class BuiltinAction {
		getBuiltinAction(arg1 : DialogBuilder.MyDialogWrapper) : Action;
	}


	interface BuiltinAction extends DialogBuilder.ActionDescriptor, DialogBuilder.CustomizableAction {}	class CustomActionDescriptor {
		constructor(arg1 : Action);
	}


	interface CustomActionDescriptor extends DialogBuilder.ActionDescriptor {}	class CustomizableAction extends Object {
		setText(arg1 : string) : void;
	}
	class CloseDialogAction {
		constructor();
		constructor(arg1 : string, arg2 : number, arg3 : number);
		static createDefault(arg1 : string, arg2 : number, arg3 : number) : DialogBuilder.CloseDialogAction;
	}


	interface CloseDialogAction extends DialogBuilder.DialogActionDescriptor {}	class DialogActionDescriptor {
		setDefault(arg1 : boolean) : void;
		createAction(arg1 : DialogWrapper) : Action;
	}


	interface DialogActionDescriptor extends DialogBuilder.ActionDescriptor {}	class ActionDescriptor extends Object {
		getAction(arg1 : DialogWrapper) : Action;
	}
}

export = DialogBuilder
