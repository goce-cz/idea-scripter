import Object = require('nashorn/java/lang/Object');
import Border = require('nashorn/javax/swing/border/Border');
import Container = require('nashorn/java/awt/Container');
import JComponent = require('nashorn/javax/swing/JComponent');
import Window = require('nashorn/java/awt/Window');
import JRootPane = require('nashorn/javax/swing/JRootPane');
import Dimension = require('nashorn/java/awt/Dimension');
import Point = require('nashorn/java/awt/Point');
import DialogWrapperPeer = require('nashorn/com/intellij/openapi/ui/DialogWrapperPeer');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Alarm = require('nashorn/com/intellij/util/Alarm');
import ValidationInfo = require('nashorn/com/intellij/openapi/ui/ValidationInfo');
import MouseListener = require('nashorn/java/awt/event/MouseListener');
import MouseMotionListener = require('nashorn/java/awt/event/MouseMotionListener');
import KeyListener = require('nashorn/java/awt/event/KeyListener');
import Action = require('nashorn/javax/swing/Action');
import JCheckBox = require('nashorn/javax/swing/JCheckBox');
import JPanel = require('nashorn/javax/swing/JPanel');
import List = require('nashorn/java/util/List');
import JButton = require('nashorn/javax/swing/JButton');
import Component = require('nashorn/java/awt/Component');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import AWTEvent = require('nashorn/java/awt/AWTEvent');
import LayoutManager = require('nashorn/java/awt/LayoutManager');
import Insets = require('nashorn/java/awt/Insets');
import Icon = require('nashorn/javax/swing/Icon');
import AsyncResult = require('nashorn/com/intellij/openapi/util/AsyncResult');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import ActionListener = require('nashorn/java/awt/event/ActionListener');
import ShortcutSet = require('nashorn/com/intellij/openapi/actionSystem/ShortcutSet');
import Enum = require('nashorn/java/lang/Enum');
import AbstractPainter = require('nashorn/com/intellij/openapi/ui/AbstractPainter');
import AbstractAction = require('nashorn/javax/swing/AbstractAction');
import ActionEvent = require('nashorn/java/awt/event/ActionEvent');
import Dialog = require('nashorn/java/awt/Dialog');

declare class DialogWrapper extends Object {
	static OK_EXIT_CODE : number;
	static CANCEL_EXIT_CODE : number;
	static CLOSE_EXIT_CODE : number;
	static NEXT_USER_EXIT_CODE : number;
	static DEFAULT_ACTION : string;
	static FOCUSED_ACTION : string;
	static ourDefaultBorder : Border;
	typeAheadEnabled : boolean;
	autoAdjustable : boolean;
	modalProgress : boolean;
	contentPane : Container;
	dimensionKey : string;
	exitCode : number;
	preferredFocusedComponent : JComponent;
	horizontalStretch : number;
	verticalStretch : number;
	owner : Window;
	window : Window;
	contentPanel : JComponent;
	rootPane : JRootPane;
	size : Dimension;
	title : string;
	preferredSize : Dimension;
	modal : boolean;
	oK : boolean;
	oKActionEnabled : boolean;
	visible : boolean;
	showing : boolean;
	resizable : void;
	location : Point;
	initialLocation : Point;
	typeAheadTimeoutMs : number;
	toDispatchTypeAhead : boolean;
	static multipleModalDialogs : boolean;
	peer : DialogWrapperPeer;
	disposable : Disposable;
	getDoNotShowMessage() : string;
	setDoNotAskOption(arg1 : DialogWrapper.DoNotAskOption) : void;
	getValidationThreadToUse() : Alarm.ThreadToUse;
	postponeValidation() : boolean;
	doValidate() : ValidationInfo;
	setValidationDelay(arg1 : number) : void;
	reportProblem(arg1 : ValidationInfo) : void;
	installErrorPainter() : void;
	clearProblems() : void;
	createDefaultActions() : void;
	setUndecorated(arg1 : boolean) : void;
	addMouseListener(arg1 : MouseListener) : void;
	addMouseListener(arg1 : MouseMotionListener) : void;
	addKeyListener(arg1 : KeyListener) : void;
	close(arg1 : number, arg2 : boolean) : void;
	close(arg1 : number) : void;
	createContentPaneBorder() : Border;
	createSouthPanel() : JComponent;
	getStyle() : DialogWrapper.DialogStyle;
	filter(arg1 : Action[]) : Action[];
	toBeShown() : boolean;
	isTypeAheadEnabled() : boolean;
	static addDoNotShowCheckBox(arg1 : JComponent, arg2 : JCheckBox) : JPanel;
	hasFocusedAction(arg1 : Action[]) : boolean;
	createButtons(arg1 : Action[], arg2 : List<JButton>) : JPanel;
	createJButtonForAction(arg1 : Action) : JButton;
	setMargin(arg1 : JButton) : void;
	createPeer(arg1 : Component, arg2 : boolean) : DialogWrapperPeer;
	createPeer(arg1 : boolean, arg2 : boolean) : DialogWrapperPeer;
	createPeer(arg1 : Window, arg2 : boolean, arg3 : DialogWrapper.IdeModalityType) : DialogWrapperPeer;
	createPeer(arg1 : Window, arg2 : boolean, arg3 : boolean) : DialogWrapperPeer;
	createPeer(arg1 : Project, arg2 : boolean, arg3 : DialogWrapper.IdeModalityType) : DialogWrapperPeer;
	createPeer(arg1 : Project, arg2 : boolean) : DialogWrapperPeer;
	createTitlePane() : JComponent;
	createNorthPanel() : JComponent;
	createCenterPanel() : JComponent;
	toFront() : void;
	toBack() : void;
	setAutoAdjustable(arg1 : boolean) : boolean;
	isAutoAdjustable() : boolean;
	dispose() : void;
	static unregisterKeyboardActions(arg1 : JRootPane) : void;
	doCancelAction() : void;
	processDoNotAskOnCancel() : void;
	doCancelAction(arg1 : AWTEvent) : void;
	clickDefaultButton() : void;
	doOKAction() : void;
	processDoNotAskOnOk(arg1 : number) : void;
	shouldCloseOnCross() : boolean;
	createActions() : Action[];
	createLeftSideActions() : Action[];
	getOKAction() : Action;
	getCancelAction() : Action;
	getHelpAction() : Action;
	isProgressDialog() : boolean;
	isModalProgress() : boolean;
	getContentPane() : Container;
	validate() : void;
	repaint() : void;
	getDimensionServiceKey() : string;
	getDimensionKey() : string;
	getExitCode() : number;
	getPreferredFocusedComponent() : JComponent;
	getHorizontalStretch() : number;
	getVerticalStretch() : number;
	setHorizontalStretch(arg1 : number) : void;
	setVerticalStretch(arg1 : number) : void;
	getOwner() : Window;
	getWindow() : Window;
	getContentPanel() : JComponent;
	getRootPane() : JRootPane;
	getSize() : Dimension;
	getTitle() : string;
	init() : void;
	createRootLayout() : LayoutManager;
	static installEnterHook(arg1 : JComponent) : void;
	expandNextOptionButton() : void;
	startTrackingValidation() : void;
	initValidation() : void;
	isNorthStrictedToPreferredSize() : boolean;
	isCenterStrictedToPreferredSize() : boolean;
	isSouthStrictedToPreferredSize() : boolean;
	createContentPane() : JComponent;
	pack() : void;
	getPreferredSize() : Dimension;
	setButtonsAlignment(arg1 : number) : void;
	setButtonsMargin(arg1 : Insets) : void;
	setCrossClosesWindow(arg1 : boolean) : void;
	setCancelButtonIcon(arg1 : Icon) : void;
	setCancelButtonText(arg1 : string) : void;
	setModal(arg1 : boolean) : void;
	isModal() : boolean;
	setOKActionEnabled(arg1 : boolean) : void;
	setOKButtonIcon(arg1 : Icon) : void;
	setOKButtonText(arg1 : string) : void;
	setOKButtonMnemonic(arg1 : number) : void;
	getHelpId() : string;
	doHelpAction() : void;
	isOK() : boolean;
	isOKActionEnabled() : boolean;
	isVisible() : boolean;
	isShowing() : boolean;
	setSize(arg1 : number, arg2 : number) : void;
	setTitle(arg1 : string) : void;
	isResizable() : void;
	setResizable(arg1 : boolean) : void;
	getLocation() : Point;
	setLocation(arg1 : Point) : void;
	setLocation(arg1 : number, arg2 : number) : void;
	centerRelativeToParent() : void;
	show() : void;
	showAndGet() : boolean;
	showAndGetOk() : AsyncResult<boolean>;
	invokeShow() : AsyncResult<boolean>;
	getInitialLocation() : Point;
	setInitialLocationCallback(arg1 : Computable<Point>) : void;
	registerKeyboardShortcuts() : void;
	createCancelAction() : ActionListener;
	registerForEveryKeyboardShortcut(arg1 : ActionListener, arg2 : ShortcutSet) : void;
	focusPreviousButton() : void;
	focusNextButton() : void;
	getTypeAheadTimeoutMs() : number;
	isToDispatchTypeAhead() : boolean;
	static isMultipleModalDialogs() : boolean;
	setErrorText(arg1 : string) : void;
	static findInstance(arg1 : Component) : DialogWrapper;
	static findInstanceFromFocus() : DialogWrapper;
	resizeWithAnimation(arg1 : Dimension) : void;
	getPeer() : DialogWrapperPeer;
	static ensureEventDispatchThread() : void;
	getDisposable() : Disposable;
	getErrorPaintingType() : DialogWrapper.ErrorPaintingType;
}


declare module DialogWrapper {
	class DialogStyle {
		static NO_STYLE : DialogWrapper.DialogStyle;
		static COMPACT : DialogWrapper.DialogStyle;
	}


	interface DialogStyle extends Enum<DialogWrapper.DialogStyle> {}	class ErrorPaintingType {
		static DOT : DialogWrapper.ErrorPaintingType;
		static SIGN : DialogWrapper.ErrorPaintingType;
		static LINE : DialogWrapper.ErrorPaintingType;
	}


	interface ErrorPaintingType extends Enum<DialogWrapper.ErrorPaintingType> {}	class ErrorPainter {
		setValidationInfo(arg1 : ValidationInfo) : void;
	}


	interface ErrorPainter extends AbstractPainter {}	class PropertyDoNotAskOption {
		toBeShown : boolean;
		doNotShowMessage : string;
		constructor(arg1 : string);
	}


	interface PropertyDoNotAskOption extends DialogWrapper.DoNotAskOption {}	class DoNotAskOption extends Object {
		toBeShown : boolean;
		doNotShowMessage : string;
		isToBeShown() : boolean;
		setToBeShown(arg1 : boolean, arg2 : number) : void;
		canBeHidden() : boolean;
		shouldSaveOptionsOnCancel() : boolean;
		getDoNotShowMessage() : string;
	}
	class ErrorText {
		setError(arg1 : string) : void;
		shouldBeVisible() : boolean;
		isTextSet(arg1 : string) : boolean;
	}


	interface ErrorText extends JPanel {}	class HelpAction {
	}


	interface HelpAction extends AbstractAction {}	class DialogWrapperExitAction {
		constructor(arg1 : string, arg2 : number);
	}


	interface DialogWrapperExitAction extends DialogWrapper.DialogWrapperAction {}	class CancelAction {
	}


	interface CancelAction extends DialogWrapper.DialogWrapperAction {}	class OkAction {
	}


	interface OkAction extends DialogWrapper.DialogWrapperAction {}	class DialogWrapperAction {
		doAction(arg1 : ActionEvent) : void;
	}


	interface DialogWrapperAction extends AbstractAction {}	class IdeModalityType {
		static IDE : DialogWrapper.IdeModalityType;
		static PROJECT : DialogWrapper.IdeModalityType;
		static MODELESS : DialogWrapper.IdeModalityType;
		toAwtModality() : Dialog.ModalityType;
	}


	interface IdeModalityType extends Enum<DialogWrapper.IdeModalityType> {}}

export = DialogWrapper
