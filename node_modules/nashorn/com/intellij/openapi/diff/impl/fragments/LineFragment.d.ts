import Iterator = require('nashorn/java/util/Iterator');
import Fragment = require('nashorn/com/intellij/openapi/diff/impl/fragments/Fragment');
import TextDiffTypeEnum = require('nashorn/com/intellij/openapi/diff/impl/util/TextDiffTypeEnum');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import DiffString = require('nashorn/com/intellij/openapi/diff/impl/string/DiffString');
import FragmentSide = require('nashorn/com/intellij/openapi/diff/impl/highlighting/FragmentSide');
import ArrayList = require('nashorn/java/util/ArrayList');
import LineBlock = require('nashorn/com/intellij/openapi/diff/impl/fragments/LineBlock');

declare class LineFragment {
	oneSide : boolean;
	equal : boolean;
	childrenIterator : Iterator<Fragment>;
	hasLineChildren : boolean;
	endLine1 : number;
	endLine2 : number;
	constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number, arg5 : TextDiffTypeEnum, arg6 : TextRange, arg7 : TextRange);
	adjustTypeFromChildrenTypes() : void;
	static shiftRange(arg1 : TextRange, arg2 : TextRange) : TextRange;
	isOneSide() : boolean;
	isEqual() : boolean;
	getChildrenIterator() : Iterator<Fragment>;
	getText(arg1 : DiffString, arg2 : FragmentSide) : DiffString;
	addAllDescendantsTo(arg1 : ArrayList<LineFragment>) : void;
	setChildren(arg1 : ArrayList<Fragment>) : void;
	checkChildren(arg1 : Iterator<Fragment>) : void;
	isSameRanges(arg1 : Fragment) : boolean;
	isHasLineChildren() : boolean;
}


declare interface LineFragment extends LineBlock, Fragment {}
export = LineFragment
