import CharSequence = require('nashorn/java/lang/CharSequence');
import LineTokenizerBase = require('nashorn/com/intellij/openapi/diff/LineTokenizerBase');

declare class DiffString {
	static EMPTY : DiffString;
	empty : boolean;
	emptyOrSpaces : boolean;
	leadingSpaces : DiffString;
	static createNullable(arg1 : string) : DiffString;
	static create(arg1 : string) : DiffString;
	static create(arg1 : string[]) : DiffString;
	static create(arg1 : string[], arg2 : number, arg3 : number) : DiffString;
	isEmpty() : boolean;
	data(arg1 : number) : string;
	substring(arg1 : number) : DiffString;
	substring(arg1 : number, arg2 : number) : DiffString;
	copy() : DiffString;
	copyData(arg1 : string[], arg2 : number) : void;
	static concatenateNullable(arg1 : DiffString, arg2 : DiffString) : DiffString;
	static concatenate(arg1 : DiffString, arg2 : DiffString) : DiffString;
	static canInplaceConcatenate(arg1 : DiffString, arg2 : DiffString) : boolean;
	static concatenateCopying(arg1 : DiffString[]) : DiffString;
	static concatenateCopying(arg1 : DiffString[], arg2 : number, arg3 : number) : DiffString;
	static concatenate(arg1 : DiffString, arg2 : string) : DiffString;
	static concatenate(arg1 : string, arg2 : DiffString) : DiffString;
	static concatenate(arg1 : DiffString[]) : DiffString;
	static concatenate(arg1 : DiffString[], arg2 : number, arg3 : number) : DiffString;
	append(arg1 : string) : DiffString;
	preappend(arg1 : string) : DiffString;
	static isWhiteSpace(arg1 : string) : boolean;
	isEmptyOrSpaces() : boolean;
	trim() : DiffString;
	trimLeading() : DiffString;
	trimTrailing() : DiffString;
	getLeadingSpaces() : DiffString;
	skipSpaces() : DiffString;
	indexOf(arg1 : string) : number;
	endsWith(arg1 : string) : boolean;
	static checkBounds(arg1 : number, arg2 : number, arg3 : number) : void;
	tokenize() : DiffString[];
}


declare interface DiffString extends CharSequence {}

declare module DiffString {
	class LineTokenizer {
		constructor(arg1 : DiffString);
		execute() : DiffString[];
	}


	interface LineTokenizer extends LineTokenizerBase<DiffString> {}}

export = DiffString
