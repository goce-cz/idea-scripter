import Presentation = require('nashorn/com/intellij/openapi/actionSystem/Presentation');
import JComponent = require('nashorn/javax/swing/JComponent');
import DefaultActionGroup = require('nashorn/com/intellij/openapi/actionSystem/DefaultActionGroup');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import CustomComponentAction = require('nashorn/com/intellij/openapi/actionSystem/ex/CustomComponentAction');
import Insets = require('nashorn/java/awt/Insets');
import Dimension = require('nashorn/java/awt/Dimension');
import Font = require('nashorn/java/awt/Font');
import MouseEvent = require('nashorn/java/awt/event/MouseEvent');
import Runnable = require('nashorn/java/lang/Runnable');
import JBPopup = require('nashorn/com/intellij/openapi/ui/popup/JBPopup');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import JButton = require('nashorn/javax/swing/JButton');
import UserActivityProviderComponent = require('nashorn/com/intellij/ui/UserActivityProviderComponent');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import DefaultButtonModel = require('nashorn/javax/swing/DefaultButtonModel');

declare class ComboBoxAction {
	smallVariant : boolean;
	createComboBoxButton(arg1 : Presentation) : ComboBoxAction.ComboBoxButton;
	isSmallVariant() : boolean;
	setSmallVariant(arg1 : boolean) : void;
	setPopupTitle(arg1 : string) : void;
	createPopupActionGroup(arg1 : JComponent) : DefaultActionGroup;
	getMaxRows() : number;
	getMinHeight() : number;
	getMinWidth() : number;
	getPreselectCondition() : Condition<AnAction>;
}


declare interface ComboBoxAction extends AnAction, CustomComponentAction {}

declare module ComboBoxAction {
	class ComboBoxButton {
		toolTipText : string;
		insets : Insets;
		opaque : boolean;
		preferredSize : Dimension;
		minimumSize : Dimension;
		font : Font;
		constructor(arg1 : Presentation);
		dispatchEventToPopup(arg1 : MouseEvent) : void;
		setForceTransparent(arg1 : boolean) : void;
		showPopup() : void;
		createPopup(arg1 : Runnable) : JBPopup;
		getDataContext() : DataContext;
		initButton() : void;
		updateTooltipText(arg1 : string) : void;
		updateButtonSize() : void;
	}


	interface ComboBoxButton extends JButton, UserActivityProviderComponent {}

	module ComboBoxButton {
		class MyButtonSynchronizer {
		}


		interface MyButtonSynchronizer extends PropertyChangeListener {}		class MyButtonModel {
			pressed : boolean;
			armed : boolean;
		}


		interface MyButtonModel extends DefaultButtonModel {}	}
}

export = ComboBoxAction
