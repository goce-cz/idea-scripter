import Comparator = require('nashorn/java/util/Comparator');
import ActionGroup = require('nashorn/com/intellij/openapi/actionSystem/ActionGroup');
import ActionToolbar = require('nashorn/com/intellij/openapi/actionSystem/ActionToolbar');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import AnActionEvent = require('nashorn/com/intellij/openapi/actionSystem/AnActionEvent');
import KeyStroke = require('nashorn/javax/swing/KeyStroke');
import PluginId = require('nashorn/com/intellij/openapi/extensions/PluginId');
import InputEvent = require('nashorn/java/awt/event/InputEvent');
import ActionManager = require('nashorn/com/intellij/openapi/actionSystem/ActionManager');

declare class ActionManagerEx {
	static instanceEx : ActionManagerEx;
	lastPreformedActionId : string;
	prevPreformedActionId : string;
	registrationOrderComparator : Comparator<string>;
	actionPopupStackEmpty : boolean;
	transparentOnlyActionsUpdateNow : boolean;
	constructor();
	static getInstanceEx() : ActionManagerEx;
	createActionToolbar(arg1 : string, arg2 : ActionGroup, arg3 : boolean, arg4 : boolean) : ActionToolbar;
	fireBeforeActionPerformed(arg1 : AnAction, arg2 : DataContext, arg3 : AnActionEvent) : void;
	fireAfterActionPerformed(arg1 : AnAction, arg2 : DataContext, arg3 : AnActionEvent) : void;
	fireBeforeEditorTyping(arg1 : string, arg2 : DataContext) : void;
	getLastPreformedActionId() : string;
	getPrevPreformedActionId() : string;
	getRegistrationOrderComparator() : Comparator<string>;
	static getKeyStroke(arg1 : string) : KeyStroke;
	getPluginActions(arg1 : PluginId) : string[];
	queueActionPerformedEvent(arg1 : AnAction, arg2 : DataContext, arg3 : AnActionEvent) : void;
	isActionPopupStackEmpty() : boolean;
	isTransparentOnlyActionsUpdateNow() : boolean;
	fireBeforeActionPerformed(arg1 : string, arg2 : InputEvent) : void;
}


declare interface ActionManagerEx extends ActionManager {}
export = ActionManagerEx
