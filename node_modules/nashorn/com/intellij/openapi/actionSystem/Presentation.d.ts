import Icon = require('nashorn/javax/swing/Icon');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import Object = require('nashorn/java/lang/Object');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class Presentation {
	static PROP_TEXT : string;
	static PROP_MNEMONIC_KEY : string;
	static PROP_MNEMONIC_INDEX : string;
	static PROP_DESCRIPTION : string;
	static PROP_ICON : string;
	static PROP_DISABLED_ICON : string;
	static PROP_SELECTED_ICON : string;
	static PROP_HOVERED_ICON : string;
	static PROP_VISIBLE : string;
	static PROP_ENABLED : string;
	static DEFAULT_WEIGHT : number;
	static HIGHER_WEIGHT : number;
	static EVEN_HIGHER_WEIGHT : number;
	text : string;
	textWithMnemonic : string;
	description : string;
	icon : Icon;
	disabledIcon : Icon;
	hoveredIcon : Icon;
	selectedIcon : Icon;
	mnemonic : number;
	displayedMnemonicIndex : number;
	visible : boolean;
	enabled : boolean;
	weight : number;
	enabledAndVisible : boolean;
	constructor();
	constructor(arg1 : string);
	addPropertyChangeListener(arg1 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : PropertyChangeListener) : void;
	getText() : string;
	setText(arg1 : string, arg2 : boolean) : void;
	setText(arg1 : string) : void;
	getTextWithMnemonic() : string;
	restoreTextWithMnemonic(arg1 : Presentation) : void;
	static restoreTextWithMnemonic(arg1 : string, arg2 : number) : string;
	getDescription() : string;
	setDescription(arg1 : string) : void;
	getIcon() : Icon;
	setIcon(arg1 : Icon) : void;
	getDisabledIcon() : Icon;
	setDisabledIcon(arg1 : Icon) : void;
	getHoveredIcon() : Icon;
	setHoveredIcon(arg1 : Icon) : void;
	getSelectedIcon() : Icon;
	setSelectedIcon(arg1 : Icon) : void;
	getMnemonic() : number;
	getDisplayedMnemonicIndex() : number;
	isVisible() : boolean;
	setVisible(arg1 : boolean) : void;
	isEnabled() : boolean;
	setEnabled(arg1 : boolean) : void;
	setEnabledAndVisible(arg1 : boolean) : void;
	firePropertyChange(arg1 : string, arg2 : Object, arg3 : Object) : void;
	copyFrom(arg1 : Presentation) : void;
	getClientProperty(arg1 : string) : Object;
	putClientProperty(arg1 : string, arg2 : Object) : void;
	getWeight() : number;
	setWeight(arg1 : number) : void;
	isEnabledAndVisible() : boolean;
}


declare interface Presentation extends Cloneable {}
export = Presentation
