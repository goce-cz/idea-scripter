import ActionGroup = require('nashorn/com/intellij/openapi/actionSystem/ActionGroup');
import ActionPopupMenu = require('nashorn/com/intellij/openapi/actionSystem/ActionPopupMenu');
import ActionToolbar = require('nashorn/com/intellij/openapi/actionSystem/ActionToolbar');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import PluginId = require('nashorn/com/intellij/openapi/extensions/PluginId');
import JComponent = require('nashorn/javax/swing/JComponent');
import TimerListener = require('nashorn/com/intellij/openapi/actionSystem/TimerListener');
import InputEvent = require('nashorn/java/awt/event/InputEvent');
import Component = require('nashorn/java/awt/Component');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import AnActionListener = require('nashorn/com/intellij/openapi/actionSystem/ex/AnActionListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import KeyboardShortcut = require('nashorn/com/intellij/openapi/actionSystem/KeyboardShortcut');
import ApplicationComponent = require('nashorn/com/intellij/openapi/components/ApplicationComponent');

declare class ActionManager {
	static instance : ActionManager;
	constructor();
	static getInstance() : ActionManager;
	createActionPopupMenu(arg1 : string, arg2 : ActionGroup) : ActionPopupMenu;
	createActionToolbar(arg1 : string, arg2 : ActionGroup, arg3 : boolean) : ActionToolbar;
	getAction(arg1 : string) : AnAction;
	getId(arg1 : AnAction) : string;
	registerAction(arg1 : string, arg2 : AnAction) : void;
	registerAction(arg1 : string, arg2 : AnAction, arg3 : PluginId) : void;
	unregisterAction(arg1 : string) : void;
	getActionIds(arg1 : string) : string[];
	isGroup(arg1 : string) : boolean;
	createButtonToolbar(arg1 : string, arg2 : ActionGroup) : JComponent;
	getActionOrStub(arg1 : string) : AnAction;
	addTimerListener(arg1 : number, arg2 : TimerListener) : void;
	removeTimerListener(arg1 : TimerListener) : void;
	addTransparentTimerListener(arg1 : number, arg2 : TimerListener) : void;
	removeTransparentTimerListener(arg1 : TimerListener) : void;
	tryToExecute(arg1 : AnAction, arg2 : InputEvent, arg3 : Component, arg4 : string, arg5 : boolean) : ActionCallback;
	addAnActionListener(arg1 : AnActionListener) : void;
	addAnActionListener(arg1 : AnActionListener, arg2 : Disposable) : void;
	removeAnActionListener(arg1 : AnActionListener) : void;
	getKeyboardShortcut(arg1 : string) : KeyboardShortcut;
}


declare interface ActionManager extends ApplicationComponent {}
export = ActionManager
