import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import List = require('nashorn/java/util/List');
import ActionManager = require('nashorn/com/intellij/openapi/actionSystem/ActionManager');
import ActionInGroup = require('nashorn/com/intellij/openapi/actionSystem/ActionInGroup');
import Constraints = require('nashorn/com/intellij/openapi/actionSystem/Constraints');
import AnActionEvent = require('nashorn/com/intellij/openapi/actionSystem/AnActionEvent');
import ActionStub = require('nashorn/com/intellij/openapi/actionSystem/ActionStub');
import ActionGroup = require('nashorn/com/intellij/openapi/actionSystem/ActionGroup');
import Collection = require('nashorn/java/util/Collection');

declare class DefaultActionGroup {
	childrenCount : number;
	childActionsOrStubs : AnAction[];
	constructor();
	constructor(arg1 : AnAction[]);
	constructor(arg1 : List<AnAction>);
	constructor(arg1 : string, arg2 : List<AnAction>);
	constructor(arg1 : string, arg2 : boolean);
	addActions(arg1 : List<AnAction>) : void;
	add(arg1 : AnAction, arg2 : ActionManager) : void;
	add(arg1 : AnAction) : void;
	addAction(arg1 : AnAction) : ActionInGroup;
	addSeparator() : void;
	add(arg1 : AnAction, arg2 : Constraints) : void;
	addAction(arg1 : AnAction, arg2 : Constraints) : ActionInGroup;
	add(arg1 : AnAction, arg2 : Constraints, arg3 : ActionManager) : void;
	addAction(arg1 : AnAction, arg2 : Constraints, arg3 : ActionManager) : ActionInGroup;
	actionAdded(arg1 : AnAction, arg2 : ActionManager) : void;
	addToSortedList(arg1 : AnAction, arg2 : Constraints, arg3 : ActionManager) : boolean;
	static findIndex(arg1 : string, arg2 : List<AnAction>, arg3 : ActionManager) : number;
	remove(arg1 : AnAction) : void;
	removeAll() : void;
	replaceAction(arg1 : AnAction, arg2 : AnAction) : boolean;
	copyFromGroup(arg1 : DefaultActionGroup) : void;
	unStub(arg1 : AnActionEvent, arg2 : ActionStub) : AnAction;
	getChildrenCount() : number;
	getChildActionsOrStubs() : AnAction[];
	addAll(arg1 : ActionGroup) : void;
	addAll(arg1 : Collection<AnAction>) : void;
	addAll(arg1 : AnAction[]) : void;
	addSeparator(arg1 : string) : void;
}


declare interface DefaultActionGroup extends ActionGroup {}
export = DefaultActionGroup
