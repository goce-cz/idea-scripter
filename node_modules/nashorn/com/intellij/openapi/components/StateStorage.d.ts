import Object = require('nashorn/java/lang/Object');
import Topic = require('nashorn/com/intellij/util/messages/Topic');
import Class = require('nashorn/java/lang/Class');
import Collection = require('nashorn/java/util/Collection');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Set = require('nashorn/java/util/Set');
import VirtualFileEvent = require('nashorn/com/intellij/openapi/vfs/VirtualFileEvent');
import Storage = require('nashorn/com/intellij/openapi/components/Storage');

declare class StateStorage extends Object {
	static STORAGE_TOPIC : Topic<StateStorage.Listener>;
	static PROJECT_STORAGE_TOPIC : Topic<StateStorage.Listener>;
	getState<T>(arg1 : Object, arg2 : string, arg3 : Class<T>, arg4 : T) : T;
	hasState(arg1 : Object, arg2 : string, arg3 : Class<any>, arg4 : boolean) : boolean;
	startExternalization() : StateStorage.ExternalizationSession;
	analyzeExternalChangesAndUpdateIfNeed(arg1 : Collection<VirtualFile>, arg2 : Set<string>) : void;
}


declare module StateStorage {
	class Listener extends Object {
		storageFileChanged(arg1 : VirtualFileEvent, arg2 : StateStorage) : void;
	}
	class SaveSession extends Object {
		save() : void;
	}
	class ExternalizationSession extends Object {
		setState(arg1 : Object, arg2 : string, arg3 : Object, arg4 : Storage) : void;
		createSaveSession() : StateStorage.SaveSession;
	}
}

export = StateStorage
