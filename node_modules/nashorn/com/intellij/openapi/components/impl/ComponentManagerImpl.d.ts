import MessageBus = require('nashorn/com/intellij/util/messages/MessageBus');
import MutablePicoContainer = require('nashorn/org/picocontainer/MutablePicoContainer');
import ComponentConfig = require('nashorn/com/intellij/openapi/components/ComponentConfig');
import Class = require('nashorn/java/lang/Class');
import Object = require('nashorn/java/lang/Object');
import ProgressIndicator = require('nashorn/com/intellij/openapi/progress/ProgressIndicator');
import Throwable = require('nashorn/java/lang/Throwable');
import Map = require('nashorn/java/util/Map');
import PluginDescriptor = require('nashorn/com/intellij/openapi/extensions/PluginDescriptor');
import ComponentManager = require('nashorn/com/intellij/openapi/components/ComponentManager');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');
import ComponentManagerEx = require('nashorn/com/intellij/openapi/components/ex/ComponentManagerEx');
import Disposable = require('nashorn/org/picocontainer/Disposable');
import ComponentAdapter = require('nashorn/org/picocontainer/ComponentAdapter');
import List = require('nashorn/java/util/List');
import BaseComponent = require('nashorn/com/intellij/openapi/components/BaseComponent');

declare class ComponentManagerImpl {
	messageBus : MessageBus;
	componentsCreated : boolean;
	picoContainer : MutablePicoContainer;
	disposed : boolean;
	componentConfigurations : ComponentConfig[];
	init() : void;
	isComponentsCreated() : boolean;
	a() : void;
	createComponent(arg1 : Class) : Object;
	disposeComponents() : void;
	getComponentFromContainer<T>(arg1 : Class<T>) : T;
	static getProgressIndicator() : ProgressIndicator;
	getPercentageOfComponentsLoaded() : number;
	handleInitComponentError(arg1 : Throwable, arg2 : string, arg3 : ComponentConfig) : void;
	registerComponentImplementation(arg1 : Class, arg2 : Class) : void;
	registerComponentInstance<T>(arg1 : Class<T>, arg2 : T) : T;
	getComponents() : Object[];
	createPicoContainer() : MutablePicoContainer;
	isComponentSuitable(arg1 : Map<string, string>) : boolean;
	static a(arg1 : Map<string, string>, arg2 : string) : boolean;
	setTemporarilyDisposed(arg1 : boolean) : void;
	loadComponentsConfiguration(arg1 : ComponentConfig[], arg2 : PluginDescriptor, arg3 : boolean) : void;
	bootstrapPicoContainer(arg1 : string) : void;
	getParentComponentManager() : ComponentManager;
	static b() : boolean;
	getComponentConfigurations() : ComponentConfig[];
	getComponent(arg1 : ComponentConfig) : Object;
	getConfig(arg1 : Class) : ComponentConfig;
	static getComponentName(arg1 : Object) : string;
	logSlowComponents() : boolean;
}


declare interface ComponentManagerImpl extends UserDataHolderBase, ComponentManagerEx, Disposable {}

declare module ComponentManagerImpl {
	class ComponentConfigComponentAdapter {
		componentKey : Object;
		componentImplementation : Class;
		constructor(arg1 : ComponentConfig, arg2 : Class<any>);
	}


	interface ComponentConfigComponentAdapter extends ComponentAdapter {}	class ComponentsRegistry extends Object {
		percentageOfComponentsLoaded : number;
		registeredImplementations : List<Object>;
		componentConfigurations : ComponentConfig[];
		a() : void;
		a(arg1 : ComponentConfig) : void;
		a(arg1 : Class) : Object;
		b() : Class[];
		b(arg1 : Class) : boolean;
		getPercentageOfComponentsLoaded() : number;
		a(arg1 : Object) : void;
		getRegisteredImplementations() : List<Object>;
		b(arg1 : ComponentConfig) : void;
		a(arg1 : string) : BaseComponent;
		getComponentsByType<T>(arg1 : Class<T>) : T[];
		getComponentConfigurations() : ComponentConfig[];
		getConfig(arg1 : Class) : ComponentConfig;
	}
	class HeadlessHolder extends Object {
	}
}

export = ComponentManagerImpl
