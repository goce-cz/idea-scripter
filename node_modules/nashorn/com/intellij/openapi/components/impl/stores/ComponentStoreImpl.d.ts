import Object = require('nashorn/java/lang/Object');
import Storage = require('nashorn/com/intellij/openapi/components/Storage');
import StateStorageManager = require('nashorn/com/intellij/openapi/components/impl/stores/StateStorageManager');
import List = require('nashorn/java/util/List');
import StateStorage = require('nashorn/com/intellij/openapi/components/StateStorage');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Throwable = require('nashorn/java/lang/Throwable');
import PersistentStateComponent = require('nashorn/com/intellij/openapi/components/PersistentStateComponent');
import JDOMExternalizable = require('nashorn/com/intellij/openapi/util/JDOMExternalizable');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Set = require('nashorn/java/util/Set');
import PathMacroManager = require('nashorn/com/intellij/openapi/components/PathMacroManager');
import Class = require('nashorn/java/lang/Class');
import State = require('nashorn/com/intellij/openapi/components/State');
import StateStorageOperation = require('nashorn/com/intellij/openapi/components/StateStorageOperation');
import StateStorageChooser = require('nashorn/com/intellij/openapi/components/StateStorageChooser');
import MessageBus = require('nashorn/com/intellij/util/messages/MessageBus');
import Collection = require('nashorn/java/util/Collection');
import IComponentStore = require('nashorn/com/intellij/openapi/components/impl/stores/IComponentStore');
import Enum = require('nashorn/java/lang/Enum');

declare class ComponentStoreImpl {
	constructor();
	saveApplicationComponent(arg1 : Object) : void;
	static a(arg1 : Storage[]) : Storage;
	a(arg1 : StateStorageManager.ExternalizationSession, arg2 : Object, arg3 : string) : void;
	doSave(arg1 : List<StateStorage.SaveSession>, arg2 : List<Pair<StateStorage.SaveSession, VirtualFile>>, arg3 : List<Throwable>) : List<Throwable>;
	static executeSave(arg1 : StateStorage.SaveSession, arg2 : List<Pair<StateStorage.SaveSession, VirtualFile>>, arg3 : List<Throwable>) : List<Throwable>;
	a<T>(arg1 : PersistentStateComponent<T>, arg2 : StateStorageManager.ExternalizationSession, arg3 : string) : void;
	a(arg1 : JDOMExternalizable) : void;
	a(arg1 : string, arg2 : Object) : void;
	a(arg1 : JDOMExternalizable, arg2 : string) : void;
	getProject() : Project;
	a(arg1 : string, arg2 : boolean) : void;
	a<T>(arg1 : PersistentStateComponent<T>, arg2 : Set<StateStorage>, arg3 : boolean) : string;
	getPathMacroManagerForDefaults() : PathMacroManager;
	getDefaultState<T>(arg1 : Object, arg2 : string, arg3 : Class<T>) : T;
	static getComponentName(arg1 : PersistentStateComponent<any>) : string;
	getComponentStorageSpecs<T>(arg1 : PersistentStateComponent<T>, arg2 : State, arg3 : StateStorageOperation) : Storage[];
	optimizeTestLoading() : boolean;
	getDefaultStateStorageChooser() : StateStorageChooser<PersistentStateComponent<any>>;
	reinitComponent(arg1 : string, arg2 : Set<StateStorage>) : boolean;
	getMessageBus() : MessageBus;
	reinitComponents(arg1 : Set<string>, arg2 : Collection<string>, arg3 : Set<StateStorage>) : void;
	static reloadStore(arg1 : Collection<Pair<VirtualFile, StateStorage>>, arg2 : IComponentStore.Reloadable) : ComponentStoreImpl.ReloadComponentStoreStatus;
	static askToRestart(arg1 : IComponentStore.Reloadable, arg2 : Collection<string>, arg3 : Collection<Pair<VirtualFile, StateStorage>>) : boolean;
}


declare interface ComponentStoreImpl extends IComponentStore.Reloadable {}

declare module ComponentStoreImpl {
	class ReloadComponentStoreStatus {
		static RESTART_AGREED : ComponentStoreImpl.ReloadComponentStoreStatus;
		static RESTART_CANCELLED : ComponentStoreImpl.ReloadComponentStoreStatus;
		static ERROR : ComponentStoreImpl.ReloadComponentStoreStatus;
		static SUCCESS : ComponentStoreImpl.ReloadComponentStoreStatus;
	}


	interface ReloadComponentStoreStatus extends Enum<ComponentStoreImpl.ReloadComponentStoreStatus> {}}

export = ComponentStoreImpl
