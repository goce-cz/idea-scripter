import Object = require('nashorn/java/lang/Object');
import StateStorageManager = require('nashorn/com/intellij/openapi/components/impl/stores/StateStorageManager');
import Set = require('nashorn/java/util/Set');
import Collection = require('nashorn/java/util/Collection');
import List = require('nashorn/java/util/List');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import StateStorage = require('nashorn/com/intellij/openapi/components/StateStorage');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import MultiMap = require('nashorn/com/intellij/util/containers/MultiMap');
import RuntimeException = require('nashorn/java/lang/RuntimeException');

declare class IComponentStore extends Object {
	stateStorageManager : StateStorageManager;
	initComponent(arg1 : Object, arg2 : boolean) : void;
	reinitComponents(arg1 : Set<string>, arg2 : boolean) : void;
	getNotReloadableComponents(arg1 : Collection<string>) : Collection<string>;
	isReloadPossible(arg1 : Set<string>) : boolean;
	load() : void;
	getStateStorageManager() : StateStorageManager;
	save(arg1 : List<Pair<StateStorage.SaveSession, VirtualFile>>) : void;
}


declare module IComponentStore {
	class Reloadable {
		reload(arg1 : MultiMap<StateStorage, VirtualFile>) : Collection<string>;
	}


	interface Reloadable extends IComponentStore {}	class SaveCancelledException {
		constructor();
		constructor(arg1 : string);
	}


	interface SaveCancelledException extends RuntimeException {}}

export = IComponentStore
