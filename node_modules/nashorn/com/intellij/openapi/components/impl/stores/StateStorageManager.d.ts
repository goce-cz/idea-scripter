import Object = require('nashorn/java/lang/Object');
import TrackingPathMacroSubstitutor = require('nashorn/com/intellij/openapi/components/TrackingPathMacroSubstitutor');
import Collection = require('nashorn/java/util/Collection');
import StreamProvider = require('nashorn/com/intellij/openapi/components/impl/stores/StreamProvider');
import Storage = require('nashorn/com/intellij/openapi/components/Storage');
import StateStorage = require('nashorn/com/intellij/openapi/components/StateStorage');
import RoamingType = require('nashorn/com/intellij/openapi/components/RoamingType');
import Couple = require('nashorn/com/intellij/openapi/util/Couple');
import FileBasedStorage = require('nashorn/com/intellij/openapi/components/impl/stores/FileBasedStorage');
import StateStorageOperation = require('nashorn/com/intellij/openapi/components/StateStorageOperation');
import List = require('nashorn/java/util/List');

declare class StateStorageManager extends Object {
	macroSubstitutor : TrackingPathMacroSubstitutor;
	storageFileNames : Collection<string>;
	streamProvider : StreamProvider;
	addMacro(arg1 : string, arg2 : string) : void;
	getMacroSubstitutor() : TrackingPathMacroSubstitutor;
	getStateStorage(arg1 : Storage) : StateStorage;
	getStateStorage(arg1 : string, arg2 : RoamingType) : StateStorage;
	getCachedFileStateStorages(arg1 : Collection<string>, arg2 : Collection<string>) : Couple<Collection<FileBasedStorage>>;
	getStorageFileNames() : Collection<string>;
	clearStateStorage(arg1 : string) : void;
	startExternalization() : StateStorageManager.ExternalizationSession;
	getOldStorage(arg1 : Object, arg2 : string, arg3 : StateStorageOperation) : StateStorage;
	expandMacros(arg1 : string) : string;
	collapseMacros(arg1 : string) : string;
	setStreamProvider(arg1 : StreamProvider) : void;
	getStreamProvider() : StreamProvider;
}


declare module StateStorageManager {
	class ExternalizationSession extends Object {
		setState(arg1 : Storage[], arg2 : Object, arg3 : string, arg4 : Object) : void;
		setStateInOldStorage(arg1 : Object, arg2 : string, arg3 : Object) : void;
		createSaveSessions() : List<StateStorage.SaveSession>;
	}
}

export = StateStorageManager
