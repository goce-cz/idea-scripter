import Element = require('nashorn/org/jdom/Element');
import StorageData = require('nashorn/com/intellij/openapi/components/impl/stores/StorageData');
import Map = require('nashorn/java/util/Map');
import StateStorageBase = require('nashorn/com/intellij/openapi/components/impl/stores/StateStorageBase');
import BufferExposingByteArrayOutputStream = require('nashorn/com/intellij/openapi/util/io/BufferExposingByteArrayOutputStream');
import RoamingType = require('nashorn/com/intellij/openapi/components/RoamingType');
import SaveSessionBase = require('nashorn/com/intellij/openapi/components/impl/stores/SaveSessionBase');

declare class XmlElementStorage {
	loadLocalData() : Element;
	loadDataFromStreamProvider() : Element;
	loadState(arg1 : StorageData, arg2 : Element) : void;
	createStorageData() : StorageData;
	setDefaultState(arg1 : Element) : void;
	createSaveSession(arg1 : StorageData) : XmlElementStorage.XmlElementStorageSaveSession;
	getElement(arg1 : StorageData, arg2 : boolean, arg3 : Map<string, Element>) : Element;
}


declare interface XmlElementStorage extends StateStorageBase<StorageData> {}

declare module XmlElementStorage {
	class XmlElementStorageSaveSession {
		constructor(arg1 : StorageData);
		forceSave() : void;
		isCollapsePathsOnSave() : boolean;
		doSave(arg1 : Element) : void;
		saveForProvider(arg1 : BufferExposingByteArrayOutputStream, arg2 : Element) : void;
		a(arg1 : Element, arg2 : RoamingType, arg3 : BufferExposingByteArrayOutputStream) : void;
	}


	interface XmlElementStorageSaveSession extends SaveSessionBase {}}

export = XmlElementStorage
