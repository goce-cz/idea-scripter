import Set = require('nashorn/java/util/Set');
import Element = require('nashorn/org/jdom/Element');
import PathMacroSubstitutor = require('nashorn/com/intellij/openapi/components/PathMacroSubstitutor');
import Map = require('nashorn/java/util/Map');
import Object = require('nashorn/java/lang/Object');
import StorageDataBase = require('nashorn/com/intellij/openapi/components/impl/stores/StorageDataBase');

declare class StorageData {
	static COMPONENT : string;
	static NAME : string;
	componentNames : Set<string>;
	constructor();
	constructor(arg1 : string);
	load(arg1 : Element, arg2 : PathMacroSubstitutor, arg3 : boolean) : void;
	static getComponentNameIfValid(arg1 : Element) : string;
	save(arg1 : Map<string, Element>) : Element;
	getState(arg1 : string) : Element;
	getStateAndArchive(arg1 : string) : Element;
	static setStateAndCloneIfNeed(arg1 : string, arg2 : Element, arg3 : StorageData, arg4 : Map<string, Element>) : StorageData;
	setState(arg1 : string, arg2 : Element, arg3 : Map<string, Element>) : Object;
	static a(arg1 : Element) : void;
	getChangedComponentNames(arg1 : StorageData, arg2 : PathMacroSubstitutor) : Set<string>;
}


declare interface StorageData extends StorageDataBase {}
export = StorageData
