import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import ModuleImpl = require('nashorn/com/intellij/openapi/module/impl/ModuleImpl');
import PathMacroManager = require('nashorn/com/intellij/openapi/components/PathMacroManager');
import BaseFileConfigurableStoreImpl = require('nashorn/com/intellij/openapi/components/impl/stores/BaseFileConfigurableStoreImpl');
import IModuleStore = require('nashorn/com/intellij/openapi/components/impl/stores/IModuleStore');
import Module = require('nashorn/com/intellij/openapi/module/Module');

declare class ModuleStoreImpl {
	mainStorageData : ModuleStoreImpl.ModuleFileData;
	moduleFile : VirtualFile;
	moduleFilePath : string;
	moduleFileName : string;
	constructor(arg1 : ModuleImpl, arg2 : PathMacroManager);
}


declare interface ModuleStoreImpl extends BaseFileConfigurableStoreImpl, IModuleStore {}

declare module ModuleStoreImpl {
	class ModuleFileData {
		dirty : boolean;
		constructor(arg1 : string, arg2 : Module);
		isDirty() : boolean;
		setOption(arg1 : string, arg2 : string) : void;
		clearOption(arg1 : string) : void;
		getOptionValue(arg1 : string) : string;
	}


	interface ModuleFileData extends BaseFileConfigurableStoreImpl.BaseStorageData {}}

export = ModuleStoreImpl
