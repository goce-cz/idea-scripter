import Object = require('nashorn/java/lang/Object');
import Map = require('nashorn/java/util/Map');
import PluginDescriptor = require('nashorn/com/intellij/openapi/extensions/PluginDescriptor');
import ClassLoader = require('nashorn/java/lang/ClassLoader');
import PluginId = require('nashorn/com/intellij/openapi/extensions/PluginId');

declare class ComponentConfig extends Object {
	static EMPTY_ARRAY : ComponentConfig[];
	options : Map<string, string>;
	pluginDescriptor : PluginDescriptor;
	classLoader : ClassLoader;
	pluginId : PluginId;
	implementationClass : string;
	interfaceClass : string;
	headlessImplementationClass : string;
	loadForDefaultProject : boolean;
	constructor();
	getClassLoader() : ClassLoader;
	getPluginId() : PluginId;
	getImplementationClass() : string;
	getInterfaceClass() : string;
	getHeadlessImplementationClass() : string;
	isLoadForDefaultProject() : boolean;
	prepareClasses(arg1 : boolean) : boolean;
	setImplementationClass(arg1 : string) : void;
	setInterfaceClass(arg1 : string) : void;
	setHeadlessImplementationClass(arg1 : string) : void;
	setLoadForDefaultProject(arg1 : boolean) : void;
}

export = ComponentConfig
