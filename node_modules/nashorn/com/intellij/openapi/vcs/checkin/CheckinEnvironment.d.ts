import CheckinProjectPanel = require('nashorn/com/intellij/openapi/vcs/CheckinProjectPanel');
import PairConsumer = require('nashorn/com/intellij/util/PairConsumer');
import Object = require('nashorn/java/lang/Object');
import RefreshableOnComponent = require('nashorn/com/intellij/openapi/vcs/ui/RefreshableOnComponent');
import FilePath = require('nashorn/com/intellij/openapi/vcs/FilePath');
import List = require('nashorn/java/util/List');
import Change = require('nashorn/com/intellij/openapi/vcs/changes/Change');
import VcsException = require('nashorn/com/intellij/openapi/vcs/VcsException');
import NullableFunction = require('nashorn/com/intellij/util/NullableFunction');
import Set = require('nashorn/java/util/Set');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import ChangeList = require('nashorn/com/intellij/openapi/vcs/changes/ChangeList');
import VcsProviderMarker = require('nashorn/com/intellij/openapi/vcs/VcsProviderMarker');

declare class CheckinEnvironment {
	helpId : string;
	checkinOperationName : string;
	refreshAfterCommitNeeded : boolean;
	createAdditionalOptionsPanel(arg1 : CheckinProjectPanel, arg2 : PairConsumer<Object, Object>) : RefreshableOnComponent;
	getDefaultMessageFor(arg1 : FilePath[]) : string;
	getHelpId() : string;
	getCheckinOperationName() : string;
	commit(arg1 : List<Change>, arg2 : string) : List<VcsException>;
	commit(arg1 : List<Change>, arg2 : string, arg3 : NullableFunction<Object, Object>, arg4 : Set<string>) : List<VcsException>;
	scheduleMissingFileForDeletion(arg1 : List<FilePath>) : List<VcsException>;
	scheduleUnversionedFilesForAddition(arg1 : List<VirtualFile>) : List<VcsException>;
	keepChangeListAfterCommit(arg1 : ChangeList) : boolean;
	isRefreshAfterCommitNeeded() : boolean;
}


declare interface CheckinEnvironment extends VcsProviderMarker {}
export = CheckinEnvironment
