import Object = require('nashorn/java/lang/Object');
import LineAnnotationAspect = require('nashorn/com/intellij/openapi/vcs/annotate/LineAnnotationAspect');
import VcsRevisionNumber = require('nashorn/com/intellij/openapi/vcs/history/VcsRevisionNumber');
import List = require('nashorn/java/util/List');
import VcsFileRevision = require('nashorn/com/intellij/openapi/vcs/history/VcsFileRevision');
import AnnotationSourceSwitcher = require('nashorn/com/intellij/openapi/vcs/annotate/AnnotationSourceSwitcher');
import VcsKey = require('nashorn/com/intellij/openapi/vcs/VcsKey');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Date = require('nashorn/java/util/Date');
import Runnable = require('nashorn/java/lang/Runnable');

declare class FileAnnotation extends Object {
	aspects : LineAnnotationAspect[];
	annotatedContent : string;
	currentRevision : VcsRevisionNumber;
	revisions : List<VcsFileRevision>;
	annotationSourceSwitcher : AnnotationSourceSwitcher;
	lineCount : number;
	vcsKey : VcsKey;
	file : VirtualFile;
	dispose() : void;
	getAspects() : LineAnnotationAspect[];
	getToolTip(arg1 : number) : string;
	getAnnotatedContent() : string;
	getLineRevisionNumber(arg1 : number) : VcsRevisionNumber;
	getLineDate(arg1 : number) : Date;
	originalRevision(arg1 : number) : VcsRevisionNumber;
	getCurrentRevision() : VcsRevisionNumber;
	getRevisions() : List<VcsFileRevision>;
	revisionsNotEmpty() : boolean;
	getAnnotationSourceSwitcher() : AnnotationSourceSwitcher;
	getLineCount() : number;
	close() : void;
	setCloser(arg1 : Runnable) : void;
	getVcsKey() : VcsKey;
	isBaseRevisionChanged(arg1 : VcsRevisionNumber) : boolean;
	getFile() : VirtualFile;
	unregister() : void;
}

export = FileAnnotation
