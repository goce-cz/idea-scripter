import Object = require('nashorn/java/lang/Object');
import Topic = require('nashorn/com/intellij/util/messages/Topic');
import VcsListener = require('nashorn/com/intellij/openapi/vcs/VcsListener');
import VcsDescriptor = require('nashorn/com/intellij/openapi/vcs/impl/VcsDescriptor');
import AbstractVcs = require('nashorn/com/intellij/openapi/vcs/AbstractVcs');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import VcsRoot = require('nashorn/com/intellij/openapi/vcs/VcsRoot');
import List = require('nashorn/java/util/List');
import VcsDirectoryMapping = require('nashorn/com/intellij/openapi/vcs/VcsDirectoryMapping');
import CheckoutProvider = require('nashorn/com/intellij/openapi/vcs/CheckoutProvider');
import VcsEventsListenerManager = require('nashorn/com/intellij/openapi/vcs/VcsEventsListenerManager');
import VcsHistoryCache = require('nashorn/com/intellij/openapi/vcs/history/VcsHistoryCache');
import ContentRevisionCache = require('nashorn/com/intellij/openapi/vcs/impl/ContentRevisionCache');
import VcsAnnotationLocalChangesListener = require('nashorn/com/intellij/openapi/vcs/changes/VcsAnnotationLocalChangesListener');
import Processor = require('nashorn/com/intellij/util/Processor');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import FilePath = require('nashorn/com/intellij/openapi/vcs/FilePath');
import TextAttributes = require('nashorn/com/intellij/openapi/editor/markup/TextAttributes');
import VcsConfiguration = require('nashorn/com/intellij/openapi/vcs/VcsConfiguration');
import VcsShowSettingOption = require('nashorn/com/intellij/openapi/vcs/VcsShowSettingOption');
import VcsShowConfirmationOption = require('nashorn/com/intellij/openapi/vcs/VcsShowConfirmationOption');
import UpdatedFiles = require('nashorn/com/intellij/openapi/vcs/update/UpdatedFiles');
import VirtualFileFilter = require('nashorn/com/intellij/openapi/vcs/VirtualFileFilter');
import VcsEnvironmentsProxyCreator = require('nashorn/com/intellij/openapi/vcs/impl/VcsEnvironmentsProxyCreator');

declare class ProjectLevelVcsManager extends Object {
	static VCS_CONFIGURATION_CHANGED : Topic<VcsListener>;
	static VCS_CONFIGURATION_CHANGED_IN_PLUGIN : Topic<VcsListener>;
	allVcss : VcsDescriptor[];
	allActiveVcss : AbstractVcs[];
	backgroundVcsOperationRunning : boolean;
	allVersionedRoots : VirtualFile[];
	allVcsRoots : VcsRoot[];
	directoryMappings : List<VcsDirectoryMapping>;
	compositeCheckoutListener : CheckoutProvider.Listener;
	vcsEventsListenerManager : VcsEventsListenerManager;
	vcsHistoryCache : VcsHistoryCache;
	contentRevisionCache : ContentRevisionCache;
	annotationLocalChangesListener : VcsAnnotationLocalChangesListener;
	constructor();
	iterateVfUnderVcsRoot(arg1 : VirtualFile, arg2 : Processor<VirtualFile>) : void;
	static getInstance(arg1 : Project) : ProjectLevelVcsManager;
	static getInstanceChecked(arg1 : Project) : ProjectLevelVcsManager;
	getAllVcss() : VcsDescriptor[];
	findVcsByName(arg1 : string) : AbstractVcs;
	getDescriptor(arg1 : string) : VcsDescriptor;
	checkAllFilesAreUnder(arg1 : AbstractVcs, arg2 : VirtualFile[]) : boolean;
	getVcsFor(arg1 : VirtualFile) : AbstractVcs;
	getVcsFor(arg1 : FilePath) : AbstractVcs;
	getVcsRootFor(arg1 : VirtualFile) : VirtualFile;
	getVcsRootFor(arg1 : FilePath) : VirtualFile;
	getVcsRootObjectFor(arg1 : VirtualFile) : VcsRoot;
	getVcsRootObjectFor(arg1 : FilePath) : VcsRoot;
	checkVcsIsActive(arg1 : AbstractVcs) : boolean;
	checkVcsIsActive(arg1 : string) : boolean;
	getAllActiveVcss() : AbstractVcs[];
	hasActiveVcss() : boolean;
	hasAnyMappings() : boolean;
	addMessageToConsoleWindow(arg1 : string, arg2 : TextAttributes) : void;
	getStandardOption(arg1 : VcsConfiguration.StandardOption, arg2 : AbstractVcs) : VcsShowSettingOption;
	getStandardConfirmation(arg1 : VcsConfiguration.StandardConfirmation, arg2 : AbstractVcs) : VcsShowConfirmationOption;
	getOrCreateCustomOption(arg1 : string, arg2 : AbstractVcs) : VcsShowSettingOption;
	showProjectOperationInfo(arg1 : UpdatedFiles, arg2 : string) : void;
	addVcsListener(arg1 : VcsListener) : void;
	removeVcsListener(arg1 : VcsListener) : void;
	startBackgroundVcsOperation() : void;
	stopBackgroundVcsOperation() : void;
	isBackgroundVcsOperationRunning() : boolean;
	getRootsUnderVcsWithoutFiltering(arg1 : AbstractVcs) : List<VirtualFile>;
	getRootsUnderVcs(arg1 : AbstractVcs) : VirtualFile[];
	getDetailedVcsMappings(arg1 : AbstractVcs) : List<VirtualFile>;
	getAllVersionedRoots() : VirtualFile[];
	getAllVcsRoots() : VcsRoot[];
	updateActiveVcss() : void;
	getDirectoryMappings() : List<VcsDirectoryMapping>;
	getDirectoryMappings(arg1 : AbstractVcs) : List<VcsDirectoryMapping>;
	getDirectoryMappingFor(arg1 : FilePath) : VcsDirectoryMapping;
	setDirectoryMapping(arg1 : string, arg2 : string) : void;
	setDirectoryMappings(arg1 : List<VcsDirectoryMapping>) : void;
	iterateVcsRoot(arg1 : VirtualFile, arg2 : Processor<FilePath>) : void;
	iterateVcsRoot(arg1 : VirtualFile, arg2 : Processor<FilePath>, arg3 : VirtualFileFilter) : void;
	findVersioningVcs(arg1 : VirtualFile) : AbstractVcs;
	getCompositeCheckoutListener() : CheckoutProvider.Listener;
	getVcsEventsListenerManager() : VcsEventsListenerManager;
	getProxyCreator() : VcsEnvironmentsProxyCreator;
	getVcsHistoryCache() : VcsHistoryCache;
	getContentRevisionCache() : ContentRevisionCache;
	isFileInContent(arg1 : VirtualFile) : boolean;
	isIgnored(arg1 : VirtualFile) : boolean;
	dvcsUsedInProject() : boolean;
	getAnnotationLocalChangesListener() : VcsAnnotationLocalChangesListener;
}

export = ProjectLevelVcsManager
