import CommittedChangeList = require('nashorn/com/intellij/openapi/vcs/versionBrowser/CommittedChangeList');
import ChangeBrowserSettings = require('nashorn/com/intellij/openapi/vcs/versionBrowser/ChangeBrowserSettings');
import VcsCommittedListsZipper = require('nashorn/com/intellij/openapi/vcs/changes/committed/VcsCommittedListsZipper');
import ChangeListColumn = require('nashorn/com/intellij/openapi/vcs/ChangeListColumn');
import ChangesBrowserSettingsEditor = require('nashorn/com/intellij/openapi/vcs/versionBrowser/ChangesBrowserSettingsEditor');
import FilePath = require('nashorn/com/intellij/openapi/vcs/FilePath');
import RepositoryLocation = require('nashorn/com/intellij/openapi/vcs/RepositoryLocation');
import List = require('nashorn/java/util/List');
import AsynchConsumer = require('nashorn/com/intellij/util/AsynchConsumer');
import DecoratorManager = require('nashorn/com/intellij/openapi/vcs/changes/committed/DecoratorManager');
import VcsCommittedViewAuxiliary = require('nashorn/com/intellij/openapi/vcs/changes/committed/VcsCommittedViewAuxiliary');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import VcsRevisionNumber = require('nashorn/com/intellij/openapi/vcs/history/VcsRevisionNumber');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import VcsProviderMarker = require('nashorn/com/intellij/openapi/vcs/VcsProviderMarker');

declare class CommittedChangesProvider<T extends CommittedChangeList, U extends ChangeBrowserSettings> {
	zipper : VcsCommittedListsZipper;
	columns : ChangeListColumn[];
	unlimitedCountValue : number;
	createDefaultSettings() : U;
	createFilterUI(arg1 : boolean) : ChangesBrowserSettingsEditor<U>;
	getLocationFor(arg1 : FilePath) : RepositoryLocation;
	getLocationFor(arg1 : FilePath, arg2 : string) : RepositoryLocation;
	getZipper() : VcsCommittedListsZipper;
	getCommittedChanges(arg1 : U, arg2 : RepositoryLocation, arg3 : number) : List<T>;
	loadCommittedChanges(arg1 : U, arg2 : RepositoryLocation, arg3 : number, arg4 : AsynchConsumer<CommittedChangeList>) : void;
	getColumns() : ChangeListColumn[];
	createActions(arg1 : DecoratorManager, arg2 : RepositoryLocation) : VcsCommittedViewAuxiliary;
	getUnlimitedCountValue() : number;
	getOneList(arg1 : VirtualFile, arg2 : VcsRevisionNumber) : Pair<T, FilePath>;
	getForNonLocal(arg1 : VirtualFile) : RepositoryLocation;
	supportsIncomingChanges() : boolean;
}


declare interface CommittedChangesProvider<T extends CommittedChangeList, U extends ChangeBrowserSettings> extends VcsProviderMarker {}
export = CommittedChangesProvider
