import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import FilePath = require('nashorn/com/intellij/openapi/vcs/FilePath');
import VcsInvalidated = require('nashorn/com/intellij/openapi/vcs/changes/VcsInvalidated');
import Collection = require('nashorn/java/util/Collection');

declare class VcsDirtyScopeManager extends Object {
	constructor();
	static getInstance(arg1 : Project) : VcsDirtyScopeManager;
	markEverythingDirty() : void;
	fileDirty(arg1 : VirtualFile) : void;
	fileDirty(arg1 : FilePath) : void;
	dirDirtyRecursively(arg1 : VirtualFile, arg2 : boolean) : void;
	dirDirtyRecursively(arg1 : VirtualFile) : void;
	dirDirtyRecursively(arg1 : FilePath) : void;
	retrieveScopes() : VcsInvalidated;
	changesProcessed() : void;
	whatFilesDirty(arg1 : Collection<FilePath>) : Collection<FilePath>;
	filePathsDirty(arg1 : Collection<FilePath>, arg2 : Collection<FilePath>) : void;
	filesDirty(arg1 : Collection<VirtualFile>, arg2 : Collection<VirtualFile>) : void;
}

export = VcsDirtyScopeManager
