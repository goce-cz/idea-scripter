import Object = require('nashorn/java/lang/Object');
import Collection = require('nashorn/java/util/Collection');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import AbstractVcs = require('nashorn/com/intellij/openapi/vcs/AbstractVcs');
import Set = require('nashorn/java/util/Set');
import FilePath = require('nashorn/com/intellij/openapi/vcs/FilePath');
import Processor = require('nashorn/com/intellij/util/Processor');
import Consumer = require('nashorn/com/intellij/util/Consumer');

declare class VcsDirtyScope extends Object {
	affectedContentRoots : Collection<VirtualFile>;
	project : Project;
	vcs : AbstractVcs;
	dirtyFiles : Set<FilePath>;
	dirtyFilesNoExpand : Set<FilePath>;
	recursivelyDirtyDirectories : Set<FilePath>;
	empty : boolean;
	affectedContentRootsWithCheck : Collection<VirtualFile>;
	constructor();
	getAffectedContentRoots() : Collection<VirtualFile>;
	getProject() : Project;
	getVcs() : AbstractVcs;
	getDirtyFiles() : Set<FilePath>;
	getDirtyFilesNoExpand() : Set<FilePath>;
	getRecursivelyDirtyDirectories() : Set<FilePath>;
	isRecursivelyDirty(arg1 : VirtualFile) : boolean;
	iterate(arg1 : Processor<FilePath>) : void;
	iterateExistingInsideScope(arg1 : Processor<VirtualFile>) : void;
	isEmpty() : boolean;
	belongsTo(arg1 : FilePath) : boolean;
	belongsTo(arg1 : FilePath, arg2 : Consumer<AbstractVcs>) : boolean;
	getAffectedContentRootsWithCheck() : Collection<VirtualFile>;
	wasEveryThingDirty() : boolean;
	setWasEverythingDirty(arg1 : boolean) : void;
}

export = VcsDirtyScope
