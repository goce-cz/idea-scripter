import List = require('nashorn/java/util/List');
import LocalChangeList = require('nashorn/com/intellij/openapi/vcs/changes/LocalChangeList');
import File = require('nashorn/java/io/File');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Collection = require('nashorn/java/util/Collection');
import Change = require('nashorn/com/intellij/openapi/vcs/changes/Change');
import CommitExecutor = require('nashorn/com/intellij/openapi/vcs/changes/CommitExecutor');
import IgnoredFileBean = require('nashorn/com/intellij/openapi/vcs/changes/IgnoredFileBean');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Runnable = require('nashorn/java/lang/Runnable');
import InvokeAfterUpdateMode = require('nashorn/com/intellij/openapi/vcs/changes/InvokeAfterUpdateMode');
import ModalityState = require('nashorn/com/intellij/openapi/application/ModalityState');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import VcsDirtyScopeManager = require('nashorn/com/intellij/openapi/vcs/changes/VcsDirtyScopeManager');
import ChangeList = require('nashorn/com/intellij/openapi/vcs/changes/ChangeList');
import FilePath = require('nashorn/com/intellij/openapi/vcs/FilePath');
import FileStatus = require('nashorn/com/intellij/openapi/vcs/FileStatus');
import ChangeListListener = require('nashorn/com/intellij/openapi/vcs/changes/ChangeListListener');
import ContinuationPause = require('nashorn/com/intellij/util/continuation/ContinuationPause');
import ThreeState = require('nashorn/com/intellij/util/ThreeState');
import ChangeListModification = require('nashorn/com/intellij/openapi/vcs/changes/ChangeListModification');

declare class ChangeListManager {
	changeListsNumber : number;
	changeListsCopy : List<LocalChangeList>;
	changeLists : List<LocalChangeList>;
	affectedPaths : List<File>;
	affectedFiles : List<VirtualFile>;
	allChanges : Collection<Change>;
	defaultChangeList : LocalChangeList;
	registeredExecutors : List<CommitExecutor>;
	filesToIgnore : IgnoredFileBean[];
	defaultListName : string;
	freezed : string;
	modifiedWithoutEditing : List<VirtualFile>;
	constructor();
	static getInstance(arg1 : Project) : ChangeListManager;
	scheduleUpdate() : void;
	scheduleUpdate(arg1 : boolean) : void;
	invokeAfterUpdate(arg1 : Runnable, arg2 : InvokeAfterUpdateMode, arg3 : string, arg4 : ModalityState) : void;
	invokeAfterUpdate(arg1 : Runnable, arg2 : InvokeAfterUpdateMode, arg3 : string, arg4 : Consumer<VcsDirtyScopeManager>, arg5 : ModalityState) : void;
	ensureUpToDate(arg1 : boolean) : boolean;
	getChangeListsNumber() : number;
	getChangeListsCopy() : List<LocalChangeList>;
	getChangeLists() : List<LocalChangeList>;
	getAffectedPaths() : List<File>;
	getAffectedFiles() : List<VirtualFile>;
	isFileAffected(arg1 : VirtualFile) : boolean;
	getAllChanges() : Collection<Change>;
	findChangeList(arg1 : string) : LocalChangeList;
	getChangeList(arg1 : string) : LocalChangeList;
	getDefaultChangeList() : LocalChangeList;
	isDefaultChangeList(arg1 : ChangeList) : boolean;
	getChangeList(arg1 : Change) : LocalChangeList;
	getChangeListNameIfOnlyOne(arg1 : Change[]) : string;
	prepareForChangeDeletion(arg1 : Collection<Change>) : Runnable;
	getChange(arg1 : VirtualFile) : Change;
	getChangeList(arg1 : VirtualFile) : LocalChangeList;
	getChange(arg1 : FilePath) : Change;
	isUnversioned(arg1 : VirtualFile) : boolean;
	getStatus(arg1 : VirtualFile) : FileStatus;
	getChangesIn(arg1 : VirtualFile) : Collection<Change>;
	getChangesIn(arg1 : FilePath) : Collection<Change>;
	addChangeListListener(arg1 : ChangeListListener) : void;
	removeChangeListListener(arg1 : ChangeListListener) : void;
	registerCommitExecutor(arg1 : CommitExecutor) : void;
	commitChanges(arg1 : LocalChangeList, arg2 : List<Change>) : void;
	commitChangesSynchronously(arg1 : LocalChangeList, arg2 : List<Change>) : void;
	commitChangesSynchronouslyWithResult(arg1 : LocalChangeList, arg2 : List<Change>) : boolean;
	reopenFiles(arg1 : List<FilePath>) : void;
	getRegisteredExecutors() : List<CommitExecutor>;
	addFilesToIgnore(arg1 : IgnoredFileBean[]) : void;
	addDirectoryToIgnoreImplicitly(arg1 : string) : void;
	setFilesToIgnore(arg1 : IgnoredFileBean[]) : void;
	getFilesToIgnore() : IgnoredFileBean[];
	isIgnoredFile(arg1 : VirtualFile) : boolean;
	getSwitchedBranch(arg1 : VirtualFile) : string;
	getDefaultListName() : string;
	freeze(arg1 : ContinuationPause, arg2 : string) : void;
	letGo() : void;
	isFreezed() : string;
	isFreezedWithNotification(arg1 : string) : boolean;
	static isFileChanged(arg1 : Project, arg2 : VirtualFile) : boolean;
	getModifiedWithoutEditing() : List<VirtualFile>;
	haveChangesUnder(arg1 : VirtualFile) : ThreeState;
}


declare interface ChangeListManager extends ChangeListModification {}
export = ChangeListManager
