import Object = require('nashorn/java/lang/Object');
import Getter = require('nashorn/com/intellij/openapi/util/Getter');
import MergeTexts = require('nashorn/com/intellij/openapi/vcs/changes/MergeTexts');
import Map = require('nashorn/java/util/Map');
import ContentRevision = require('nashorn/com/intellij/openapi/vcs/changes/ContentRevision');
import FileStatus = require('nashorn/com/intellij/openapi/vcs/FileStatus');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Icon = require('nashorn/javax/swing/Icon');
import File = require('nashorn/java/io/File');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Enum = require('nashorn/java/lang/Enum');

declare class Change extends Object {
	mergeProvider : Getter<MergeTexts>;
	otherLayers : Map<string, Change>;
	treeConflict : boolean;
	phantom : boolean;
	type : Change.Type;
	beforeRevision : ContentRevision;
	afterRevision : ContentRevision;
	fileStatus : FileStatus;
	virtualFile : VirtualFile;
	renamed : boolean;
	moved : boolean;
	isReplaced : boolean;
	additionalIcon : Icon;
	description : string;
	constructor(arg1 : ContentRevision, arg2 : ContentRevision);
	constructor(arg1 : ContentRevision, arg2 : ContentRevision, arg3 : FileStatus);
	static convertStatus(arg1 : ContentRevision, arg2 : ContentRevision) : FileStatus;
	getMergeProvider() : Getter<MergeTexts>;
	setMergeProvider(arg1 : Getter<MergeTexts>) : void;
	addAdditionalLayerElement(arg1 : string, arg2 : Change) : void;
	getOtherLayers() : Map<string, Change>;
	isTreeConflict() : boolean;
	isPhantom() : boolean;
	hasOtherLayers() : boolean;
	getType() : Change.Type;
	getBeforeRevision() : ContentRevision;
	getAfterRevision() : ContentRevision;
	getFileStatus() : FileStatus;
	getVirtualFile() : VirtualFile;
	calculateHash() : number;
	static revisionHashCode(arg1 : ContentRevision) : number;
	affectsFile(arg1 : File) : boolean;
	isRenamed() : boolean;
	isMoved() : boolean;
	getMoveRelativePath(arg1 : Project) : string;
	cacheRenameOrMove(arg1 : Project) : void;
	revisionPathsSame() : boolean;
	getOriginText(arg1 : Project) : string;
	getRenamedText() : string;
	getMovedText(arg1 : Project) : string;
	isIsReplaced() : boolean;
	setIsReplaced(arg1 : boolean) : void;
	getAdditionalIcon() : Icon;
	getDescription() : string;
}


declare module Change {
	class Type {
		static MODIFICATION : Change.Type;
		static NEW : Change.Type;
		static DELETED : Change.Type;
		static MOVED : Change.Type;
	}


	interface Type extends Enum<Change.Type> {}}

export = Change
