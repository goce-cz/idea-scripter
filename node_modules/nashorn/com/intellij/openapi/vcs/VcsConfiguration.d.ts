import TodoPanelSettings = require('nashorn/com/intellij/ide/todo/TodoPanelSettings');
import VcsShowConfirmationOption = require('nashorn/com/intellij/openapi/vcs/VcsShowConfirmationOption');
import IgnoreSpaceEnum = require('nashorn/com/intellij/openapi/diff/impl/IgnoreSpaceEnum');
import List = require('nashorn/java/util/List');
import Map = require('nashorn/java/util/Map');
import ChangeBrowserSettings = require('nashorn/com/intellij/openapi/vcs/versionBrowser/ChangeBrowserSettings');
import ArrayList = require('nashorn/java/util/ArrayList');
import PerformInBackgroundOption = require('nashorn/com/intellij/openapi/progress/PerformInBackgroundOption');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Collection = require('nashorn/java/util/Collection');
import PersistentStateComponent = require('nashorn/com/intellij/openapi/components/PersistentStateComponent');
import Enum = require('nashorn/java/lang/Enum');

declare class VcsConfiguration {
	static ourMaximumFileForBaseRevisionSize : number;
	static PATCH : string;
	static DIFF : string;
	OFFER_MOVE_TO_ANOTHER_CHANGELIST_ON_PARTIAL_COMMIT : boolean;
	CHECK_CODE_SMELLS_BEFORE_PROJECT_COMMIT : boolean;
	CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT : boolean;
	CHECK_NEW_TODO : boolean;
	myTodoPanelSettings : TodoPanelSettings;
	PERFORM_UPDATE_IN_BACKGROUND : boolean;
	PERFORM_COMMIT_IN_BACKGROUND : boolean;
	PERFORM_EDIT_IN_BACKGROUND : boolean;
	PERFORM_CHECKOUT_IN_BACKGROUND : boolean;
	PERFORM_ADD_REMOVE_IN_BACKGROUND : boolean;
	PERFORM_ROLLBACK_IN_BACKGROUND : boolean;
	CHECK_LOCALLY_CHANGED_CONFLICTS_IN_BACKGROUND : boolean;
	MOVE_TO_FAILED_COMMIT_CHANGELIST : VcsShowConfirmationOption.Value;
	REMOVE_EMPTY_INACTIVE_CHANGELISTS : VcsShowConfirmationOption.Value;
	CHANGED_ON_SERVER_INTERVAL : number;
	SHOW_ONLY_CHANGED_IN_SELECTION_DIFF : boolean;
	CHECK_COMMIT_MESSAGE_SPELLING : boolean;
	DEFAULT_PATCH_EXTENSION : string;
	SHORT_DIFF_HORIZONTALLY : boolean;
	SHORT_DIFF_EXTRA_LINES : number;
	SOFT_WRAPS_IN_SHORT_DIFF : boolean;
	SHORT_DIFF_IGNORE_SPACE : IgnoreSpaceEnum;
	INCLUDE_TEXT_INTO_PATCH : boolean;
	INCLUDE_TEXT_INTO_SHELF : boolean;
	SHOW_PATCH_IN_EXPLORER : boolean;
	SHOW_FILE_HISTORY_DETAILS : boolean;
	SHOW_VCS_ERROR_NOTIFICATIONS : boolean;
	SHOW_DIRTY_RECURSIVELY : boolean;
	LIMIT_HISTORY : boolean;
	MAXIMUM_HISTORY_ROWS : number;
	UPDATE_FILTER_SCOPE_NAME : string;
	USE_COMMIT_MESSAGE_MARGIN : boolean;
	COMMIT_MESSAGE_MARGIN_SIZE : number;
	WRAP_WHEN_TYPING_REACHES_RIGHT_MARGIN : boolean;
	IGNORED_UNREGISTERED_ROOTS : List<string>;
	FORCE_NON_EMPTY_COMMENT : boolean;
	CLEAR_INITIAL_COMMIT_MESSAGE : boolean;
	myLastCommitMessages : List<string>;
	LAST_COMMIT_MESSAGE : string;
	MAKE_NEW_CHANGELIST_ACTIVE : boolean;
	OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT : boolean;
	CHECK_FILES_UP_TO_DATE_BEFORE_COMMIT : boolean;
	REFORMAT_BEFORE_PROJECT_COMMIT : boolean;
	REFORMAT_BEFORE_FILE_COMMIT : boolean;
	REARRANGE_BEFORE_PROJECT_COMMIT : boolean;
	CHANGE_BROWSER_SETTINGS : Map<string, ChangeBrowserSettings>;
	FILE_HISTORY_DIALOG_COMMENTS_SPLITTER_PROPORTION : number;
	FILE_HISTORY_DIALOG_SPLITTER_PROPORTION : number;
	UPDATE_GROUP_BY_PACKAGES : boolean;
	UPDATE_GROUP_BY_CHANGELIST : boolean;
	UPDATE_FILTER_BY_SCOPE : boolean;
	SHOW_FILE_HISTORY_AS_TREE : boolean;
	FILE_HISTORY_SPLITTER_PROPORTION : number;
	state : VcsConfiguration;
	lastNonEmptyCommitMessage : string;
	recentMessages : ArrayList<string>;
	updateOption : PerformInBackgroundOption;
	commitOption : PerformInBackgroundOption;
	editOption : PerformInBackgroundOption;
	checkoutOption : PerformInBackgroundOption;
	addRemoveOption : PerformInBackgroundOption;
	patchFileExtension : string;
	changedOnServerEnabled : boolean;
	constructor();
	static getInstance(arg1 : Project) : VcsConfiguration;
	saveCommitMessage(arg1 : string) : void;
	getLastNonEmptyCommitMessage() : string;
	getRecentMessages() : ArrayList<string>;
	removeMessage(arg1 : string) : void;
	getUpdateOption() : PerformInBackgroundOption;
	getCommitOption() : PerformInBackgroundOption;
	getEditOption() : PerformInBackgroundOption;
	getCheckoutOption() : PerformInBackgroundOption;
	getAddRemoveOption() : PerformInBackgroundOption;
	getPatchFileExtension() : string;
	acceptLastCreatedPatchName(arg1 : string) : void;
	isChangedOnServerEnabled() : boolean;
	addIgnoredUnregisteredRoots(arg1 : Collection<string>) : void;
}


declare interface VcsConfiguration extends PersistentStateComponent<VcsConfiguration> {}

declare module VcsConfiguration {
	class AddRemoveInBackgroundOption {
	}


	interface AddRemoveInBackgroundOption extends PerformInBackgroundOption {}	class CheckoutInBackgroundOption {
	}


	interface CheckoutInBackgroundOption extends PerformInBackgroundOption {}	class EditInBackgroundOption {
	}


	interface EditInBackgroundOption extends PerformInBackgroundOption {}	class CommitInBackgroundOption {
	}


	interface CommitInBackgroundOption extends PerformInBackgroundOption {}	class UpdateInBackgroundOption {
	}


	interface UpdateInBackgroundOption extends PerformInBackgroundOption {}	class StandardConfirmation {
		static ADD : VcsConfiguration.StandardConfirmation;
		static REMOVE : VcsConfiguration.StandardConfirmation;
		id : string;
		getId() : string;
	}


	interface StandardConfirmation extends Enum<VcsConfiguration.StandardConfirmation> {}	class StandardOption {
		static ADD : VcsConfiguration.StandardOption;
		static REMOVE : VcsConfiguration.StandardOption;
		static EDIT : VcsConfiguration.StandardOption;
		static CHECKOUT : VcsConfiguration.StandardOption;
		static STATUS : VcsConfiguration.StandardOption;
		static UPDATE : VcsConfiguration.StandardOption;
		id : string;
		getId() : string;
	}


	interface StandardOption extends Enum<VcsConfiguration.StandardOption> {}}

export = VcsConfiguration
