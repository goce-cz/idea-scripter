import CommittedChangeList = require('nashorn/com/intellij/openapi/vcs/versionBrowser/CommittedChangeList');
import Configurable = require('nashorn/com/intellij/openapi/options/Configurable');
import TransactionProvider = require('nashorn/com/intellij/openapi/vcs/TransactionProvider');
import ChangeProvider = require('nashorn/com/intellij/openapi/vcs/changes/ChangeProvider');
import VcsConfiguration = require('nashorn/com/intellij/openapi/vcs/VcsConfiguration');
import EditFileProvider = require('nashorn/com/intellij/openapi/vcs/EditFileProvider');
import CheckinEnvironment = require('nashorn/com/intellij/openapi/vcs/checkin/CheckinEnvironment');
import RollbackEnvironment = require('nashorn/com/intellij/openapi/vcs/rollback/RollbackEnvironment');
import VcsHistoryProvider = require('nashorn/com/intellij/openapi/vcs/history/VcsHistoryProvider');
import UpdateEnvironment = require('nashorn/com/intellij/openapi/vcs/update/UpdateEnvironment');
import AnnotationProvider = require('nashorn/com/intellij/openapi/vcs/annotate/AnnotationProvider');
import DiffProvider = require('nashorn/com/intellij/openapi/vcs/diff/DiffProvider');
import VcsShowSettingOption = require('nashorn/com/intellij/openapi/vcs/VcsShowSettingOption');
import FileStatus = require('nashorn/com/intellij/openapi/vcs/FileStatus');
import RevisionSelector = require('nashorn/com/intellij/openapi/vcs/diff/RevisionSelector');
import CommittedChangesProvider = require('nashorn/com/intellij/openapi/vcs/CommittedChangesProvider');
import CachingCommittedChangesProvider = require('nashorn/com/intellij/openapi/vcs/CachingCommittedChangesProvider');
import MergeProvider = require('nashorn/com/intellij/openapi/vcs/merge/MergeProvider');
import List = require('nashorn/java/util/List');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import ChangeListEditHandler = require('nashorn/com/intellij/openapi/vcs/changes/ChangeListEditHandler');
import VcsExceptionsHotFixer = require('nashorn/com/intellij/openapi/vcs/VcsExceptionsHotFixer');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import VcsKey = require('nashorn/com/intellij/openapi/vcs/VcsKey');
import VcsType = require('nashorn/com/intellij/openapi/vcs/VcsType');
import VcsOutgoingChangesProvider = require('nashorn/com/intellij/openapi/vcs/VcsOutgoingChangesProvider');
import RemoteDifferenceStrategy = require('nashorn/com/intellij/openapi/vcs/RemoteDifferenceStrategy');
import TreeDiffProvider = require('nashorn/com/intellij/openapi/vcs/TreeDiffProvider');
import CommitExecutor = require('nashorn/com/intellij/openapi/vcs/changes/CommitExecutor');
import CheckoutProvider = require('nashorn/com/intellij/openapi/vcs/CheckoutProvider');
import FilePath = require('nashorn/com/intellij/openapi/vcs/FilePath');
import VcsRevisionNumber = require('nashorn/com/intellij/openapi/vcs/history/VcsRevisionNumber');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import VcsDirectoryMapping = require('nashorn/com/intellij/openapi/vcs/VcsDirectoryMapping');
import UnnamedConfigurable = require('nashorn/com/intellij/openapi/options/UnnamedConfigurable');
import VcsRootSettings = require('nashorn/com/intellij/openapi/vcs/VcsRootSettings');
import Convertor = require('nashorn/com/intellij/util/containers/Convertor');
import VcsModifiableDirtyScope = require('nashorn/com/intellij/openapi/vcs/changes/VcsModifiableDirtyScope');
import StartedActivated = require('nashorn/com/intellij/openapi/vcs/StartedActivated');
import Object = require('nashorn/java/lang/Object');

declare class AbstractVcs<ComList extends CommittedChangeList> {
	name : string;
	displayName : string;
	configurable : Configurable;
	transactionProvider : TransactionProvider;
	changeProvider : ChangeProvider;
	configuration : VcsConfiguration;
	editFileProvider : EditFileProvider;
	checkinEnvironment : CheckinEnvironment;
	rollbackEnvironment : RollbackEnvironment;
	vcsHistoryProvider : VcsHistoryProvider;
	vcsBlockHistoryProvider : VcsHistoryProvider;
	menuItemText : string;
	updateEnvironment : UpdateEnvironment;
	trackingUnchangedContent : boolean;
	statusEnvironment : UpdateEnvironment;
	annotationProvider : AnnotationProvider;
	diffProvider : DiffProvider;
	updateOptions : VcsShowSettingOption;
	statusOptions : VcsShowSettingOption;
	providedStatuses : FileStatus[];
	revisionSelector : RevisionSelector;
	integrateEnvironment : UpdateEnvironment;
	committedChangesProvider : CommittedChangesProvider;
	cachingCommittedChangesProvider : CachingCommittedChangesProvider;
	revisionPattern : string;
	customConvertor : AbstractVcs.RootsConvertor;
	mergeProvider : MergeProvider;
	additionalActionsForLocalChange : List<AnAction>;
	editHandler : ChangeListEditHandler;
	vcsExceptionsHotFixer : VcsExceptionsHotFixer;
	project : Project;
	keyInstanceMethod : VcsKey;
	type : VcsType;
	outgoingChangesProvider : VcsOutgoingChangesProvider<ComList>;
	remoteDifferenceStrategy : RemoteDifferenceStrategy;
	treeDiffProvider : TreeDiffProvider;
	commitExecutors : List<CommitExecutor>;
	cachingAnnotationProvider : AnnotationProvider;
	checkoutProvider : CheckoutProvider;
	constructor(arg1 : Project, arg2 : string);
	getName() : string;
	getDisplayName() : string;
	getConfigurable() : Configurable;
	getTransactionProvider() : TransactionProvider;
	getChangeProvider() : ChangeProvider;
	getConfiguration() : VcsConfiguration;
	getEditFileProvider() : EditFileProvider;
	directoryMappingChanged() : void;
	markExternalChangesAsUpToDate() : boolean;
	createCheckinEnvironment() : CheckinEnvironment;
	getCheckinEnvironment() : CheckinEnvironment;
	createRollbackEnvironment() : RollbackEnvironment;
	getRollbackEnvironment() : RollbackEnvironment;
	getVcsHistoryProvider() : VcsHistoryProvider;
	getVcsBlockHistoryProvider() : VcsHistoryProvider;
	getMenuItemText() : string;
	createUpdateEnvironment() : UpdateEnvironment;
	getUpdateEnvironment() : UpdateEnvironment;
	fileIsUnderVcs(arg1 : FilePath) : boolean;
	fileExistsInVcs(arg1 : FilePath) : boolean;
	needsLastUnchangedContent() : boolean;
	enableIntegration() : void;
	isTrackingUnchangedContent() : boolean;
	static fileInVcsByFileStatus(arg1 : Project, arg2 : FilePath) : boolean;
	getStatusEnvironment() : UpdateEnvironment;
	getAnnotationProvider() : AnnotationProvider;
	getDiffProvider() : DiffProvider;
	getUpdateOptions() : VcsShowSettingOption;
	getStatusOptions() : VcsShowSettingOption;
	loadSettings() : void;
	getProvidedStatuses() : FileStatus[];
	getRevisionSelector() : RevisionSelector;
	getIntegrateEnvironment() : UpdateEnvironment;
	getCommittedChangesProvider() : CommittedChangesProvider;
	getCachingCommittedChangesProvider() : CachingCommittedChangesProvider;
	parseRevisionNumber(arg1 : string, arg2 : FilePath) : VcsRevisionNumber;
	parseRevisionNumber(arg1 : string) : VcsRevisionNumber;
	getRevisionPattern() : string;
	isVersionedDirectory(arg1 : VirtualFile) : boolean;
	supportsVersionedStateDetection() : boolean;
	getRootConfigurable(arg1 : VcsDirectoryMapping) : UnnamedConfigurable;
	createEmptyVcsRootSettings() : VcsRootSettings;
	getCustomConvertor() : AbstractVcs.RootsConvertor;
	getMergeProvider() : MergeProvider;
	getAdditionalActionsForLocalChange() : List<AnAction>;
	getEditHandler() : ChangeListEditHandler;
	allowsNestedRoots() : boolean;
	filterUniqueRoots<S>(arg1 : List<S>, arg2 : Convertor<S, VirtualFile>) : List<S>;
	static filterUniqueRootsDefault<S>(arg1 : List<S>, arg2 : Convertor<S, VirtualFile>) : List<S>;
	getVcsExceptionsHotFixer() : VcsExceptionsHotFixer;
	adjustDirtyScope(arg1 : VcsModifiableDirtyScope) : VcsModifiableDirtyScope;
	getProject() : Project;
	static createKey(arg1 : string) : VcsKey;
	getKeyInstanceMethod() : VcsKey;
	getType() : VcsType;
	checkImmediateParentsBeforeCommit() : boolean;
	getOutgoingProviderImpl() : VcsOutgoingChangesProvider<ComList>;
	getOutgoingChangesProvider() : VcsOutgoingChangesProvider<ComList>;
	getRemoteDifferenceStrategy() : RemoteDifferenceStrategy;
	areDirectoriesVersionedItems() : boolean;
	getTreeDiffProviderImpl() : TreeDiffProvider;
	getTreeDiffProvider() : TreeDiffProvider;
	getCommitExecutors() : List<CommitExecutor>;
	isVcsBackgroundOperationsAllowed(arg1 : VirtualFile) : boolean;
	allowsRemoteCalls(arg1 : VirtualFile) : boolean;
	setCheckinEnvironment(arg1 : CheckinEnvironment) : void;
	setUpdateEnvironment(arg1 : UpdateEnvironment) : void;
	setRollbackEnvironment(arg1 : RollbackEnvironment) : void;
	reportsIgnoredDirectories() : boolean;
	loadRevisions(arg1 : VirtualFile, arg2 : VcsRevisionNumber) : CommittedChangeList;
	getCachingAnnotationProvider() : AnnotationProvider;
	fileListenerIsSynchronous() : boolean;
	revisionsSame(arg1 : VcsRevisionNumber, arg2 : VcsRevisionNumber) : boolean;
	getCheckoutProvider() : CheckoutProvider;
}


declare interface AbstractVcs<ComList extends CommittedChangeList> extends StartedActivated {}

declare module AbstractVcs {
	class RootsConvertor extends Object {
		convertRoots(arg1 : List<VirtualFile>) : List<VirtualFile>;
	}
}

export = AbstractVcs
