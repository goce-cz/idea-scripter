import CommittedChangeList = require('nashorn/com/intellij/openapi/vcs/versionBrowser/CommittedChangeList');
import ChangeBrowserSettings = require('nashorn/com/intellij/openapi/vcs/versionBrowser/ChangeBrowserSettings');
import DataOutput = require('nashorn/java/io/DataOutput');
import RepositoryLocation = require('nashorn/com/intellij/openapi/vcs/RepositoryLocation');
import DataInput = require('nashorn/java/io/DataInput');
import Collection = require('nashorn/java/util/Collection');
import FilePath = require('nashorn/com/intellij/openapi/vcs/FilePath');
import VcsRevisionNumber = require('nashorn/com/intellij/openapi/vcs/history/VcsRevisionNumber');
import CommittedChangesProvider = require('nashorn/com/intellij/openapi/vcs/CommittedChangesProvider');

declare class CachingCommittedChangesProvider<T extends CommittedChangeList, U extends ChangeBrowserSettings> {
	formatVersion : number;
	maxCountSupported : boolean;
	changelistTitle : string;
	getFormatVersion() : number;
	writeChangeList(arg1 : DataOutput, arg2 : T) : void;
	readChangeList(arg1 : RepositoryLocation, arg2 : DataInput) : T;
	isMaxCountSupported() : boolean;
	getIncomingFiles(arg1 : RepositoryLocation) : Collection<FilePath>;
	refreshCacheByNumber() : boolean;
	getChangelistTitle() : string;
	isChangeLocallyAvailable(arg1 : FilePath, arg2 : VcsRevisionNumber, arg3 : VcsRevisionNumber, arg4 : T) : boolean;
	refreshIncomingWithCommitted() : boolean;
}


declare interface CachingCommittedChangesProvider<T extends CommittedChangeList, U extends ChangeBrowserSettings> extends CommittedChangesProvider<T, U> {}
export = CachingCommittedChangesProvider
