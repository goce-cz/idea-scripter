import Map = require('nashorn/java/util/Map');
import Collection = require('nashorn/java/util/Collection');
import SimpleTextAttributes = require('nashorn/com/intellij/ui/SimpleTextAttributes');
import List = require('nashorn/java/util/List');
import VcsRevisionNumber = require('nashorn/com/intellij/openapi/vcs/history/VcsRevisionNumber');
import VcsKey = require('nashorn/com/intellij/openapi/vcs/VcsKey');
import ProjectLevelVcsManager = require('nashorn/com/intellij/openapi/vcs/ProjectLevelVcsManager');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import Element = require('nashorn/org/jdom/Element');
import AbstractVcs = require('nashorn/com/intellij/openapi/vcs/AbstractVcs');
import JDOMExternalizable = require('nashorn/com/intellij/openapi/util/JDOMExternalizable');
import Object = require('nashorn/java/lang/Object');

declare class FileGroup {
	myUpdateName : string;
	myStatusName : string;
	mySupportsDeletion : boolean;
	myCanBeAbsent : boolean;
	myId : string;
	static MODIFIED_ID : string;
	static MERGED_WITH_CONFLICT_ID : string;
	static MERGED_WITH_TREE_CONFLICT : string;
	static MERGED_WITH_PROPERTY_CONFLICT_ID : string;
	static MERGED_ID : string;
	static UNKNOWN_ID : string;
	static LOCALLY_ADDED_ID : string;
	static LOCALLY_REMOVED_ID : string;
	static UPDATED_ID : string;
	static REMOVED_FROM_REPOSITORY_ID : string;
	static CREATED_ID : string;
	static RESTORED_ID : string;
	static CHANGED_ON_SERVER_ID : string;
	static SKIPPED_ID : string;
	static SWITCHED_ID : string;
	supportsDeletion : boolean;
	errorsMap : Map<string, string>;
	immediateFilesSize : number;
	files : Collection<string>;
	updatedFiles : Collection<FileGroup.UpdatedFile>;
	empty : boolean;
	invalidAttributes : SimpleTextAttributes;
	id : string;
	children : List<FileGroup>;
	statusName : string;
	updateName : string;
	constructor(arg1 : string, arg2 : string, arg3 : boolean, arg4 : string, arg5 : boolean);
	constructor();
	addChild(arg1 : FileGroup) : void;
	getSupportsDeletion() : boolean;
	addError(arg1 : string, arg2 : string) : void;
	getErrorsMap() : Map<string, string>;
	add(arg1 : string, arg2 : string, arg3 : VcsRevisionNumber) : void;
	add(arg1 : string, arg2 : VcsKey, arg3 : VcsRevisionNumber) : void;
	remove(arg1 : string) : void;
	getImmediateFilesSize() : number;
	getFiles() : Collection<string>;
	getUpdatedFiles() : Collection<FileGroup.UpdatedFile>;
	getFilesAndRevisions(arg1 : ProjectLevelVcsManager) : List<Pair<string, VcsRevisionNumber>>;
	isEmpty() : boolean;
	getInvalidAttributes() : SimpleTextAttributes;
	getId() : string;
	getChildren() : List<FileGroup>;
	static writeGroupsToElement(arg1 : List<FileGroup>, arg2 : Element) : void;
	static readGroupsFromElement(arg1 : List<FileGroup>, arg2 : Element) : void;
	getStatusName() : string;
	getUpdateName() : string;
	getRevision(arg1 : ProjectLevelVcsManager, arg2 : string) : VcsRevisionNumber;
	static getRevision(arg1 : ProjectLevelVcsManager, arg2 : FileGroup.UpdatedFile) : VcsRevisionNumber;
	setRevisions(arg1 : string, arg2 : AbstractVcs, arg3 : VcsRevisionNumber) : void;
}


declare interface FileGroup extends JDOMExternalizable {}

declare module FileGroup {
	class UpdatedFile extends Object {
		path : string;
		vcsName : string;
		revision : string;
		constructor(arg1 : string);
		constructor(arg1 : string, arg2 : VcsKey, arg3 : string);
		getPath() : string;
		getVcsName() : string;
		setVcsKey(arg1 : VcsKey) : void;
		getRevision() : string;
		setRevision(arg1 : string) : void;
	}
}

export = FileGroup
