import Object = require('nashorn/java/lang/Object');
import FilePath = require('nashorn/com/intellij/openapi/vcs/FilePath');
import VcsRevisionNumber = require('nashorn/com/intellij/openapi/vcs/history/VcsRevisionNumber');
import VcsKey = require('nashorn/com/intellij/openapi/vcs/VcsKey');
import List = require('nashorn/java/util/List');
import VcsDirtyScope = require('nashorn/com/intellij/openapi/vcs/changes/VcsDirtyScope');
import Set = require('nashorn/java/util/Set');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Throwable2Computable = require('nashorn/com/intellij/openapi/util/Throwable2Computable');
import VcsException = require('nashorn/com/intellij/openapi/vcs/VcsException');
import IOException = require('nashorn/java/io/IOException');
import Charset = require('nashorn/java/nio/charset/Charset');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import CurrentRevisionProvider = require('nashorn/com/intellij/openapi/vcs/impl/CurrentRevisionProvider');
import Enum = require('nashorn/java/lang/Enum');

declare class ContentRevisionCache extends Object {
	constructor();
	put(arg1 : FilePath, arg2 : VcsRevisionNumber, arg3 : VcsKey, arg4 : ContentRevisionCache.UniqueType, arg5 : number[]) : void;
	get(arg1 : FilePath, arg2 : VcsRevisionNumber, arg3 : VcsKey, arg4 : ContentRevisionCache.UniqueType) : string;
	putCustom(arg1 : FilePath, arg2 : VcsRevisionNumber, arg3 : Object) : void;
	getCustom(arg1 : FilePath, arg2 : VcsRevisionNumber) : Object;
	clearAllCurrent() : void;
	clearScope(arg1 : List<VcsDirtyScope>) : void;
	clearCurrent(arg1 : Set<string>) : void;
	static getOrLoadAsString(arg1 : Project, arg2 : FilePath, arg3 : VcsRevisionNumber, arg4 : VcsKey, arg5 : ContentRevisionCache.UniqueType, arg6 : Throwable2Computable<number[], VcsException, IOException>, arg7 : Charset) : string;
	static bytesToString(arg1 : FilePath, arg2 : number[]) : string;
	getBytes(arg1 : FilePath, arg2 : VcsRevisionNumber, arg3 : VcsKey, arg4 : ContentRevisionCache.UniqueType) : number[];
	putCurrent(arg1 : FilePath, arg2 : VcsRevisionNumber, arg3 : VcsKey, arg4 : number) : boolean;
	getCurrent(arg1 : FilePath, arg2 : VcsKey) : Pair<VcsRevisionNumber, number>;
	static getOrLoadAsBytes(arg1 : Project, arg2 : FilePath, arg3 : VcsRevisionNumber, arg4 : VcsKey, arg5 : ContentRevisionCache.UniqueType, arg6 : Throwable2Computable<number[], VcsException, IOException>) : number[];
	static checkLocalFileSize(arg1 : FilePath) : void;
	static checkContentsSize(arg1 : string, arg2 : number) : void;
	static getOrLoadAsString(arg1 : Project, arg2 : FilePath, arg3 : VcsRevisionNumber, arg4 : VcsKey, arg5 : ContentRevisionCache.UniqueType, arg6 : Throwable2Computable<number[], VcsException, IOException>) : string;
	static putIntoCurrentCache(arg1 : ContentRevisionCache, arg2 : FilePath, arg3 : VcsKey, arg4 : CurrentRevisionProvider) : VcsRevisionNumber;
	static getOrLoadCurrentAsBytes(arg1 : Project, arg2 : FilePath, arg3 : VcsKey, arg4 : CurrentRevisionProvider) : Pair<VcsRevisionNumber, number[]>;
	static getOrLoadCurrentAsString(arg1 : Project, arg2 : FilePath, arg3 : VcsKey, arg4 : CurrentRevisionProvider) : Pair<VcsRevisionNumber, string>;
}


declare module ContentRevisionCache {
	class UniqueType {
		static REPOSITORY_CONTENT : ContentRevisionCache.UniqueType;
		static REMOTE_CONTENT : ContentRevisionCache.UniqueType;
	}


	interface UniqueType extends Enum<ContentRevisionCache.UniqueType> {}	class Key {
		type : ContentRevisionCache.UniqueType;
		getNumber() : VcsRevisionNumber;
		getType() : ContentRevisionCache.UniqueType;
	}


	interface Key extends ContentRevisionCache.CurrentKey {}	class CurrentKey extends Object {
		path : FilePath;
		getPath() : FilePath;
	}
}

export = ContentRevisionCache
