import Object = require('nashorn/java/lang/Object');
import Serializable = require('nashorn/java/io/Serializable');
import VcsAbstractHistorySession = require('nashorn/com/intellij/openapi/vcs/history/VcsAbstractHistorySession');
import FilePath = require('nashorn/com/intellij/openapi/vcs/FilePath');
import VcsKey = require('nashorn/com/intellij/openapi/vcs/VcsKey');
import VcsCacheableHistorySessionFactory = require('nashorn/com/intellij/openapi/vcs/history/VcsCacheableHistorySessionFactory');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import List = require('nashorn/java/util/List');
import VcsFileRevision = require('nashorn/com/intellij/openapi/vcs/history/VcsFileRevision');
import VcsRevisionNumber = require('nashorn/com/intellij/openapi/vcs/history/VcsRevisionNumber');
import VcsAnnotation = require('nashorn/com/intellij/openapi/vcs/annotate/VcsAnnotation');

declare class VcsHistoryCache extends Object {
	constructor();
	put<C extends Serializable, T extends VcsAbstractHistorySession>(arg1 : FilePath, arg2 : FilePath, arg3 : VcsKey, arg4 : T, arg5 : VcsCacheableHistorySessionFactory<C, T>, arg6 : boolean) : void;
	editCached(arg1 : FilePath, arg2 : VcsKey, arg3 : Consumer<List<VcsFileRevision>>) : void;
	getFull<C extends Serializable, T extends VcsAbstractHistorySession>(arg1 : FilePath, arg2 : VcsKey, arg3 : VcsCacheableHistorySessionFactory<C, T>) : T;
	getMaybePartial<C extends Serializable, T extends VcsAbstractHistorySession>(arg1 : FilePath, arg2 : VcsKey, arg3 : VcsCacheableHistorySessionFactory<C, T>) : T;
	clear() : void;
	put(arg1 : FilePath, arg2 : VcsKey, arg3 : VcsRevisionNumber, arg4 : VcsAnnotation) : void;
	get(arg1 : FilePath, arg2 : VcsKey, arg3 : VcsRevisionNumber) : VcsAnnotation;
}


declare module VcsHistoryCache {
	class CachedHistory extends Object {
		path : FilePath;
		revisions : List<VcsFileRevision>;
		currentRevision : VcsRevisionNumber;
		customData : Object;
		isFull : boolean;
		constructor(arg1 : FilePath, arg2 : List<VcsFileRevision>, arg3 : VcsRevisionNumber, arg4 : Object, arg5 : boolean);
		getPath() : FilePath;
		getRevisions() : List<VcsFileRevision>;
		getCurrentRevision() : VcsRevisionNumber;
		getCustomData() : Object;
		isIsFull() : boolean;
	}
}

export = VcsHistoryCache
