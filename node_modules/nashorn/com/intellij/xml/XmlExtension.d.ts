import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import XmlFile = require('nashorn/com/intellij/psi/xml/XmlFile');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import List = require('nashorn/java/util/List');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import TagNameReference = require('nashorn/com/intellij/psi/impl/source/xml/TagNameReference');
import XmlDocument = require('nashorn/com/intellij/psi/xml/XmlDocument');
import XmlAttribute = require('nashorn/com/intellij/psi/xml/XmlAttribute');
import HighlightInfoType = require('nashorn/com/intellij/codeInsight/daemon/impl/HighlightInfoType');
import SchemaPrefix = require('nashorn/com/intellij/psi/impl/source/xml/SchemaPrefix');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import XmlElementDescriptor = require('nashorn/com/intellij/xml/XmlElementDescriptor');
import XmlNSDescriptor = require('nashorn/com/intellij/xml/XmlNSDescriptor');
import XmlAttributeDescriptor = require('nashorn/com/intellij/xml/XmlAttributeDescriptor');

declare class XmlExtension extends Object {
	static EP_NAME : ExtensionPointName<XmlExtension>;
	static DEFAULT_EXTENSION : XmlExtension;
	constructor();
	static getExtension(arg1 : PsiFile) : XmlExtension;
	static getExtensionByElement(arg1 : PsiElement) : XmlExtension;
	isAvailable(arg1 : PsiFile) : boolean;
	getAvailableTagNames(arg1 : XmlFile, arg2 : XmlTag) : List<XmlExtension.TagInfo>;
	createTagNameReference(arg1 : ASTNode, arg2 : boolean) : TagNameReference;
	getNamespacesFromDocument(arg1 : XmlDocument, arg2 : boolean) : string[][];
	canBeDuplicated(arg1 : XmlAttribute) : boolean;
	isRequiredAttributeImplicitlyPresent(arg1 : XmlTag, arg2 : string) : boolean;
	getHighlightInfoType(arg1 : XmlFile) : HighlightInfoType;
	getPrefixDeclaration(arg1 : XmlTag, arg2 : string) : SchemaPrefix;
	getNsPrefixScope(arg1 : XmlAttribute) : SearchScope;
	shouldBeHighlightedAsTag(arg1 : XmlTag) : boolean;
	getElementDescriptor(arg1 : XmlTag, arg2 : XmlTag, arg3 : XmlElementDescriptor) : XmlElementDescriptor;
	getNSDescriptor(arg1 : XmlTag, arg2 : string, arg3 : boolean) : XmlNSDescriptor;
	getParentTagForNamespace(arg1 : XmlTag, arg2 : XmlNSDescriptor) : XmlTag;
	getContainingFile(arg1 : PsiElement) : XmlFile;
	getDescriptorFromDoctype(arg1 : XmlFile, arg2 : XmlNSDescriptor) : XmlNSDescriptor;
	hasDynamicComponents(arg1 : PsiElement) : boolean;
	isIndirectSyntax(arg1 : XmlAttributeDescriptor) : boolean;
	isCustomTagAllowed(arg1 : XmlTag) : boolean;
	needWhitespaceBeforeAttribute() : boolean;
	useXmlTagInsertHandler() : boolean;
}


declare module XmlExtension {
	class TagInfo extends Object {
		name : string;
		namespace : string;
		declaration : PsiElement;
		constructor(arg1 : string, arg2 : string);
		getDeclaration() : PsiElement;
	}
}

export = XmlExtension
