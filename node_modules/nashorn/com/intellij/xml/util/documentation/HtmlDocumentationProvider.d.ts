import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import EntityDescriptor = require('nashorn/com/intellij/xml/util/documentation/EntityDescriptor');
import HtmlAttributeDescriptor = require('nashorn/com/intellij/xml/util/documentation/HtmlAttributeDescriptor');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import DocumentationProvider = require('nashorn/com/intellij/lang/documentation/DocumentationProvider');

declare class HtmlDocumentationProvider {
	static ELEMENT_ELEMENT_NAME : string;
	static NBSP : string;
	static BR : string;
	constructor();
	static getUrlForHtml(arg1 : PsiElement, arg2 : XmlTag) : string;
	static a(arg1 : PsiElement, arg2 : XmlTag) : EntityDescriptor;
	static a(arg1 : string, arg2 : XmlTag) : HtmlAttributeDescriptor;
	generateDocForHtml(arg1 : PsiElement, arg2 : boolean, arg3 : XmlTag, arg4 : PsiElement) : string;
	static a(arg1 : EntityDescriptor, arg2 : boolean, arg3 : PsiElement) : string;
	createNavigationElementHTML(arg1 : PsiManager, arg2 : string, arg3 : PsiElement) : PsiElement;
	isAttributeContext(arg1 : PsiElement) : boolean;
	findTagContext(arg1 : PsiElement) : XmlTag;
	static registerScriptDocumentationProvider(arg1 : DocumentationProvider) : void;
	a() : DocumentationProvider;
}


declare interface HtmlDocumentationProvider extends DocumentationProvider {}
export = HtmlDocumentationProvider
