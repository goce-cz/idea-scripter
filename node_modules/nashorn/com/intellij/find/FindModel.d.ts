import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import Pattern = require('nashorn/java/util/regex/Pattern');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Enum = require('nashorn/java/lang/Enum');
import Object = require('nashorn/java/lang/Object');

declare class FindModel {
	multiline : boolean;
	preserveCase : boolean;
	stringToFind : string;
	stringToReplace : string;
	replaceState : boolean;
	fromCursor : boolean;
	forward : boolean;
	regularExpressions : boolean;
	caseSensitive : boolean;
	multipleFiles : boolean;
	promptOnReplace : boolean;
	wholeWordsOnly : boolean;
	global : boolean;
	replaceAll : boolean;
	openInNewTab : boolean;
	openInNewTabEnabled : boolean;
	openInNewTabVisible : boolean;
	directoryName : string;
	withSubdirectories : boolean;
	projectScope : boolean;
	fileFilter : string;
	moduleName : string;
	findAll : boolean;
	findAllEnabled : boolean;
	customScopeName : string;
	customScope : SearchScope;
	inStringLiteralsOnly : boolean;
	exceptComments : boolean;
	exceptStringLiterals : boolean;
	inCommentsOnly : boolean;
	exceptCommentsAndStringLiterals : boolean;
	searchContext : FindModel.SearchContext;
	searchInProjectFiles : boolean;
	constructor();
	static initStringToFindNoMultiline(arg1 : FindModel, arg2 : string) : void;
	addObserver(arg1 : FindModel.FindModelObserver) : void;
	removeObserver(arg1 : FindModel.FindModelObserver) : void;
	notifyObservers() : void;
	isMultiline() : boolean;
	setMultiline(arg1 : boolean) : void;
	isPreserveCase() : boolean;
	setPreserveCase(arg1 : boolean) : void;
	copyFrom(arg1 : FindModel) : void;
	getStringToFind() : string;
	setStringToFind(arg1 : string) : void;
	getStringToReplace() : string;
	setStringToReplace(arg1 : string) : void;
	isReplaceState() : boolean;
	setReplaceState(arg1 : boolean) : void;
	isFromCursor() : boolean;
	setFromCursor(arg1 : boolean) : void;
	isForward() : boolean;
	setForward(arg1 : boolean) : void;
	isRegularExpressions() : boolean;
	setRegularExpressions(arg1 : boolean) : void;
	isCaseSensitive() : boolean;
	setCaseSensitive(arg1 : boolean) : void;
	isMultipleFiles() : boolean;
	setMultipleFiles(arg1 : boolean) : void;
	isPromptOnReplace() : boolean;
	setPromptOnReplace(arg1 : boolean) : void;
	isWholeWordsOnly() : boolean;
	setWholeWordsOnly(arg1 : boolean) : void;
	isGlobal() : boolean;
	setGlobal(arg1 : boolean) : void;
	isReplaceAll() : boolean;
	setReplaceAll(arg1 : boolean) : void;
	isOpenInNewTab() : boolean;
	setOpenInNewTab(arg1 : boolean) : void;
	isOpenInNewTabEnabled() : boolean;
	setOpenInNewTabEnabled(arg1 : boolean) : void;
	isOpenInNewTabVisible() : boolean;
	setOpenInNewTabVisible(arg1 : boolean) : void;
	getDirectoryName() : string;
	setDirectoryName(arg1 : string) : void;
	isWithSubdirectories() : boolean;
	setWithSubdirectories(arg1 : boolean) : void;
	isProjectScope() : boolean;
	setProjectScope(arg1 : boolean) : void;
	searchHighlighters() : boolean;
	setSearchHighlighters(arg1 : boolean) : void;
	getFileFilter() : string;
	setFileFilter(arg1 : string) : void;
	getModuleName() : string;
	setModuleName(arg1 : string) : void;
	isFindAll() : boolean;
	setFindAll(arg1 : boolean) : void;
	isFindAllEnabled() : boolean;
	setFindAllEnabled(arg1 : boolean) : void;
	getCustomScopeName() : string;
	setCustomScopeName(arg1 : string) : void;
	getCustomScope() : SearchScope;
	setCustomScope(arg1 : SearchScope) : void;
	isCustomScope() : boolean;
	setCustomScope(arg1 : boolean) : void;
	isInStringLiteralsOnly() : boolean;
	isExceptComments() : boolean;
	isExceptStringLiterals() : boolean;
	isInCommentsOnly() : boolean;
	isExceptCommentsAndStringLiterals() : boolean;
	setInCommentsOnly(arg1 : boolean) : void;
	setInStringLiteralsOnly(arg1 : boolean) : void;
	doApplyContextChange(arg1 : boolean, arg2 : FindModel.SearchContext) : void;
	getSearchContext() : FindModel.SearchContext;
	setSearchContext(arg1 : FindModel.SearchContext) : void;
	doSetContext(arg1 : FindModel.SearchContext) : void;
	isSearchInProjectFiles() : boolean;
	setSearchInProjectFiles(arg1 : boolean) : void;
	compileRegExp() : Pattern;
}


declare interface FindModel extends UserDataHolderBase, Cloneable {}

declare module FindModel {
	class SearchContext {
		static ANY : FindModel.SearchContext;
		static IN_STRING_LITERALS : FindModel.SearchContext;
		static IN_COMMENTS : FindModel.SearchContext;
		static EXCEPT_STRING_LITERALS : FindModel.SearchContext;
		static EXCEPT_COMMENTS : FindModel.SearchContext;
		static EXCEPT_COMMENTS_AND_STRING_LITERALS : FindModel.SearchContext;
	}


	interface SearchContext extends Enum<FindModel.SearchContext> {}	class FindModelObserver extends Object {
		findModelChanged(arg1 : FindModel) : void;
	}
}

export = FindModel
