import Object = require('nashorn/java/lang/Object');
import Topic = require('nashorn/com/intellij/util/messages/Topic');
import FindModelListener = require('nashorn/com/intellij/find/FindModelListener');
import FindModel = require('nashorn/com/intellij/find/FindModel');
import NavigationItem = require('nashorn/com/intellij/navigation/NavigationItem');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Runnable = require('nashorn/java/lang/Runnable');
import CharSequence = require('nashorn/java/lang/CharSequence');
import FindResult = require('nashorn/com/intellij/find/FindResult');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import FileEditor = require('nashorn/com/intellij/openapi/fileEditor/FileEditor');
import Annotation = require('nashorn/java/lang/annotation/Annotation');
import Throwable = require('nashorn/java/lang/Throwable');
import Exception = require('nashorn/java/lang/Exception');

declare class FindManager extends Object {
	static FIND_MODEL_TOPIC : Topic<FindModelListener>;
	previousFindModel : FindModel;
	findInFileModel : FindModel;
	findInProjectModel : FindModel;
	findNextModel : FindModel;
	constructor();
	createReplaceInFileModel() : FindModel;
	getPreviousFindModel() : FindModel;
	setPreviousFindModel(arg1 : FindModel) : void;
	showSettingsAndFindUsages(arg1 : NavigationItem[]) : void;
	static getInstance(arg1 : Project) : FindManager;
	showFindDialog(arg1 : FindModel, arg2 : Runnable) : void;
	showPromptDialog(arg1 : FindModel, arg2 : string) : number;
	getFindInFileModel() : FindModel;
	getFindInProjectModel() : FindModel;
	findString(arg1 : CharSequence, arg2 : number, arg3 : FindModel) : FindResult;
	findString(arg1 : CharSequence, arg2 : number, arg3 : FindModel, arg4 : VirtualFile) : FindResult;
	showMalformedReplacementPrompt(arg1 : FindModel, arg2 : string, arg3 : FindManager.MalformedReplacementStringException) : number;
	getStringToReplace(arg1 : string, arg2 : FindModel) : string;
	getStringToReplace(arg1 : string, arg2 : FindModel, arg3 : number, arg4 : CharSequence) : string;
	findWasPerformed() : boolean;
	setFindWasPerformed() : void;
	selectNextOccurrenceWasPerformed() : boolean;
	setSelectNextOccurrenceWasPerformed() : void;
	clearFindingNextUsageInFile() : void;
	setFindNextModel(arg1 : FindModel) : void;
	getFindNextModel() : FindModel;
	getFindNextModel(arg1 : Editor) : FindModel;
	canFindUsages(arg1 : PsiElement) : boolean;
	findUsages(arg1 : PsiElement) : void;
	findUsagesInScope(arg1 : PsiElement, arg2 : SearchScope) : void;
	findUsages(arg1 : PsiElement, arg2 : boolean) : void;
	findUsagesInEditor(arg1 : PsiElement, arg2 : FileEditor) : void;
	findNextUsageInEditor(arg1 : FileEditor) : boolean;
	findPreviousUsageInEditor(arg1 : FileEditor) : boolean;
}


declare module FindManager {
	class PromptResult extends Object {
		static OK : number;
		static CANCEL : number;
		static SKIP : number;
		static ALL : number;
		static ALL_IN_THIS_FILE : number;
		static ALL_FILES : number;
		static SKIP_ALL_IN_THIS_FILE : number;
	}
	class PromptResultValue {
	}


	interface PromptResultValue extends Annotation {}	class MalformedReplacementStringException {
		constructor(arg1 : string);
		constructor(arg1 : string, arg2 : Throwable);
	}


	interface MalformedReplacementStringException extends Exception {}}

export = FindManager
