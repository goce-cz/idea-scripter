import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import FindModel = require('nashorn/com/intellij/find/FindModel');

declare class FindSettings extends Object {
	static instance : FindSettings;
	skipResultsWithOneUsage : boolean;
	defaultScopeName : string;
	searchOverloadedMethods : boolean;
	forward : boolean;
	fromCursor : boolean;
	global : boolean;
	caseSensitive : boolean;
	localCaseSensitive : boolean;
	preserveCase : boolean;
	wholeWordsOnly : boolean;
	localWholeWordsOnly : boolean;
	regularExpressions : boolean;
	localRegularExpressions : boolean;
	recentFindStrings : string[];
	recentReplaceStrings : string[];
	recentFileMasks : string[];
	recentDirectories : List<string>;
	fileMask : string;
	customScope : string;
	inStringLiteralsOnly : boolean;
	inCommentsOnly : boolean;
	exceptStringLiterals : boolean;
	exceptComments : boolean;
	exceptCommentsAndLiterals : boolean;
	showResultsInSeparateView : boolean;
	constructor();
	static getInstance() : FindSettings;
	isSkipResultsWithOneUsage() : boolean;
	setSkipResultsWithOneUsage(arg1 : boolean) : void;
	getDefaultScopeName() : string;
	setDefaultScopeName(arg1 : string) : void;
	isSearchOverloadedMethods() : boolean;
	setSearchOverloadedMethods(arg1 : boolean) : void;
	isForward() : boolean;
	setForward(arg1 : boolean) : void;
	isFromCursor() : boolean;
	setFromCursor(arg1 : boolean) : void;
	isGlobal() : boolean;
	setGlobal(arg1 : boolean) : void;
	isCaseSensitive() : boolean;
	setCaseSensitive(arg1 : boolean) : void;
	isLocalCaseSensitive() : boolean;
	setLocalCaseSensitive(arg1 : boolean) : void;
	isPreserveCase() : boolean;
	setPreserveCase(arg1 : boolean) : void;
	isWholeWordsOnly() : boolean;
	setWholeWordsOnly(arg1 : boolean) : void;
	isLocalWholeWordsOnly() : boolean;
	setLocalWholeWordsOnly(arg1 : boolean) : void;
	isRegularExpressions() : boolean;
	setRegularExpressions(arg1 : boolean) : void;
	isLocalRegularExpressions() : boolean;
	setLocalRegularExpressions(arg1 : boolean) : void;
	addStringToFind(arg1 : string) : void;
	addStringToReplace(arg1 : string) : void;
	addDirectory(arg1 : string) : void;
	getRecentFindStrings() : string[];
	getRecentReplaceStrings() : string[];
	getRecentFileMasks() : string[];
	getRecentDirectories() : List<string>;
	setWithSubdirectories(arg1 : boolean) : void;
	initModelBySetings(arg1 : FindModel) : void;
	getFileMask() : string;
	setFileMask(arg1 : string) : void;
	setCustomScope(arg1 : string) : void;
	getCustomScope() : string;
	isInStringLiteralsOnly() : boolean;
	setInStringLiteralsOnly(arg1 : boolean) : void;
	isInCommentsOnly() : boolean;
	setInCommentsOnly(arg1 : boolean) : void;
	isExceptStringLiterals() : boolean;
	setExceptStringLiterals(arg1 : boolean) : void;
	isExceptComments() : boolean;
	setExceptComments(arg1 : boolean) : void;
	isExceptCommentsAndLiterals() : boolean;
	setExceptCommentsAndLiterals(arg1 : boolean) : void;
	isShowResultsInSeparateView() : boolean;
	setShowResultsInSeparateView(arg1 : boolean) : void;
}

export = FindSettings
