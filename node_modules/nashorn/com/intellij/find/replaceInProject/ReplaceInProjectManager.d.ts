import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Collection = require('nashorn/java/util/Collection');
import Usage = require('nashorn/com/intellij/usages/Usage');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import UsageViewManager = require('nashorn/com/intellij/usages/UsageViewManager');
import Factory = require('nashorn/com/intellij/openapi/util/Factory');
import UsageSearcher = require('nashorn/com/intellij/usages/UsageSearcher');
import FindModel = require('nashorn/com/intellij/find/FindModel');
import FindManager = require('nashorn/com/intellij/find/FindManager');
import UsageViewPresentation = require('nashorn/com/intellij/usages/UsageViewPresentation');
import FindUsagesProcessPresentation = require('nashorn/com/intellij/usages/FindUsagesProcessPresentation');
import Set = require('nashorn/java/util/Set');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import UsageView = require('nashorn/com/intellij/usages/UsageView');
import KeyboardShortcut = require('nashorn/com/intellij/openapi/actionSystem/KeyboardShortcut');
import FindInProjectUtil = require('nashorn/com/intellij/find/impl/FindInProjectUtil');

declare class ReplaceInProjectManager extends Object {
	workInProgress : boolean;
	enabled : boolean;
	constructor(arg1 : Project);
	static getInstance(arg1 : Project) : ReplaceInProjectManager;
	static hasReadOnlyUsages(arg1 : Collection<Usage>) : boolean;
	replaceInProject(arg1 : DataContext) : void;
	searchAndShowUsages(arg1 : UsageViewManager, arg2 : Factory<UsageSearcher>, arg3 : FindModel, arg4 : FindManager) : void;
	searchAndShowUsages(arg1 : UsageViewManager, arg2 : Factory<UsageSearcher>, arg3 : FindModel, arg4 : UsageViewPresentation, arg5 : FindUsagesProcessPresentation, arg6 : FindManager) : void;
	a(arg1 : ReplaceInProjectManager.ReplaceContext) : void;
	a(arg1 : Usage, arg2 : ReplaceInProjectManager.ReplaceContext) : boolean;
	b(arg1 : ReplaceInProjectManager.ReplaceContext) : void;
	a(arg1 : ReplaceInProjectManager.ReplaceContext, arg2 : Collection<Usage>) : boolean;
	static a(arg1 : ReplaceInProjectManager.ReplaceContext, arg2 : Usage) : void;
	static reportNumberReplacedOccurrences(arg1 : Project, arg2 : number) : void;
	replaceUsage(arg1 : Usage, arg2 : FindModel, arg3 : Set<Usage>, arg4 : boolean) : boolean;
	a(arg1 : number, arg2 : number, arg3 : Document, arg4 : FindModel, arg5 : Ref<string>) : boolean;
	a(arg1 : ReplaceInProjectManager.ReplaceContext, arg2 : Set<Usage>) : void;
	b(arg1 : ReplaceInProjectManager.ReplaceContext, arg2 : Collection<Usage>) : boolean;
	a(arg1 : UsageView, arg2 : boolean) : boolean;
	isWorkInProgress() : boolean;
	isEnabled() : boolean;
}


declare module ReplaceInProjectManager {
	class UsageSearcherFactory {
	}


	interface UsageSearcherFactory extends Factory<UsageSearcher> {}	class ReplaceInProjectTarget {
		longDescriptiveName : string;
		shortcut : KeyboardShortcut;
		constructor(arg1 : Project, arg2 : FindModel);
	}


	interface ReplaceInProjectTarget extends FindInProjectUtil.StringUsageTarget {}	class ReplaceContext extends Object {
		findModel : FindModel;
		usageView : UsageView;
		excludedSetCached : Set<Usage>;
		getFindModel() : FindModel;
		getUsageView() : UsageView;
		getExcludedSetCached() : Set<Usage>;
		invalidateExcludedSetCache() : void;
	}
}

export = ReplaceInProjectManager
