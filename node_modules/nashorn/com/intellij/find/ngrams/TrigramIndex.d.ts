import ID = require('nashorn/com/intellij/util/indexing/ID');
import Void = require('nashorn/java/lang/Void');
import DataIndexer = require('nashorn/com/intellij/util/indexing/DataIndexer');
import FileContent = require('nashorn/com/intellij/util/indexing/FileContent');
import KeyDescriptor = require('nashorn/com/intellij/util/io/KeyDescriptor');
import FileBasedIndex = require('nashorn/com/intellij/util/indexing/FileBasedIndex');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import ScalarIndexExtension = require('nashorn/com/intellij/util/indexing/ScalarIndexExtension');
import CustomInputsIndexFileBasedIndexExtension = require('nashorn/com/intellij/util/indexing/CustomInputsIndexFileBasedIndexExtension');
import TrigramBuilder = require('nashorn/com/intellij/openapi/util/text/TrigramBuilder');

declare class TrigramIndex {
	static ENABLED : boolean;
	static INDEX_ID : ID<number, Void>;
	name : ID<number, Void>;
	indexer : DataIndexer<number, Void, FileContent>;
	keyDescriptor : KeyDescriptor<number>;
	inputFilter : FileBasedIndex.InputFilter;
	version : number;
	constructor();
	static isIndexable(arg1 : FileType) : boolean;
}


declare interface TrigramIndex extends ScalarIndexExtension<number>, CustomInputsIndexFileBasedIndexExtension<number> {}

declare module TrigramIndex {
	class MyTrigramProcessor {
	}


	interface MyTrigramProcessor extends TrigramBuilder.TrigramProcessor {}}

export = TrigramIndex
