import Object = require('nashorn/java/lang/Object');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import FindModel = require('nashorn/com/intellij/find/FindModel');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import List = require('nashorn/java/util/List');
import Usage = require('nashorn/com/intellij/usages/Usage');
import FileEditor = require('nashorn/com/intellij/openapi/fileEditor/FileEditor');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import SelectionModel = require('nashorn/com/intellij/openapi/editor/SelectionModel');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import FindResult = require('nashorn/com/intellij/find/FindResult');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import ScrollType = require('nashorn/com/intellij/openapi/editor/ScrollType');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import UsageView = require('nashorn/com/intellij/usages/UsageView');
import Iterator = require('nashorn/java/util/Iterator');
import CaretAdapter = require('nashorn/com/intellij/openapi/editor/event/CaretAdapter');
import Enum = require('nashorn/java/lang/Enum');

declare class FindUtil extends Object {
	static getVirtualFile(arg1 : Editor) : VirtualFile;
	static initStringToFindWithSelection(arg1 : FindModel, arg2 : Editor) : void;
	static a(arg1 : Editor) : boolean;
	static b(arg1 : Editor) : boolean;
	static configureFindModel(arg1 : boolean, arg2 : Editor, arg3 : FindModel, arg4 : boolean) : void;
	static findWordAtCaret(arg1 : Project, arg2 : Editor) : void;
	static find(arg1 : Project, arg2 : Editor) : void;
	static findAll(arg1 : Project, arg2 : Editor, arg3 : FindModel) : List<Usage>;
	static findAllAndShow(arg1 : Project, arg2 : Editor, arg3 : FindModel) : void;
	static searchBack(arg1 : Project, arg2 : FileEditor, arg3 : DataContext) : void;
	static searchBack(arg1 : Project, arg2 : Editor, arg3 : DataContext) : void;
	static searchAgain(arg1 : Project, arg2 : FileEditor, arg3 : DataContext) : boolean;
	static searchAgain(arg1 : Project, arg2 : Editor, arg3 : DataContext) : boolean;
	static a(arg1 : Project, arg2 : Editor, arg3 : number, arg4 : FindModel) : boolean;
	static replace(arg1 : Project, arg2 : Editor) : void;
	static replace(arg1 : Project, arg2 : Editor, arg3 : number, arg4 : FindModel) : boolean;
	static replace(arg1 : Project, arg2 : Editor, arg3 : number, arg4 : FindModel, arg5 : FindUtil.ReplaceDelegate) : boolean;
	static a(arg1 : Project, arg2 : Editor, arg3 : FindModel, arg4 : Document, arg5 : number, arg6 : boolean, arg7 : FindUtil.ReplaceDelegate) : void;
	static a(arg1 : SelectionModel, arg2 : TextRange) : boolean;
	static b(arg1 : SelectionModel, arg2 : TextRange) : boolean;
	static a(arg1 : Project, arg2 : Editor, arg3 : number, arg4 : boolean, arg5 : FindModel, arg6 : boolean) : FindResult;
	static processNotFound(arg1 : Editor, arg2 : string, arg3 : FindModel, arg4 : Project) : void;
	static doReplace(arg1 : Project, arg2 : Document, arg3 : FindModel, arg4 : FindResult, arg5 : string, arg6 : boolean, arg7 : List<Pair<TextRange, string>>) : TextRange;
	static doReplace(arg1 : Project, arg2 : Document, arg3 : number, arg4 : number, arg5 : string) : number;
	static a(arg1 : Editor, arg2 : number, arg3 : ScrollType) : void;
	static showInUsageView(arg1 : PsiElement, arg2 : PsiElement[], arg3 : string, arg4 : Project) : UsageView;
	static selectSearchResultsInEditor(arg1 : Editor, arg2 : Iterator<FindResult>, arg3 : number) : void;
	static selectSearchResultInEditor(arg1 : Editor, arg2 : FindResult, arg3 : number) : boolean;
	static a(arg1 : FindResult, arg2 : number) : number;
}


declare module FindUtil {
	class ReplaceDelegate extends Object {
		shouldReplace(arg1 : TextRange, arg2 : string) : boolean;
	}
	class MyListener {
		a() : void;
	}


	interface MyListener extends CaretAdapter {}	class Direction {
		static UP : FindUtil.Direction;
		static DOWN : FindUtil.Direction;
	}


	interface Direction extends Enum<FindUtil.Direction> {}}

export = FindUtil
