import SearchResults = require('nashorn/com/intellij/find/impl/livePreview/SearchResults');
import EditorSearchComponent = require('nashorn/com/intellij/find/EditorSearchComponent');
import FindModel = require('nashorn/com/intellij/find/FindModel');
import FindResult = require('nashorn/com/intellij/find/FindResult');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import LivePreview = require('nashorn/com/intellij/find/impl/livePreview/LivePreview');
import FindUtil = require('nashorn/com/intellij/find/FindUtil');

declare class LivePreviewController {
	static USER_ACTIVITY_TRIGGERING_DELAY : number;
	static MATCHES_LIMIT : number;
	replaceDenied : boolean;
	userActivityDelay : number;
	constructor(arg1 : SearchResults, arg2 : EditorSearchComponent);
	setTrackingSelection(arg1 : boolean) : void;
	a() : void;
	moveCursor(arg1 : SearchResults.Direction) : void;
	isReplaceDenied() : boolean;
	getUserActivityDelay() : number;
	setUserActivityDelay(arg1 : number) : void;
	updateInBackground(arg1 : FindModel, arg2 : boolean) : void;
	performReplace(arg1 : FindResult, arg2 : string, arg3 : Editor) : TextRange;
	performReplaceAll(arg1 : Editor) : void;
	canReplace() : boolean;
	b() : Editor;
	performReplace() : void;
	exclude() : void;
	performReplaceAll() : void;
	setTrackingDocument(arg1 : boolean) : void;
	setLivePreview(arg1 : LivePreview) : void;
	dispose() : void;
	on() : void;
	off() : void;
}


declare interface LivePreviewController extends LivePreview.Delegate, FindUtil.ReplaceDelegate {}
export = LivePreviewController
