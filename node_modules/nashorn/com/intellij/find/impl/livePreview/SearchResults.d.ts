import FindModel = require('nashorn/com/intellij/find/FindModel');
import Set = require('nashorn/java/util/Set');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import FindResult = require('nashorn/com/intellij/find/FindResult');
import List = require('nashorn/java/util/List');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import FutureResult = require('nashorn/com/intellij/util/concurrency/FutureResult');
import ArrayList = require('nashorn/java/util/ArrayList');
import DocumentListener = require('nashorn/com/intellij/openapi/editor/event/DocumentListener');
import Object = require('nashorn/java/lang/Object');
import Enum = require('nashorn/java/lang/Enum');

declare class SearchResults {
	stamp : number;
	matchesCount : number;
	findModel : FindModel;
	excluded : Set<RangeMarker>;
	matchesLimit : number;
	cursor : FindResult;
	occurrences : List<FindResult>;
	project : Project;
	editor : Editor;
	constructor(arg1 : Editor, arg2 : Project);
	getStamp() : number;
	setNotFoundState(arg1 : boolean) : void;
	getMatchesCount() : number;
	hasMatches() : boolean;
	getFindModel() : FindModel;
	isExcluded(arg1 : FindResult) : boolean;
	exclude(arg1 : FindResult) : void;
	getExcluded() : Set<RangeMarker>;
	addListener(arg1 : SearchResults.SearchResultsListener) : void;
	removeListener(arg1 : SearchResults.SearchResultsListener) : void;
	getMatchesLimit() : number;
	setMatchesLimit(arg1 : number) : void;
	getCursor() : FindResult;
	getOccurrences() : List<FindResult>;
	getProject() : Project;
	getEditor() : Editor;
	clear() : void;
	updateThreadSafe(arg1 : FindModel, arg2 : boolean, arg3 : TextRange, arg4 : number) : void;
	a(arg1 : FindModel) : void;
	static a(arg1 : Editor, arg2 : FutureResult<number[]>, arg3 : FutureResult<number[]>) : void;
	a(arg1 : TextRange, arg2 : Editor, arg3 : FindModel, arg4 : ArrayList<FindResult>) : void;
	dispose() : void;
	a(arg1 : List<FindResult>, arg2 : Editor, arg3 : FindModel, arg4 : boolean, arg5 : TextRange, arg6 : number) : void;
	a() : void;
	b() : void;
	a(arg1 : TextRange, arg2 : TextRange) : void;
	c() : boolean;
	a(arg1 : FindResult) : FindResult;
	d() : FindResult;
	e() : void;
	static insideVisibleArea(arg1 : Editor, arg2 : TextRange) : boolean;
	f() : FindResult;
	a(arg1 : number) : FindResult;
	g() : FindResult;
	b(arg1 : number) : FindResult;
	a(arg1 : TextRange) : boolean;
	b(arg1 : TextRange) : FindResult;
	c(arg1 : TextRange) : FindResult;
	prevOccurrence(arg1 : boolean) : void;
	h() : void;
	nextOccurrence(arg1 : boolean) : void;
	a(arg1 : boolean, arg2 : TextRange, arg3 : boolean, arg4 : boolean, arg5 : boolean) : void;
	moveCursorTo(arg1 : FindResult, arg2 : boolean) : void;
	i() : void;
}


declare interface SearchResults extends DocumentListener {}

declare module SearchResults {
	class SearchResultsListener extends Object {
		searchResultsUpdated(arg1 : SearchResults) : void;
		cursorMoved() : void;
		updateFinished() : void;
	}
	class Direction {
		static UP : SearchResults.Direction;
		static DOWN : SearchResults.Direction;
	}


	interface Direction extends Enum<SearchResults.Direction> {}}

export = SearchResults
