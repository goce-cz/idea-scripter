import FindModel = require('nashorn/com/intellij/find/FindModel');
import FindUsagesManager = require('nashorn/com/intellij/find/findUsages/FindUsagesManager');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import FindSettings = require('nashorn/com/intellij/find/FindSettings');
import UsageViewManager = require('nashorn/com/intellij/usages/UsageViewManager');
import MessageBus = require('nashorn/com/intellij/util/messages/MessageBus');
import FindManager = require('nashorn/com/intellij/find/FindManager');
import CharSequence = require('nashorn/java/lang/CharSequence');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Predicate = require('nashorn/com/intellij/util/containers/Predicate');
import FindResult = require('nashorn/com/intellij/find/FindResult');
import StringSearcher = require('nashorn/com/intellij/util/text/StringSearcher');
import Language = require('nashorn/com/intellij/lang/Language');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import SyntaxHighlighter = require('nashorn/com/intellij/openapi/fileTypes/SyntaxHighlighter');
import Matcher = require('nashorn/java/util/regex/Matcher');
import Exception = require('nashorn/java/lang/Exception');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import SearchResults = require('nashorn/com/intellij/find/impl/livePreview/SearchResults');
import FileEditor = require('nashorn/com/intellij/openapi/fileEditor/FileEditor');
import RangeHighlighter = require('nashorn/com/intellij/openapi/editor/markup/RangeHighlighter');
import Object = require('nashorn/java/lang/Object');
import Set = require('nashorn/java/util/Set');
import SyntaxHighlighterOverEditorHighlighter = require('nashorn/com/intellij/usages/impl/SyntaxHighlighterOverEditorHighlighter');
import TreeMap = require('nashorn/java/util/TreeMap');

declare class FindManagerImpl {
	findInFileModel : FindModel;
	findInProjectModel : FindModel;
	findNextModel : FindModel;
	previousFindModel : FindModel;
	findUsagesManager : FindUsagesManager;
	constructor(arg1 : Project, arg2 : FindSettings, arg3 : UsageViewManager, arg4 : MessageBus);
	showPromptDialogImpl(arg1 : FindModel, arg2 : string, arg3 : FindManager.MalformedReplacementStringException) : number;
	a(arg1 : CharSequence, arg2 : number, arg3 : FindModel, arg4 : VirtualFile, arg5 : Predicate<FindResult>) : FindResult;
	a(arg1 : FindModel, arg2 : VirtualFile, arg3 : CharSequence) : Predicate<FindResult>;
	static a(arg1 : CharSequence, arg2 : number, arg3 : number) : boolean;
	static a(arg1 : FindModel) : FindModel;
	a(arg1 : CharSequence, arg2 : string[], arg3 : number, arg4 : FindModel, arg5 : VirtualFile) : FindResult;
	static b(arg1 : FindModel) : StringSearcher;
	static clearPreviousFindData(arg1 : FindModel) : void;
	b(arg1 : CharSequence, arg2 : string[], arg3 : number, arg4 : FindModel, arg5 : VirtualFile) : FindResult;
	static a(arg1 : FindModel, arg2 : Language, arg3 : TokenSet) : TokenSet;
	static a(arg1 : VirtualFile, arg2 : Language) : SyntaxHighlighter;
	static a(arg1 : CharSequence, arg2 : number, arg3 : FindModel) : FindResult;
	static a(arg1 : FindModel, arg2 : CharSequence) : Matcher;
	static a(arg1 : FindModel, arg2 : CharSequence, arg3 : number) : string;
	static a(arg1 : FindModel, arg2 : Matcher) : string;
	static b(arg1 : FindModel, arg2 : CharSequence, arg3 : number) : Matcher;
	static a(arg1 : FindModel, arg2 : Exception) : FindManager.MalformedReplacementStringException;
	static a(arg1 : string, arg2 : FindModel) : string;
	static a(arg1 : string, arg2 : string) : string;
	static a(arg1 : Editor, arg2 : SearchResults.Direction) : boolean;
	a(arg1 : FileEditor, arg2 : SearchResults.Direction) : boolean;
	static a(arg1 : RangeHighlighter[], arg2 : Editor, arg3 : number, arg4 : boolean, arg5 : boolean) : boolean;
	static a(arg1 : Editor, arg2 : number, arg3 : number) : void;
	getFindUsagesManager() : FindUsagesManager;
}


declare interface FindManagerImpl extends FindManager {}

declare module FindManagerImpl {
	class CommentsLiteralsSearchData extends Object {
		constructor(arg1 : VirtualFile, arg2 : Set<Language>, arg3 : SyntaxHighlighterOverEditorHighlighter, arg4 : TokenSet, arg5 : StringSearcher, arg6 : Matcher, arg7 : FindModel);
	}
	class FindExceptCommentsOrLiteralsData {
		a(arg1 : VirtualFile, arg2 : FindModel, arg3 : CharSequence, arg4 : TreeMap<number, number>, arg5 : FindModel.SearchContext) : void;
		isAcceptableFor(arg1 : FindModel, arg2 : VirtualFile) : boolean;
	}


	interface FindExceptCommentsOrLiteralsData extends Predicate<FindResult> {}}

export = FindManagerImpl
