import Object = require('nashorn/java/lang/Object');
import MockApplication = require('nashorn/com/intellij/mock/MockApplication');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import CoreLocalFileSystem = require('nashorn/com/intellij/openapi/vfs/local/CoreLocalFileSystem');
import VirtualFileSystem = require('nashorn/com/intellij/openapi/vfs/VirtualFileSystem');
import Class = require('nashorn/java/lang/Class');
import VirtualFilePointerManager = require('nashorn/com/intellij/openapi/vfs/pointers/VirtualFilePointerManager');
import JobLauncher = require('nashorn/com/intellij/concurrency/JobLauncher');
import ProgressManager = require('nashorn/com/intellij/openapi/progress/ProgressManager');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import ParserDefinition = require('nashorn/com/intellij/lang/ParserDefinition');
import MutablePicoContainer = require('nashorn/org/picocontainer/MutablePicoContainer');
import LanguageExtension = require('nashorn/com/intellij/lang/LanguageExtension');
import Language = require('nashorn/com/intellij/lang/Language');
import FileTypeExtension = require('nashorn/com/intellij/openapi/fileTypes/FileTypeExtension');
import KeyedExtensionCollector = require('nashorn/com/intellij/openapi/util/KeyedExtensionCollector');
import ClassExtension = require('nashorn/com/intellij/openapi/util/ClassExtension');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import ExtensionsArea = require('nashorn/com/intellij/openapi/extensions/ExtensionsArea');
import File = require('nashorn/java/io/File');

declare class CoreApplicationEnvironment extends Object {
	application : MockApplication;
	parentDisposable : Disposable;
	localFileSystem : CoreLocalFileSystem;
	jarFileSystem : VirtualFileSystem;
	constructor(arg1 : Disposable);
	registerApplicationService<T>(arg1 : Class<T>, arg2 : T) : void;
	createVirtualFilePointerManager() : VirtualFilePointerManager;
	createApplication(arg1 : Disposable) : MockApplication;
	createJobLauncher() : JobLauncher;
	createProgressIndicatorProvider() : ProgressManager;
	createJarFileSystem() : VirtualFileSystem;
	createLocalFileSystem() : CoreLocalFileSystem;
	getApplication() : MockApplication;
	getParentDisposable() : Disposable;
	registerApplicationComponent<T>(arg1 : Class<T>, arg2 : T) : void;
	registerFileType(arg1 : FileType, arg2 : string) : void;
	registerParserDefinition(arg1 : ParserDefinition) : void;
	static registerComponentInstance<T>(arg1 : MutablePicoContainer, arg2 : Class<T>, arg3 : T) : void;
	addExplicitExtension<T>(arg1 : LanguageExtension<T>, arg2 : Language, arg3 : T) : void;
	registerParserDefinition(arg1 : Language, arg2 : ParserDefinition) : void;
	addExplicitExtension<T>(arg1 : FileTypeExtension<T>, arg2 : FileType, arg3 : T) : void;
	a<T, U>(arg1 : KeyedExtensionCollector<T, U>, arg2 : U, arg3 : T) : void;
	addExplicitExtension<T>(arg1 : ClassExtension<T>, arg2 : Class, arg3 : T) : void;
	addExtension<T>(arg1 : ExtensionPointName<T>, arg2 : T) : void;
	static registerExtensionPoint<T>(arg1 : ExtensionsArea, arg2 : ExtensionPointName<T>, arg3 : Class<T>) : void;
	static registerExtensionPoint<T>(arg1 : ExtensionsArea, arg2 : string, arg3 : Class<T>) : void;
	static registerApplicationExtensionPoint<T>(arg1 : ExtensionPointName<T>, arg2 : Class<T>) : void;
	static registerExtensionPointAndExtensions(arg1 : File, arg2 : string, arg3 : ExtensionsArea) : void;
	getLocalFileSystem() : CoreLocalFileSystem;
	getJarFileSystem() : VirtualFileSystem;
}

export = CoreApplicationEnvironment
