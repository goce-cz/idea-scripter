import Object = require('nashorn/java/lang/Object');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import CoreApplicationEnvironment = require('nashorn/com/intellij/core/CoreApplicationEnvironment');
import MockProject = require('nashorn/com/intellij/mock/MockProject');
import PicoContainer = require('nashorn/org/picocontainer/PicoContainer');
import ProjectScopeBuilder = require('nashorn/com/intellij/psi/search/ProjectScopeBuilder');
import FileIndexFacade = require('nashorn/com/intellij/openapi/roots/FileIndexFacade');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import ResolveScopeManager = require('nashorn/com/intellij/psi/impl/ResolveScopeManager');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import Class = require('nashorn/java/lang/Class');

declare class CoreProjectEnvironment extends Object {
	parentDisposable : Disposable;
	environment : CoreApplicationEnvironment;
	project : MockProject;
	constructor(arg1 : Disposable, arg2 : CoreApplicationEnvironment);
	createProject(arg1 : PicoContainer, arg2 : Disposable) : MockProject;
	createProjectScopeBuilder() : ProjectScopeBuilder;
	preregisterServices() : void;
	createFileIndexFacade() : FileIndexFacade;
	createResolveScopeManager(arg1 : PsiManager) : ResolveScopeManager;
	registerProjectExtensionPoint<T>(arg1 : ExtensionPointName<T>, arg2 : Class<T>) : void;
	addProjectExtension<T>(arg1 : ExtensionPointName<T>, arg2 : T) : void;
	registerProjectComponent<T>(arg1 : Class<T>, arg2 : T) : void;
	getParentDisposable() : Disposable;
	getEnvironment() : CoreApplicationEnvironment;
	getProject() : MockProject;
}

export = CoreProjectEnvironment
