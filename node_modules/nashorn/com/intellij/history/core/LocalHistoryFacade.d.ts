import Object = require('nashorn/java/lang/Object');
import ChangeList = require('nashorn/com/intellij/history/core/ChangeList');
import Content = require('nashorn/com/intellij/history/core/Content');
import Entry = require('nashorn/com/intellij/history/core/tree/Entry');
import LabelImpl = require('nashorn/com/intellij/history/core/LabelImpl');
import Change = require('nashorn/com/intellij/history/core/changes/Change');
import StructuralChange = require('nashorn/com/intellij/history/core/changes/StructuralChange');
import PutLabelChange = require('nashorn/com/intellij/history/core/changes/PutLabelChange');
import RootEntry = require('nashorn/com/intellij/history/core/tree/RootEntry');
import ByteContent = require('nashorn/com/intellij/history/ByteContent');
import List = require('nashorn/java/util/List');
import RecentChange = require('nashorn/com/intellij/history/core/revisions/RecentChange');
import ChangeVisitor = require('nashorn/com/intellij/history/core/changes/ChangeVisitor');
import ChangeSet = require('nashorn/com/intellij/history/core/changes/ChangeSet');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');

declare class LocalHistoryFacade extends Object {
	changeListInTests : ChangeList;
	constructor(arg1 : ChangeList);
	beginChangeSet() : void;
	forceBeginChangeSet() : void;
	endChangeSet(arg1 : string) : void;
	created(arg1 : string, arg2 : boolean) : void;
	contentChanged(arg1 : string, arg2 : Content, arg3 : number) : void;
	renamed(arg1 : string, arg2 : string) : void;
	readOnlyStatusChanged(arg1 : string, arg2 : boolean) : void;
	moved(arg1 : string, arg2 : string) : void;
	deleted(arg1 : string, arg2 : Entry) : void;
	putSystemLabel(arg1 : string, arg2 : string, arg3 : number) : LabelImpl;
	putUserLabel(arg1 : string, arg2 : string) : LabelImpl;
	a(arg1 : Change) : void;
	addChangeInTests(arg1 : StructuralChange) : void;
	a(arg1 : PutLabelChange) : LabelImpl;
	putLabelInTests(arg1 : PutLabelChange) : void;
	getChangeListInTests() : ChangeList;
	a(arg1 : RootEntry, arg2 : string, arg3 : Change) : ByteContent;
	getRecentChanges(arg1 : RootEntry) : List<RecentChange>;
	accept(arg1 : ChangeVisitor) : void;
	revertUpTo(arg1 : RootEntry, arg2 : string, arg3 : ChangeSet, arg4 : Change, arg5 : boolean, arg6 : boolean) : string;
	addListener(arg1 : LocalHistoryFacade.Listener, arg2 : Disposable) : void;
	removeListener(arg1 : LocalHistoryFacade.Listener) : void;
	b(arg1 : Change) : void;
	a() : void;
}


declare module LocalHistoryFacade {
	class Listener extends Object {
		constructor();
		changeAdded(arg1 : Change) : void;
		changeSetFinished() : void;
	}
}

export = LocalHistoryFacade
