import Object = require('nashorn/java/lang/Object');
import Content = require('nashorn/com/intellij/history/core/Content');
import List = require('nashorn/java/util/List');
import DataInput = require('nashorn/java/io/DataInput');
import DataOutput = require('nashorn/java/io/DataOutput');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import DirectoryEntry = require('nashorn/com/intellij/history/core/tree/DirectoryEntry');
import Collection = require('nashorn/java/util/Collection');
import Difference = require('nashorn/com/intellij/history/core/revisions/Difference');

declare class Entry extends Object {
	name : string;
	path : string;
	timestamp : number;
	readOnly : boolean;
	content : Content;
	parent : Entry;
	directory : boolean;
	children : List<Entry>;
	constructor(arg1 : string);
	constructor(arg1 : DataInput);
	write(arg1 : DataOutput) : void;
	getName() : string;
	getPath() : string;
	a(arg1 : Entry, arg2 : StringBuilder) : void;
	nameEquals(arg1 : string) : boolean;
	pathEquals(arg1 : string) : boolean;
	getTimestamp() : number;
	isReadOnly() : boolean;
	setReadOnly(arg1 : boolean) : void;
	isOutdated(arg1 : number) : boolean;
	getContent() : Content;
	hasUnavailableContent() : boolean;
	hasUnavailableContent(arg1 : List<Entry>) : boolean;
	getParent() : Entry;
	setParent(arg1 : DirectoryEntry) : void;
	isDirectory() : boolean;
	addChild(arg1 : Entry) : void;
	addChildren(arg1 : Collection<Entry>) : void;
	removeChild(arg1 : Entry) : void;
	a(arg1 : Entry) : string;
	getChildren() : List<Entry>;
	findChild(arg1 : string) : Entry;
	hasEntry(arg1 : string) : boolean;
	getEntry(arg1 : string) : Entry;
	findEntry(arg1 : string) : Entry;
	copy() : Entry;
	setName(arg1 : string) : void;
	setContent(arg1 : Content, arg2 : number) : void;
	static getDifferencesBetween(arg1 : Entry, arg2 : Entry) : List<Difference>;
	collectDifferencesWith(arg1 : Entry, arg2 : List<Difference>) : void;
	collectCreatedDifferences(arg1 : List<Difference>) : void;
	collectDeletedDifferences(arg1 : List<Difference>) : void;
	a() : string;
}

export = Entry
