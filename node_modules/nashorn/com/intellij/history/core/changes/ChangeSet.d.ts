import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import Change = require('nashorn/com/intellij/history/core/changes/Change');
import Content = require('nashorn/com/intellij/history/core/Content');
import DataInput = require('nashorn/java/io/DataInput');
import DataOutput = require('nashorn/java/io/DataOutput');
import ChangeVisitor = require('nashorn/com/intellij/history/core/changes/ChangeVisitor');
import Producer = require('nashorn/com/intellij/util/Producer');
import Runnable = require('nashorn/java/lang/Runnable');

declare class ChangeSet extends Object {
	name : string;
	timestamp : number;
	label : string;
	labelColor : number;
	changes : List<Change>;
	empty : boolean;
	contentsToPurge : List<Content>;
	contentChangeOnly : boolean;
	labelOnly : boolean;
	firstChange : Change;
	lastChange : Change;
	affectedPaths : List<string>;
	id : number;
	constructor(arg1 : number, arg2 : number);
	constructor(arg1 : DataInput);
	write(arg1 : DataOutput) : void;
	setName(arg1 : string) : void;
	getName() : string;
	getTimestamp() : number;
	lock() : void;
	getLabel() : string;
	getLabelColor() : number;
	addChange(arg1 : Change) : void;
	getChanges() : List<Change>;
	isEmpty() : boolean;
	affectsPath(arg1 : string) : boolean;
	isCreationalFor(arg1 : string) : boolean;
	getContentsToPurge() : List<Content>;
	isContentChangeOnly() : boolean;
	isLabelOnly() : boolean;
	getFirstChange() : Change;
	getLastChange() : Change;
	getAffectedPaths() : List<string>;
	getId() : number;
	accept(arg1 : ChangeVisitor) : void;
	a(arg1 : ChangeVisitor) : void;
	a<T>(arg1 : Producer<T>) : T;
	a(arg1 : Runnable) : void;
}

export = ChangeSet
