import Object = require('nashorn/java/lang/Object');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import List = require('nashorn/java/util/List');
import Iterable = require('nashorn/java/lang/Iterable');
import RootEntry = require('nashorn/com/intellij/history/core/tree/RootEntry');
import DirectoryEntry = require('nashorn/com/intellij/history/core/tree/DirectoryEntry');
import Entry = require('nashorn/com/intellij/history/core/tree/Entry');
import LocalHistoryFacade = require('nashorn/com/intellij/history/core/LocalHistoryFacade');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import StoredContent = require('nashorn/com/intellij/history/core/StoredContent');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');

declare class IdeaGateway extends Object {
	constructor();
	isVersioned(arg1 : VirtualFile) : boolean;
	isVersioned(arg1 : VirtualFile, arg2 : boolean) : boolean;
	areContentChangesVersioned(arg1 : VirtualFile) : boolean;
	areContentChangesVersioned(arg1 : string) : boolean;
	ensureFilesAreWritable(arg1 : Project, arg2 : List<VirtualFile>) : boolean;
	findVirtualFile(arg1 : string) : VirtualFile;
	findOrCreateFileSafely(arg1 : VirtualFile, arg2 : string, arg3 : boolean) : VirtualFile;
	findOrCreateFileSafely(arg1 : string, arg2 : boolean) : VirtualFile;
	getAllFilesFrom(arg1 : string) : List<VirtualFile>;
	static a(arg1 : VirtualFile, arg2 : List<VirtualFile>) : List<VirtualFile>;
	static iterateDBChildren(arg1 : VirtualFile) : Iterable<VirtualFile>;
	static loadAndIterateChildren(arg1 : VirtualFile) : Iterable<VirtualFile>;
	createTransientRootEntry() : RootEntry;
	createTransientRootEntryForPathOnly(arg1 : string) : RootEntry;
	static a() : List<VirtualFile>;
	a(arg1 : DirectoryEntry, arg2 : string, arg3 : Iterable<VirtualFile>) : void;
	a(arg1 : VirtualFile, arg2 : string) : Entry;
	createTransientEntry(arg1 : VirtualFile) : Entry;
	createEntryForDeletion(arg1 : VirtualFile) : Entry;
	a(arg1 : VirtualFile, arg2 : boolean) : Entry;
	a(arg1 : DirectoryEntry, arg2 : Iterable<VirtualFile>, arg3 : boolean) : void;
	registerUnsavedDocuments(arg1 : LocalHistoryFacade) : void;
	a(arg1 : VirtualFile) : boolean;
	a(arg1 : LocalHistoryFacade, arg2 : VirtualFile, arg3 : Document) : void;
	acquireAndUpdateActualContent(arg1 : VirtualFile, arg2 : Document) : Pair<StoredContent, number>;
	static a(arg1 : VirtualFile, arg2 : Document) : void;
	acquireAndClearCurrentContent(arg1 : VirtualFile, arg2 : Document) : Pair<StoredContent, number>;
	static b(arg1 : VirtualFile) : Pair<StoredContent, number>;
	static a(arg1 : Document) : number[];
	stringFromBytes(arg1 : number[], arg2 : string) : string;
	saveAllUnsavedDocuments() : void;
	static b(arg1 : Document) : VirtualFile;
	getDocument(arg1 : string) : Document;
	getFileType(arg1 : string) : FileType;
}


declare module IdeaGateway {
	class ContentAndTimestamps extends Object {
	}
}

export = IdeaGateway
