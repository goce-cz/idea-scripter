import ThreadLocal = require('nashorn/java/lang/ThreadLocal');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import LexerPosition = require('nashorn/com/intellij/lexer/LexerPosition');
import Lexer = require('nashorn/com/intellij/lexer/Lexer');
import DelegateLexer = require('nashorn/com/intellij/lexer/DelegateLexer');

declare class LayeredLexer {
	static ourDisableLayersFlag : ThreadLocal<boolean>;
	state : number;
	tokenType : IElementType;
	tokenStart : number;
	tokenEnd : number;
	currentPosition : LexerPosition;
	constructor(arg1 : Lexer);
	registerSelfStoppingLayer(arg1 : Lexer, arg2 : IElementType[], arg3 : IElementType[]) : void;
	registerLayer(arg1 : Lexer, arg2 : IElementType[]) : void;
	activateLayerIfNecessary() : void;
	isStopToken(arg1 : Lexer, arg2 : IElementType) : boolean;
	isLayerActive() : boolean;
	isInLayerEndGap() : boolean;
}


declare interface LayeredLexer extends DelegateLexer {}
export = LayeredLexer
