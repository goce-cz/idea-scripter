import Facet = require('nashorn/com/intellij/facet/Facet');
import FacetConfiguration = require('nashorn/com/intellij/facet/FacetConfiguration');
import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import FacetTypeId = require('nashorn/com/intellij/facet/FacetTypeId');
import Icon = require('nashorn/javax/swing/Icon');
import Class = require('nashorn/java/lang/Class');
import FacetDetectorRegistry = require('nashorn/com/intellij/facet/autodetecting/FacetDetectorRegistry');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import ModuleType = require('nashorn/com/intellij/openapi/module/ModuleType');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import DefaultFacetSettingsEditor = require('nashorn/com/intellij/facet/ui/DefaultFacetSettingsEditor');
import FacetEditor = require('nashorn/com/intellij/facet/ui/FacetEditor');
import MultipleFacetSettingsEditor = require('nashorn/com/intellij/facet/ui/MultipleFacetSettingsEditor');

declare class FacetType<F extends Facet, C extends FacetConfiguration> extends Object {
	static EP_NAME : ExtensionPointName<FacetType>;
	id : FacetTypeId<F>;
	stringId : string;
	presentableName : string;
	defaultFacetName : string;
	underlyingFacetType : FacetTypeId<any>;
	onlyOneFacetAllowed : boolean;
	icon : Icon;
	helpTopic : string;
	constructor(arg1 : FacetTypeId<F>, arg2 : string, arg3 : string, arg4 : FacetTypeId);
	constructor(arg1 : FacetTypeId<F>, arg2 : string, arg3 : string);
	static findInstance<T extends FacetType>(arg1 : Class<T>) : T;
	getId() : FacetTypeId<F>;
	getStringId() : string;
	getPresentableName() : string;
	getDefaultFacetName() : string;
	getUnderlyingFacetType() : FacetTypeId<any>;
	registerDetectors(arg1 : FacetDetectorRegistry<C>) : void;
	createDefaultConfiguration() : C;
	createFacet(arg1 : Module, arg2 : string, arg3 : C, arg4 : Facet) : F;
	isOnlyOneFacetAllowed() : boolean;
	isSuitableModuleType(arg1 : ModuleType) : boolean;
	getIcon() : Icon;
	getHelpTopic() : string;
	createDefaultConfigurationEditor(arg1 : Project, arg2 : C) : DefaultFacetSettingsEditor;
	createMultipleConfigurationsEditor(arg1 : Project, arg2 : FacetEditor[]) : MultipleFacetSettingsEditor;
}

export = FacetType
