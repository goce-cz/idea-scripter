import Object = require('nashorn/java/lang/Object');
import File = require('nashorn/java/io/File');
import StorageScheme = require('nashorn/com/intellij/openapi/components/StorageScheme');
import ProjectSettings = require('nashorn/com/intellij/conversion/ProjectSettings');
import RunManagerSettings = require('nashorn/com/intellij/conversion/RunManagerSettings');
import WorkspaceSettings = require('nashorn/com/intellij/conversion/WorkspaceSettings');
import ComponentManagerSettings = require('nashorn/com/intellij/conversion/ComponentManagerSettings');
import ProjectLibrariesSettings = require('nashorn/com/intellij/conversion/ProjectLibrariesSettings');
import ArtifactsSettings = require('nashorn/com/intellij/conversion/ArtifactsSettings');
import ModuleSettings = require('nashorn/com/intellij/conversion/ModuleSettings');
import Collection = require('nashorn/java/util/Collection');

declare class ConversionContext extends Object {
	projectBaseDir : File;
	projectFile : File;
	storageScheme : StorageScheme;
	settingsBaseDir : File;
	projectSettings : ProjectSettings;
	runManagerSettings : RunManagerSettings;
	workspaceSettings : WorkspaceSettings;
	compilerSettings : ComponentManagerSettings;
	projectRootManagerSettings : ComponentManagerSettings;
	moduleFiles : File[];
	modulesSettings : ComponentManagerSettings;
	projectLibrariesSettings : ProjectLibrariesSettings;
	artifactsSettings : ArtifactsSettings;
	getProjectBaseDir() : File;
	getProjectFile() : File;
	getStorageScheme() : StorageScheme;
	getSettingsBaseDir() : File;
	getProjectSettings() : ProjectSettings;
	getRunManagerSettings() : RunManagerSettings;
	getWorkspaceSettings() : WorkspaceSettings;
	getModuleSettings(arg1 : File) : ModuleSettings;
	getModuleSettings(arg1 : string) : ModuleSettings;
	createProjectSettings(arg1 : string) : ComponentManagerSettings;
	collapsePath(arg1 : string) : string;
	getLibraryClassRoots(arg1 : string, arg2 : string) : Collection<File>;
	getCompilerSettings() : ComponentManagerSettings;
	getProjectRootManagerSettings() : ComponentManagerSettings;
	getModuleFiles() : File[];
	getModulesSettings() : ComponentManagerSettings;
	getProjectLibrariesSettings() : ProjectLibrariesSettings;
	getArtifactsSettings() : ArtifactsSettings;
	expandPath(arg1 : string) : string;
}

export = ConversionContext
