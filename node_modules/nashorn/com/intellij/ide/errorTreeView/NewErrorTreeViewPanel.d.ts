import StatusText = require('nashorn/com/intellij/util/ui/StatusText');
import ErrorViewStructure = require('nashorn/com/intellij/ide/errorTreeView/ErrorViewStructure');
import JComponent = require('nashorn/javax/swing/JComponent');
import ErrorTreeElement = require('nashorn/com/intellij/ide/errorTreeView/ErrorTreeElement');
import ErrorTreeNodeDescriptor = require('nashorn/com/intellij/ide/errorTreeView/ErrorTreeNodeDescriptor');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Runnable = require('nashorn/java/lang/Runnable');
import NavigatableMessageElement = require('nashorn/com/intellij/ide/errorTreeView/NavigatableMessageElement');
import List = require('nashorn/java/util/List');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Component = require('nashorn/java/awt/Component');
import DefaultActionGroup = require('nashorn/com/intellij/openapi/actionSystem/DefaultActionGroup');
import JPanel = require('nashorn/javax/swing/JPanel');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');
import OccurenceNavigator = require('nashorn/com/intellij/ide/OccurenceNavigator');
import MutableErrorTreeView = require('nashorn/com/intellij/util/ui/MutableErrorTreeView');
import CopyProvider = require('nashorn/com/intellij/ide/CopyProvider');
import Tree = require('nashorn/com/intellij/ui/treeStructure/Tree');
import OccurenceNavigatorSupport = require('nashorn/com/intellij/ide/OccurenceNavigatorSupport');
import TreeExpander = require('nashorn/com/intellij/ide/TreeExpander');
import ToggleAction = require('nashorn/com/intellij/openapi/actionSystem/ToggleAction');
import DumbAware = require('nashorn/com/intellij/openapi/project/DumbAware');
import DumbAwareAction = require('nashorn/com/intellij/openapi/project/DumbAwareAction');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import Object = require('nashorn/java/lang/Object');

declare class NewErrorTreeViewPanel {
	emptyText : StatusText;
	errorViewStructure : ErrorViewStructure;
	component : JComponent;
	selectedErrorTreeElement : ErrorTreeElement;
	selectedNodeDescriptor : ErrorTreeNodeDescriptor;
	processStopped : boolean;
	nextOccurenceActionName : string;
	previousOccurenceActionName : string;
	hideWarnings : boolean;
	constructor(arg1 : Project, arg2 : string);
	constructor(arg1 : Project, arg2 : string, arg3 : boolean);
	constructor(arg1 : Project, arg2 : string, arg3 : boolean, arg4 : boolean);
	constructor(arg1 : Project, arg2 : string, arg3 : boolean, arg4 : boolean, arg5 : Runnable);
	getEmptyText() : StatusText;
	selectFirstMessage() : void;
	a(arg1 : ErrorTreeElement, arg2 : Runnable) : void;
	shouldShowFirstErrorInEditor() : boolean;
	updateTree() : void;
	getErrorViewStructure() : ErrorViewStructure;
	static createExportPrefix(arg1 : number) : string;
	static createRendererPrefix(arg1 : number, arg2 : number) : string;
	a() : NavigatableMessageElement;
	getSelectedErrorTreeElement() : ErrorTreeElement;
	getSelectedNodeDescriptor() : ErrorTreeNodeDescriptor;
	b() : List<ErrorTreeNodeDescriptor>;
	a(arg1 : boolean) : void;
	static getQualifiedName(arg1 : VirtualFile) : string;
	a(arg1 : Component, arg2 : number, arg3 : number) : void;
	addExtraPopupMenuActions(arg1 : DefaultActionGroup) : void;
	setProcessController(arg1 : NewErrorTreeViewPanel.ProcessController) : void;
	stopProcess() : void;
	canControlProcess() : boolean;
	isProcessStopped() : boolean;
	close() : void;
	setProgress(arg1 : string, arg2 : number) : void;
	setProgressText(arg1 : string) : void;
	setFraction(arg1 : number) : void;
	clearProgressData() : void;
	c() : void;
	d() : void;
	collapseAll() : void;
	expandAll() : void;
	a(arg1 : Runnable) : JPanel;
	fillRightToolbarGroup(arg1 : DefaultActionGroup) : void;
	canHideWarnings() : boolean;
	isHideWarnings() : boolean;
}


declare interface NewErrorTreeViewPanel extends JPanel, DataProvider, OccurenceNavigator, MutableErrorTreeView, CopyProvider {}

declare module NewErrorTreeViewPanel {
	class MyOccurrenceNavigatorSupport {
		nextOccurenceActionName : string;
		previousOccurenceActionName : string;
		constructor(arg1 : Tree);
	}


	interface MyOccurrenceNavigatorSupport extends OccurenceNavigatorSupport {}	class MyTreeExpander {
	}


	interface MyTreeExpander extends TreeExpander {}	class HideWarningsAction {
		constructor();
	}


	interface HideWarningsAction extends ToggleAction, DumbAware {}	class StopAction {
		constructor();
	}


	interface StopAction extends DumbAwareAction {}	class RerunAction {
		constructor(arg1 : Runnable, arg2 : AnAction);
	}


	interface RerunAction extends DumbAwareAction {}	class ProcessController extends Object {
		processStopped : boolean;
		stopProcess() : void;
		isProcessStopped() : boolean;
	}
}

export = NewErrorTreeViewPanel
