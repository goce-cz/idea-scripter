import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import HierarchyNodeDescriptor = require('nashorn/com/intellij/ide/hierarchy/HierarchyNodeDescriptor');
import Map = require('nashorn/java/util/Map');
import JTree = require('nashorn/javax/swing/JTree');
import JPanel = require('nashorn/javax/swing/JPanel');
import HierarchyTreeStructure = require('nashorn/com/intellij/ide/hierarchy/HierarchyTreeStructure');
import Comparator = require('nashorn/java/util/Comparator');
import NodeDescriptor = require('nashorn/com/intellij/ide/util/treeView/NodeDescriptor');
import DefaultActionGroup = require('nashorn/com/intellij/openapi/actionSystem/DefaultActionGroup');
import OccurenceNavigator = require('nashorn/com/intellij/ide/OccurenceNavigator');
import HierarchyBrowserBase = require('nashorn/com/intellij/ide/hierarchy/HierarchyBrowserBase');
import Collection = require('nashorn/java/util/Collection');
import ComboBoxAction = require('nashorn/com/intellij/openapi/actionSystem/ex/ComboBoxAction');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import RefreshAction = require('nashorn/com/intellij/ide/actions/RefreshAction');
import ToggleAction = require('nashorn/com/intellij/openapi/actionSystem/ToggleAction');

declare class HierarchyBrowserBaseEx {
	static SCOPE_PROJECT : string;
	static SCOPE_ALL : string;
	static SCOPE_TEST : string;
	static SCOPE_CLASS : string;
	nextOccurenceActionName : string;
	previousOccurenceActionName : string;
	currentViewType : string;
	constructor(arg1 : Project, arg2 : PsiElement);
	getOpenFileElementFromDescriptor(arg1 : HierarchyNodeDescriptor) : PsiElement;
	getPrevOccurenceActionNameImpl() : string;
	getNextOccurenceActionNameImpl() : string;
	createTrees(arg1 : Map<string, JTree>) : void;
	createLegendPanel() : JPanel;
	isApplicableElement(arg1 : PsiElement) : boolean;
	createHierarchyTreeStructure(arg1 : string, arg2 : PsiElement) : HierarchyTreeStructure;
	getComparator() : Comparator<NodeDescriptor>;
	getActionPlace() : string;
	getBrowserDataKey() : string;
	createTree(arg1 : boolean) : JTree;
	setHierarchyBase(arg1 : PsiElement) : void;
	b() : void;
	c() : void;
	changeView(arg1 : string) : void;
	getContentDisplayName(arg1 : string, arg2 : PsiElement) : string;
	prependActions(arg1 : DefaultActionGroup) : void;
	d() : OccurenceNavigator;
	isValidBase() : boolean;
	getCurrentViewType() : string;
	e() : void;
	doRefresh(arg1 : boolean) : void;
	getCurrentScopeType() : string;
}


declare interface HierarchyBrowserBaseEx extends HierarchyBrowserBase, OccurenceNavigator {}

declare module HierarchyBrowserBaseEx {
	class ChangeScopeAction {
		constructor();
		isEnabled() : boolean;
		a() : Collection<string>;
		a(arg1 : string) : void;
	}


	interface ChangeScopeAction extends ComboBoxAction {}

	module ChangeScopeAction {
		class ConfigureScopesAction {
		}


		interface ConfigureScopesAction extends AnAction {}		class MenuAction {
			constructor(arg1 : string);
		}


		interface MenuAction extends AnAction {}	}
	class RefreshAction {
		constructor();
	}


	interface RefreshAction extends RefreshAction {}	class BaseOnThisElementAction {
		constructor(arg1 : string, arg2 : string, arg3 : string);
		correctViewType(arg1 : HierarchyBrowserBaseEx, arg2 : string) : string;
		isEnabled(arg1 : HierarchyBrowserBaseEx, arg2 : PsiElement) : boolean;
		getNonDefaultText(arg1 : HierarchyBrowserBaseEx, arg2 : PsiElement) : string;
	}


	interface BaseOnThisElementAction extends AnAction {}	class AlphaSortAction {
		constructor();
	}


	interface AlphaSortAction extends ToggleAction {}}

export = HierarchyBrowserBaseEx
