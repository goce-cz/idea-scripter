import HierarchyNodeDescriptor = require('nashorn/com/intellij/ide/hierarchy/HierarchyNodeDescriptor');
import Object = require('nashorn/java/lang/Object');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import AbstractTreeStructure = require('nashorn/com/intellij/ide/util/treeView/AbstractTreeStructure');
import NodeDescriptor = require('nashorn/com/intellij/ide/util/treeView/NodeDescriptor');
import Project = require('nashorn/com/intellij/openapi/project/Project');

declare class HierarchyTreeStructure {
	baseDescriptor : HierarchyNodeDescriptor;
	rootElement : Object;
	alwaysShowPlus : boolean;
	getBaseDescriptor() : HierarchyNodeDescriptor;
	setBaseElement(arg1 : HierarchyNodeDescriptor) : void;
	buildChildren(arg1 : HierarchyNodeDescriptor) : Object[];
	getSearchScope(arg1 : string, arg2 : PsiElement) : SearchScope;
	isInScope(arg1 : PsiElement, arg2 : PsiElement, arg3 : string) : boolean;
	isAlwaysShowPlus() : boolean;
}


declare interface HierarchyTreeStructure extends AbstractTreeStructure {}

declare module HierarchyTreeStructure {
	class TextInfoNodeDescriptor {
		element : Object;
		constructor(arg1 : NodeDescriptor, arg2 : string, arg3 : Project);
	}


	interface TextInfoNodeDescriptor extends NodeDescriptor {}}

export = HierarchyTreeStructure
