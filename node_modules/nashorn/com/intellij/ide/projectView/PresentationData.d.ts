import Color = require('nashorn/java/awt/Color');
import TextAttributesKey = require('nashorn/com/intellij/openapi/editor/colors/TextAttributesKey');
import List = require('nashorn/java/util/List');
import PresentableNodeDescriptor = require('nashorn/com/intellij/ide/util/treeView/PresentableNodeDescriptor');
import Object = require('nashorn/java/lang/Object');
import Icon = require('nashorn/javax/swing/Icon');
import ItemPresentation = require('nashorn/com/intellij/navigation/ItemPresentation');
import SimpleTextAttributes = require('nashorn/com/intellij/ui/SimpleTextAttributes');
import ColoredItemPresentation = require('nashorn/com/intellij/navigation/ColoredItemPresentation');
import ComparableObject = require('nashorn/com/intellij/util/ui/update/ComparableObject');
import LocationPresentation = require('nashorn/com/intellij/navigation/LocationPresentation');

declare class PresentationData {
	forcedTextForeground : Color;
	locationString : string;
	presentableText : string;
	textAttributesKey : TextAttributesKey;
	tooltip : string;
	changed : boolean;
	coloredText : List<PresentableNodeDescriptor.ColoredFragment>;
	equalityObjects : Object[];
	locationPrefix : string;
	locationSuffix : string;
	constructor(arg1 : string, arg2 : string, arg3 : Icon, arg4 : TextAttributesKey);
	constructor(arg1 : string, arg2 : string, arg3 : Icon, arg4 : Icon, arg5 : TextAttributesKey);
	constructor();
	getForcedTextForeground() : Color;
	setForcedTextForeground(arg1 : Color) : void;
	setIcon(arg1 : Icon) : void;
	setLocationString(arg1 : string) : void;
	setPresentableText(arg1 : string) : void;
	setClosedIcon(arg1 : Icon) : void;
	setOpenIcon(arg1 : Icon) : void;
	setIcons(arg1 : Icon) : void;
	updateFrom(arg1 : ItemPresentation) : void;
	hasSeparatorAbove() : boolean;
	setSeparatorAbove(arg1 : boolean) : void;
	setAttributesKey(arg1 : TextAttributesKey) : void;
	getTooltip() : string;
	setTooltip(arg1 : string) : void;
	isChanged() : boolean;
	setChanged(arg1 : boolean) : void;
	getColoredText() : List<PresentableNodeDescriptor.ColoredFragment>;
	addText(arg1 : PresentableNodeDescriptor.ColoredFragment) : void;
	addText(arg1 : string, arg2 : SimpleTextAttributes) : void;
	clearText() : void;
	clear() : void;
	copyFrom(arg1 : PresentationData) : void;
	applyFrom(arg1 : PresentationData) : void;
	static getValue<T>(arg1 : T, arg2 : T) : T;
}


declare interface PresentationData extends ColoredItemPresentation, ComparableObject, LocationPresentation {}
export = PresentationData
