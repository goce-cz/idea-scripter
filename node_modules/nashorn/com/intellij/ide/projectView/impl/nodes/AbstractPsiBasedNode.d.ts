import Collection = require('nashorn/java/util/Collection');
import AbstractTreeNode = require('nashorn/com/intellij/ide/util/treeView/AbstractTreeNode');
import FileStatus = require('nashorn/com/intellij/openapi/vcs/FileStatus');
import NavigationItem = require('nashorn/com/intellij/navigation/NavigationItem');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PresentationData = require('nashorn/com/intellij/ide/projectView/PresentationData');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import ProjectViewNode = require('nashorn/com/intellij/ide/projectView/ProjectViewNode');
import ValidateableNode = require('nashorn/com/intellij/ide/util/treeView/ValidateableNode');
import StatePreservingNavigatable = require('nashorn/com/intellij/pom/StatePreservingNavigatable');

declare class AbstractPsiBasedNode<Value> {
	children : Collection<AbstractTreeNode>;
	valid : boolean;
	fileStatus : FileStatus;
	navigationItem : NavigationItem;
	extractPsiFromValue() : PsiElement;
	getChildrenImpl() : Collection<AbstractTreeNode>;
	updateImpl(arg1 : PresentationData) : void;
	isMarkReadOnly() : boolean;
	a() : VirtualFile;
	getIconableFlags() : number;
	isDeprecated() : boolean;
	getNavigationItem() : NavigationItem;
	calcTooltip() : string;
}


declare interface AbstractPsiBasedNode<Value> extends ProjectViewNode<Value>, ValidateableNode, StatePreservingNavigatable {}
export = AbstractPsiBasedNode
