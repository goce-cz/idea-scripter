import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import ViewSettings = require('nashorn/com/intellij/ide/projectView/ViewSettings');
import Collection = require('nashorn/java/util/Collection');
import Comparable = require('nashorn/java/lang/Comparable');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Class = require('nashorn/java/lang/Class');
import AbstractTreeNode = require('nashorn/com/intellij/ide/util/treeView/AbstractTreeNode');
import List = require('nashorn/java/util/List');
import Object = require('nashorn/java/lang/Object');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import RootsProvider = require('nashorn/com/intellij/ide/projectView/RootsProvider');
import SettingsProvider = require('nashorn/com/intellij/ide/projectView/SettingsProvider');

declare class ProjectViewNode<Value> {
	virtualFile : VirtualFile;
	settings : ViewSettings;
	roots : Collection<VirtualFile>;
	title : string;
	sortByFirstChild : boolean;
	typeSortKey : Comparable;
	sortKey : Comparable;
	manualOrderKey : Comparable;
	qualifiedNameSortKey : string;
	validating : boolean;
	contains(arg1 : VirtualFile) : boolean;
	static wrap(arg1 : Collection, arg2 : Project, arg3 : Class<AbstractTreeNode>, arg4 : ViewSettings) : List<AbstractTreeNode>;
	static createTreeNode(arg1 : Class<AbstractTreeNode>, arg2 : Project, arg3 : Object, arg4 : ViewSettings) : AbstractTreeNode;
	someChildContainsFile(arg1 : VirtualFile) : boolean;
	someChildContainsFile(arg1 : VirtualFile, arg2 : boolean) : boolean;
	canHaveChildrenMatching(arg1 : Condition<PsiFile>) : boolean;
	getTitle() : string;
	isSortByFirstChild() : boolean;
	getTypeSortWeight(arg1 : boolean) : number;
	getTypeSortKey() : Comparable;
	getSortKey() : Comparable;
	getManualOrderKey() : Comparable;
	getQualifiedNameSortKey() : string;
	shouldDrillDownOnEmptyElement() : boolean;
	validate() : boolean;
	setValidating(arg1 : boolean) : void;
	isValidating() : boolean;
}


declare interface ProjectViewNode<Value> extends AbstractTreeNode<Value>, RootsProvider, SettingsProvider {}
export = ProjectViewNode
