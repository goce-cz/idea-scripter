import ClassMember = require('nashorn/com/intellij/codeInsight/generation/ClassMember');
import JComponent = require('nashorn/javax/swing/JComponent');
import List = require('nashorn/java/util/List');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Comparator = require('nashorn/java/util/Comparator');
import DefaultTreeModel = require('nashorn/javax/swing/tree/DefaultTreeModel');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import MemberChooserObject = require('nashorn/com/intellij/codeInsight/generation/MemberChooserObject');
import Tree = require('nashorn/com/intellij/ui/treeStructure/Tree');
import TreeCellRenderer = require('nashorn/javax/swing/tree/TreeCellRenderer');
import SpeedSearchComparator = require('nashorn/com/intellij/ui/SpeedSearchComparator');
import AnActionEvent = require('nashorn/com/intellij/openapi/actionSystem/AnActionEvent');
import DefaultActionGroup = require('nashorn/com/intellij/openapi/actionSystem/DefaultActionGroup');
import LinkedHashSet = require('nashorn/java/util/LinkedHashSet');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import Collection = require('nashorn/java/util/Collection');
import Enumeration = require('nashorn/java/util/Enumeration');
import TreeNode = require('nashorn/javax/swing/tree/TreeNode');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import DialogWrapper = require('nashorn/com/intellij/openapi/ui/DialogWrapper');
import TypeSafeDataProvider = require('nashorn/com/intellij/openapi/actionSystem/TypeSafeDataProvider');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import Icon = require('nashorn/javax/swing/Icon');
import ToggleAction = require('nashorn/com/intellij/openapi/actionSystem/ToggleAction');
import KeyAdapter = require('nashorn/java/awt/event/KeyAdapter');
import AbstractAction = require('nashorn/javax/swing/AbstractAction');
import MutableTreeNode = require('nashorn/javax/swing/tree/MutableTreeNode');
import TreeSelectionListener = require('nashorn/javax/swing/event/TreeSelectionListener');

declare class MemberChooser<T extends ClassMember> {
	preferredFocusedComponent : JComponent;
	optionControls : JComponent[];
	selectedElements : List<T>;
	copyJavadoc : boolean;
	insertOverrideAnnotation : boolean;
	constructor(arg1 : T[], arg2 : boolean, arg3 : boolean, arg4 : Project, arg5 : JComponent, arg6 : JComponent[]);
	constructor(arg1 : T[], arg2 : boolean, arg3 : boolean, arg4 : Project);
	constructor(arg1 : T[], arg2 : boolean, arg3 : boolean, arg4 : Project, arg5 : boolean);
	constructor(arg1 : T[], arg2 : boolean, arg3 : boolean, arg4 : Project, arg5 : boolean, arg6 : JComponent);
	resetElementsWithDefaultComparator(arg1 : T[], arg2 : boolean) : void;
	resetElements(arg1 : T[]) : void;
	resetElements(arg1 : T[], arg2 : Comparator<T>, arg3 : boolean) : void;
	a() : DefaultTreeModel;
	createMemberNode(arg1 : Ref<number>, arg2 : T, arg3 : MemberChooser.ParentNode) : MemberChooser.MemberNode;
	supportsNestedContainers() : boolean;
	defaultExpandTree() : void;
	isContainerNode(arg1 : MemberChooserObject) : boolean;
	selectElements(arg1 : ClassMember[]) : void;
	customizeOptionsPanel() : void;
	b() : void;
	createTree() : Tree;
	getTreeCellRenderer() : TreeCellRenderer;
	convertElementText(arg1 : string) : string;
	installSpeedSearch() : void;
	getSpeedSearchComparator() : SpeedSearchComparator;
	disableAlphabeticalSorting(arg1 : AnActionEvent) : void;
	onAlphabeticalSortingEnabled(arg1 : AnActionEvent) : void;
	fillToolbarActions(arg1 : DefaultActionGroup) : void;
	getOptionControls() : JComponent[];
	c() : LinkedHashSet<T>;
	getSelectedElements() : List<T>;
	getSelectedElements(arg1 : T[]) : T[];
	areElementsSelected() : boolean;
	setCopyJavadocVisible(arg1 : boolean) : void;
	isCopyJavadoc() : boolean;
	isInsertOverrideAnnotation() : boolean;
	d() : boolean;
	changeSortComparator(arg1 : Comparator<T>) : void;
	a(arg1 : Comparator<MemberChooser.ElementNode>) : void;
	doSort() : void;
	static a(arg1 : MemberChooser.ParentNode, arg2 : Comparator<MemberChooser.ElementNode>) : void;
	static a(arg1 : DefaultMutableTreeNode, arg2 : Collection<MemberChooser.ElementNode>) : void;
	restoreTree() : void;
	a(arg1 : boolean) : void;
	getAllContainersNodeName() : string;
	e() : Enumeration<TreeNode>;
	getRootNode() : DefaultMutableTreeNode;
	f() : Pair<MemberChooser.ElementNode, List<MemberChooser.ElementNode>>;
	a(arg1 : Pair<MemberChooser.ElementNode, List<MemberChooser.ElementNode>>) : void;
	getShowContainersAction() : MemberChooser.ShowContainersAction;
}


declare interface MemberChooser<T extends ClassMember> extends DialogWrapper, TypeSafeDataProvider {}

declare module MemberChooser {
	class ElementNodeComparatorWrapper<T> {
		constructor(arg1 : Comparator<T>);
	}


	interface ElementNodeComparatorWrapper<T> extends Comparator<MemberChooser.ElementNode> {}	class OrderComparator {
		constructor();
	}


	interface OrderComparator extends Comparator<MemberChooser.ElementNode> {}	class AlphaComparator {
	}


	interface AlphaComparator extends Comparator<MemberChooser.ElementNode> {}	class CollapseAllAction {
		constructor();
	}


	interface CollapseAllAction extends AnAction {}	class ExpandAllAction {
		constructor();
	}


	interface ExpandAllAction extends AnAction {}	class ShowContainersAction {
		constructor(arg1 : string, arg2 : Icon);
	}


	interface ShowContainersAction extends ToggleAction {}	class SortEmAction {
		constructor();
	}


	interface SortEmAction extends ToggleAction {}	class TreeKeyListener {
	}


	interface TreeKeyListener extends KeyAdapter {}	class SelectNoneAction {
		constructor();
	}


	interface SelectNoneAction extends AbstractAction {}	class ContainerNode {
		constructor(arg1 : DefaultMutableTreeNode, arg2 : MemberChooserObject, arg3 : Ref<number>);
	}


	interface ContainerNode extends MemberChooser.ParentNode {}	class ParentNode {
		constructor(arg1 : DefaultMutableTreeNode, arg2 : MemberChooserObject, arg3 : Ref<number>);
	}


	interface ParentNode extends MemberChooser.ElementNodeImpl {}	class MemberNodeImpl {
		constructor(arg1 : MemberChooser.ParentNode, arg2 : ClassMember, arg3 : Ref<number>);
	}


	interface MemberNodeImpl extends MemberChooser.ElementNodeImpl, MemberChooser.MemberNode {}	class ElementNodeImpl {
		delegate : MemberChooserObject;
		order : number;
		constructor(arg1 : DefaultMutableTreeNode, arg2 : MemberChooserObject, arg3 : Ref<number>);
	}


	interface ElementNodeImpl extends DefaultMutableTreeNode, MemberChooser.ElementNode {}	class MemberNode {
	}


	interface MemberNode extends MemberChooser.ElementNode {}	class ElementNode {
		delegate : MemberChooserObject;
		order : number;
		getDelegate() : MemberChooserObject;
		getOrder() : number;
	}


	interface ElementNode extends MutableTreeNode {}	class MyTreeSelectionListener {
	}


	interface MyTreeSelectionListener extends TreeSelectionListener {}}

export = MemberChooser
