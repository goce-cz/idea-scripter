import Object = require('nashorn/java/lang/Object');
import AbstractTreeUi = require('nashorn/com/intellij/ide/util/treeView/AbstractTreeUi');
import Set = require('nashorn/java/util/Set');
import Map = require('nashorn/java/util/Map');
import Enumeration = require('nashorn/java/util/Enumeration');
import Collection = require('nashorn/java/util/Collection');
import Runnable = require('nashorn/java/lang/Runnable');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import Function = require('nashorn/com/intellij/util/Function');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');

declare class UpdaterTreeState extends Object {
	toSelect : Object[];
	toExpand : Object[];
	empty : boolean;
	processingNow : boolean;
	constructor(arg1 : AbstractTreeUi);
	constructor(arg1 : AbstractTreeUi, arg2 : boolean);
	isQueuedForSelection(arg1 : Object) : boolean;
	static putAll(arg1 : Set<Object>, arg2 : Map<Object, Object>) : void;
	addPaths(arg1 : Object[]) : Set<Object>;
	addPaths(arg1 : Enumeration) : Set<Object>;
	addPaths(arg1 : Collection) : Set<Object>;
	getToSelect() : Object[];
	getToExpand() : Object[];
	process(arg1 : Runnable) : boolean;
	isEmpty() : boolean;
	isProcessingNow() : boolean;
	addAll(arg1 : UpdaterTreeState) : void;
	restore(arg1 : DefaultMutableTreeNode) : boolean;
	invalidateToSelectWithRefsToParent(arg1 : DefaultMutableTreeNode) : void;
	beforeSubtreeUpdate() : void;
	processUnsuccessfulSelections(arg1 : Object[], arg2 : Function<Object, Object>, arg3 : Set<Object>) : void;
	processAjusted(arg1 : Map<Object, Condition>, arg2 : Set<Object>) : ActionCallback;
	processHangByParent(arg1 : Set<Object>) : ActionCallback;
	processHangByParent(arg1 : Object) : ActionCallback;
	processNextHang(arg1 : Object, arg2 : ActionCallback) : void;
	isParentOrSame(arg1 : Object, arg2 : Object) : boolean;
	clearExpansion() : void;
	clearSelection() : void;
	addSelection(arg1 : Object) : void;
	addAdjustedSelection(arg1 : Object, arg2 : Condition, arg3 : Object) : void;
	setProcessingNow(arg1 : boolean) : void;
	removeFromSelection(arg1 : Object) : void;
}

export = UpdaterTreeState
