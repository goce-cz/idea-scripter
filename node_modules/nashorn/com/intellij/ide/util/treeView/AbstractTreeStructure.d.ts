import Object = require('nashorn/java/lang/Object');
import NodeDescriptor = require('nashorn/com/intellij/ide/util/treeView/NodeDescriptor');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import AsyncResult = require('nashorn/com/intellij/openapi/util/AsyncResult');

declare class AbstractTreeStructure extends Object {
	rootElement : Object;
	constructor();
	getRootElement() : Object;
	getChildElements(arg1 : Object) : Object[];
	getParentElement(arg1 : Object) : Object;
	createDescriptor(arg1 : Object, arg2 : NodeDescriptor) : NodeDescriptor;
	commit() : void;
	hasSomethingToCommit() : boolean;
	static asyncCommitDocuments(arg1 : Project) : ActionCallback;
	asyncCommit() : ActionCallback;
	isToBuildChildrenInBackground(arg1 : Object) : boolean;
	isValid(arg1 : Object) : boolean;
	isAlwaysLeaf(arg1 : Object) : boolean;
	revalidateElement(arg1 : Object) : AsyncResult<Object>;
}

export = AbstractTreeStructure
