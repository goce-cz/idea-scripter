import ModalityState = require('nashorn/com/intellij/openapi/application/ModalityState');
import AbstractTreeBuilder = require('nashorn/com/intellij/ide/util/treeView/AbstractTreeBuilder');
import JComponent = require('nashorn/javax/swing/JComponent');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import TreeUpdatePass = require('nashorn/com/intellij/ide/util/treeView/TreeUpdatePass');
import Update = require('nashorn/com/intellij/util/ui/update/Update');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import Object = require('nashorn/java/lang/Object');
import Runnable = require('nashorn/java/lang/Runnable');
import SelectionRequest = require('nashorn/com/intellij/ide/util/treeView/SelectionRequest');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Activatable = require('nashorn/com/intellij/util/ui/update/Activatable');

declare class AbstractTreeUpdater {
	modalityState : ModalityState;
	updateCount : number;
	inPostponeMode : boolean;
	constructor(arg1 : AbstractTreeBuilder);
	setDelay(arg1 : number) : void;
	setPassThroughMode(arg1 : boolean) : void;
	setModalityStateComponent(arg1 : JComponent) : void;
	getModalityState() : ModalityState;
	hasNodesToUpdate() : boolean;
	addSubtreeToUpdate(arg1 : DefaultMutableTreeNode) : void;
	requeue(arg1 : TreeUpdatePass) : void;
	addSubtreeToUpdate(arg1 : TreeUpdatePass) : void;
	reQueueViewUpdateIfNeeded() : void;
	reQueueViewUpdate() : void;
	queue(arg1 : Update) : void;
	updateSubtree(arg1 : DefaultMutableTreeNode) : void;
	performUpdate() : void;
	maybeRunAfterUpdate() : void;
	isReleased() : boolean;
	beforeUpdate(arg1 : TreeUpdatePass) : ActionCallback;
	addSubtreeToUpdateByElement(arg1 : Object) : boolean;
	addSubtreeToUpdateByElement(arg1 : Object, arg2 : boolean) : boolean;
	cancelAllRequests() : void;
	runAfterUpdate(arg1 : Runnable) : void;
	runBeforeUpdate(arg1 : Runnable) : void;
	getUpdateCount() : number;
	isRerunNeededFor(arg1 : TreeUpdatePass) : boolean;
	isInPostponeMode() : boolean;
	isEdt() : boolean;
	flush() : void;
	isEnqueuedToUpdate(arg1 : DefaultMutableTreeNode) : boolean;
	queueSelection(arg1 : SelectionRequest) : void;
	requestRelease() : void;
	reset() : void;
}


declare interface AbstractTreeUpdater extends Disposable, Activatable {}
export = AbstractTreeUpdater
