import PresentationData = require('nashorn/com/intellij/ide/projectView/PresentationData');
import Color = require('nashorn/java/awt/Color');
import NodeDescriptor = require('nashorn/com/intellij/ide/util/treeView/NodeDescriptor');
import Object = require('nashorn/java/lang/Object');
import SimpleTextAttributes = require('nashorn/com/intellij/ui/SimpleTextAttributes');

declare class PresentableNodeDescriptor<E> {
	presentation : PresentationData;
	contentHighlighted : boolean;
	highlightColor : Color;
	name : string;
	apply(arg1 : PresentationData) : boolean;
	apply(arg1 : PresentationData, arg2 : PresentationData) : boolean;
	getUpdatedPresentation() : PresentationData;
	createPresentation() : PresentationData;
	postprocess(arg1 : PresentationData) : void;
	shouldPostprocess() : boolean;
	shouldApply() : boolean;
	shouldUpdateData() : boolean;
	update(arg1 : PresentationData) : void;
	getPresentation() : PresentationData;
	getTemplatePresentation() : PresentationData;
	isContentHighlighted() : boolean;
	isHighlightableContentNode(arg1 : PresentableNodeDescriptor) : boolean;
	getChildToHighlightAt(arg1 : number) : PresentableNodeDescriptor;
	isParentOf(arg1 : NodeDescriptor) : boolean;
	isAncestorOrSelf(arg1 : NodeDescriptor) : boolean;
	getHighlightColor() : Color;
	getName() : string;
}


declare interface PresentableNodeDescriptor<E> extends NodeDescriptor<E> {}

declare module PresentableNodeDescriptor {
	class ColoredFragment extends Object {
		toolTip : string;
		text : string;
		attributes : SimpleTextAttributes;
		constructor(arg1 : string, arg2 : SimpleTextAttributes);
		constructor(arg1 : string, arg2 : string, arg3 : SimpleTextAttributes);
		getToolTip() : string;
		getText() : string;
		getAttributes() : SimpleTextAttributes;
	}
}

export = PresentableNodeDescriptor
