import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import JTree = require('nashorn/javax/swing/JTree');
import AbstractTreeStructure = require('nashorn/com/intellij/ide/util/treeView/AbstractTreeStructure');
import Object = require('nashorn/java/lang/Object');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import AbstractTreeUi = require('nashorn/com/intellij/ide/util/treeView/AbstractTreeUi');
import DefaultTreeModel = require('nashorn/javax/swing/tree/DefaultTreeModel');
import Set = require('nashorn/java/util/Set');
import Comparator = require('nashorn/java/util/Comparator');
import NodeDescriptor = require('nashorn/com/intellij/ide/util/treeView/NodeDescriptor');
import Runnable = require('nashorn/java/lang/Runnable');
import AbstractTreeNode = require('nashorn/com/intellij/ide/util/treeView/AbstractTreeNode');
import AbstractTreeUpdater = require('nashorn/com/intellij/ide/util/treeView/AbstractTreeUpdater');
import ProgressIndicator = require('nashorn/com/intellij/openapi/progress/ProgressIndicator');
import TreePath = require('nashorn/javax/swing/tree/TreePath');
import TreeNode = require('nashorn/javax/swing/tree/TreeNode');
import ArrayList = require('nashorn/java/util/ArrayList');
import Progressive = require('nashorn/com/intellij/openapi/progress/Progressive');
import AsyncResult = require('nashorn/com/intellij/openapi/util/AsyncResult');
import Class = require('nashorn/java/lang/Class');
import TreeVisitor = require('nashorn/com/intellij/ide/util/treeView/TreeVisitor');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Collection = require('nashorn/java/util/Collection');

declare class AbstractTreeBuilder {
	static DEFAULT_UPDATE_INACTIVE : boolean;
	rootNode : DefaultMutableTreeNode;
	tree : JTree;
	treeStructure : AbstractTreeStructure;
	rootElement : Object;
	disposed : boolean;
	toEnsureSelectionOnFocusGained : boolean;
	intialized : ActionCallback;
	initialized : ActionCallback;
	ui : AbstractTreeUi;
	treeModel : DefaultTreeModel;
	selectedElements : Set<Object>;
	selectionBeingAdjusted : boolean;
	constructor(arg1 : JTree, arg2 : DefaultTreeModel, arg3 : AbstractTreeStructure, arg4 : Comparator<NodeDescriptor>);
	constructor(arg1 : JTree, arg2 : DefaultTreeModel, arg3 : AbstractTreeStructure, arg4 : Comparator<NodeDescriptor>, arg5 : boolean);
	init(arg1 : JTree, arg2 : DefaultTreeModel, arg3 : AbstractTreeStructure, arg4 : Comparator<NodeDescriptor>, arg5 : boolean) : void;
	createUi() : AbstractTreeUi;
	select(arg1 : Object) : void;
	select(arg1 : Object, arg2 : Runnable) : void;
	select(arg1 : Object, arg2 : Runnable, arg3 : boolean) : void;
	select(arg1 : Object[], arg2 : Runnable) : void;
	select(arg1 : Object[], arg2 : Runnable, arg3 : boolean) : void;
	expand(arg1 : Object, arg2 : Runnable) : void;
	expand(arg1 : Object[], arg2 : Runnable) : void;
	collapseChildren(arg1 : Object, arg2 : Runnable) : void;
	createSearchingTreeNodeWrapper() : AbstractTreeNode;
	setClearOnHideDelay(arg1 : number) : AbstractTreeBuilder;
	createUpdater() : AbstractTreeUpdater;
	getUpdater() : AbstractTreeUpdater;
	addSubtreeToUpdateByElement(arg1 : Object) : boolean;
	addSubtreeToUpdate(arg1 : DefaultMutableTreeNode) : void;
	addSubtreeToUpdate(arg1 : DefaultMutableTreeNode, arg2 : Runnable) : void;
	getRootNode() : DefaultMutableTreeNode;
	setNodeDescriptorComparator(arg1 : Comparator<NodeDescriptor>) : void;
	getTreeStructureElement(arg1 : NodeDescriptor) : Object;
	updateNode(arg1 : DefaultMutableTreeNode) : void;
	validateNode(arg1 : Object) : boolean;
	isDisposeOnCollapsing(arg1 : NodeDescriptor) : boolean;
	getTree() : JTree;
	getTreeStructure() : AbstractTreeStructure;
	setTreeStructure(arg1 : AbstractTreeStructure) : void;
	getRootElement() : Object;
	updateFromRoot() : void;
	initRootNode() : void;
	updateFromRootCB() : ActionCallback;
	queueUpdate() : ActionCallback;
	queueUpdate(arg1 : boolean) : ActionCallback;
	queueUpdateFrom(arg1 : Object, arg2 : boolean) : ActionCallback;
	queueUpdateFrom(arg1 : Object, arg2 : boolean, arg3 : boolean) : ActionCallback;
	buildNodeForElement(arg1 : Object) : void;
	getNodeForElement(arg1 : Object) : DefaultMutableTreeNode;
	cleanUp() : void;
	createProgressIndicator() : ProgressIndicator;
	expandNodeChildren(arg1 : DefaultMutableTreeNode) : void;
	isAutoExpandNode(arg1 : NodeDescriptor) : boolean;
	isAlwaysShowPlus(arg1 : NodeDescriptor) : boolean;
	isSmartExpand() : boolean;
	isDisposed() : boolean;
	updateSubtree(arg1 : DefaultMutableTreeNode) : void;
	wasRootNodeInitialized() : boolean;
	isNodeBeingBuilt(arg1 : TreePath) : boolean;
	buildNodeForPath(arg1 : Object[]) : void;
	getNodeForPath(arg1 : Object[]) : DefaultMutableTreeNode;
	findNodeByElement(arg1 : Object) : Object;
	static isLoadingNode(arg1 : DefaultMutableTreeNode) : boolean;
	isChildrenResortingNeeded(arg1 : NodeDescriptor) : boolean;
	runOnYeildingDone(arg1 : Runnable) : void;
	yield(arg1 : Runnable) : void;
	isToYieldUpdateFor(arg1 : DefaultMutableTreeNode) : boolean;
	isToEnsureSelectionOnFocusGained() : boolean;
	runBackgroundLoading(arg1 : Runnable) : void;
	updateAfterLoadedInBackground(arg1 : Runnable) : void;
	getIntialized() : ActionCallback;
	getInitialized() : ActionCallback;
	getReady(arg1 : Object) : ActionCallback;
	sortChildren(arg1 : Comparator<TreeNode>, arg2 : DefaultMutableTreeNode, arg3 : ArrayList<TreeNode>) : void;
	setPassthroughMode(arg1 : boolean) : void;
	expandAll(arg1 : Runnable) : void;
	cancelUpdate() : ActionCallback;
	batch(arg1 : Progressive) : ActionCallback;
	revalidateElement(arg1 : Object) : AsyncResult<Object>;
	getUi() : AbstractTreeUi;
	releaseUi() : void;
	updateNodeDescriptor(arg1 : NodeDescriptor) : boolean;
	getTreeModel() : DefaultTreeModel;
	getSelectedElements() : Set<Object>;
	getSelectedElements<T>(arg1 : Class<T>) : Set<T>;
	transformElement(arg1 : Object) : Object;
	setCanYieldUpdate(arg1 : boolean) : void;
	static getBuilderFor(arg1 : JTree) : AbstractTreeBuilder;
	accept<T>(arg1 : Class<any>, arg2 : TreeVisitor<T>) : Object;
	accept<T>(arg1 : Class<any>, arg2 : Object, arg3 : TreeVisitor<T>) : Object;
	select<T>(arg1 : Class, arg2 : TreeVisitor<T>, arg3 : Runnable, arg4 : boolean) : boolean;
	scrollSelectionToVisible(arg1 : Runnable, arg2 : boolean) : void;
	static isUnitTestingMode() : boolean;
	static isToPaintSelection(arg1 : JTree) : boolean;
	isSelectionBeingAdjusted() : boolean;
}


declare interface AbstractTreeBuilder extends Disposable {}

declare module AbstractTreeBuilder {
	class UserRunnable {
		constructor(arg1 : Runnable);
	}


	interface UserRunnable extends Runnable {}	class AbstractTreeNodeWrapper {
		children : Collection<AbstractTreeNode>;
		constructor();
	}


	interface AbstractTreeNodeWrapper extends AbstractTreeNode<Object> {}}

export = AbstractTreeBuilder
