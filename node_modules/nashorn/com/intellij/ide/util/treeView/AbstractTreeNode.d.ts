import Collection = require('nashorn/java/util/Collection');
import NodeDescriptor = require('nashorn/com/intellij/ide/util/treeView/NodeDescriptor');
import Object = require('nashorn/java/lang/Object');
import FileStatus = require('nashorn/com/intellij/openapi/vcs/FileStatus');
import TextAttributesKey = require('nashorn/com/intellij/openapi/editor/colors/TextAttributesKey');
import PresentationData = require('nashorn/com/intellij/ide/projectView/PresentationData');
import Queryable = require('nashorn/com/intellij/openapi/ui/Queryable');
import Color = require('nashorn/java/awt/Color');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import PresentableNodeDescriptor = require('nashorn/com/intellij/ide/util/treeView/PresentableNodeDescriptor');
import NavigationItem = require('nashorn/com/intellij/navigation/NavigationItem');

declare class AbstractTreeNode<T> {
	children : Collection<AbstractTreeNode>;
	alwaysShowPlus : boolean;
	alwaysLeaf : boolean;
	alwaysExpand : boolean;
	element : AbstractTreeNode<T>;
	parent : AbstractTreeNode;
	parentDescriptor : NodeDescriptor;
	value : T;
	equalityObject : Object;
	testPresentation : string;
	fileStatus : FileStatus;
	name : string;
	attributesKey : TextAttributesKey;
	locationString : string;
	getChildren() : Collection<AbstractTreeNode>;
	hasProblemFileBeneath() : boolean;
	valueIsCut() : boolean;
	setForcedForeground(arg1 : PresentationData) : void;
	isAlwaysShowPlus() : boolean;
	isAlwaysLeaf() : boolean;
	isAlwaysExpand() : boolean;
	getParent() : AbstractTreeNode;
	setParent(arg1 : AbstractTreeNode) : void;
	getValue() : T;
	setValue(arg1 : T) : void;
	getEqualityObject() : Object;
	toTestString(arg1 : Queryable.PrintInfo) : string;
	getTestPresentation() : string;
	getFileStatusColor(arg1 : FileStatus) : Color;
	getVirtualFile() : VirtualFile;
	getFileStatus() : FileStatus;
	getParentValue() : Object;
	canRepresent(arg1 : Object) : boolean;
	getToolTip() : string;
	getAttributesKey() : TextAttributesKey;
	getLocationString() : string;
}


declare interface AbstractTreeNode<T> extends PresentableNodeDescriptor<AbstractTreeNode<T>>, NavigationItem, Queryable.Contributor {}
export = AbstractTreeNode
