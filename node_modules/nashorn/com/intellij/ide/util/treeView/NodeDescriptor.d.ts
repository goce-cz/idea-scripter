import Object = require('nashorn/java/lang/Object');
import Icon = require('nashorn/javax/swing/Icon');
import Color = require('nashorn/java/awt/Color');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Comparator = require('nashorn/java/util/Comparator');

declare class NodeDescriptor<E> extends Object {
	parentDescriptor : NodeDescriptor;
	index : number;
	element : E;
	openIcon : Icon;
	closedIcon : Icon;
	icon : Icon;
	color : Color;
	project : Project;
	weight : number;
	childrenSortingStamp : number;
	updateCount : number;
	wasDeclaredAlwaysLeaf : boolean;
	constructor(arg1 : Project, arg2 : NodeDescriptor);
	getParentDescriptor() : NodeDescriptor;
	getIndex() : number;
	setIndex(arg1 : number) : void;
	update() : boolean;
	getElement() : E;
	getOpenIcon() : Icon;
	getClosedIcon() : Icon;
	getIcon() : Icon;
	getColor() : Color;
	getProject() : Project;
	expandOnDoubleClick() : boolean;
	getWeight() : number;
	getChildrenSortingStamp() : number;
	setChildrenSortingStamp(arg1 : number) : void;
	getUpdateCount() : number;
	setUpdateCount(arg1 : number) : void;
	isWasDeclaredAlwaysLeaf() : boolean;
	setWasDeclaredAlwaysLeaf(arg1 : boolean) : void;
	applyFrom(arg1 : NodeDescriptor) : void;
	setIcon(arg1 : Icon) : void;
}


declare module NodeDescriptor {
	class NodeComparator<T extends NodeDescriptor> {
		stamp : number;
		constructor();
		setStamp(arg1 : number) : void;
		getStamp() : number;
		incStamp() : void;
	}


	interface NodeComparator<T extends NodeDescriptor> extends Comparator<T> {}

	module NodeComparator {
		class Delegate<T extends NodeDescriptor> {
			stamp : number;
			setDelegate(arg1 : NodeDescriptor.NodeComparator<T>) : void;
		}


		interface Delegate<T extends NodeDescriptor> extends NodeDescriptor.NodeComparator<T> {}	}
}

export = NodeDescriptor
