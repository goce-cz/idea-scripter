import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import ModuleBuilderFactory = require('nashorn/com/intellij/ide/util/projectWizard/ModuleBuilderFactory');
import List = require('nashorn/java/util/List');
import ModuleType = require('nashorn/com/intellij/openapi/module/ModuleType');
import Icon = require('nashorn/javax/swing/Icon');
import Sdk = require('nashorn/com/intellij/openapi/projectRoots/Sdk');
import FrameworkRole = require('nashorn/com/intellij/ide/util/frameworkSupport/FrameworkRole');
import SettingsStep = require('nashorn/com/intellij/ide/util/projectWizard/SettingsStep');
import ModuleWizardStep = require('nashorn/com/intellij/ide/util/projectWizard/ModuleWizardStep');
import WizardInputField = require('nashorn/com/intellij/ide/util/projectWizard/WizardInputField');
import ModifiableRootModel = require('nashorn/com/intellij/openapi/roots/ModifiableRootModel');
import ContentEntry = require('nashorn/com/intellij/openapi/roots/ContentEntry');
import ModifiableModuleModel = require('nashorn/com/intellij/openapi/module/ModifiableModuleModel');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import ProjectType = require('nashorn/com/intellij/openapi/project/ProjectType');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import ModuleBuilderListener = require('nashorn/com/intellij/ide/util/projectWizard/ModuleBuilderListener');
import AbstractModuleBuilder = require('nashorn/com/intellij/ide/util/projectWizard/AbstractModuleBuilder');
import Object = require('nashorn/java/lang/Object');

declare class ModuleBuilder {
	static EP_NAME : ExtensionPointName<ModuleBuilderFactory>;
	static allBuilders : List<ModuleBuilder>;
	name : string;
	builderId : string;
	moduleFilePath : string;
	contentEntryPath : string;
	moduleFileDirectory : string;
	moduleType : ModuleType;
	bigIcon : Icon;
	nodeIcon : Icon;
	description : string;
	presentableName : string;
	groupName : string;
	parentGroup : string;
	weight : number;
	template : boolean;
	templateBased : boolean;
	moduleJdk : Sdk;
	defaultAcceptableRole : FrameworkRole;
	constructor();
	static getAllBuilders() : List<ModuleBuilder>;
	static deleteModuleFile(arg1 : string) : void;
	isAvailable() : boolean;
	acceptParameter(arg1 : string) : string;
	getName() : string;
	modifyStep(arg1 : SettingsStep) : ModuleWizardStep;
	getAdditionalFields() : List<WizardInputField>;
	getModuleFilePath() : string;
	addModuleConfigurationUpdater(arg1 : ModuleBuilder.ModuleConfigurationUpdater) : void;
	getContentEntryPath() : string;
	doAddContentEntry(arg1 : ModifiableRootModel) : ContentEntry;
	getModuleFileDirectory() : string;
	createModule(arg1 : ModifiableModuleModel) : Module;
	setupModule(arg1 : Module) : void;
	onModuleInitialized(arg1 : Module) : void;
	setupRootModel(arg1 : ModifiableRootModel) : void;
	getModuleType() : ModuleType;
	getProjectType() : ProjectType;
	setProjectType(arg1 : Module) : void;
	createAndCommitIfNeeded(arg1 : Project, arg2 : ModifiableModuleModel, arg3 : boolean) : Module;
	addListener(arg1 : ModuleBuilderListener) : void;
	removeListener(arg1 : ModuleBuilderListener) : void;
	canCreateModule() : boolean;
	commitModule(arg1 : Project, arg2 : ModifiableModuleModel) : Module;
	getBigIcon() : Icon;
	getDescription() : string;
	getPresentableName() : string;
	getModuleTypeName() : string;
	getGroupName() : string;
	getParentGroup() : string;
	getWeight() : number;
	isTemplate() : boolean;
	isTemplateBased() : boolean;
	updateFrom(arg1 : ModuleBuilder) : void;
	getModuleJdk() : Sdk;
	setModuleJdk(arg1 : Sdk) : void;
	getDefaultAcceptableRole() : FrameworkRole;
}


declare interface ModuleBuilder extends AbstractModuleBuilder {}

declare module ModuleBuilder {
	class ModuleConfigurationUpdater extends Object {
		constructor();
		update(arg1 : Module, arg2 : ModifiableRootModel) : void;
	}
}

export = ModuleBuilder
