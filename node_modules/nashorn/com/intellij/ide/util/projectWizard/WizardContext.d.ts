import ModulesProvider = require('nashorn/com/intellij/openapi/roots/ui/configuration/ModulesProvider');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Icon = require('nashorn/javax/swing/Icon');
import Sdk = require('nashorn/com/intellij/openapi/projectRoots/Sdk');
import ProjectBuilder = require('nashorn/com/intellij/ide/util/projectWizard/ProjectBuilder');
import ProjectTemplate = require('nashorn/com/intellij/platform/ProjectTemplate');
import StorageScheme = require('nashorn/com/intellij/openapi/components/StorageScheme');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');
import Object = require('nashorn/java/lang/Object');

declare class WizardContext {
	newWizard : boolean;
	modulesProvider : ModulesProvider;
	project : Project;
	projectFileDirectory : string;
	projectFileDirectorySet : boolean;
	compilerOutputDirectory : string;
	projectName : string;
	creatingNewProject : boolean;
	stepIcon : Icon;
	projectJdk : Sdk;
	projectBuilder : ProjectBuilder;
	projectTemplate : ProjectTemplate;
	presentationName : string;
	projectStorageFormat : StorageScheme;
	constructor(arg1 : Project);
	setProjectStorageFormat(arg1 : StorageScheme) : void;
	isNewWizard() : boolean;
	setNewWizard(arg1 : boolean) : void;
	getModulesProvider() : ModulesProvider;
	setModulesProvider(arg1 : ModulesProvider) : void;
	getProject() : Project;
	getProjectFileDirectory() : string;
	isProjectFileDirectorySet() : boolean;
	setProjectFileDirectory(arg1 : string) : void;
	getCompilerOutputDirectory() : string;
	setCompilerOutputDirectory(arg1 : string) : void;
	getProjectName() : string;
	setProjectName(arg1 : string) : void;
	isCreatingNewProject() : boolean;
	getStepIcon() : Icon;
	requestWizardButtonsUpdate() : void;
	requestNextStep() : void;
	addContextListener(arg1 : WizardContext.Listener) : void;
	removeContextListener(arg1 : WizardContext.Listener) : void;
	setProjectJdk(arg1 : Sdk) : void;
	getProjectJdk() : Sdk;
	getProjectBuilder() : ProjectBuilder;
	setProjectBuilder(arg1 : ProjectBuilder) : void;
	getProjectTemplate() : ProjectTemplate;
	setProjectTemplate(arg1 : ProjectTemplate) : void;
	getPresentationName() : string;
	getProjectStorageFormat() : StorageScheme;
}


declare interface WizardContext extends UserDataHolderBase {}

declare module WizardContext {
	class Listener extends Object {
		buttonsUpdateRequested() : void;
		nextStepRequested() : void;
	}
}

export = WizardContext
