import Object = require('nashorn/java/lang/Object');
import ChooseByNameModel = require('nashorn/com/intellij/ide/util/gotoByName/ChooseByNameModel');
import ChooseByNameItemProvider = require('nashorn/com/intellij/ide/util/gotoByName/ChooseByNameItemProvider');
import JTextField = require('nashorn/javax/swing/JTextField');
import JComponent = require('nashorn/javax/swing/JComponent');
import ChooseByNamePopupComponent = require('nashorn/com/intellij/ide/util/gotoByName/ChooseByNamePopupComponent');
import ModalityState = require('nashorn/com/intellij/openapi/application/ModalityState');
import ShortcutSet = require('nashorn/com/intellij/openapi/actionSystem/ShortcutSet');
import Set = require('nashorn/java/util/Set');
import KeyStroke = require('nashorn/javax/swing/KeyStroke');
import JLayeredPane = require('nashorn/javax/swing/JLayeredPane');
import Runnable = require('nashorn/java/lang/Runnable');
import Collection = require('nashorn/java/util/Collection');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import List = require('nashorn/java/util/List');
import Color = require('nashorn/java/awt/Color');
import Component = require('nashorn/java/awt/Component');
import Matcher = require('nashorn/com/intellij/util/text/Matcher');
import Usage = require('nashorn/com/intellij/usages/Usage');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import UsageViewPresentation = require('nashorn/com/intellij/usages/UsageViewPresentation');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import JLabel = require('nashorn/javax/swing/JLabel');
import ProgressIndicator = require('nashorn/com/intellij/openapi/progress/ProgressIndicator');
import ReadTask = require('nashorn/com/intellij/openapi/progress/util/ReadTask');
import Point = require('nashorn/java/awt/Point');
import PopupOwner = require('nashorn/com/intellij/ui/popup/PopupOwner');
import TypeSafeDataProvider = require('nashorn/com/intellij/openapi/actionSystem/TypeSafeDataProvider');
import ModelDiff = require('nashorn/com/intellij/ide/util/gotoByName/ModelDiff');
import DefaultListModel = require('nashorn/javax/swing/DefaultListModel');
import JBPopup = require('nashorn/com/intellij/openapi/ui/popup/JBPopup');
import JPanel = require('nashorn/javax/swing/JPanel');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');

declare class ChooseByNameBase extends Object {
	static EXTRA_ELEM : string;
	static NON_PREFIX_SEPARATOR : string;
	searchInAnyPlace : boolean;
	closedByShiftEnter : boolean;
	openInCurrentWindowRequested : boolean;
	model : ChooseByNameModel;
	chosenElement : Object;
	provider : ChooseByNameItemProvider;
	maximumListSizeLimit : number;
	alwaysHasMore : boolean;
	textField : JTextField;
	checkDisposed() : boolean;
	setDisposed(arg1 : boolean) : void;
	a(arg1 : boolean, arg2 : string[]) : void;
	setShowListAfterCompletionKeyStroke(arg1 : boolean) : void;
	isSearchInAnyPlace() : boolean;
	setSearchInAnyPlace(arg1 : boolean) : void;
	isClosedByShiftEnter() : boolean;
	isOpenInCurrentWindowRequested() : boolean;
	setToolArea(arg1 : JComponent) : void;
	setFindUsagesTitle(arg1 : string) : void;
	invoke(arg1 : ChooseByNamePopupComponent.Callback, arg2 : ModalityState, arg3 : boolean) : void;
	getModel() : ChooseByNameModel;
	initUI(arg1 : ChooseByNamePopupComponent.Callback, arg2 : ModalityState, arg3 : boolean) : void;
	a(arg1 : JComponent, arg2 : string) : void;
	setCheckBoxShortcut(arg1 : ShortcutSet) : void;
	static a(arg1 : string) : Set<KeyStroke>;
	a() : void;
	rebuildList(arg1 : boolean) : void;
	b() : void;
	transformPattern(arg1 : string) : string;
	doClose(arg1 : boolean) : void;
	closeForbidden(arg1 : boolean) : boolean;
	cancelListUpdater() : void;
	a(arg1 : boolean) : boolean;
	setFixLostTyping(arg1 : boolean) : void;
	isToFixLostTyping() : boolean;
	b(arg1 : boolean) : string[];
	getNames(arg1 : boolean) : string[];
	c(arg1 : boolean) : string[];
	filter(arg1 : Set<Object>) : Set<Object>;
	isCheckboxVisible() : boolean;
	isShowListForEmptyPattern() : boolean;
	isCloseByFocusLost() : boolean;
	showTextFieldPanel() : void;
	c() : JLayeredPane;
	rebuildList(arg1 : number, arg2 : number, arg3 : ModalityState, arg4 : Runnable) : void;
	a(arg1 : Collection<any>, arg2 : number) : void;
	scheduleCalcElements(arg1 : string, arg2 : boolean, arg3 : ModalityState, arg4 : Consumer<Set<any>>) : void;
	d() : boolean;
	a(arg1 : number, arg2 : Collection<any>) : void;
	e() : number;
	statisticsContext() : string;
	d(arg1 : boolean) : void;
	hasPostponedAction() : boolean;
	showList() : void;
	hideList() : void;
	close(arg1 : boolean) : void;
	getChosenElement() : Object;
	getChosenElements() : List<Object>;
	chosenElementMightChange() : void;
	getProvider() : ChooseByNameItemProvider;
	handlePaste(arg1 : string) : void;
	static b(arg1 : string) : boolean;
	static renderNonPrefixSeparatorComponent(arg1 : Color) : Component;
	canShowListForEmptyPattern() : boolean;
	lastKeyStrokeIsCompletion() : boolean;
	static c(arg1 : string) : Matcher;
	getMaximumListSizeLimit() : number;
	setMaximumListSizeLimit(arg1 : number) : void;
	setListSizeIncreasing(arg1 : number) : void;
	isAlwaysHasMore() : boolean;
	setAlwaysHasMore(arg1 : boolean) : void;
	getTextField() : JTextField;
}


declare module ChooseByNameBase {
	class ShowFindUsagesAction {
		elements : Object[][];
		constructor();
		a(arg1 : Collection<Object>, arg2 : List<Usage>, arg3 : List<PsiElement>, arg4 : boolean) : void;
		a(arg1 : List<PsiElement>, arg2 : List<Usage>, arg3 : UsageViewPresentation) : void;
		getElements() : Object[][];
	}


	interface ShowFindUsagesAction extends AnAction {}	class HintLabel {
	}


	interface HintLabel extends JLabel {}	class CalcElementsThread {
		scheduleThread() : void;
		a(arg1 : string, arg2 : Set<Object>, arg3 : ProgressIndicator, arg4 : boolean) : void;
		a(arg1 : string, arg2 : number) : void;
		isOverflow(arg1 : Set<Object>) : boolean;
		a() : void;
	}


	interface CalcElementsThread extends ReadTask {}	class MyTextField {
		bestPopupPosition : Point;
		completionKeyStroke : boolean;
		a(arg1 : string) : KeyStroke;
		b(arg1 : string) : void;
		c(arg1 : string) : boolean;
		isCompletionKeyStroke() : boolean;
	}


	interface MyTextField extends JTextField, PopupOwner, TypeSafeDataProvider {}	class ListUpdater extends Object {
		cancelAll() : void;
		appendToModel(arg1 : List<ModelDiff.Cmd>, arg2 : number) : void;
		a() : void;
	}
	class MyListModel<T> {
	}


	interface MyListModel<T> extends DefaultListModel, ModelDiff.Model<T> {}	class JPanelProvider {
		hint : JBPopup;
		registerHint(arg1 : JBPopup) : void;
		focusRequested() : boolean;
		unregisterHint() : void;
		hideHint() : void;
		getHint() : JBPopup;
		updateHint(arg1 : PsiElement) : void;
		repositionHint() : void;
	}


	interface JPanelProvider extends JPanel, DataProvider {}}

export = ChooseByNameBase
