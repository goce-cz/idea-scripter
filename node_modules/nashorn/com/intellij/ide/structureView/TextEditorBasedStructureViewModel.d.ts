import Object = require('nashorn/java/lang/Object');
import Grouper = require('nashorn/com/intellij/ide/util/treeView/smartTree/Grouper');
import Sorter = require('nashorn/com/intellij/ide/util/treeView/smartTree/Sorter');
import Filter = require('nashorn/com/intellij/ide/util/treeView/smartTree/Filter');
import Collection = require('nashorn/java/util/Collection');
import NodeProvider = require('nashorn/com/intellij/ide/util/treeView/smartTree/NodeProvider');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Class = require('nashorn/java/lang/Class');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import StructureViewModel = require('nashorn/com/intellij/ide/structureView/StructureViewModel');
import ProvidingTreeModel = require('nashorn/com/intellij/ide/util/treeView/smartTree/ProvidingTreeModel');

declare class TextEditorBasedStructureViewModel {
	currentEditorElement : Object;
	groupers : Grouper[];
	sorters : Sorter[];
	filters : Filter[];
	nodeProviders : Collection<NodeProvider>;
	fireModelUpdate() : void;
	findAcceptableElement(arg1 : PsiElement) : Object;
	getPsiFile() : PsiFile;
	isSuitable(arg1 : PsiElement) : boolean;
	getSuitableClasses() : Class[];
	getEditor() : Editor;
}


declare interface TextEditorBasedStructureViewModel extends StructureViewModel, ProvidingTreeModel {}
export = TextEditorBasedStructureViewModel
