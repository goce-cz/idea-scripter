import Object = require('nashorn/java/lang/Object');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import AsyncResult = require('nashorn/com/intellij/openapi/util/AsyncResult');
import Component = require('nashorn/java/awt/Component');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import JComponent = require('nashorn/javax/swing/JComponent');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');

declare class DataManager extends Object {
	static CLIENT_PROPERTY_DATA_PROVIDER : string;
	static instance : DataManager;
	dataContext : DataContext;
	dataContextFromFocus : AsyncResult<DataContext>;
	constructor();
	static getInstance() : DataManager;
	getDataContext() : DataContext;
	getDataContextFromFocus() : AsyncResult<DataContext>;
	getDataContext(arg1 : Component) : DataContext;
	getDataContext(arg1 : Component, arg2 : number, arg3 : number) : DataContext;
	saveInDataContext<T>(arg1 : DataContext, arg2 : Key<T>, arg3 : T) : void;
	loadFromDataContext<T>(arg1 : DataContext, arg2 : Key<T>) : T;
	static registerDataProvider(arg1 : JComponent, arg2 : DataProvider) : void;
	static getDataProvider(arg1 : JComponent) : DataProvider;
	static removeDataProvider(arg1 : JComponent) : void;
}

export = DataManager
