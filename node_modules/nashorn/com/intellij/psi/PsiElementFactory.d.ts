import PsiCodeBlock = require('nashorn/com/intellij/psi/PsiCodeBlock');
import PsiJavaCodeReferenceElement = require('nashorn/com/intellij/psi/PsiJavaCodeReferenceElement');
import PsiClassType = require('nashorn/com/intellij/psi/PsiClassType');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import PsiTypeElement = require('nashorn/com/intellij/psi/PsiTypeElement');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import PsiPackage = require('nashorn/com/intellij/psi/PsiPackage');
import PsiReferenceExpression = require('nashorn/com/intellij/psi/PsiReferenceExpression');
import PsiIdentifier = require('nashorn/com/intellij/psi/PsiIdentifier');
import PsiKeyword = require('nashorn/com/intellij/psi/PsiKeyword');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiImportStatement = require('nashorn/com/intellij/psi/PsiImportStatement');
import PsiExpression = require('nashorn/com/intellij/psi/PsiExpression');
import PsiDeclarationStatement = require('nashorn/com/intellij/psi/PsiDeclarationStatement');
import PsiDocTag = require('nashorn/com/intellij/psi/javadoc/PsiDocTag');
import LanguageLevel = require('nashorn/com/intellij/pom/java/LanguageLevel');
import PsiPackageStatement = require('nashorn/com/intellij/psi/PsiPackageStatement');
import PsiImportStaticStatement = require('nashorn/com/intellij/psi/PsiImportStaticStatement');
import PsiReferenceList = require('nashorn/com/intellij/psi/PsiReferenceList');
import PsiSubstitutor = require('nashorn/com/intellij/psi/PsiSubstitutor');
import PsiTypeParameter = require('nashorn/com/intellij/psi/PsiTypeParameter');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import PsiCatchSection = require('nashorn/com/intellij/psi/PsiCatchSection');
import PsiJavaParserFacade = require('nashorn/com/intellij/psi/PsiJavaParserFacade');
import JVMElementFactory = require('nashorn/com/intellij/psi/JVMElementFactory');
import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');

declare class PsiElementFactory {
	createCodeBlock() : PsiCodeBlock;
	createType(arg1 : PsiJavaCodeReferenceElement) : PsiClassType;
	createTypeElement(arg1 : PsiType) : PsiTypeElement;
	createClassReferenceElement(arg1 : PsiClass) : PsiJavaCodeReferenceElement;
	createReferenceElementByFQClassName(arg1 : string, arg2 : GlobalSearchScope) : PsiJavaCodeReferenceElement;
	createFQClassNameReferenceElement(arg1 : string, arg2 : GlobalSearchScope) : PsiJavaCodeReferenceElement;
	createPackageReferenceElement(arg1 : PsiPackage) : PsiJavaCodeReferenceElement;
	createPackageReferenceElement(arg1 : string) : PsiJavaCodeReferenceElement;
	createReferenceExpression(arg1 : PsiClass) : PsiReferenceExpression;
	createReferenceExpression(arg1 : PsiPackage) : PsiReferenceExpression;
	createIdentifier(arg1 : string) : PsiIdentifier;
	createKeyword(arg1 : string) : PsiKeyword;
	createKeyword(arg1 : string, arg2 : PsiElement) : PsiKeyword;
	createImportStatement(arg1 : PsiClass) : PsiImportStatement;
	createImportStatementOnDemand(arg1 : string) : PsiImportStatement;
	createVariableDeclarationStatement(arg1 : string, arg2 : PsiType, arg3 : PsiExpression) : PsiDeclarationStatement;
	createParamTag(arg1 : string, arg2 : string) : PsiDocTag;
	getArrayClass(arg1 : LanguageLevel) : PsiClass;
	getArrayClassType(arg1 : PsiType, arg2 : LanguageLevel) : PsiClassType;
	createPackageStatement(arg1 : string) : PsiPackageStatement;
	createImportStaticStatement(arg1 : PsiClass, arg2 : string) : PsiImportStaticStatement;
	createReferenceList(arg1 : PsiJavaCodeReferenceElement[]) : PsiReferenceList;
	createRawSubstitutor(arg1 : PsiSubstitutor, arg2 : PsiTypeParameter[]) : PsiSubstitutor;
	createDummyHolder(arg1 : string, arg2 : IElementType, arg3 : PsiElement) : PsiElement;
	createCatchSection(arg1 : PsiType, arg2 : string, arg3 : PsiElement) : PsiCatchSection;
}


declare interface PsiElementFactory extends PsiJavaParserFacade, JVMElementFactory {}

declare module PsiElementFactory {
	class SERVICE extends Object {
		static getInstance(arg1 : Project) : PsiElementFactory;
	}
}

export = PsiElementFactory
