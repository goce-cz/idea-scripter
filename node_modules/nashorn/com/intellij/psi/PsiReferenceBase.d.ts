import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import ElementManipulator = require('nashorn/com/intellij/psi/ElementManipulator');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Object = require('nashorn/java/lang/Object');
import PsiPolyVariantReference = require('nashorn/com/intellij/psi/PsiPolyVariantReference');

declare class PsiReferenceBase<T extends PsiElement> {
	value : string;
	element : T;
	rangeInElement : TextRange;
	canonicalText : string;
	soft : boolean;
	constructor(arg1 : T, arg2 : TextRange, arg3 : boolean);
	constructor(arg1 : T, arg2 : TextRange);
	constructor(arg1 : T, arg2 : boolean);
	constructor(arg1 : T);
	setRangeInElement(arg1 : TextRange) : void;
	getValue() : string;
	calculateDefaultRangeInElement() : TextRange;
	static createSelfReference<T extends PsiElement>(arg1 : T, arg2 : PsiElement) : PsiReferenceBase<T>;
	static createSelfReference<T extends PsiElement>(arg1 : T, arg2 : TextRange, arg3 : PsiElement) : PsiReferenceBase<T>;
	getManipulator() : ElementManipulator<T>;
}


declare interface PsiReferenceBase<T extends PsiElement> extends PsiReference {}

declare module PsiReferenceBase {
	class Immediate<T extends PsiElement> {
		variants : Object[];
		constructor(arg1 : T, arg2 : TextRange, arg3 : boolean, arg4 : PsiElement);
		constructor(arg1 : T, arg2 : TextRange, arg3 : PsiElement);
		constructor(arg1 : T, arg2 : boolean, arg3 : PsiElement);
		constructor(arg1 : T, arg2 : PsiElement);
	}


	interface Immediate<T extends PsiElement> extends PsiReferenceBase<T> {}	class Poly<T extends PsiElement> {
		constructor(arg1 : T);
		constructor(arg1 : T, arg2 : boolean);
		constructor(arg1 : T, arg2 : TextRange, arg3 : boolean);
	}


	interface Poly<T extends PsiElement> extends PsiReferenceBase<T>, PsiPolyVariantReference {}}

export = PsiReferenceBase
