import XmlElementDescriptor = require('nashorn/com/intellij/xml/XmlElementDescriptor');
import XmlAttribute = require('nashorn/com/intellij/psi/xml/XmlAttribute');
import Map = require('nashorn/java/util/Map');
import XmlTagValue = require('nashorn/com/intellij/psi/xml/XmlTagValue');
import XmlNSDescriptor = require('nashorn/com/intellij/xml/XmlNSDescriptor');
import XmlElement = require('nashorn/com/intellij/psi/xml/XmlElement');
import PsiNamedElement = require('nashorn/com/intellij/psi/PsiNamedElement');
import PsiMetaOwner = require('nashorn/com/intellij/psi/meta/PsiMetaOwner');
import XmlTagChild = require('nashorn/com/intellij/psi/xml/XmlTagChild');

declare class XmlTag {
	static EMPTY : XmlTag[];
	name : string;
	namespace : string;
	localName : string;
	descriptor : XmlElementDescriptor;
	attributes : XmlAttribute[];
	subTags : XmlTag[];
	namespacePrefix : string;
	localNamespaceDeclarations : Map<string, string>;
	value : XmlTagValue;
	empty : boolean;
	getNamespace() : string;
	getLocalName() : string;
	getDescriptor() : XmlElementDescriptor;
	getAttributes() : XmlAttribute[];
	getAttribute(arg1 : string, arg2 : string) : XmlAttribute;
	getAttribute(arg1 : string) : XmlAttribute;
	getAttributeValue(arg1 : string, arg2 : string) : string;
	getAttributeValue(arg1 : string) : string;
	setAttribute(arg1 : string, arg2 : string, arg3 : string) : XmlAttribute;
	setAttribute(arg1 : string, arg2 : string) : XmlAttribute;
	createChildTag(arg1 : string, arg2 : string, arg3 : string, arg4 : boolean) : XmlTag;
	addSubTag(arg1 : XmlTag, arg2 : boolean) : XmlTag;
	getSubTags() : XmlTag[];
	findSubTags(arg1 : string) : XmlTag[];
	findSubTags(arg1 : string, arg2 : string) : XmlTag[];
	findFirstSubTag(arg1 : string) : XmlTag;
	getNamespacePrefix() : string;
	getNamespaceByPrefix(arg1 : string) : string;
	getPrefixByNamespace(arg1 : string) : string;
	knownNamespaces() : string[];
	hasNamespaceDeclarations() : boolean;
	getLocalNamespaceDeclarations() : Map<string, string>;
	getValue() : XmlTagValue;
	getNSDescriptor(arg1 : string, arg2 : boolean) : XmlNSDescriptor;
	isEmpty() : boolean;
	collapseIfEmpty() : void;
	getSubTagText(arg1 : string) : string;
}


declare interface XmlTag extends XmlElement, PsiNamedElement, PsiMetaOwner, XmlTagChild {}
export = XmlTag
