import PsiType = require('nashorn/com/intellij/psi/PsiType');
import PsiImportHolder = require('nashorn/com/intellij/psi/PsiImportHolder');
import PsiCodeFragment = require('nashorn/com/intellij/psi/PsiCodeFragment');
import Object = require('nashorn/java/lang/Object');
import PsiClassType = require('nashorn/com/intellij/psi/PsiClassType');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Enum = require('nashorn/java/lang/Enum');

declare class JavaCodeFragment {
	thisType : PsiType;
	superType : PsiType;
	visibilityChecker : JavaCodeFragment.VisibilityChecker;
	exceptionHandler : JavaCodeFragment.ExceptionHandler;
	getThisType() : PsiType;
	setThisType(arg1 : PsiType) : void;
	getSuperType() : PsiType;
	setSuperType(arg1 : PsiType) : void;
	importsToString() : string;
	addImportsFromString(arg1 : string) : void;
	setVisibilityChecker(arg1 : JavaCodeFragment.VisibilityChecker) : void;
	getVisibilityChecker() : JavaCodeFragment.VisibilityChecker;
	setExceptionHandler(arg1 : JavaCodeFragment.ExceptionHandler) : void;
	getExceptionHandler() : JavaCodeFragment.ExceptionHandler;
}


declare interface JavaCodeFragment extends PsiImportHolder, PsiCodeFragment {}

declare module JavaCodeFragment {
	class ExceptionHandler extends Object {
		isHandledException(arg1 : PsiClassType) : boolean;
	}
	class VisibilityChecker extends Object {
		static EVERYTHING_VISIBLE : JavaCodeFragment.VisibilityChecker;
		static PROJECT_SCOPE_VISIBLE : JavaCodeFragment.VisibilityChecker;
		isDeclarationVisible(arg1 : PsiElement, arg2 : PsiElement) : JavaCodeFragment.VisibilityChecker.Visibility;
	}


	module VisibilityChecker {
		class Visibility {
			static VISIBLE : JavaCodeFragment.VisibilityChecker.Visibility;
			static NOT_VISIBLE : JavaCodeFragment.VisibilityChecker.Visibility;
			static DEFAULT_VISIBILITY : JavaCodeFragment.VisibilityChecker.Visibility;
		}


		interface Visibility extends Enum<JavaCodeFragment.VisibilityChecker.Visibility> {}	}
}

export = JavaCodeFragment
