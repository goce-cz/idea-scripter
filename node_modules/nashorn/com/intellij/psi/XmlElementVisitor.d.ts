import XmlElement = require('nashorn/com/intellij/psi/xml/XmlElement');
import XmlFile = require('nashorn/com/intellij/psi/xml/XmlFile');
import XmlAttribute = require('nashorn/com/intellij/psi/xml/XmlAttribute');
import XmlComment = require('nashorn/com/intellij/psi/xml/XmlComment');
import XmlDecl = require('nashorn/com/intellij/psi/xml/XmlDecl');
import XmlDocument = require('nashorn/com/intellij/psi/xml/XmlDocument');
import XmlProlog = require('nashorn/com/intellij/psi/xml/XmlProlog');
import XmlText = require('nashorn/com/intellij/psi/xml/XmlText');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import XmlToken = require('nashorn/com/intellij/psi/xml/XmlToken');
import XmlAttributeValue = require('nashorn/com/intellij/psi/xml/XmlAttributeValue');
import XmlDoctype = require('nashorn/com/intellij/psi/xml/XmlDoctype');
import XmlProcessingInstruction = require('nashorn/com/intellij/psi/xml/XmlProcessingInstruction');
import PsiElementVisitor = require('nashorn/com/intellij/psi/PsiElementVisitor');

declare class XmlElementVisitor {
	constructor();
	visitXmlElement(arg1 : XmlElement) : void;
	visitXmlFile(arg1 : XmlFile) : void;
	visitXmlAttribute(arg1 : XmlAttribute) : void;
	visitXmlComment(arg1 : XmlComment) : void;
	visitXmlDecl(arg1 : XmlDecl) : void;
	visitXmlDocument(arg1 : XmlDocument) : void;
	visitXmlProlog(arg1 : XmlProlog) : void;
	visitXmlText(arg1 : XmlText) : void;
	visitXmlTag(arg1 : XmlTag) : void;
	visitXmlToken(arg1 : XmlToken) : void;
	visitXmlAttributeValue(arg1 : XmlAttributeValue) : void;
	visitXmlDoctype(arg1 : XmlDoctype) : void;
	visitXmlProcessingInstruction(arg1 : XmlProcessingInstruction) : void;
}


declare interface XmlElementVisitor extends PsiElementVisitor {}
export = XmlElementVisitor
