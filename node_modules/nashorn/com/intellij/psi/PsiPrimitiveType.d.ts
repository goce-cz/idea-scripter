import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import Collection = require('nashorn/java/util/Collection');
import PsiAnnotation = require('nashorn/com/intellij/psi/PsiAnnotation');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiClassType = require('nashorn/com/intellij/psi/PsiClassType');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');

declare class PsiPrimitiveType {
	presentableText : string;
	internalCanonicalText : string;
	valid : boolean;
	resolveScope : GlobalSearchScope;
	superTypes : PsiType[];
	boxedTypeName : string;
	static allBoxedTypeNames : Collection<string>;
	constructor(arg1 : string, arg2 : PsiAnnotation[]);
	getText(arg1 : boolean, arg2 : boolean) : string;
	static getUnboxedType(arg1 : PsiType) : PsiPrimitiveType;
	getBoxedTypeName() : string;
	getBoxedType(arg1 : PsiElement) : PsiClassType;
	getBoxedType(arg1 : PsiManager, arg2 : GlobalSearchScope) : PsiClassType;
	static getAllBoxedTypeNames() : Collection<string>;
}


declare interface PsiPrimitiveType extends PsiType.Stub {}
export = PsiPrimitiveType
