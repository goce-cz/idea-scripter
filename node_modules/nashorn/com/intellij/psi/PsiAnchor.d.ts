import Object = require('nashorn/java/lang/Object');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import StubBasedPsiElement = require('nashorn/com/intellij/psi/StubBasedPsiElement');
import PsiFileWithStubSupport = require('nashorn/com/intellij/psi/impl/source/PsiFileWithStubSupport');
import IStubElementType = require('nashorn/com/intellij/psi/stubs/IStubElementType');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Language = require('nashorn/com/intellij/lang/Language');

declare class PsiAnchor extends Object {
	file : PsiFile;
	startOffset : number;
	endOffset : number;
	constructor();
	retrieve() : PsiElement;
	getFile() : PsiFile;
	getStartOffset() : number;
	getEndOffset() : number;
	static create(arg1 : PsiElement) : PsiAnchor;
	static createStubReference(arg1 : PsiElement, arg2 : PsiFile) : PsiAnchor.StubIndexReference;
	static a(arg1 : PsiFile) : boolean;
	static calcStubIndex(arg1 : StubBasedPsiElement) : number;
	static restoreFromStubIndex(arg1 : PsiFileWithStubSupport, arg2 : number, arg3 : IStubElementType, arg4 : boolean) : PsiElement;
}


declare module PsiAnchor {
	class StubIndexReference {
		file : PsiFile;
		startOffset : number;
		endOffset : number;
		virtualFile : VirtualFile;
		project : Project;
		constructor(arg1 : PsiFile, arg2 : number, arg3 : Language, arg4 : IStubElementType);
		diagnoseNull() : string;
		getVirtualFile() : VirtualFile;
		getProject() : Project;
	}


	interface StubIndexReference extends PsiAnchor {}	class PsiDirectoryReference {
		file : PsiFile;
		startOffset : number;
		endOffset : number;
	}


	interface PsiDirectoryReference extends PsiAnchor {}	class PsiFileReference {
		file : PsiFile;
		startOffset : number;
		endOffset : number;
		static b(arg1 : PsiFile) : Language;
	}


	interface PsiFileReference extends PsiAnchor {}	class HardReference {
		file : PsiFile;
		startOffset : number;
		endOffset : number;
		constructor(arg1 : PsiElement);
	}


	interface HardReference extends PsiAnchor {}	class TreeRangeReference {
		file : PsiFile;
		startOffset : number;
		endOffset : number;
	}


	interface TreeRangeReference extends PsiAnchor {}}

export = PsiAnchor
