import ArrayFactory = require('nashorn/com/intellij/util/ArrayFactory');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import LanguageLevel = require('nashorn/com/intellij/pom/java/LanguageLevel');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import JavaResolveResult = require('nashorn/com/intellij/psi/JavaResolveResult');

declare class PsiClassType {
	static EMPTY_ARRAY : PsiClassType[];
	static ARRAY_FACTORY : ArrayFactory<PsiClassType>;
	className : string;
	parameters : PsiType[];
	parameterCount : number;
	superTypes : PsiType[];
	raw : boolean;
	resolveScope : GlobalSearchScope;
	languageLevel : LanguageLevel;
	resolve() : PsiClass;
	getClassName() : string;
	getParameters() : PsiType[];
	getParameterCount() : number;
	hasParameters() : boolean;
	hasNonTrivialParameters() : boolean;
	static isRaw(arg1 : PsiClassType.ClassResolveResult) : boolean;
	isRaw() : boolean;
	resolveGenerics() : PsiClassType.ClassResolveResult;
	rawType() : PsiClassType;
	getLanguageLevel() : LanguageLevel;
	setLanguageLevel(arg1 : LanguageLevel) : PsiClassType;
}


declare interface PsiClassType extends PsiType {}

declare module PsiClassType {
	class Stub {
		canonicalText : string;
	}


	interface Stub extends PsiClassType {}	class ClassResolveResult {
		static EMPTY : PsiClassType.ClassResolveResult;
		element : PsiClass;
	}


	interface ClassResolveResult extends JavaResolveResult {}}

export = PsiClassType
