import ArrayFactory = require('nashorn/com/intellij/util/ArrayFactory');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Language = require('nashorn/com/intellij/lang/Language');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import CharSequence = require('nashorn/java/lang/CharSequence');
import PsiElementVisitor = require('nashorn/com/intellij/psi/PsiElementVisitor');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import PsiScopeProcessor = require('nashorn/com/intellij/psi/scope/PsiScopeProcessor');
import ResolveState = require('nashorn/com/intellij/psi/ResolveState');
import UserDataHolder = require('nashorn/com/intellij/openapi/util/UserDataHolder');
import Iconable = require('nashorn/com/intellij/openapi/util/Iconable');

declare class PsiElement {
	static EMPTY_ARRAY : PsiElement[];
	static ARRAY_FACTORY : ArrayFactory<PsiElement>;
	project : Project;
	language : Language;
	manager : PsiManager;
	children : PsiElement[];
	parent : PsiElement;
	firstChild : PsiElement;
	lastChild : PsiElement;
	nextSibling : PsiElement;
	prevSibling : PsiElement;
	containingFile : PsiFile;
	textRange : TextRange;
	startOffsetInParent : number;
	textLength : number;
	textOffset : number;
	text : string;
	navigationElement : PsiElement;
	originalElement : PsiElement;
	valid : boolean;
	writable : boolean;
	reference : PsiReference;
	references : PsiReference[];
	context : PsiElement;
	physical : boolean;
	resolveScope : GlobalSearchScope;
	useScope : SearchScope;
	node : ASTNode;
	getProject() : Project;
	getLanguage() : Language;
	getManager() : PsiManager;
	getChildren() : PsiElement[];
	getParent() : PsiElement;
	getFirstChild() : PsiElement;
	getLastChild() : PsiElement;
	getNextSibling() : PsiElement;
	getPrevSibling() : PsiElement;
	getContainingFile() : PsiFile;
	getTextRange() : TextRange;
	getStartOffsetInParent() : number;
	getTextLength() : number;
	findElementAt(arg1 : number) : PsiElement;
	findReferenceAt(arg1 : number) : PsiReference;
	getTextOffset() : number;
	getText() : string;
	textToCharArray() : string[];
	getNavigationElement() : PsiElement;
	getOriginalElement() : PsiElement;
	textMatches(arg1 : CharSequence) : boolean;
	textMatches(arg1 : PsiElement) : boolean;
	textContains(arg1 : string) : boolean;
	accept(arg1 : PsiElementVisitor) : void;
	acceptChildren(arg1 : PsiElementVisitor) : void;
	copy() : PsiElement;
	add(arg1 : PsiElement) : PsiElement;
	addBefore(arg1 : PsiElement, arg2 : PsiElement) : PsiElement;
	addAfter(arg1 : PsiElement, arg2 : PsiElement) : PsiElement;
	checkAdd(arg1 : PsiElement) : void;
	addRange(arg1 : PsiElement, arg2 : PsiElement) : PsiElement;
	addRangeBefore(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement) : PsiElement;
	addRangeAfter(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement) : PsiElement;
	delete() : void;
	checkDelete() : void;
	deleteChildRange(arg1 : PsiElement, arg2 : PsiElement) : void;
	replace(arg1 : PsiElement) : PsiElement;
	isValid() : boolean;
	isWritable() : boolean;
	getReference() : PsiReference;
	getReferences() : PsiReference[];
	getCopyableUserData<T>(arg1 : Key<T>) : T;
	putCopyableUserData<T>(arg1 : Key<T>, arg2 : T) : void;
	processDeclarations(arg1 : PsiScopeProcessor, arg2 : ResolveState, arg3 : PsiElement, arg4 : PsiElement) : boolean;
	getContext() : PsiElement;
	isPhysical() : boolean;
	getResolveScope() : GlobalSearchScope;
	getUseScope() : SearchScope;
	getNode() : ASTNode;
	isEquivalentTo(arg1 : PsiElement) : boolean;
}


declare interface PsiElement extends UserDataHolder, Iconable {}
export = PsiElement
