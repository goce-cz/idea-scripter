import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Object = require('nashorn/java/lang/Object');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import PsiRefElementCreator = require('nashorn/com/intellij/psi/PsiRefElementCreator');

declare class PsiElementRef<T extends PsiElement> extends Object {
	imaginary : boolean;
	psiElement : T;
	root : PsiElement;
	valid : boolean;
	psiManager : PsiManager;
	constructor(arg1 : PsiElementRef.PsiRefColleague<T>);
	isImaginary() : boolean;
	getPsiElement() : T;
	ensurePsiElementExists() : T;
	getRoot() : PsiElement;
	isValid() : boolean;
	static real<T extends PsiElement>(arg1 : T) : PsiElementRef<T>;
	static imaginary<Child extends PsiElement, Parent extends PsiElement>(arg1 : PsiElementRef<Parent>, arg2 : PsiRefElementCreator<Parent, Child>) : PsiElementRef<Child>;
	getPsiManager() : PsiManager;
}


declare module PsiElementRef {
	class PsiRefColleague<T extends PsiElement> extends Object {
		valid : boolean;
		psiElement : T;
		root : PsiElement;
		isValid() : boolean;
		getPsiElement() : T;
		makeReal() : PsiElementRef.PsiRefColleague.Real<T>;
		getRoot() : PsiElement;
	}


	module PsiRefColleague {
		class Imaginary<Child extends PsiElement, Parent extends PsiElement> {
			valid : boolean;
			psiElement : Child;
			root : PsiElement;
			constructor(arg1 : PsiElementRef<Parent>, arg2 : PsiRefElementCreator<Parent, Child>);
		}


		interface Imaginary<Child extends PsiElement, Parent extends PsiElement> extends PsiElementRef.PsiRefColleague<Child> {}		class Real<T extends PsiElement> {
			psiElement : T;
			valid : boolean;
			root : PsiElement;
			constructor(arg1 : T);
		}


		interface Real<T extends PsiElement> extends PsiElementRef.PsiRefColleague<T> {}	}
}

export = PsiElementRef
