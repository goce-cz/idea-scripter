import Object = require('nashorn/java/lang/Object');
import Logger = require('nashorn/com/intellij/openapi/diagnostic/Logger');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import PsiMethodReferenceExpression = require('nashorn/com/intellij/psi/PsiMethodReferenceExpression');
import MethodSignature = require('nashorn/com/intellij/psi/util/MethodSignature');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import PsiSubstitutor = require('nashorn/com/intellij/psi/PsiSubstitutor');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiTypeElement = require('nashorn/com/intellij/psi/PsiTypeElement');
import JavaResolveResult = require('nashorn/com/intellij/psi/JavaResolveResult');

declare class PsiMethodReferenceUtil extends Object {
	static LOG : Logger;
	constructor();
	static isSecondSearchPossible(arg1 : PsiType[], arg2 : PsiMethodReferenceUtil.QualifierResolveResult, arg3 : PsiMethodReferenceExpression) : boolean;
	static isResolvedBySecondSearch(arg1 : PsiMethodReferenceExpression, arg2 : MethodSignature, arg3 : boolean, arg4 : boolean, arg5 : number) : boolean;
	static isCorrectAssignment(arg1 : PsiType[], arg2 : PsiType[], arg3 : boolean, arg4 : number) : boolean;
	static getQualifierType(arg1 : PsiMethodReferenceExpression) : PsiType;
	static isValidQualifier(arg1 : PsiMethodReferenceExpression) : boolean;
	static getQualifierResolveResult(arg1 : PsiMethodReferenceExpression) : PsiMethodReferenceUtil.QualifierResolveResult;
	static isStaticallyReferenced(arg1 : PsiMethodReferenceExpression) : boolean;
	static isReceiverType(arg1 : PsiType, arg2 : PsiClass, arg3 : PsiSubstitutor) : boolean;
	static getFirstParameterType(arg1 : PsiType, arg2 : PsiElement) : PsiType;
	static replaceArrayType(arg1 : PsiType, arg2 : PsiElement) : PsiType;
	static checkMethodReferenceContext(arg1 : PsiMethodReferenceExpression) : string;
	static checkMethodReferenceContext(arg1 : PsiMethodReferenceExpression, arg2 : PsiElement, arg3 : PsiType) : string;
	static checkTypeArguments(arg1 : PsiTypeElement, arg2 : PsiType) : string;
	static checkReturnType(arg1 : PsiMethodReferenceExpression, arg2 : JavaResolveResult, arg3 : PsiType) : string;
}


declare module PsiMethodReferenceUtil {
	class QualifierResolveResult extends Object {
		containingClass : PsiClass;
		substitutor : PsiSubstitutor;
		referenceTypeQualified : boolean;
		constructor(arg1 : PsiClass, arg2 : PsiSubstitutor, arg3 : boolean);
		getContainingClass() : PsiClass;
		getSubstitutor() : PsiSubstitutor;
		isReferenceTypeQualified() : boolean;
	}
}

export = PsiMethodReferenceUtil
