import ArrayFactory = require('nashorn/com/intellij/util/ArrayFactory');
import PsiReferenceList = require('nashorn/com/intellij/psi/PsiReferenceList');
import PsiClassType = require('nashorn/com/intellij/psi/PsiClassType');
import PsiField = require('nashorn/com/intellij/psi/PsiField');
import PsiMethod = require('nashorn/com/intellij/psi/PsiMethod');
import PsiClassInitializer = require('nashorn/com/intellij/psi/PsiClassInitializer');
import List = require('nashorn/java/util/List');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import PsiSubstitutor = require('nashorn/com/intellij/psi/PsiSubstitutor');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiIdentifier = require('nashorn/com/intellij/psi/PsiIdentifier');
import Collection = require('nashorn/java/util/Collection');
import HierarchicalMethodSignature = require('nashorn/com/intellij/psi/HierarchicalMethodSignature');
import PsiNameIdentifierOwner = require('nashorn/com/intellij/psi/PsiNameIdentifierOwner');
import PsiModifierListOwner = require('nashorn/com/intellij/psi/PsiModifierListOwner');
import PsiDocCommentOwner = require('nashorn/com/intellij/psi/PsiDocCommentOwner');
import PsiTypeParameterListOwner = require('nashorn/com/intellij/psi/PsiTypeParameterListOwner');
import PsiTarget = require('nashorn/com/intellij/psi/PsiTarget');
import PomRenameableTarget = require('nashorn/com/intellij/pom/PomRenameableTarget');

declare class PsiClass {
	static EMPTY_ARRAY : PsiClass[];
	static ARRAY_FACTORY : ArrayFactory<PsiClass>;
	qualifiedName : string;
	interface : boolean;
	annotationType : boolean;
	extendsList : PsiReferenceList;
	implementsList : PsiReferenceList;
	extendsListTypes : PsiClassType[];
	implementsListTypes : PsiClassType[];
	superClass : PsiClass;
	interfaces : PsiClass[];
	supers : PsiClass[];
	superTypes : PsiClassType[];
	fields : PsiField[];
	methods : PsiMethod[];
	constructors : PsiMethod[];
	innerClasses : PsiClass[];
	initializers : PsiClassInitializer[];
	allFields : PsiField[];
	allMethods : PsiMethod[];
	allInnerClasses : PsiClass[];
	allMethodsAndTheirSubstitutors : List<Pair<PsiMethod, PsiSubstitutor>>;
	lBrace : PsiElement;
	rBrace : PsiElement;
	nameIdentifier : PsiIdentifier;
	scope : PsiElement;
	containingClass : PsiClass;
	visibleSignatures : Collection<HierarchicalMethodSignature>;
	getQualifiedName() : string;
	isInterface() : boolean;
	isAnnotationType() : boolean;
	isEnum() : boolean;
	getExtendsList() : PsiReferenceList;
	getImplementsList() : PsiReferenceList;
	getExtendsListTypes() : PsiClassType[];
	getImplementsListTypes() : PsiClassType[];
	getSuperClass() : PsiClass;
	getInterfaces() : PsiClass[];
	getSupers() : PsiClass[];
	getSuperTypes() : PsiClassType[];
	getFields() : PsiField[];
	getMethods() : PsiMethod[];
	getConstructors() : PsiMethod[];
	getInnerClasses() : PsiClass[];
	getInitializers() : PsiClassInitializer[];
	getAllFields() : PsiField[];
	getAllMethods() : PsiMethod[];
	getAllInnerClasses() : PsiClass[];
	findFieldByName(arg1 : string, arg2 : boolean) : PsiField;
	findMethodBySignature(arg1 : PsiMethod, arg2 : boolean) : PsiMethod;
	findMethodsBySignature(arg1 : PsiMethod, arg2 : boolean) : PsiMethod[];
	findMethodsByName(arg1 : string, arg2 : boolean) : PsiMethod[];
	findMethodsAndTheirSubstitutorsByName(arg1 : string, arg2 : boolean) : List<Pair<PsiMethod, PsiSubstitutor>>;
	getAllMethodsAndTheirSubstitutors() : List<Pair<PsiMethod, PsiSubstitutor>>;
	findInnerClassByName(arg1 : string, arg2 : boolean) : PsiClass;
	getLBrace() : PsiElement;
	getRBrace() : PsiElement;
	getScope() : PsiElement;
	isInheritor(arg1 : PsiClass, arg2 : boolean) : boolean;
	isInheritorDeep(arg1 : PsiClass, arg2 : PsiClass) : boolean;
	getVisibleSignatures() : Collection<HierarchicalMethodSignature>;
}


declare interface PsiClass extends PsiNameIdentifierOwner, PsiModifierListOwner, PsiDocCommentOwner, PsiTypeParameterListOwner, PsiTarget, PomRenameableTarget<PsiElement> {}
export = PsiClass
