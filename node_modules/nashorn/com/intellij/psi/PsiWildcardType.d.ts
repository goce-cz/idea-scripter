import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import PsiAnnotation = require('nashorn/com/intellij/psi/PsiAnnotation');

declare class PsiWildcardType {
	presentableText : string;
	internalCanonicalText : string;
	resolveScope : GlobalSearchScope;
	superTypes : PsiType[];
	manager : PsiManager;
	bound : PsiType;
	valid : boolean;
	extends : boolean;
	bounded : boolean;
	extendsBound : PsiType;
	superBound : PsiType;
	static createUnbounded(arg1 : PsiManager) : PsiWildcardType;
	static createExtends(arg1 : PsiManager, arg2 : PsiType) : PsiWildcardType;
	static createSuper(arg1 : PsiManager, arg2 : PsiType) : PsiWildcardType;
	annotate(arg1 : PsiAnnotation[]) : PsiWildcardType;
	getText(arg1 : boolean, arg2 : boolean, arg3 : string) : string;
	getManager() : PsiManager;
	getBound() : PsiType;
	isExtends() : boolean;
	isSuper() : boolean;
	isBounded() : boolean;
	getExtendsBound() : PsiType;
	getSuperBound() : PsiType;
}


declare interface PsiWildcardType extends PsiType.Stub {}
export = PsiWildcardType
