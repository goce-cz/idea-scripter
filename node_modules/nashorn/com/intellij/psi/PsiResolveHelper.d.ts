import Object = require('nashorn/java/lang/Object');
import RecursionGuard = require('nashorn/com/intellij/openapi/util/RecursionGuard');
import PsiClassType = require('nashorn/com/intellij/psi/PsiClassType');
import PsiExpressionList = require('nashorn/com/intellij/psi/PsiExpressionList');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JavaResolveResult = require('nashorn/com/intellij/psi/JavaResolveResult');
import PsiCallExpression = require('nashorn/com/intellij/psi/PsiCallExpression');
import CandidateInfo = require('nashorn/com/intellij/psi/infos/CandidateInfo');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import PsiVariable = require('nashorn/com/intellij/psi/PsiVariable');
import PsiMember = require('nashorn/com/intellij/psi/PsiMember');
import PsiModifierList = require('nashorn/com/intellij/psi/PsiModifierList');
import PsiTypeParameter = require('nashorn/com/intellij/psi/PsiTypeParameter');
import PsiParameter = require('nashorn/com/intellij/psi/PsiParameter');
import PsiExpression = require('nashorn/com/intellij/psi/PsiExpression');
import PsiSubstitutor = require('nashorn/com/intellij/psi/PsiSubstitutor');
import ParameterTypeInferencePolicy = require('nashorn/com/intellij/psi/impl/source/resolve/ParameterTypeInferencePolicy');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import LanguageLevel = require('nashorn/com/intellij/pom/java/LanguageLevel');
import Project = require('nashorn/com/intellij/openapi/project/Project');

declare class PsiResolveHelper extends Object {
	static ourGuard : RecursionGuard;
	static ourGraphGuard : RecursionGuard;
	resolveConstructor(arg1 : PsiClassType, arg2 : PsiExpressionList, arg3 : PsiElement) : JavaResolveResult;
	multiResolveConstructor(arg1 : PsiClassType, arg2 : PsiExpressionList, arg3 : PsiElement) : JavaResolveResult[];
	getReferencedMethodCandidates(arg1 : PsiCallExpression, arg2 : boolean) : CandidateInfo[];
	getReferencedMethodCandidates(arg1 : PsiCallExpression, arg2 : boolean, arg3 : boolean) : CandidateInfo[];
	resolveReferencedClass(arg1 : string, arg2 : PsiElement) : PsiClass;
	resolveReferencedVariable(arg1 : string, arg2 : PsiElement) : PsiVariable;
	resolveAccessibleReferencedVariable(arg1 : string, arg2 : PsiElement) : PsiVariable;
	isAccessible(arg1 : PsiMember, arg2 : PsiModifierList, arg3 : PsiElement, arg4 : PsiClass, arg5 : PsiElement) : boolean;
	isAccessible(arg1 : PsiMember, arg2 : PsiElement, arg3 : PsiClass) : boolean;
	inferTypeForMethodTypeParameter(arg1 : PsiTypeParameter, arg2 : PsiParameter[], arg3 : PsiExpression[], arg4 : PsiSubstitutor, arg5 : PsiElement, arg6 : ParameterTypeInferencePolicy) : PsiType;
	inferTypeArguments(arg1 : PsiTypeParameter[], arg2 : PsiParameter[], arg3 : PsiExpression[], arg4 : PsiSubstitutor, arg5 : PsiElement, arg6 : ParameterTypeInferencePolicy) : PsiSubstitutor;
	inferTypeArguments(arg1 : PsiTypeParameter[], arg2 : PsiParameter[], arg3 : PsiExpression[], arg4 : PsiSubstitutor, arg5 : PsiElement, arg6 : ParameterTypeInferencePolicy, arg7 : LanguageLevel) : PsiSubstitutor;
	inferTypeArguments(arg1 : PsiTypeParameter[], arg2 : PsiType[], arg3 : PsiType[], arg4 : LanguageLevel) : PsiSubstitutor;
	getSubstitutionForTypeParameter(arg1 : PsiTypeParameter, arg2 : PsiType, arg3 : PsiType, arg4 : boolean, arg5 : LanguageLevel) : PsiType;
}


declare module PsiResolveHelper {
	class SERVICE extends Object {
		static getInstance(arg1 : Project) : PsiResolveHelper;
	}
}

export = PsiResolveHelper
