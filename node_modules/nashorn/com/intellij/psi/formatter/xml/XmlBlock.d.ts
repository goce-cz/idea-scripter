import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Indent = require('nashorn/com/intellij/formatting/Indent');
import XmlFormattingPolicy = require('nashorn/com/intellij/psi/formatter/xml/XmlFormattingPolicy');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import Wrap = require('nashorn/com/intellij/formatting/Wrap');
import Alignment = require('nashorn/com/intellij/formatting/Alignment');
import List = require('nashorn/java/util/List');
import Block = require('nashorn/com/intellij/formatting/Block');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import Spacing = require('nashorn/com/intellij/formatting/Spacing');
import AbstractXmlBlock = require('nashorn/com/intellij/psi/formatter/xml/AbstractXmlBlock');

declare class XmlBlock {
	textRange : TextRange;
	indent : Indent;
	textElement : boolean;
	policy : XmlFormattingPolicy;
	constructor(arg1 : ASTNode, arg2 : Wrap, arg3 : Alignment, arg4 : XmlFormattingPolicy, arg5 : Indent, arg6 : TextRange);
	constructor(arg1 : ASTNode, arg2 : Wrap, arg3 : Alignment, arg4 : XmlFormattingPolicy, arg5 : Indent, arg6 : TextRange, arg7 : boolean);
	d() : boolean;
	a(arg1 : ASTNode, arg2 : XmlFormattingPolicy) : List<Block>;
	a(arg1 : ASTNode, arg2 : List<Block>) : void;
	static c(arg1 : ASTNode) : boolean;
	splitComment() : List<Block>;
	getDefaultWrap(arg1 : ASTNode) : Wrap;
	getChildDefaultIndent() : Indent;
	a(arg1 : IElementType, arg2 : IElementType) : Spacing;
	b(arg1 : IElementType, arg2 : IElementType) : Spacing;
	getPolicy() : XmlFormattingPolicy;
}


declare interface XmlBlock extends AbstractXmlBlock {}
export = XmlBlock
