import Indent = require('nashorn/com/intellij/formatting/Indent');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import Wrap = require('nashorn/com/intellij/formatting/Wrap');
import Alignment = require('nashorn/com/intellij/formatting/Alignment');
import XmlFormattingPolicy = require('nashorn/com/intellij/psi/formatter/xml/XmlFormattingPolicy');
import ArrayList = require('nashorn/java/util/ArrayList');
import Block = require('nashorn/com/intellij/formatting/Block');
import List = require('nashorn/java/util/List');
import AbstractSyntheticBlock = require('nashorn/com/intellij/psi/formatter/xml/AbstractSyntheticBlock');
import Spacing = require('nashorn/com/intellij/formatting/Spacing');
import AbstractXmlBlock = require('nashorn/com/intellij/psi/formatter/xml/AbstractXmlBlock');

declare class XmlTagBlock {
	indent : Indent;
	textElement : boolean;
	constructor(arg1 : ASTNode, arg2 : Wrap, arg3 : Alignment, arg4 : XmlFormattingPolicy, arg5 : Indent);
	constructor(arg1 : ASTNode, arg2 : Wrap, arg3 : Alignment, arg4 : XmlFormattingPolicy, arg5 : Indent, arg6 : boolean);
	isJspResult(arg1 : ArrayList<Block>) : boolean;
	getChildrenIndent() : Indent;
	a(arg1 : List<Block>, arg2 : ASTNode, arg3 : Wrap, arg4 : Alignment) : ASTNode;
	a(arg1 : List<Block>, arg2 : ASTNode, arg3 : ASTNode, arg4 : Wrap, arg5 : Alignment) : ASTNode;
	a(arg1 : ArrayList<Block>) : Block;
	createSyntheticBlock(arg1 : ArrayList<Block>, arg2 : Indent) : Block;
	b(arg1 : ArrayList<Block>) : Block;
	getSpacing(arg1 : AbstractSyntheticBlock, arg2 : AbstractSyntheticBlock) : Spacing;
	a(arg1 : number) : boolean;
}


declare interface XmlTagBlock extends AbstractXmlBlock {}
export = XmlTagBlock
