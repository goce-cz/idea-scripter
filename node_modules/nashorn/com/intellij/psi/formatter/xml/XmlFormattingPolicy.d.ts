import Object = require('nashorn/java/lang/Object');
import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import FormattingDocumentModel = require('nashorn/com/intellij/formatting/FormattingDocumentModel');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Language = require('nashorn/com/intellij/lang/Language');
import Block = require('nashorn/com/intellij/formatting/Block');
import XmlBlock = require('nashorn/com/intellij/psi/formatter/xml/XmlBlock');
import Map = require('nashorn/java/util/Map');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import WrapType = require('nashorn/com/intellij/formatting/WrapType');
import XmlAttribute = require('nashorn/com/intellij/psi/xml/XmlAttribute');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');

declare class XmlFormattingPolicy extends Object {
	attributesWrap : number;
	shouldAlignAttributes : boolean;
	shouldAlignText : boolean;
	shouldKeepWhiteSpaces : boolean;
	shouldAddSpaceAroundEqualityInAttribute : boolean;
	shouldAddSpaceAroundTagName : boolean;
	keepBlankLines : number;
	shouldKeepLineBreaks : boolean;
	shouldKeepLineBreaksInText : boolean;
	keepWhiteSpacesInsideCDATA : boolean;
	whiteSpaceAroundCDATAOption : number;
	settings : CodeStyleSettings;
	documentModel : FormattingDocumentModel;
	copyFrom(arg1 : XmlFormattingPolicy) : void;
	getOrCreateBlockFor(arg1 : Pair<PsiElement, Language>) : Block;
	a(arg1 : Pair<PsiElement, Language>) : Block;
	getPolicy(arg1 : XmlBlock) : XmlFormattingPolicy;
	a() : void;
	a(arg1 : Map<Pair<PsiElement, Language>, Block>) : void;
	getWrappingTypeForTagEnd(arg1 : XmlTag) : WrapType;
	getWrappingTypeForTagBegin(arg1 : XmlTag) : WrapType;
	insertLineBreakBeforeTag(arg1 : XmlTag) : boolean;
	insertLineBreakBeforeFirstAttribute(arg1 : XmlAttribute) : boolean;
	insertLineBreakAfterLastAttribute(arg1 : XmlAttribute) : boolean;
	insertLineBreakAfterTagBegin(arg1 : XmlTag) : boolean;
	removeLineBreakBeforeTag(arg1 : XmlTag) : boolean;
	keepWhiteSpacesInsideTag(arg1 : XmlTag) : boolean;
	indentChildrenOf(arg1 : XmlTag) : boolean;
	isTextElement(arg1 : XmlTag) : boolean;
	getTextWrap(arg1 : XmlTag) : number;
	getAttributesWrap() : number;
	getShouldAlignAttributes() : boolean;
	getShouldAlignText() : boolean;
	getShouldKeepWhiteSpaces() : boolean;
	getShouldAddSpaceAroundEqualityInAttribute() : boolean;
	getShouldAddSpaceAroundTagName() : boolean;
	getKeepBlankLines() : number;
	getShouldKeepLineBreaks() : boolean;
	getShouldKeepLineBreaksInText() : boolean;
	getKeepWhiteSpacesInsideCDATA() : boolean;
	getWhiteSpaceAroundCDATAOption() : number;
	getSettings() : CodeStyleSettings;
	processJsp() : boolean;
	addSpaceIntoEmptyTag() : boolean;
	setRootBlock(arg1 : ASTNode, arg2 : Block) : void;
	getDocumentModel() : FormattingDocumentModel;
	shouldSaveSpacesBetweenTagAndText() : boolean;
	processJavaTree() : boolean;
	dontProcessJavaTree() : void;
}

export = XmlFormattingPolicy
