import Wrap = require('nashorn/com/intellij/formatting/Wrap');
import Indent = require('nashorn/com/intellij/formatting/Indent');
import Alignment = require('nashorn/com/intellij/formatting/Alignment');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import List = require('nashorn/java/util/List');
import Block = require('nashorn/com/intellij/formatting/Block');
import XmlFormattingPolicy = require('nashorn/com/intellij/psi/formatter/xml/XmlFormattingPolicy');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');

declare class AbstractSyntheticBlock {
	wrap : Wrap;
	indent : Indent;
	alignment : Alignment;
	tagDescription : boolean;
	incomplete : boolean;
	startTag : XmlTag;
	jspTextBlock : boolean;
	jspxTextBlock : boolean;
	outerLanguageBlock : boolean;
	leaf : boolean;
	constructor(arg1 : List<Block>, arg2 : Block, arg3 : XmlFormattingPolicy, arg4 : Indent);
	a(arg1 : List<Block>) : ASTNode;
	b(arg1 : List<Block>) : ASTNode;
	a() : boolean;
	static isXmlTagName(arg1 : IElementType, arg2 : IElementType) : boolean;
	endsWithText() : boolean;
	isTagDescription() : boolean;
	static a(arg1 : ASTNode) : boolean;
	startsWithText() : boolean;
	endsWithTextElement() : boolean;
	getTag() : XmlTag;
	startsWithTextElement() : boolean;
	b(arg1 : ASTNode) : boolean;
	c(arg1 : ASTNode) : boolean;
	b() : boolean;
	static calculateTextRange(arg1 : List<Block>) : TextRange;
	startsWithTag() : boolean;
	getStartTag() : XmlTag;
	endsWithTag() : boolean;
	isJspTextBlock() : boolean;
	isJspxTextBlock() : boolean;
	isOuterLanguageBlock() : boolean;
	startsWithCDATA() : boolean;
	d(arg1 : ASTNode) : boolean;
	containsCDATA() : boolean;
	endsWithCDATA() : boolean;
	insertLineFeedAfter() : boolean;
	insertLineFeedAfter(arg1 : XmlTag) : boolean;
}


declare interface AbstractSyntheticBlock extends Block {}
export = AbstractSyntheticBlock
