import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import CharSequence = require('nashorn/java/lang/CharSequence');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Language = require('nashorn/com/intellij/lang/Language');
import Set = require('nashorn/java/util/Set');
import List = require('nashorn/java/util/List');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Class = require('nashorn/java/lang/Class');
import Cloneable = require('nashorn/java/lang/Cloneable');
import UserDataHolder = require('nashorn/com/intellij/openapi/util/UserDataHolder');

declare class FileViewProvider {
	manager : PsiManager;
	document : Document;
	contents : CharSequence;
	virtualFile : VirtualFile;
	baseLanguage : Language;
	languages : Set<Language>;
	allFiles : List<PsiFile>;
	eventSystemEnabled : boolean;
	physical : boolean;
	modificationStamp : number;
	stubBindingRoot : PsiFile;
	getManager() : PsiManager;
	getDocument() : Document;
	getContents() : CharSequence;
	getVirtualFile() : VirtualFile;
	getBaseLanguage() : Language;
	getLanguages() : Set<Language>;
	getPsi(arg1 : Language) : PsiFile;
	getAllFiles() : List<PsiFile>;
	isEventSystemEnabled() : boolean;
	isPhysical() : boolean;
	getModificationStamp() : number;
	supportsIncrementalReparse(arg1 : Language) : boolean;
	rootChanged(arg1 : PsiFile) : void;
	beforeContentsSynchronized() : void;
	contentsSynchronized() : void;
	findElementAt(arg1 : number) : PsiElement;
	findReferenceAt(arg1 : number) : PsiReference;
	findElementAt(arg1 : number, arg2 : Language) : PsiElement;
	findElementAt(arg1 : number, arg2 : Class<Language>) : PsiElement;
	findReferenceAt(arg1 : number, arg2 : Language) : PsiReference;
	createCopy(arg1 : VirtualFile) : FileViewProvider;
	getStubBindingRoot() : PsiFile;
}


declare interface FileViewProvider extends Cloneable, UserDataHolder {}
export = FileViewProvider
