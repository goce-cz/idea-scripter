import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import NamedScope = require('nashorn/com/intellij/psi/search/scope/packageSet/NamedScope');

declare class GlobalSearchScopesCore extends Object {
	constructor();
	static projectProductionScope(arg1 : Project) : GlobalSearchScope;
	static projectTestScope(arg1 : Project) : GlobalSearchScope;
	static directoryScope(arg1 : PsiDirectory, arg2 : boolean) : GlobalSearchScope;
	static directoryScope(arg1 : Project, arg2 : VirtualFile, arg3 : boolean) : GlobalSearchScope;
	static filterScope(arg1 : Project, arg2 : NamedScope) : GlobalSearchScope;
}


declare module GlobalSearchScopesCore {
	class DirectoriesScope {
		searchInLibraries : boolean;
		project : Project;
		displayName : string;
		in(arg1 : VirtualFile) : boolean;
	}


	interface DirectoriesScope extends GlobalSearchScope {}	class DirectoryScope {
		searchInLibraries : boolean;
		project : Project;
		displayName : string;
	}


	interface DirectoryScope extends GlobalSearchScope {}	class TestScopeFilter {
		searchInLibraries : boolean;
		displayName : string;
	}


	interface TestScopeFilter extends GlobalSearchScope {}	class ProductionScopeFilter {
		searchInLibraries : boolean;
		displayName : string;
	}


	interface ProductionScopeFilter extends GlobalSearchScope {}	class FilterScopeAdapter {
		displayName : string;
		project : Project;
		searchInLibraries : boolean;
	}


	interface FilterScopeAdapter extends GlobalSearchScope {}}

export = GlobalSearchScopesCore
