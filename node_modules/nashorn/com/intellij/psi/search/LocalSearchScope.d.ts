import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');

declare class LocalSearchScope {
	static EMPTY : LocalSearchScope;
	ignoreInjectedPsi : boolean;
	displayName : string;
	scope : PsiElement[];
	constructor(arg1 : PsiElement);
	constructor(arg1 : PsiElement, arg2 : string);
	constructor(arg1 : PsiElement[]);
	constructor(arg1 : PsiElement[], arg2 : string);
	constructor(arg1 : PsiElement[], arg2 : string, arg3 : boolean);
	isIgnoreInjectedPsi() : boolean;
	getScope() : PsiElement[];
	intersectWith(arg1 : LocalSearchScope) : LocalSearchScope;
	static intersection(arg1 : LocalSearchScope, arg2 : LocalSearchScope) : LocalSearchScope;
	tryIntersectNonPhysicalWith(arg1 : GlobalSearchScope) : LocalSearchScope;
	static intersectScopeElements(arg1 : PsiElement, arg2 : PsiElement) : PsiElement;
	union(arg1 : LocalSearchScope) : SearchScope;
	static scopeElementsUnion(arg1 : PsiElement, arg2 : PsiElement) : PsiElement;
	isInScope(arg1 : VirtualFile) : boolean;
	containsRange(arg1 : PsiFile, arg2 : TextRange) : boolean;
}


declare interface LocalSearchScope extends SearchScope {}
export = LocalSearchScope
