import Project = require('nashorn/com/intellij/openapi/project/Project');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import LocalSearchScope = require('nashorn/com/intellij/psi/search/LocalSearchScope');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Collection = require('nashorn/java/util/Collection');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import ProjectAwareFileFilter = require('nashorn/com/intellij/psi/search/ProjectAwareFileFilter');
import Iterable = require('nashorn/java/lang/Iterable');
import DelegatingGlobalSearchScope = require('nashorn/com/intellij/psi/search/DelegatingGlobalSearchScope');

declare class GlobalSearchScope {
	static EMPTY_SCOPE : GlobalSearchScope;
	project : Project;
	searchInLibraries : boolean;
	forceSearchingInLibrarySources : boolean;
	searchOutsideRootModel : boolean;
	contains(arg1 : VirtualFile) : boolean;
	compare(arg1 : VirtualFile, arg2 : VirtualFile) : number;
	isSearchInModuleContent(arg1 : Module) : boolean;
	isSearchInModuleContent(arg1 : Module, arg2 : boolean) : boolean;
	isSearchInLibraries() : boolean;
	isForceSearchingInLibrarySources() : boolean;
	isSearchOutsideRootModel() : boolean;
	intersectWith(arg1 : GlobalSearchScope) : GlobalSearchScope;
	intersectWith(arg1 : LocalSearchScope) : SearchScope;
	union(arg1 : LocalSearchScope) : GlobalSearchScope;
	uniteWith(arg1 : GlobalSearchScope) : GlobalSearchScope;
	static allScope(arg1 : Project) : GlobalSearchScope;
	static projectScope(arg1 : Project) : GlobalSearchScope;
	static notScope(arg1 : GlobalSearchScope) : GlobalSearchScope;
	static moduleScope(arg1 : Module) : GlobalSearchScope;
	static moduleWithLibrariesScope(arg1 : Module) : GlobalSearchScope;
	static moduleWithDependenciesScope(arg1 : Module) : GlobalSearchScope;
	static moduleRuntimeScope(arg1 : Module, arg2 : boolean) : GlobalSearchScope;
	static moduleWithDependenciesAndLibrariesScope(arg1 : Module) : GlobalSearchScope;
	static moduleWithDependenciesAndLibrariesScope(arg1 : Module, arg2 : boolean) : GlobalSearchScope;
	static moduleWithDependentsScope(arg1 : Module) : GlobalSearchScope;
	static moduleTestsWithDependentsScope(arg1 : Module) : GlobalSearchScope;
	static fileScope(arg1 : PsiFile) : GlobalSearchScope;
	static fileScope(arg1 : Project, arg2 : VirtualFile) : GlobalSearchScope;
	static fileScope(arg1 : Project, arg2 : VirtualFile, arg3 : string) : GlobalSearchScope;
	static filesScope(arg1 : Project, arg2 : Collection<VirtualFile>) : GlobalSearchScope;
	static filesScope(arg1 : Project, arg2 : Collection<VirtualFile>, arg3 : string) : GlobalSearchScope;
	static getScopeRestrictedByFileTypes(arg1 : GlobalSearchScope, arg2 : FileType[]) : GlobalSearchScope;
}


declare interface GlobalSearchScope extends SearchScope, ProjectAwareFileFilter {}

declare module GlobalSearchScope {
	class FilesScope {
		searchInLibraries : boolean;
		constructor(arg1 : Project, arg2 : Collection<VirtualFile>);
	}


	interface FilesScope extends GlobalSearchScope, Iterable<VirtualFile> {}	class FileScope {
		searchInLibraries : boolean;
	}


	interface FileScope extends GlobalSearchScope, Iterable<VirtualFile> {}	class EmptyScope {
		searchInLibraries : boolean;
	}


	interface EmptyScope extends GlobalSearchScope {}	class FileTypeRestrictionScope {
	}


	interface FileTypeRestrictionScope extends DelegatingGlobalSearchScope {}	class UnionScope {
		displayName : string;
		searchOutsideRootModel : boolean;
		searchInLibraries : boolean;
	}


	interface UnionScope extends GlobalSearchScope {}	class IntersectionScope {
		displayName : string;
		searchInLibraries : boolean;
		searchOutsideRootModel : boolean;
	}


	interface IntersectionScope extends GlobalSearchScope {}	class NotScope {
		searchInLibraries : boolean;
		searchOutsideRootModel : boolean;
	}


	interface NotScope extends DelegatingGlobalSearchScope {}}

export = GlobalSearchScope
