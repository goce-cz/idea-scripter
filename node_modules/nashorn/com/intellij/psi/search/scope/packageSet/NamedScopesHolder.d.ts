import Icon = require('nashorn/javax/swing/Icon');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import NamedScope = require('nashorn/com/intellij/psi/search/scope/packageSet/NamedScope');
import Element = require('nashorn/org/jdom/Element');
import List = require('nashorn/java/util/List');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PersistentStateComponent = require('nashorn/com/intellij/openapi/components/PersistentStateComponent');
import Object = require('nashorn/java/lang/Object');

declare class NamedScopesHolder {
	displayName : string;
	icon : Icon;
	projectBaseDir : VirtualFile;
	scopes : NamedScope[];
	editableScopes : NamedScope[];
	state : Element;
	predefinedScopes : List<NamedScope>;
	project : Project;
	constructor(arg1 : Project);
	getDisplayName() : string;
	getIcon() : Icon;
	getProjectBaseDir() : VirtualFile;
	addScopeListener(arg1 : NamedScopesHolder.ScopeListener) : void;
	removeScopeListener(arg1 : NamedScopesHolder.ScopeListener) : void;
	fireScopeListeners() : void;
	getScopes() : NamedScope[];
	getEditableScopes() : NamedScope[];
	removeAllSets() : void;
	setScopes(arg1 : NamedScope[]) : void;
	addScope(arg1 : NamedScope) : void;
	static getScope(arg1 : Project, arg2 : string) : NamedScope;
	static getAllNamedScopeHolders(arg1 : Project) : NamedScopesHolder[];
	static getHolder(arg1 : Project, arg2 : string, arg3 : NamedScopesHolder) : NamedScopesHolder;
	static writeScope(arg1 : NamedScope) : Element;
	static readScope(arg1 : Element) : NamedScope;
	getScope(arg1 : string) : NamedScope;
	getPredefinedScopes() : List<NamedScope>;
	getPredefinedScope(arg1 : string) : NamedScope;
	getProject() : Project;
}


declare interface NamedScopesHolder extends PersistentStateComponent<Element> {}

declare module NamedScopesHolder {
	class ScopeListener extends Object {
		scopesChanged() : void;
	}
}

export = NamedScopesHolder
