import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import Query = require('nashorn/com/intellij/util/Query');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import ExtensibleQueryFactory = require('nashorn/com/intellij/psi/search/searches/ExtensibleQueryFactory');
import Object = require('nashorn/java/lang/Object');

declare class DirectClassInheritorsSearch {
	static EP_NAME : ExtensionPointName<QueryExecutor>;
	static INSTANCE : DirectClassInheritorsSearch;
	static search(arg1 : PsiClass) : Query<PsiClass>;
	static search(arg1 : PsiClass, arg2 : SearchScope) : Query<PsiClass>;
	static search(arg1 : PsiClass, arg2 : SearchScope, arg3 : boolean) : Query<PsiClass>;
	static search(arg1 : PsiClass, arg2 : SearchScope, arg3 : boolean, arg4 : boolean) : Query<PsiClass>;
}


declare interface DirectClassInheritorsSearch extends ExtensibleQueryFactory<PsiClass, DirectClassInheritorsSearch.SearchParameters> {}

declare module DirectClassInheritorsSearch {
	class SearchParameters extends Object {
		classToProcess : PsiClass;
		scope : SearchScope;
		checkInheritance : boolean;
		constructor(arg1 : PsiClass, arg2 : SearchScope, arg3 : boolean, arg4 : boolean);
		constructor(arg1 : PsiClass, arg2 : SearchScope, arg3 : boolean);
		constructor(arg1 : PsiClass, arg2 : SearchScope);
		getClassToProcess() : PsiClass;
		getScope() : SearchScope;
		isCheckInheritance() : boolean;
		includeAnonymous() : boolean;
	}
}

export = DirectClassInheritorsSearch
