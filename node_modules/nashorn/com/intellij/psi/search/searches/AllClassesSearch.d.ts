import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Query = require('nashorn/com/intellij/util/Query');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import ExtensibleQueryFactory = require('nashorn/com/intellij/psi/search/searches/ExtensibleQueryFactory');
import Object = require('nashorn/java/lang/Object');

declare class AllClassesSearch {
	static EP_NAME : ExtensionPointName<QueryExecutor>;
	static INSTANCE : AllClassesSearch;
	constructor();
	static search(arg1 : SearchScope, arg2 : Project) : Query<PsiClass>;
	static search(arg1 : SearchScope, arg2 : Project, arg3 : Condition<string>) : Query<PsiClass>;
}


declare interface AllClassesSearch extends ExtensibleQueryFactory<PsiClass, AllClassesSearch.SearchParameters> {}

declare module AllClassesSearch {
	class SearchParameters extends Object {
		scope : SearchScope;
		project : Project;
		constructor(arg1 : SearchScope, arg2 : Project);
		constructor(arg1 : SearchScope, arg2 : Project, arg3 : Condition<string>);
		getScope() : SearchScope;
		getProject() : Project;
		nameMatches(arg1 : string) : boolean;
	}
}

export = AllClassesSearch
