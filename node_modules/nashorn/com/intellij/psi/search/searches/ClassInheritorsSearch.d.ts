import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import Query = require('nashorn/com/intellij/util/Query');
import Processor = require('nashorn/com/intellij/util/Processor');
import Reference = require('nashorn/java/lang/ref/Reference');
import ExtensibleQueryFactory = require('nashorn/com/intellij/psi/search/searches/ExtensibleQueryFactory');
import Object = require('nashorn/java/lang/Object');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');

declare class ClassInheritorsSearch {
	static EP_NAME : ExtensionPointName<QueryExecutor>;
	static INSTANCE : ClassInheritorsSearch;
	static search(arg1 : PsiClass, arg2 : SearchScope, arg3 : boolean, arg4 : boolean, arg5 : boolean) : Query<PsiClass>;
	static search(arg1 : ClassInheritorsSearch.SearchParameters) : Query<PsiClass>;
	static search(arg1 : PsiClass, arg2 : SearchScope, arg3 : boolean, arg4 : boolean) : Query<PsiClass>;
	static search(arg1 : PsiClass, arg2 : SearchScope, arg3 : boolean) : Query<PsiClass>;
	static search(arg1 : PsiClass, arg2 : boolean) : Query<PsiClass>;
	static search(arg1 : PsiClass) : Query<PsiClass>;
	static processInheritors(arg1 : Processor<PsiClass>, arg2 : PsiClass, arg3 : SearchScope, arg4 : ClassInheritorsSearch.SearchParameters) : boolean;
	static createHardReference(arg1 : PsiClass) : Reference<PsiClass>;
	static isFinal(arg1 : PsiClass) : boolean;
}


declare interface ClassInheritorsSearch extends ExtensibleQueryFactory<PsiClass, ClassInheritorsSearch.SearchParameters> {}

declare module ClassInheritorsSearch {
	class SearchParameters extends Object {
		classToProcess : PsiClass;
		nameCondition : Condition<string>;
		checkDeep : boolean;
		scope : SearchScope;
		checkInheritance : boolean;
		includeAnonymous : boolean;
		constructor(arg1 : PsiClass, arg2 : SearchScope, arg3 : boolean, arg4 : boolean, arg5 : boolean);
		constructor(arg1 : PsiClass, arg2 : SearchScope, arg3 : boolean, arg4 : boolean, arg5 : boolean, arg6 : Condition<string>);
		constructor(arg1 : PsiClass, arg2 : SearchScope, arg3 : boolean, arg4 : boolean, arg5 : boolean, arg6 : Condition<string>, arg7 : ClassInheritorsSearch.InheritanceChecker);
		getClassToProcess() : PsiClass;
		getNameCondition() : Condition<string>;
		isCheckDeep() : boolean;
		getScope() : SearchScope;
		isCheckInheritance() : boolean;
		isIncludeAnonymous() : boolean;
	}
	class InheritanceChecker extends Object {
		static DEFAULT : ClassInheritorsSearch.InheritanceChecker;
		checkInheritance(arg1 : PsiClass, arg2 : PsiClass) : boolean;
	}
}

export = ClassInheritorsSearch
