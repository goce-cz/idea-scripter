import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import PsiMethod = require('nashorn/com/intellij/psi/PsiMethod');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import Query = require('nashorn/com/intellij/util/Query');
import ExtensibleQueryFactory = require('nashorn/com/intellij/psi/search/searches/ExtensibleQueryFactory');
import Object = require('nashorn/java/lang/Object');

declare class OverridingMethodsSearch {
	static EP_NAME : ExtensionPointName<QueryExecutor>;
	static INSTANCE : OverridingMethodsSearch;
	static search(arg1 : PsiMethod, arg2 : SearchScope, arg3 : boolean) : Query<PsiMethod>;
	static cannotBeOverriden(arg1 : PsiMethod) : boolean;
	static search(arg1 : PsiMethod, arg2 : boolean) : Query<PsiMethod>;
	static search(arg1 : PsiMethod) : Query<PsiMethod>;
}


declare interface OverridingMethodsSearch extends ExtensibleQueryFactory<PsiMethod, OverridingMethodsSearch.SearchParameters> {}

declare module OverridingMethodsSearch {
	class SearchParameters extends Object {
		method : PsiMethod;
		checkDeep : boolean;
		scope : SearchScope;
		constructor(arg1 : PsiMethod, arg2 : SearchScope, arg3 : boolean);
		getMethod() : PsiMethod;
		isCheckDeep() : boolean;
		getScope() : SearchScope;
	}
}

export = OverridingMethodsSearch
