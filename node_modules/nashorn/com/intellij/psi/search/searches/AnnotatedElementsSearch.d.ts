import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import Class = require('nashorn/java/lang/Class');
import PsiModifierListOwner = require('nashorn/com/intellij/psi/PsiModifierListOwner');
import Query = require('nashorn/com/intellij/util/Query');
import PsiMethod = require('nashorn/com/intellij/psi/PsiMethod');
import PsiMember = require('nashorn/com/intellij/psi/PsiMember');
import PsiField = require('nashorn/com/intellij/psi/PsiField');
import PsiParameter = require('nashorn/com/intellij/psi/PsiParameter');
import ExtensibleQueryFactory = require('nashorn/com/intellij/psi/search/searches/ExtensibleQueryFactory');
import Object = require('nashorn/java/lang/Object');

declare class AnnotatedElementsSearch {
	static EP_NAME : ExtensionPointName<QueryExecutor>;
	static INSTANCE : AnnotatedElementsSearch;
	constructor();
	static createDelegateQuery(arg1 : PsiClass, arg2 : SearchScope, arg3 : Class<PsiModifierListOwner>[]) : Query<PsiModifierListOwner>;
	static searchElements<T extends PsiModifierListOwner>(arg1 : PsiClass, arg2 : SearchScope, arg3 : Class<T>[]) : Query<T>;
	static searchPsiClasses(arg1 : PsiClass, arg2 : SearchScope) : Query<PsiClass>;
	static searchPsiMethods(arg1 : PsiClass, arg2 : SearchScope) : Query<PsiMethod>;
	static searchPsiMembers(arg1 : PsiClass, arg2 : SearchScope) : Query<PsiMember>;
	static searchPsiFields(arg1 : PsiClass, arg2 : SearchScope) : Query<PsiField>;
	static searchPsiParameters(arg1 : PsiClass, arg2 : SearchScope) : Query<PsiParameter>;
}


declare interface AnnotatedElementsSearch extends ExtensibleQueryFactory<PsiModifierListOwner, AnnotatedElementsSearch.Parameters> {}

declare module AnnotatedElementsSearch {
	class Parameters extends Object {
		annotationClass : PsiClass;
		scope : SearchScope;
		types : Class<PsiModifierListOwner>[];
		constructor(arg1 : PsiClass, arg2 : SearchScope, arg3 : Class<PsiModifierListOwner>[]);
		getAnnotationClass() : PsiClass;
		getScope() : SearchScope;
		getTypes() : Class<PsiModifierListOwner>[];
	}
}

export = AnnotatedElementsSearch
