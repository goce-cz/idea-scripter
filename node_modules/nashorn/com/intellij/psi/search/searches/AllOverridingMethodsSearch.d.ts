import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import Query = require('nashorn/com/intellij/util/Query');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import PsiMethod = require('nashorn/com/intellij/psi/PsiMethod');
import ExtensibleQueryFactory = require('nashorn/com/intellij/psi/search/searches/ExtensibleQueryFactory');
import Object = require('nashorn/java/lang/Object');

declare class AllOverridingMethodsSearch {
	static EP_NAME : ExtensionPointName<QueryExecutor>;
	static INSTANCE : AllOverridingMethodsSearch;
	static search(arg1 : PsiClass, arg2 : SearchScope) : Query<Pair<PsiMethod, PsiMethod>>;
	static search(arg1 : PsiClass) : Query<Pair<PsiMethod, PsiMethod>>;
}


declare interface AllOverridingMethodsSearch extends ExtensibleQueryFactory<Pair<PsiMethod, PsiMethod>, AllOverridingMethodsSearch.SearchParameters> {}

declare module AllOverridingMethodsSearch {
	class SearchParameters extends Object {
		psiClass : PsiClass;
		scope : SearchScope;
		constructor(arg1 : PsiClass, arg2 : SearchScope);
		getPsiClass() : PsiClass;
		getScope() : SearchScope;
	}
}

export = AllOverridingMethodsSearch
