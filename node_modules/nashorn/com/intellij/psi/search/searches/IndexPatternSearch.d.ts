import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import IndexPattern = require('nashorn/com/intellij/psi/search/IndexPattern');
import Query = require('nashorn/com/intellij/util/Query');
import IndexPatternOccurrence = require('nashorn/com/intellij/psi/search/IndexPatternOccurrence');
import IndexPatternProvider = require('nashorn/com/intellij/psi/search/IndexPatternProvider');
import QueryFactory = require('nashorn/com/intellij/util/QueryFactory');
import Object = require('nashorn/java/lang/Object');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');

declare class IndexPatternSearch {
	static INDEX_PATTERN_SEARCH_INSTANCE : IndexPatternSearch;
	static search(arg1 : PsiFile, arg2 : IndexPattern) : Query<IndexPatternOccurrence>;
	static search(arg1 : PsiFile, arg2 : IndexPattern, arg3 : number, arg4 : number) : Query<IndexPatternOccurrence>;
	static search(arg1 : PsiFile, arg2 : IndexPatternProvider) : Query<IndexPatternOccurrence>;
	static search(arg1 : PsiFile, arg2 : IndexPatternProvider, arg3 : number, arg4 : number) : Query<IndexPatternOccurrence>;
	static getOccurrencesCount(arg1 : PsiFile, arg2 : IndexPatternProvider) : number;
	static getOccurrencesCount(arg1 : PsiFile, arg2 : IndexPattern) : number;
	getOccurrencesCountImpl(arg1 : PsiFile, arg2 : IndexPatternProvider) : number;
	getOccurrencesCountImpl(arg1 : PsiFile, arg2 : IndexPattern) : number;
}


declare interface IndexPatternSearch extends QueryFactory<IndexPatternOccurrence, IndexPatternSearch.SearchParameters> {}

declare module IndexPatternSearch {
	class SearchParameters extends Object {
		file : PsiFile;
		pattern : IndexPattern;
		patternProvider : IndexPatternProvider;
		range : TextRange;
		constructor(arg1 : PsiFile, arg2 : IndexPattern);
		constructor(arg1 : PsiFile, arg2 : IndexPattern, arg3 : TextRange);
		constructor(arg1 : PsiFile, arg2 : IndexPatternProvider);
		constructor(arg1 : PsiFile, arg2 : IndexPatternProvider, arg3 : TextRange);
		getFile() : PsiFile;
		getPattern() : IndexPattern;
		getPatternProvider() : IndexPatternProvider;
		getRange() : TextRange;
	}
}

export = IndexPatternSearch
