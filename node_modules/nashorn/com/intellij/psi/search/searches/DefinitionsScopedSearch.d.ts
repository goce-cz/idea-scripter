import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Query = require('nashorn/com/intellij/util/Query');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import ExtensibleQueryFactory = require('nashorn/com/intellij/psi/search/searches/ExtensibleQueryFactory');
import Object = require('nashorn/java/lang/Object');

declare class DefinitionsScopedSearch {
	static EP_NAME : ExtensionPointName<QueryExecutor>;
	static INSTANCE : DefinitionsScopedSearch;
	constructor();
	static search(arg1 : PsiElement) : Query<PsiElement>;
	static search(arg1 : PsiElement, arg2 : SearchScope) : Query<PsiElement>;
}


declare interface DefinitionsScopedSearch extends ExtensibleQueryFactory<PsiElement, DefinitionsScopedSearch.SearchParameters> {}

declare module DefinitionsScopedSearch {
	class SearchParameters extends Object {
		element : PsiElement;
		checkDeep : boolean;
		scope : SearchScope;
		constructor(arg1 : PsiElement);
		constructor(arg1 : PsiElement, arg2 : SearchScope, arg3 : boolean);
		getElement() : PsiElement;
		isCheckDeep() : boolean;
		getScope() : SearchScope;
	}
}

export = DefinitionsScopedSearch
