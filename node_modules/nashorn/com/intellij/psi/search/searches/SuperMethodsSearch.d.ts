import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import PsiMethod = require('nashorn/com/intellij/psi/PsiMethod');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import Query = require('nashorn/com/intellij/util/Query');
import MethodSignatureBackedByPsiMethod = require('nashorn/com/intellij/psi/util/MethodSignatureBackedByPsiMethod');
import ExtensibleQueryFactory = require('nashorn/com/intellij/psi/search/searches/ExtensibleQueryFactory');
import Object = require('nashorn/java/lang/Object');

declare class SuperMethodsSearch {
	static EP_NAME : ExtensionPointName<QueryExecutor>;
	static SUPER_METHODS_SEARCH_INSTANCE : SuperMethodsSearch;
	static search(arg1 : PsiMethod, arg2 : PsiClass, arg3 : boolean, arg4 : boolean) : Query<MethodSignatureBackedByPsiMethod>;
}


declare interface SuperMethodsSearch extends ExtensibleQueryFactory<MethodSignatureBackedByPsiMethod, SuperMethodsSearch.SearchParameters> {}

declare module SuperMethodsSearch {
	class SearchParameters extends Object {
		checkBases : boolean;
		method : PsiMethod;
		psiClass : PsiClass;
		allowStaticMethod : boolean;
		constructor(arg1 : PsiMethod, arg2 : PsiClass, arg3 : boolean, arg4 : boolean);
		isCheckBases() : boolean;
		getMethod() : PsiMethod;
		getPsiClass() : PsiClass;
		isAllowStaticMethod() : boolean;
	}
}

export = SuperMethodsSearch
