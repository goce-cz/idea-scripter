import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Query = require('nashorn/com/intellij/util/Query');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import UniqueResultsQuery = require('nashorn/com/intellij/util/UniqueResultsQuery');
import ReferenceDescriptor = require('nashorn/com/intellij/psi/search/searches/ReferenceDescriptor');
import SearchRequestCollector = require('nashorn/com/intellij/psi/search/SearchRequestCollector');
import Processor = require('nashorn/com/intellij/util/Processor');
import PairProcessor = require('nashorn/com/intellij/util/PairProcessor');
import ExtensibleQueryFactory = require('nashorn/com/intellij/psi/search/searches/ExtensibleQueryFactory');
import Object = require('nashorn/java/lang/Object');

declare class ReferencesSearch {
	static EP_NAME : ExtensionPointName<QueryExecutor>;
	static search(arg1 : PsiElement) : Query<PsiReference>;
	static search(arg1 : PsiElement, arg2 : SearchScope) : Query<PsiReference>;
	static search(arg1 : PsiElement, arg2 : SearchScope, arg3 : boolean) : Query<PsiReference>;
	static search(arg1 : ReferencesSearch.SearchParameters) : Query<PsiReference>;
	static uniqueResults(arg1 : Query<PsiReference>) : UniqueResultsQuery<PsiReference, ReferenceDescriptor>;
	static searchOptimized(arg1 : PsiElement, arg2 : SearchScope, arg3 : boolean, arg4 : SearchRequestCollector, arg5 : Processor<PsiReference>) : void;
	static searchOptimized(arg1 : PsiElement, arg2 : SearchScope, arg3 : boolean, arg4 : SearchRequestCollector, arg5 : boolean, arg6 : PairProcessor<PsiReference, SearchRequestCollector>) : void;
}


declare interface ReferencesSearch extends ExtensibleQueryFactory<PsiReference, ReferencesSearch.SearchParameters> {}

declare module ReferencesSearch {
	class SearchParameters extends Object {
		elementToSearch : PsiElement;
		scopeDeterminedByUser : SearchScope;
		scope : SearchScope;
		ignoreAccessScope : boolean;
		optimizer : SearchRequestCollector;
		effectiveSearchScope : SearchScope;
		constructor(arg1 : PsiElement, arg2 : SearchScope, arg3 : boolean, arg4 : SearchRequestCollector);
		constructor(arg1 : PsiElement, arg2 : SearchScope, arg3 : boolean);
		getElementToSearch() : PsiElement;
		getScopeDeterminedByUser() : SearchScope;
		getScope() : SearchScope;
		isIgnoreAccessScope() : boolean;
		getOptimizer() : SearchRequestCollector;
		getEffectiveSearchScope() : SearchScope;
	}
}

export = ReferencesSearch
