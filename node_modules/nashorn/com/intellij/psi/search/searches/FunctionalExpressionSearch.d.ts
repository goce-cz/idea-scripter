import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import Query = require('nashorn/com/intellij/util/Query');
import PsiFunctionalExpression = require('nashorn/com/intellij/psi/PsiFunctionalExpression');
import PsiMethod = require('nashorn/com/intellij/psi/PsiMethod');
import ExtensibleQueryFactory = require('nashorn/com/intellij/psi/search/searches/ExtensibleQueryFactory');
import Object = require('nashorn/java/lang/Object');

declare class FunctionalExpressionSearch {
	static EP_NAME : ExtensionPointName<QueryExecutor>;
	static INSTANCE : FunctionalExpressionSearch;
	constructor();
	static search(arg1 : PsiClass, arg2 : SearchScope) : Query<PsiFunctionalExpression>;
	static search(arg1 : PsiMethod) : Query<PsiFunctionalExpression>;
	static search(arg1 : PsiMethod, arg2 : SearchScope) : Query<PsiFunctionalExpression>;
	static search(arg1 : PsiClass) : Query<PsiFunctionalExpression>;
}


declare interface FunctionalExpressionSearch extends ExtensibleQueryFactory<PsiFunctionalExpression, FunctionalExpressionSearch.SearchParameters> {}

declare module FunctionalExpressionSearch {
	class SearchParameters extends Object {
		elementToSearch : PsiClass;
		effectiveSearchScope : SearchScope;
		constructor(arg1 : PsiClass, arg2 : SearchScope);
		getElementToSearch() : PsiClass;
		getEffectiveSearchScope() : SearchScope;
	}
}

export = FunctionalExpressionSearch
