import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Object = require('nashorn/java/lang/Object');
import PsiElementFilter = require('nashorn/com/intellij/psi/util/PsiElementFilter');
import Collection = require('nashorn/java/util/Collection');

declare class PsiElementProcessor<T extends PsiElement> extends Object {
	execute(arg1 : T) : boolean;
}


declare module PsiElementProcessor {
	class FindFilteredElement<T extends PsiElement> {
		constructor(arg1 : PsiElementFilter);
	}


	interface FindFilteredElement<T extends PsiElement> extends PsiElementProcessor.FindElement<T> {}	class FindElement<T extends PsiElement> {
		found : boolean;
		foundElement : T;
		constructor();
		isFound() : boolean;
		getFoundElement() : T;
		setFound(arg1 : T) : boolean;
	}


	interface FindElement<T extends PsiElement> extends PsiElementProcessor<T> {}	class CollectElementsWithLimit<T extends PsiElement> {
		overflow : boolean;
		constructor(arg1 : number);
		constructor(arg1 : number, arg2 : Collection<T>);
		isOverflow() : boolean;
	}


	interface CollectElementsWithLimit<T extends PsiElement> extends PsiElementProcessor.CollectElements<T> {}	class CollectFilteredElements<T extends PsiElement> {
		constructor(arg1 : PsiElementFilter, arg2 : Collection<T>);
		constructor(arg1 : PsiElementFilter);
	}


	interface CollectFilteredElements<T extends PsiElement> extends PsiElementProcessor.CollectElements<T> {}	class CollectElements<T extends PsiElement> {
		collection : Collection<T>;
		constructor();
		constructor(arg1 : Collection<T>);
		toArray() : PsiElement[];
		getCollection() : Collection<T>;
		toArray(arg1 : T[]) : T[];
	}


	interface CollectElements<T extends PsiElement> extends PsiElementProcessor<T> {}}

export = PsiElementProcessor
