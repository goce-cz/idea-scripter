import ID = require('nashorn/com/intellij/util/indexing/ID');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import Void = require('nashorn/java/lang/Void');
import DataIndexer = require('nashorn/com/intellij/util/indexing/DataIndexer');
import FileContent = require('nashorn/com/intellij/util/indexing/FileContent');
import KeyDescriptor = require('nashorn/com/intellij/util/io/KeyDescriptor');
import FileBasedIndex = require('nashorn/com/intellij/util/indexing/FileBasedIndex');
import FileTypeRegistry = require('nashorn/com/intellij/openapi/fileTypes/FileTypeRegistry');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import Collection = require('nashorn/java/util/Collection');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import ScalarIndexExtension = require('nashorn/com/intellij/util/indexing/ScalarIndexExtension');

declare class FileTypeIndex {
	static NAME : ID<FileType, Void>;
	name : ID<FileType, Void>;
	indexer : DataIndexer<FileType, Void, FileContent>;
	keyDescriptor : KeyDescriptor<FileType>;
	inputFilter : FileBasedIndex.InputFilter;
	version : number;
	constructor(arg1 : FileTypeRegistry);
	static getFiles(arg1 : FileType, arg2 : GlobalSearchScope) : Collection<VirtualFile>;
	static containsFileOfType(arg1 : FileType, arg2 : GlobalSearchScope) : boolean;
}


declare interface FileTypeIndex extends ScalarIndexExtension<FileType>, FileBasedIndex.InputFilter, KeyDescriptor<FileType>, DataIndexer<FileType, Void, FileContent> {}
export = FileTypeIndex
