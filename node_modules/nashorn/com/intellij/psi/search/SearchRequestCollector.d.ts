import Object = require('nashorn/java/lang/Object');
import SearchSession = require('nashorn/com/intellij/psi/search/SearchSession');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import RequestResultProcessor = require('nashorn/com/intellij/psi/search/RequestResultProcessor');
import QuerySearchRequest = require('nashorn/com/intellij/psi/search/QuerySearchRequest');
import Processor = require('nashorn/com/intellij/util/Processor');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import List = require('nashorn/java/util/List');
import PsiSearchRequest = require('nashorn/com/intellij/psi/search/PsiSearchRequest');

declare class SearchRequestCollector extends Object {
	searchSession : SearchSession;
	constructor(arg1 : SearchSession);
	getSearchSession() : SearchSession;
	searchWord(arg1 : string, arg2 : SearchScope, arg3 : boolean, arg4 : PsiElement) : void;
	searchWord(arg1 : string, arg2 : SearchScope, arg3 : number, arg4 : boolean, arg5 : PsiElement) : void;
	searchWord(arg1 : string, arg2 : SearchScope, arg3 : number, arg4 : boolean, arg5 : string, arg6 : RequestResultProcessor) : void;
	searchWord(arg1 : string, arg2 : SearchScope, arg3 : number, arg4 : boolean, arg5 : PsiElement, arg6 : RequestResultProcessor) : void;
	static getContainerName(arg1 : PsiElement) : string;
	static getContainer(arg1 : PsiElement) : PsiElement;
	searchWord(arg1 : string, arg2 : SearchScope, arg3 : number, arg4 : boolean, arg5 : RequestResultProcessor) : void;
	static makesSenseToSearch(arg1 : string, arg2 : SearchScope) : boolean;
	searchQuery(arg1 : QuerySearchRequest) : void;
	searchCustom(arg1 : Processor<Processor<PsiReference>>) : void;
	takeQueryRequests() : List<QuerySearchRequest>;
	takeRequests<T>(arg1 : List<T>) : List<T>;
	takeSearchRequests() : List<PsiSearchRequest>;
	takeCustomSearchActions() : List<Processor<Processor<PsiReference>>>;
}

export = SearchRequestCollector
