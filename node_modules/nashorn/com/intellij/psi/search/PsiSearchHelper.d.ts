import Object = require('nashorn/java/lang/Object');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Processor = require('nashorn/com/intellij/util/Processor');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiNonJavaFileReferenceProcessor = require('nashorn/com/intellij/psi/search/PsiNonJavaFileReferenceProcessor');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import SearchRequestCollector = require('nashorn/com/intellij/psi/search/SearchRequestCollector');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import AsyncFuture = require('nashorn/com/intellij/concurrency/AsyncFuture');
import TextOccurenceProcessor = require('nashorn/com/intellij/psi/search/TextOccurenceProcessor');
import ProgressIndicator = require('nashorn/com/intellij/openapi/progress/ProgressIndicator');
import Enum = require('nashorn/java/lang/Enum');
import Project = require('nashorn/com/intellij/openapi/project/Project');

declare class PsiSearchHelper extends Object {
	findCommentsContainingIdentifier(arg1 : string, arg2 : SearchScope) : PsiElement[];
	processCommentsContainingIdentifier(arg1 : string, arg2 : SearchScope, arg3 : Processor<PsiElement>) : boolean;
	findFilesWithPlainTextWords(arg1 : string) : PsiFile[];
	processUsagesInNonJavaFiles(arg1 : string, arg2 : PsiNonJavaFileReferenceProcessor, arg3 : GlobalSearchScope) : boolean;
	processUsagesInNonJavaFiles(arg1 : PsiElement, arg2 : string, arg3 : PsiNonJavaFileReferenceProcessor, arg4 : GlobalSearchScope) : boolean;
	getUseScope(arg1 : PsiElement) : SearchScope;
	processAllFilesWithWord(arg1 : string, arg2 : GlobalSearchScope, arg3 : Processor<PsiFile>, arg4 : boolean) : boolean;
	processAllFilesWithWordInText(arg1 : string, arg2 : GlobalSearchScope, arg3 : Processor<PsiFile>, arg4 : boolean) : boolean;
	processAllFilesWithWordInComments(arg1 : string, arg2 : GlobalSearchScope, arg3 : Processor<PsiFile>) : boolean;
	processAllFilesWithWordInLiterals(arg1 : string, arg2 : GlobalSearchScope, arg3 : Processor<PsiFile>) : boolean;
	processRequests(arg1 : SearchRequestCollector, arg2 : Processor<PsiReference>) : boolean;
	processRequestsAsync(arg1 : SearchRequestCollector, arg2 : Processor<PsiReference>) : AsyncFuture<boolean>;
	processElementsWithWord(arg1 : TextOccurenceProcessor, arg2 : SearchScope, arg3 : string, arg4 : number, arg5 : boolean) : boolean;
	processElementsWithWord(arg1 : TextOccurenceProcessor, arg2 : SearchScope, arg3 : string, arg4 : number, arg5 : boolean, arg6 : boolean) : boolean;
	processElementsWithWordAsync(arg1 : TextOccurenceProcessor, arg2 : SearchScope, arg3 : string, arg4 : number, arg5 : boolean) : AsyncFuture<boolean>;
	isCheapEnoughToSearch(arg1 : string, arg2 : GlobalSearchScope, arg3 : PsiFile, arg4 : ProgressIndicator) : PsiSearchHelper.SearchCostResult;
}


declare module PsiSearchHelper {
	class SearchCostResult {
		static ZERO_OCCURRENCES : PsiSearchHelper.SearchCostResult;
		static FEW_OCCURRENCES : PsiSearchHelper.SearchCostResult;
		static TOO_MANY_OCCURRENCES : PsiSearchHelper.SearchCostResult;
	}


	interface SearchCostResult extends Enum<PsiSearchHelper.SearchCostResult> {}	class SERVICE extends Object {
		static getInstance(arg1 : Project) : PsiSearchHelper;
	}
}

export = PsiSearchHelper
