import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import ResolveResult = require('nashorn/com/intellij/psi/ResolveResult');
import PsiScopeProcessor = require('nashorn/com/intellij/psi/scope/PsiScopeProcessor');
import PsiMethod = require('nashorn/com/intellij/psi/PsiMethod');
import ASTWrapperPsiElement = require('nashorn/com/intellij/extapi/psi/ASTWrapperPsiElement');
import PsiPolyVariantReference = require('nashorn/com/intellij/psi/PsiPolyVariantReference');
import PsiQualifiedReferenceElement = require('nashorn/com/intellij/psi/PsiQualifiedReferenceElement');
import Set = require('nashorn/java/util/Set');
import BaseScopeProcessor = require('nashorn/com/intellij/psi/scope/BaseScopeProcessor');

declare class AbstractQualifiedReference<T extends AbstractQualifiedReference<T>> {
	reference : PsiReference;
	element : PsiElement;
	canonicalText : string;
	qualifier : T;
	rangeInElement : TextRange;
	referenceName : string;
	soft : boolean;
	resolveInner() : ResolveResult[];
	processVariantsInner(arg1 : PsiScopeProcessor) : boolean;
	processUnqualifiedVariants(arg1 : PsiScopeProcessor) : boolean;
	a(arg1 : PsiMethod) : boolean;
	replaceReference(arg1 : string) : AbstractQualifiedReference;
	parseReference(arg1 : string) : T;
	isAccessible(arg1 : PsiElement) : boolean;
	shortenReferences() : AbstractQualifiedReference;
	a() : void;
	getSeparator() : PsiElement;
	getReferenceNameElement() : PsiElement;
}


declare interface AbstractQualifiedReference<T extends AbstractQualifiedReference<T>> extends ASTWrapperPsiElement, PsiPolyVariantReference, PsiQualifiedReferenceElement {}

declare module AbstractQualifiedReference {
	class AbstractQualifiedReferenceResolvingProcessor {
		results : Set<ResolveResult>;
		addResult(arg1 : ResolveResult) : void;
		a() : boolean;
		setFound() : void;
		process(arg1 : PsiElement) : void;
		getResults() : Set<ResolveResult>;
	}


	interface AbstractQualifiedReferenceResolvingProcessor extends BaseScopeProcessor {}}

export = AbstractQualifiedReference
