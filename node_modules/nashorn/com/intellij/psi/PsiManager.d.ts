import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiModificationTracker = require('nashorn/com/intellij/psi/util/PsiModificationTracker');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import FileViewProvider = require('nashorn/com/intellij/psi/FileViewProvider');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiTreeChangeListener = require('nashorn/com/intellij/psi/PsiTreeChangeListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');

declare class PsiManager {
	project : Project;
	modificationTracker : PsiModificationTracker;
	disposed : boolean;
	constructor();
	static getInstance(arg1 : Project) : PsiManager;
	getProject() : Project;
	findFile(arg1 : VirtualFile) : PsiFile;
	findViewProvider(arg1 : VirtualFile) : FileViewProvider;
	findDirectory(arg1 : VirtualFile) : PsiDirectory;
	areElementsEquivalent(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	reloadFromDisk(arg1 : PsiFile) : void;
	addPsiTreeChangeListener(arg1 : PsiTreeChangeListener) : void;
	addPsiTreeChangeListener(arg1 : PsiTreeChangeListener, arg2 : Disposable) : void;
	removePsiTreeChangeListener(arg1 : PsiTreeChangeListener) : void;
	getModificationTracker() : PsiModificationTracker;
	startBatchFilesProcessingMode() : void;
	finishBatchFilesProcessingMode() : void;
	isDisposed() : boolean;
	dropResolveCaches() : void;
	isInProject(arg1 : PsiElement) : boolean;
}


declare interface PsiManager extends UserDataHolderBase {}
export = PsiManager
