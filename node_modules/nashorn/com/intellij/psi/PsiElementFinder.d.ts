import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import PsiPackage = require('nashorn/com/intellij/psi/PsiPackage');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import Set = require('nashorn/java/util/Set');
import Processor = require('nashorn/com/intellij/util/Processor');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');

declare class PsiElementFinder extends Object {
	static EP_NAME : ExtensionPointName<PsiElementFinder>;
	constructor();
	findClass(arg1 : string, arg2 : GlobalSearchScope) : PsiClass;
	findClasses(arg1 : string, arg2 : GlobalSearchScope) : PsiClass[];
	findPackage(arg1 : string) : PsiPackage;
	getSubPackages(arg1 : PsiPackage, arg2 : GlobalSearchScope) : PsiPackage[];
	getClasses(arg1 : PsiPackage, arg2 : GlobalSearchScope) : PsiClass[];
	getPackageFiles(arg1 : PsiPackage, arg2 : GlobalSearchScope) : PsiFile[];
	getPackageFilesFilter(arg1 : PsiPackage, arg2 : GlobalSearchScope) : Condition<PsiFile>;
	getClassNames(arg1 : PsiPackage, arg2 : GlobalSearchScope) : Set<string>;
	static getClassNames(arg1 : PsiClass[]) : Set<string>;
	processPackageDirectories(arg1 : PsiPackage, arg2 : GlobalSearchScope, arg3 : Processor<PsiDirectory>) : boolean;
	processPackageDirectories(arg1 : PsiPackage, arg2 : GlobalSearchScope, arg3 : Processor<PsiDirectory>, arg4 : boolean) : boolean;
	getClasses(arg1 : string, arg2 : PsiPackage, arg3 : GlobalSearchScope) : PsiClass[];
	static filterByName(arg1 : string, arg2 : PsiClass[]) : PsiClass[];
}

export = PsiElementFinder
