import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import StubElement = require('nashorn/com/intellij/psi/stubs/StubElement');
import List = require('nashorn/java/util/List');
import IStubElementType = require('nashorn/com/intellij/psi/stubs/IStubElementType');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import ObjectStubBase = require('nashorn/com/intellij/psi/stubs/ObjectStubBase');

declare class StubBase<T extends PsiElement> {
	parentStub : StubElement;
	childrenStubs : List<StubElement>;
	cachedPsi : T;
	psi : T;
	stubType : IStubElementType;
	project : Project;
	setPsi(arg1 : T) : void;
	getCachedPsi() : T;
	countChildren(arg1 : IElementType) : number;
	countChildren(arg1 : TokenSet) : number;
	fillFilteredChildren<E extends PsiElement>(arg1 : IElementType, arg2 : E[]) : void;
	fillFilteredChildren<E extends PsiElement>(arg1 : TokenSet, arg2 : E[]) : void;
	getProject() : Project;
	printTree() : string;
	printTree(arg1 : StringBuilder, arg2 : number) : void;
}


declare interface StubBase<T extends PsiElement> extends ObjectStubBase<StubElement>, StubElement<T> {}
export = StubBase
