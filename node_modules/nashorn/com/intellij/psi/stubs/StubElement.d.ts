import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import IStubElementType = require('nashorn/com/intellij/psi/stubs/IStubElementType');
import List = require('nashorn/java/util/List');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import ArrayFactory = require('nashorn/com/intellij/util/ArrayFactory');
import Class = require('nashorn/java/lang/Class');
import Stub = require('nashorn/com/intellij/psi/stubs/Stub');

declare class StubElement<T extends PsiElement> {
	stubType : IStubElementType;
	parentStub : StubElement;
	childrenStubs : List<StubElement>;
	psi : T;
	findChildStubByType<P extends PsiElement>(arg1 : IStubElementType<any, P>) : StubElement<P>;
	getPsi() : T;
	getChildrenByType<E extends PsiElement>(arg1 : IElementType, arg2 : E[]) : E[];
	getChildrenByType<E extends PsiElement>(arg1 : TokenSet, arg2 : E[]) : E[];
	getChildrenByType<E extends PsiElement>(arg1 : IElementType, arg2 : ArrayFactory<E>) : E[];
	getChildrenByType<E extends PsiElement>(arg1 : TokenSet, arg2 : ArrayFactory<E>) : E[];
	getParentStubOfType<E extends PsiElement>(arg1 : Class<E>) : E;
}


declare interface StubElement<T extends PsiElement> extends Stub {}
export = StubElement
