import Language = require('nashorn/com/intellij/lang/Language');
import Set = require('nashorn/java/util/Set');
import List = require('nashorn/java/util/List');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import FileElement = require('nashorn/com/intellij/psi/impl/source/tree/FileElement');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import CharSequence = require('nashorn/java/lang/CharSequence');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');
import FileViewProvider = require('nashorn/com/intellij/psi/FileViewProvider');
import Object = require('nashorn/java/lang/Object');

declare class SingleRootFileViewProvider {
	baseLanguage : Language;
	languages : Set<Language>;
	allFiles : List<PsiFile>;
	eventSystemEnabled : boolean;
	physical : boolean;
	modificationStamp : number;
	knownTreeRoots : FileElement[];
	manager : PsiManager;
	contents : CharSequence;
	virtualFile : VirtualFile;
	document : Document;
	stubBindingRoot : PsiFile;
	constructor(arg1 : PsiManager, arg2 : VirtualFile);
	constructor(arg1 : PsiManager, arg2 : VirtualFile, arg3 : boolean);
	static a(arg1 : VirtualFile, arg2 : Project) : Language;
	getPsiInner(arg1 : Language) : PsiFile;
	a() : void;
	beforeDocumentChanged(arg1 : PsiFile) : void;
	getCachedPsi(arg1 : Language) : PsiFile;
	getKnownTreeRoots() : FileElement[];
	b() : PsiFile;
	isIgnored() : boolean;
	createFile(arg1 : Project, arg2 : VirtualFile, arg3 : FileType) : PsiFile;
	static isTooLarge(arg1 : VirtualFile) : boolean;
	static isTooLargeForIntelligence(arg1 : VirtualFile) : boolean;
	static isTooLargeForContentLoading(arg1 : VirtualFile) : boolean;
	static a(arg1 : VirtualFile) : boolean;
	static doNotCheckFileSizeLimit(arg1 : VirtualFile) : void;
	static isTooLargeForIntelligence(arg1 : VirtualFile, arg2 : number) : boolean;
	static a(arg1 : VirtualFile, arg2 : number) : boolean;
	createFile(arg1 : Language) : PsiFile;
	c() : Document;
	static a(arg1 : PsiFile, arg2 : number) : PsiReference;
	static findElementAt(arg1 : PsiElement, arg2 : number) : PsiElement;
	forceCachedPsi(arg1 : PsiFile) : void;
	d() : SingleRootFileViewProvider.Content;
	a(arg1 : SingleRootFileViewProvider.Content) : void;
	a(arg1 : Document) : CharSequence;
	b(arg1 : Document) : number;
}


declare interface SingleRootFileViewProvider extends UserDataHolderBase, FileViewProvider {}

declare module SingleRootFileViewProvider {
	class PsiFileContent {
		text : CharSequence;
		modificationStamp : number;
	}


	interface PsiFileContent extends SingleRootFileViewProvider.Content {}	class DocumentContent {
		text : CharSequence;
		modificationStamp : number;
	}


	interface DocumentContent extends SingleRootFileViewProvider.Content {}	class VirtualFileContent {
		text : CharSequence;
		modificationStamp : number;
	}


	interface VirtualFileContent extends SingleRootFileViewProvider.Content {}	class Content extends Object {
		text : CharSequence;
		modificationStamp : number;
		getText() : CharSequence;
		getModificationStamp() : number;
	}
}

export = SingleRootFileViewProvider
