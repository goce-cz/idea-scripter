import PsiAnonymousClass = require('nashorn/com/intellij/psi/PsiAnonymousClass');
import PsiArrayAccessExpression = require('nashorn/com/intellij/psi/PsiArrayAccessExpression');
import PsiArrayInitializerExpression = require('nashorn/com/intellij/psi/PsiArrayInitializerExpression');
import PsiAssertStatement = require('nashorn/com/intellij/psi/PsiAssertStatement');
import PsiAssignmentExpression = require('nashorn/com/intellij/psi/PsiAssignmentExpression');
import PsiBinaryExpression = require('nashorn/com/intellij/psi/PsiBinaryExpression');
import PsiBlockStatement = require('nashorn/com/intellij/psi/PsiBlockStatement');
import PsiBreakStatement = require('nashorn/com/intellij/psi/PsiBreakStatement');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import PsiClassInitializer = require('nashorn/com/intellij/psi/PsiClassInitializer');
import PsiClassObjectAccessExpression = require('nashorn/com/intellij/psi/PsiClassObjectAccessExpression');
import PsiCodeBlock = require('nashorn/com/intellij/psi/PsiCodeBlock');
import PsiConditionalExpression = require('nashorn/com/intellij/psi/PsiConditionalExpression');
import PsiContinueStatement = require('nashorn/com/intellij/psi/PsiContinueStatement');
import PsiDeclarationStatement = require('nashorn/com/intellij/psi/PsiDeclarationStatement');
import PsiDocComment = require('nashorn/com/intellij/psi/javadoc/PsiDocComment');
import PsiDocTag = require('nashorn/com/intellij/psi/javadoc/PsiDocTag');
import PsiDocTagValue = require('nashorn/com/intellij/psi/javadoc/PsiDocTagValue');
import PsiDoWhileStatement = require('nashorn/com/intellij/psi/PsiDoWhileStatement');
import PsiEmptyStatement = require('nashorn/com/intellij/psi/PsiEmptyStatement');
import PsiExpression = require('nashorn/com/intellij/psi/PsiExpression');
import PsiExpressionList = require('nashorn/com/intellij/psi/PsiExpressionList');
import PsiExpressionListStatement = require('nashorn/com/intellij/psi/PsiExpressionListStatement');
import PsiExpressionStatement = require('nashorn/com/intellij/psi/PsiExpressionStatement');
import PsiField = require('nashorn/com/intellij/psi/PsiField');
import PsiForStatement = require('nashorn/com/intellij/psi/PsiForStatement');
import PsiForeachStatement = require('nashorn/com/intellij/psi/PsiForeachStatement');
import PsiIdentifier = require('nashorn/com/intellij/psi/PsiIdentifier');
import PsiIfStatement = require('nashorn/com/intellij/psi/PsiIfStatement');
import PsiImportList = require('nashorn/com/intellij/psi/PsiImportList');
import PsiImportStatement = require('nashorn/com/intellij/psi/PsiImportStatement');
import PsiImportStaticStatement = require('nashorn/com/intellij/psi/PsiImportStaticStatement');
import PsiInlineDocTag = require('nashorn/com/intellij/psi/javadoc/PsiInlineDocTag');
import PsiInstanceOfExpression = require('nashorn/com/intellij/psi/PsiInstanceOfExpression');
import PsiJavaToken = require('nashorn/com/intellij/psi/PsiJavaToken');
import PsiKeyword = require('nashorn/com/intellij/psi/PsiKeyword');
import PsiLabeledStatement = require('nashorn/com/intellij/psi/PsiLabeledStatement');
import PsiLiteralExpression = require('nashorn/com/intellij/psi/PsiLiteralExpression');
import PsiLocalVariable = require('nashorn/com/intellij/psi/PsiLocalVariable');
import PsiMethod = require('nashorn/com/intellij/psi/PsiMethod');
import PsiMethodCallExpression = require('nashorn/com/intellij/psi/PsiMethodCallExpression');
import PsiCallExpression = require('nashorn/com/intellij/psi/PsiCallExpression');
import PsiModifierList = require('nashorn/com/intellij/psi/PsiModifierList');
import PsiNewExpression = require('nashorn/com/intellij/psi/PsiNewExpression');
import PsiPackage = require('nashorn/com/intellij/psi/PsiPackage');
import PsiPackageStatement = require('nashorn/com/intellij/psi/PsiPackageStatement');
import PsiParameter = require('nashorn/com/intellij/psi/PsiParameter');
import PsiParameterList = require('nashorn/com/intellij/psi/PsiParameterList');
import PsiParenthesizedExpression = require('nashorn/com/intellij/psi/PsiParenthesizedExpression');
import PsiPostfixExpression = require('nashorn/com/intellij/psi/PsiPostfixExpression');
import PsiPrefixExpression = require('nashorn/com/intellij/psi/PsiPrefixExpression');
import PsiJavaCodeReferenceElement = require('nashorn/com/intellij/psi/PsiJavaCodeReferenceElement');
import PsiImportStaticReferenceElement = require('nashorn/com/intellij/psi/PsiImportStaticReferenceElement');
import PsiReferenceExpression = require('nashorn/com/intellij/psi/PsiReferenceExpression');
import PsiMethodReferenceExpression = require('nashorn/com/intellij/psi/PsiMethodReferenceExpression');
import PsiReferenceList = require('nashorn/com/intellij/psi/PsiReferenceList');
import PsiReferenceParameterList = require('nashorn/com/intellij/psi/PsiReferenceParameterList');
import PsiTypeParameterList = require('nashorn/com/intellij/psi/PsiTypeParameterList');
import PsiReturnStatement = require('nashorn/com/intellij/psi/PsiReturnStatement');
import PsiStatement = require('nashorn/com/intellij/psi/PsiStatement');
import PsiSuperExpression = require('nashorn/com/intellij/psi/PsiSuperExpression');
import PsiSwitchLabelStatement = require('nashorn/com/intellij/psi/PsiSwitchLabelStatement');
import PsiSwitchStatement = require('nashorn/com/intellij/psi/PsiSwitchStatement');
import PsiSynchronizedStatement = require('nashorn/com/intellij/psi/PsiSynchronizedStatement');
import PsiThisExpression = require('nashorn/com/intellij/psi/PsiThisExpression');
import PsiThrowStatement = require('nashorn/com/intellij/psi/PsiThrowStatement');
import PsiTryStatement = require('nashorn/com/intellij/psi/PsiTryStatement');
import PsiCatchSection = require('nashorn/com/intellij/psi/PsiCatchSection');
import PsiResourceList = require('nashorn/com/intellij/psi/PsiResourceList');
import PsiResourceVariable = require('nashorn/com/intellij/psi/PsiResourceVariable');
import PsiTypeElement = require('nashorn/com/intellij/psi/PsiTypeElement');
import PsiTypeCastExpression = require('nashorn/com/intellij/psi/PsiTypeCastExpression');
import PsiVariable = require('nashorn/com/intellij/psi/PsiVariable');
import PsiWhileStatement = require('nashorn/com/intellij/psi/PsiWhileStatement');
import PsiJavaFile = require('nashorn/com/intellij/psi/PsiJavaFile');
import ImplicitVariable = require('nashorn/com/intellij/psi/ImplicitVariable');
import PsiDocToken = require('nashorn/com/intellij/psi/javadoc/PsiDocToken');
import PsiTypeParameter = require('nashorn/com/intellij/psi/PsiTypeParameter');
import PsiAnnotation = require('nashorn/com/intellij/psi/PsiAnnotation');
import PsiAnnotationParameterList = require('nashorn/com/intellij/psi/PsiAnnotationParameterList');
import PsiArrayInitializerMemberValue = require('nashorn/com/intellij/psi/PsiArrayInitializerMemberValue');
import PsiNameValuePair = require('nashorn/com/intellij/psi/PsiNameValuePair');
import PsiAnnotationMethod = require('nashorn/com/intellij/psi/PsiAnnotationMethod');
import PsiEnumConstant = require('nashorn/com/intellij/psi/PsiEnumConstant');
import PsiEnumConstantInitializer = require('nashorn/com/intellij/psi/PsiEnumConstantInitializer');
import JavaCodeFragment = require('nashorn/com/intellij/psi/JavaCodeFragment');
import PsiPolyadicExpression = require('nashorn/com/intellij/psi/PsiPolyadicExpression');
import PsiLambdaExpression = require('nashorn/com/intellij/psi/PsiLambdaExpression');
import PsiElementVisitor = require('nashorn/com/intellij/psi/PsiElementVisitor');

declare class JavaElementVisitor {
	constructor();
	visitAnonymousClass(arg1 : PsiAnonymousClass) : void;
	visitArrayAccessExpression(arg1 : PsiArrayAccessExpression) : void;
	visitArrayInitializerExpression(arg1 : PsiArrayInitializerExpression) : void;
	visitAssertStatement(arg1 : PsiAssertStatement) : void;
	visitAssignmentExpression(arg1 : PsiAssignmentExpression) : void;
	visitBinaryExpression(arg1 : PsiBinaryExpression) : void;
	visitBlockStatement(arg1 : PsiBlockStatement) : void;
	visitBreakStatement(arg1 : PsiBreakStatement) : void;
	visitClass(arg1 : PsiClass) : void;
	visitClassInitializer(arg1 : PsiClassInitializer) : void;
	visitClassObjectAccessExpression(arg1 : PsiClassObjectAccessExpression) : void;
	visitCodeBlock(arg1 : PsiCodeBlock) : void;
	visitConditionalExpression(arg1 : PsiConditionalExpression) : void;
	visitContinueStatement(arg1 : PsiContinueStatement) : void;
	visitDeclarationStatement(arg1 : PsiDeclarationStatement) : void;
	visitDocComment(arg1 : PsiDocComment) : void;
	visitDocTag(arg1 : PsiDocTag) : void;
	visitDocTagValue(arg1 : PsiDocTagValue) : void;
	visitDoWhileStatement(arg1 : PsiDoWhileStatement) : void;
	visitEmptyStatement(arg1 : PsiEmptyStatement) : void;
	visitExpression(arg1 : PsiExpression) : void;
	visitExpressionList(arg1 : PsiExpressionList) : void;
	visitExpressionListStatement(arg1 : PsiExpressionListStatement) : void;
	visitExpressionStatement(arg1 : PsiExpressionStatement) : void;
	visitField(arg1 : PsiField) : void;
	visitForStatement(arg1 : PsiForStatement) : void;
	visitForeachStatement(arg1 : PsiForeachStatement) : void;
	visitIdentifier(arg1 : PsiIdentifier) : void;
	visitIfStatement(arg1 : PsiIfStatement) : void;
	visitImportList(arg1 : PsiImportList) : void;
	visitImportStatement(arg1 : PsiImportStatement) : void;
	visitImportStaticStatement(arg1 : PsiImportStaticStatement) : void;
	visitInlineDocTag(arg1 : PsiInlineDocTag) : void;
	visitInstanceOfExpression(arg1 : PsiInstanceOfExpression) : void;
	visitJavaToken(arg1 : PsiJavaToken) : void;
	visitKeyword(arg1 : PsiKeyword) : void;
	visitLabeledStatement(arg1 : PsiLabeledStatement) : void;
	visitLiteralExpression(arg1 : PsiLiteralExpression) : void;
	visitLocalVariable(arg1 : PsiLocalVariable) : void;
	visitMethod(arg1 : PsiMethod) : void;
	visitMethodCallExpression(arg1 : PsiMethodCallExpression) : void;
	visitCallExpression(arg1 : PsiCallExpression) : void;
	visitModifierList(arg1 : PsiModifierList) : void;
	visitNewExpression(arg1 : PsiNewExpression) : void;
	visitPackage(arg1 : PsiPackage) : void;
	visitPackageStatement(arg1 : PsiPackageStatement) : void;
	visitParameter(arg1 : PsiParameter) : void;
	visitParameterList(arg1 : PsiParameterList) : void;
	visitParenthesizedExpression(arg1 : PsiParenthesizedExpression) : void;
	visitPostfixExpression(arg1 : PsiPostfixExpression) : void;
	visitPrefixExpression(arg1 : PsiPrefixExpression) : void;
	visitReferenceElement(arg1 : PsiJavaCodeReferenceElement) : void;
	visitImportStaticReferenceElement(arg1 : PsiImportStaticReferenceElement) : void;
	visitReferenceExpression(arg1 : PsiReferenceExpression) : void;
	visitMethodReferenceExpression(arg1 : PsiMethodReferenceExpression) : void;
	visitReferenceList(arg1 : PsiReferenceList) : void;
	visitReferenceParameterList(arg1 : PsiReferenceParameterList) : void;
	visitTypeParameterList(arg1 : PsiTypeParameterList) : void;
	visitReturnStatement(arg1 : PsiReturnStatement) : void;
	visitStatement(arg1 : PsiStatement) : void;
	visitSuperExpression(arg1 : PsiSuperExpression) : void;
	visitSwitchLabelStatement(arg1 : PsiSwitchLabelStatement) : void;
	visitSwitchStatement(arg1 : PsiSwitchStatement) : void;
	visitSynchronizedStatement(arg1 : PsiSynchronizedStatement) : void;
	visitThisExpression(arg1 : PsiThisExpression) : void;
	visitThrowStatement(arg1 : PsiThrowStatement) : void;
	visitTryStatement(arg1 : PsiTryStatement) : void;
	visitCatchSection(arg1 : PsiCatchSection) : void;
	visitResourceList(arg1 : PsiResourceList) : void;
	visitResourceVariable(arg1 : PsiResourceVariable) : void;
	visitTypeElement(arg1 : PsiTypeElement) : void;
	visitTypeCastExpression(arg1 : PsiTypeCastExpression) : void;
	visitVariable(arg1 : PsiVariable) : void;
	visitWhileStatement(arg1 : PsiWhileStatement) : void;
	visitJavaFile(arg1 : PsiJavaFile) : void;
	visitImplicitVariable(arg1 : ImplicitVariable) : void;
	visitDocToken(arg1 : PsiDocToken) : void;
	visitTypeParameter(arg1 : PsiTypeParameter) : void;
	visitAnnotation(arg1 : PsiAnnotation) : void;
	visitAnnotationParameterList(arg1 : PsiAnnotationParameterList) : void;
	visitAnnotationArrayInitializer(arg1 : PsiArrayInitializerMemberValue) : void;
	visitNameValuePair(arg1 : PsiNameValuePair) : void;
	visitAnnotationMethod(arg1 : PsiAnnotationMethod) : void;
	visitEnumConstant(arg1 : PsiEnumConstant) : void;
	visitEnumConstantInitializer(arg1 : PsiEnumConstantInitializer) : void;
	visitCodeFragment(arg1 : JavaCodeFragment) : void;
	visitPolyadicExpression(arg1 : PsiPolyadicExpression) : void;
	visitLambdaExpression(arg1 : PsiLambdaExpression) : void;
}


declare interface JavaElementVisitor extends PsiElementVisitor {}
export = JavaElementVisitor
