import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import ItemPresentation = require('nashorn/com/intellij/navigation/ItemPresentation');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import Class = require('nashorn/java/lang/Class');
import ElementBase = require('nashorn/com/intellij/psi/impl/ElementBase');
import NavigatablePsiElement = require('nashorn/com/intellij/psi/NavigatablePsiElement');

declare class PsiElementBase {
	firstChild : PsiElement;
	lastChild : PsiElement;
	nextSibling : PsiElement;
	prevSibling : PsiElement;
	reference : PsiReference;
	references : PsiReference[];
	context : PsiElement;
	navigationElement : PsiElement;
	originalElement : PsiElement;
	resolveScope : GlobalSearchScope;
	useScope : SearchScope;
	project : Project;
	presentation : ItemPresentation;
	containingFile : PsiFile;
	physical : boolean;
	writable : boolean;
	valid : boolean;
	name : string;
	manager : PsiManager;
	constructor();
	notNullChild<T>(arg1 : T) : T;
	findChildrenByClass<T>(arg1 : Class<T>) : T[];
	findChildByClass<T>(arg1 : Class<T>) : T;
	findNotNullChildByClass<T>(arg1 : Class<T>) : T;
}


declare interface PsiElementBase extends ElementBase, NavigatablePsiElement {}
export = PsiElementBase
