import NotNullLazyValue = require('nashorn/com/intellij/openapi/util/NotNullLazyValue');
import Icon = require('nashorn/javax/swing/Icon');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import RowIcon = require('nashorn/com/intellij/ui/RowIcon');
import Iconable = require('nashorn/com/intellij/openapi/util/Iconable');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');
import Object = require('nashorn/java/lang/Object');

declare class ElementBase {
	static FLAGS_LOCKED : number;
	static ICON_PLACEHOLDER : NotNullLazyValue<Icon>;
	constructor();
	computeIcon(arg1 : number) : Icon;
	static computeIconNow(arg1 : PsiElement, arg2 : number) : Icon;
	computeBaseIcon(arg1 : number) : Icon;
	getBaseIcon() : Icon;
	static isNativeFileType(arg1 : FileType) : boolean;
	getAdjustedBaseIcon(arg1 : Icon, arg2 : number) : Icon;
	isVisibilitySupported() : boolean;
	static overlayIcons(arg1 : Icon[]) : Icon;
	static buildRowIcon(arg1 : Icon, arg2 : Icon) : RowIcon;
	static iconWithVisibilityIfNeeded(arg1 : number, arg2 : Icon, arg3 : Icon) : Icon;
	getElementIcon(arg1 : number) : Icon;
	static createLayeredIcon(arg1 : Iconable, arg2 : Icon, arg3 : number) : RowIcon;
	static transformFlags(arg1 : PsiElement, arg2 : number) : number;
	static registerIconLayer(arg1 : number, arg2 : Icon) : void;
}


declare interface ElementBase extends UserDataHolderBase, Iconable {}

declare module ElementBase {
	class IconLayer extends Object {
	}
	class ElementIconRequest extends Object {
		element : PsiElement;
		flags : number;
		constructor(arg1 : PsiElement, arg2 : number);
		getElement() : PsiElement;
		getFlags() : number;
	}
}

export = ElementBase
