import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import Collection = require('nashorn/java/util/Collection');
import PsiElementBase = require('nashorn/com/intellij/psi/impl/PsiElementBase');
import PsiDirectoryContainer = require('nashorn/com/intellij/psi/PsiDirectoryContainer');
import Queryable = require('nashorn/com/intellij/openapi/ui/Queryable');

declare class PsiPackageBase {
	qualifiedName : string;
	directories : PsiDirectory[];
	name : string;
	parentPackage : PsiPackageBase;
	manager : PsiManager;
	children : PsiElement[];
	parent : PsiElement;
	containingFile : PsiFile;
	textRange : TextRange;
	startOffsetInParent : number;
	textLength : number;
	textOffset : number;
	text : string;
	writable : boolean;
	physical : boolean;
	node : ASTNode;
	constructor(arg1 : PsiManager, arg2 : string);
	getAllDirectories() : Collection<PsiDirectory>;
	getAllDirectories(arg1 : boolean) : Collection<PsiDirectory>;
	findPackage(arg1 : string) : PsiElement;
	createInstance(arg1 : PsiManager, arg2 : string) : PsiPackageBase;
	getQualifiedName() : string;
	checkSetName(arg1 : string) : void;
	getParentPackage() : PsiPackageBase;
}


declare interface PsiPackageBase extends PsiElementBase, PsiDirectoryContainer, Queryable {}
export = PsiPackageBase
