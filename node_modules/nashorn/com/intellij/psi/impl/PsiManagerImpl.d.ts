import Topic = require('nashorn/com/intellij/util/messages/Topic');
import AnyPsiChangeListener = require('nashorn/com/intellij/psi/impl/AnyPsiChangeListener');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import FileManager = require('nashorn/com/intellij/psi/impl/file/impl/FileManager');
import PsiModificationTracker = require('nashorn/com/intellij/psi/util/PsiModificationTracker');
import FileDocumentManager = require('nashorn/com/intellij/openapi/fileEditor/FileDocumentManager');
import PsiBuilderFactory = require('nashorn/com/intellij/lang/PsiBuilderFactory');
import FileIndexFacade = require('nashorn/com/intellij/openapi/roots/FileIndexFacade');
import MessageBus = require('nashorn/com/intellij/util/messages/MessageBus');
import VirtualFileFilter = require('nashorn/com/intellij/openapi/vfs/VirtualFileFilter');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import PsiTreeChangeEventImpl = require('nashorn/com/intellij/psi/impl/PsiTreeChangeEventImpl');
import PsiTreeChangePreprocessor = require('nashorn/com/intellij/psi/impl/PsiTreeChangePreprocessor');
import PsiManagerEx = require('nashorn/com/intellij/psi/impl/PsiManagerEx');

declare class PsiManagerImpl {
	static ANY_PSI_CHANGE_TOPIC : Topic<AnyPsiChangeListener>;
	disposed : boolean;
	project : Project;
	fileManager : FileManager;
	modificationTracker : PsiModificationTracker;
	batchFilesProcessingMode : boolean;
	constructor(arg1 : Project, arg2 : FileDocumentManager, arg3 : PsiBuilderFactory, arg4 : FileIndexFacade, arg5 : MessageBus, arg6 : PsiModificationTracker);
	setAssertOnFileLoadingFilter(arg1 : VirtualFileFilter, arg2 : Disposable) : void;
	beforeChildrenChange(arg1 : PsiTreeChangeEventImpl) : void;
	beforeChildMovement(arg1 : PsiTreeChangeEventImpl) : void;
	beforePropertyChange(arg1 : PsiTreeChangeEventImpl) : void;
	childAdded(arg1 : PsiTreeChangeEventImpl) : void;
	childRemoved(arg1 : PsiTreeChangeEventImpl) : void;
	childReplaced(arg1 : PsiTreeChangeEventImpl) : void;
	childMoved(arg1 : PsiTreeChangeEventImpl) : void;
	childrenChanged(arg1 : PsiTreeChangeEventImpl) : void;
	propertyChanged(arg1 : PsiTreeChangeEventImpl) : void;
	addTreeChangePreprocessor(arg1 : PsiTreeChangePreprocessor) : void;
	a(arg1 : PsiTreeChangeEventImpl) : void;
	cleanupForNextTest() : void;
}


declare interface PsiManagerImpl extends PsiManagerEx {}
export = PsiManagerImpl
