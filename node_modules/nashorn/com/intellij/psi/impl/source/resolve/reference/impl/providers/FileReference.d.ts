import Object = require('nashorn/java/lang/Object');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import FileReferenceSet = require('nashorn/com/intellij/psi/impl/source/resolve/reference/impl/providers/FileReferenceSet');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Collection = require('nashorn/java/util/Collection');
import PsiFileSystemItem = require('nashorn/com/intellij/psi/PsiFileSystemItem');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import ResolveResult = require('nashorn/com/intellij/psi/ResolveResult');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import PsiFileSystemItemProcessor = require('nashorn/com/intellij/psi/search/PsiFileSystemItemProcessor');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import FileReferenceHelper = require('nashorn/com/intellij/psi/impl/source/resolve/reference/impl/providers/FileReferenceHelper');
import PsiFileReference = require('nashorn/com/intellij/psi/impl/source/resolve/reference/impl/providers/PsiFileReference');
import FileReferenceOwner = require('nashorn/com/intellij/psi/impl/source/resolve/reference/impl/providers/FileReferenceOwner');
import PsiPolyVariantReference = require('nashorn/com/intellij/psi/PsiPolyVariantReference');
import LocalQuickFixProvider = require('nashorn/com/intellij/codeInspection/LocalQuickFixProvider');
import EmptyResolveMessageProvider = require('nashorn/com/intellij/codeInsight/daemon/EmptyResolveMessageProvider');
import BindablePsiReference = require('nashorn/com/intellij/refactoring/rename/BindablePsiReference');
import ResolveCache = require('nashorn/com/intellij/psi/impl/source/resolve/ResolveCache');

declare class FileReference {
	static EMPTY : FileReference[];
	fileNameToCreate : string;
	newFileTemplateName : string;
	variants : Object[];
	element : PsiElement;
	rangeInElement : TextRange;
	canonicalText : string;
	text : string;
	soft : boolean;
	index : number;
	unresolvedMessagePattern : string;
	last : boolean;
	fileReferenceSet : FileReferenceSet;
	quickFixes : LocalQuickFix[];
	lastFileReference : FileReference;
	constructor(arg1 : FileReferenceSet, arg2 : TextRange, arg3 : number, arg4 : string);
	constructor(arg1 : FileReference);
	static findFileReference(arg1 : PsiReference) : FileReference;
	getContexts() : Collection<PsiFileSystemItem>;
	innerResolve(arg1 : boolean, arg2 : PsiFile) : ResolveResult[];
	innerResolveInContext(arg1 : string, arg2 : PsiFileSystemItem, arg3 : Collection<ResolveResult>, arg4 : boolean) : void;
	getFileNameToCreate() : string;
	getNewFileTemplateName() : string;
	static a(arg1 : PsiDirectory, arg2 : boolean) : boolean;
	a(arg1 : string) : boolean;
	decode(arg1 : string) : string;
	createLookupItem(arg1 : PsiElement) : Object;
	static getOriginalFile(arg1 : PsiFileSystemItem) : PsiFileSystemItem;
	encode(arg1 : string, arg2 : PsiElement) : string;
	static processVariants(arg1 : PsiFileSystemItem, arg2 : PsiFileSystemItemProcessor) : void;
	a() : FileReference;
	innerSingleResolve(arg1 : boolean, arg2 : PsiFile) : PsiFileSystemItem;
	getText() : string;
	bindToElement(arg1 : PsiElement, arg2 : boolean) : PsiElement;
	getContextsForBindToElement(arg1 : VirtualFile, arg2 : Project, arg3 : FileReferenceHelper) : Collection<PsiFileSystemItem>;
	fixRefText(arg1 : string) : PsiElement;
	rename(arg1 : string) : PsiElement;
	static getHelpers() : FileReferenceHelper[];
	getIndex() : number;
	isLast() : boolean;
	getFileReferenceSet() : FileReferenceSet;
}


declare interface FileReference extends PsiFileReference, FileReferenceOwner, PsiPolyVariantReference, LocalQuickFixProvider, EmptyResolveMessageProvider, BindablePsiReference {}

declare module FileReference {
	class MyResolver {
	}


	interface MyResolver extends ResolveCache.PolyVariantContextResolver<FileReference> {}}

export = FileReference
