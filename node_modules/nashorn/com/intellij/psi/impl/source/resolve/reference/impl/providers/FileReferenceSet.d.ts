import Object = require('nashorn/java/lang/Object');
import CustomizableReferenceProvider = require('nashorn/com/intellij/psi/impl/source/resolve/reference/impl/providers/CustomizableReferenceProvider');
import Function = require('nashorn/com/intellij/util/Function');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Collection = require('nashorn/java/util/Collection');
import PsiFileSystemItem = require('nashorn/com/intellij/psi/PsiFileSystemItem');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import FileReference = require('nashorn/com/intellij/psi/impl/source/resolve/reference/impl/providers/FileReference');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import PsiReferenceProvider = require('nashorn/com/intellij/psi/PsiReferenceProvider');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import List = require('nashorn/java/util/List');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');

declare class FileReferenceSet extends Object {
	static DEFAULT_PATH_EVALUATOR_OPTION : CustomizableReferenceProvider.CustomizationKey<Function<PsiFile, Collection<PsiFileSystemItem>>>;
	static ABSOLUTE_TOP_LEVEL : Function<PsiFile, Collection<PsiFileSystemItem>>;
	static FILE_FILTER : Condition<PsiFileSystemItem>;
	static DIRECTORY_FILTER : Condition<PsiFileSystemItem>;
	separatorString : string;
	element : PsiElement;
	caseSensitive : boolean;
	endingSlashNotAllowed : boolean;
	startInElement : number;
	allReferences : FileReference[];
	defaultContexts : Collection<PsiFileSystemItem>;
	pathString : string;
	absolutePathReference : boolean;
	lastReference : FileReference;
	suitableFileTypes : FileType[];
	emptyPathAllowed : boolean;
	constructor(arg1 : string, arg2 : PsiElement, arg3 : number, arg4 : PsiReferenceProvider, arg5 : boolean, arg6 : boolean, arg7 : FileType[]);
	constructor(arg1 : string, arg2 : PsiElement, arg3 : number, arg4 : PsiReferenceProvider, arg5 : boolean, arg6 : boolean, arg7 : FileType[], arg8 : boolean);
	constructor(arg1 : string, arg2 : PsiElement, arg3 : number, arg4 : PsiReferenceProvider, arg5 : boolean);
	constructor(arg1 : string, arg2 : PsiElement, arg3 : number, arg4 : PsiReferenceProvider, arg5 : boolean, arg6 : boolean);
	constructor(arg1 : PsiElement);
	getNewAbsolutePath(arg1 : PsiFileSystemItem, arg2 : string) : string;
	getSeparatorString() : string;
	getExtraContexts() : Collection<PsiFileSystemItem>;
	static createSet(arg1 : PsiElement, arg2 : boolean, arg3 : boolean, arg4 : boolean) : FileReferenceSet;
	getElement() : PsiElement;
	setElement(arg1 : PsiElement) : void;
	isCaseSensitive() : boolean;
	isEndingSlashNotAllowed() : boolean;
	getStartInElement() : number;
	createFileReference(arg1 : TextRange, arg2 : number, arg3 : string) : FileReference;
	reparse() : void;
	reparse(arg1 : string, arg2 : number) : List<FileReference>;
	getReference(arg1 : number) : FileReference;
	getAllReferences() : FileReference[];
	isSoft() : boolean;
	isUrlEncoded() : boolean;
	getDefaultContexts() : Collection<PsiFileSystemItem>;
	computeDefaultContexts() : Collection<PsiFileSystemItem>;
	getContainingFile() : PsiFile;
	a(arg1 : PsiFile) : Collection<PsiFileSystemItem>;
	getPathString() : string;
	isAbsolutePathReference() : boolean;
	useIncludingFileAsContext() : boolean;
	resolve() : PsiFileSystemItem;
	getLastReference() : FileReference;
	static getAbsoluteTopLevelDirLocations(arg1 : PsiFile) : Collection<PsiFileSystemItem>;
	toFileSystemItems(arg1 : VirtualFile[]) : Collection<PsiFileSystemItem>;
	toFileSystemItems(arg1 : Collection<VirtualFile>) : Collection<PsiFileSystemItem>;
	getReferenceCompletionFilter() : Condition<PsiFileSystemItem>;
	addCustomization<Option>(arg1 : CustomizableReferenceProvider.CustomizationKey<Option>, arg2 : Option) : void;
	couldBeConvertedTo(arg1 : boolean) : boolean;
	absoluteUrlNeedsStartSlash() : boolean;
	getSuitableFileTypes() : FileType[];
	isEmptyPathAllowed() : boolean;
	setEmptyPathAllowed(arg1 : boolean) : void;
}

export = FileReferenceSet
