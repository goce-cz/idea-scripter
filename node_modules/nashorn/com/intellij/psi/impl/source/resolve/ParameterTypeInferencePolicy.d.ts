import Object = require('nashorn/java/lang/Object');
import PsiExpression = require('nashorn/com/intellij/psi/PsiExpression');
import PsiExpressionList = require('nashorn/com/intellij/psi/PsiExpressionList');
import PsiCallExpression = require('nashorn/com/intellij/psi/PsiCallExpression');
import PsiTypeParameter = require('nashorn/com/intellij/psi/PsiTypeParameter');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import ConstraintType = require('nashorn/com/intellij/psi/ConstraintType');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');

declare class ParameterTypeInferencePolicy extends Object {
	varargsIgnored : boolean;
	constructor();
	inferTypeConstraintFromCallContext(arg1 : PsiExpression, arg2 : PsiExpressionList, arg3 : PsiCallExpression, arg4 : PsiTypeParameter) : Pair<PsiType, ConstraintType>;
	getDefaultExpectedType(arg1 : PsiCallExpression) : PsiType;
	getInferredTypeWithNoConstraint(arg1 : PsiManager, arg2 : PsiType) : Pair<PsiType, ConstraintType>;
	adjustInferredType(arg1 : PsiManager, arg2 : PsiType, arg3 : ConstraintType) : PsiType;
	isVarargsIgnored() : boolean;
}

export = ParameterTypeInferencePolicy
