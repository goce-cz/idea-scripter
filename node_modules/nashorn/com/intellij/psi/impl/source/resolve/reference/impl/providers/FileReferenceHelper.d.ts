import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import FileReference = require('nashorn/com/intellij/psi/impl/source/resolve/reference/impl/providers/FileReference');
import List = require('nashorn/java/util/List');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import PsiFileSystemItem = require('nashorn/com/intellij/psi/PsiFileSystemItem');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import Collection = require('nashorn/java/util/Collection');

declare class FileReferenceHelper extends Object {
	static EP_NAME : ExtensionPointName<FileReferenceHelper>;
	fallback : boolean;
	constructor();
	trimUrl(arg1 : string) : string;
	registerFixes(arg1 : FileReference) : List<LocalQuickFix>;
	getPsiFileSystemItem(arg1 : Project, arg2 : VirtualFile) : PsiFileSystemItem;
	static getPsiFileSystemItem(arg1 : PsiManager, arg2 : VirtualFile) : PsiFileSystemItem;
	findRoot(arg1 : Project, arg2 : VirtualFile) : PsiFileSystemItem;
	getRoots(arg1 : Module) : Collection<PsiFileSystemItem>;
	getContexts(arg1 : Project, arg2 : VirtualFile) : Collection<PsiFileSystemItem>;
	isMine(arg1 : Project, arg2 : VirtualFile) : boolean;
	isFallback() : boolean;
}

export = FileReferenceHelper
