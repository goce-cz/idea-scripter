import Key = require('nashorn/com/intellij/openapi/util/Key');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import FileElement = require('nashorn/com/intellij/psi/impl/source/tree/FileElement');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import IStubFileElementType = require('nashorn/com/intellij/psi/tree/IStubFileElementType');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Language = require('nashorn/com/intellij/lang/Language');
import FileViewProvider = require('nashorn/com/intellij/psi/FileViewProvider');
import StubElement = require('nashorn/com/intellij/psi/stubs/StubElement');
import StubTree = require('nashorn/com/intellij/psi/stubs/StubTree');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import ItemPresentation = require('nashorn/com/intellij/navigation/ItemPresentation');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import FileASTNode = require('nashorn/com/intellij/lang/FileASTNode');
import CharSequence = require('nashorn/java/lang/CharSequence');
import TreeElement = require('nashorn/com/intellij/psi/impl/source/tree/TreeElement');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import Iterator = require('nashorn/java/util/Iterator');
import List = require('nashorn/java/util/List');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import StubBasedPsiElementBase = require('nashorn/com/intellij/extapi/psi/StubBasedPsiElementBase');
import CompositeElement = require('nashorn/com/intellij/psi/impl/source/tree/CompositeElement');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import Class = require('nashorn/java/lang/Class');
import Getter = require('nashorn/com/intellij/openapi/util/Getter');
import Map = require('nashorn/java/util/Map');
import ElementBase = require('nashorn/com/intellij/psi/impl/ElementBase');
import PsiFileEx = require('nashorn/com/intellij/psi/impl/PsiFileEx');
import PsiFileWithStubSupport = require('nashorn/com/intellij/psi/impl/source/PsiFileWithStubSupport');
import Queryable = require('nashorn/com/intellij/openapi/ui/Queryable');

declare class PsiFileImpl {
	static STUB_PSI_MISMATCH : string;
	static BUILDING_STUB : Key<boolean>;
	contentElementType : IElementType;
	directory : boolean;
	treeElement : FileElement;
	virtualFile : VirtualFile;
	valid : boolean;
	contentsLoaded : boolean;
	elementTypeForStubBuilder : IStubFileElementType;
	text : string;
	textLength : number;
	textRange : TextRange;
	nextSibling : PsiElement;
	prevSibling : PsiElement;
	modificationStamp : number;
	name : string;
	writable : boolean;
	parent : PsiDirectory;
	containingDirectory : PsiDirectory;
	containingFile : PsiFile;
	originalFile : PsiFile;
	psiRoots : PsiFile[];
	physical : boolean;
	language : Language;
	viewProvider : FileViewProvider;
	templateDataFile : boolean;
	context : PsiElement;
	stub : StubElement;
	stubTree : StubTree;
	manager : PsiManager;
	navigationElement : PsiElement;
	originalElement : PsiElement;
	children : PsiElement[];
	firstChild : PsiElement;
	lastChild : PsiElement;
	startOffsetInParent : number;
	textOffset : number;
	reference : PsiReference;
	references : PsiReference[];
	resolveScope : GlobalSearchScope;
	useScope : SearchScope;
	presentation : ItemPresentation;
	project : Project;
	node : FileASTNode;
	setContentElementType(arg1 : IElementType) : void;
	getContentElementType() : IElementType;
	init(arg1 : IElementType, arg2 : IElementType) : void;
	createContentLeafElement(arg1 : CharSequence) : TreeElement;
	getTreeElement() : FileElement;
	a() : FileElement;
	isPsiUpToDate(arg1 : VirtualFile) : boolean;
	b() : FileElement;
	static a(arg1 : ASTNode, arg2 : Iterator<StubElement<any>>, arg3 : StubElement) : ASTNode;
	static a(arg1 : List<Pair<StubBasedPsiElementBase, CompositeElement>>) : void;
	a(arg1 : ASTNode, arg2 : Document) : List<Pair<StubBasedPsiElementBase, CompositeElement>>;
	getElementTypeForStubBuilder() : IStubFileElementType;
	reportStubAstMismatch(arg1 : string, arg2 : StubTree, arg3 : Document) : void;
	c() : void;
	createFileElement(arg1 : CharSequence) : FileElement;
	unloadContent() : void;
	a(arg1 : string) : void;
	clearCaches() : void;
	b(arg1 : string) : void;
	setOriginalFile(arg1 : PsiFile) : void;
	setTreeElementPointer(arg1 : FileElement) : void;
	findChildrenByClass<T>(arg1 : Class<T>) : T[];
	findChildByClass<T>(arg1 : Class<T>) : T;
	isTemplateDataFile() : boolean;
	getStub() : StubElement;
	d() : StubTree;
	cloneImpl(arg1 : FileElement) : PsiFileImpl;
	e() : boolean;
	a(arg1 : FileElement) : Getter<FileElement>;
	calcTreeElement() : FileElement;
	calcStubTree() : StubTree;
	f() : void;
	static putInfo(arg1 : PsiFile, arg2 : Map<string, string>) : void;
}


declare interface PsiFileImpl extends ElementBase, PsiFileEx, PsiFileWithStubSupport, Queryable {}
export = PsiFileImpl
