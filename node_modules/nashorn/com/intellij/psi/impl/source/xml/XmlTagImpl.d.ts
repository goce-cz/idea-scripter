import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import XmlElementDescriptor = require('nashorn/com/intellij/xml/XmlElementDescriptor');
import XmlAttribute = require('nashorn/com/intellij/psi/xml/XmlAttribute');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import Map = require('nashorn/java/util/Map');
import XmlTagValue = require('nashorn/com/intellij/psi/xml/XmlTagValue');
import PsiMetaData = require('nashorn/com/intellij/psi/meta/PsiMetaData');
import XmlTagChild = require('nashorn/com/intellij/psi/xml/XmlTagChild');
import XmlFile = require('nashorn/com/intellij/psi/xml/XmlFile');
import XmlNSDescriptor = require('nashorn/com/intellij/xml/XmlNSDescriptor');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import TagNameReference = require('nashorn/com/intellij/psi/impl/source/xml/TagNameReference');
import SchemaPrefixReference = require('nashorn/com/intellij/psi/impl/source/xml/SchemaPrefixReference');
import CachedValue = require('nashorn/com/intellij/psi/util/CachedValue');
import PsiMetaOwner = require('nashorn/com/intellij/psi/meta/PsiMetaOwner');
import List = require('nashorn/java/util/List');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import BidirectionalMap = require('nashorn/com/intellij/util/containers/BidirectionalMap');
import TreeElement = require('nashorn/com/intellij/psi/impl/source/tree/TreeElement');
import XmlElementImpl = require('nashorn/com/intellij/psi/impl/source/xml/XmlElementImpl');
import PomTransactionBase = require('nashorn/com/intellij/pom/impl/PomTransactionBase');
import PomModel = require('nashorn/com/intellij/pom/PomModel');

declare class XmlTagImpl {
	references : PsiReference[];
	empty : boolean;
	reference : PsiReference;
	descriptor : XmlElementDescriptor;
	name : string;
	attributes : XmlAttribute[];
	subTags : XmlTag[];
	namespace : string;
	namespacePrefix : string;
	localName : string;
	localNamespaceDeclarations : Map<string, string>;
	value : XmlTagValue;
	metaData : PsiMetaData;
	parentTag : XmlTag;
	nextSiblingInTag : XmlTagChild;
	prevSiblingInTag : XmlTagChild;
	constructor();
	static a(arg1 : XmlFile) : XmlNSDescriptor;
	static a(arg1 : string, arg2 : XmlTagImpl) : string;
	a(arg1 : ASTNode, arg2 : string, arg3 : TagNameReference) : SchemaPrefixReference;
	initNSDescriptorsMap() : Map<string, CachedValue<XmlNSDescriptor>>;
	f() : Map<string, CachedValue<XmlNSDescriptor>>;
	a(arg1 : string, arg2 : string, arg3 : string, arg4 : Map<string, CachedValue<XmlNSDescriptor>>, arg5 : boolean) : Map<string, CachedValue<XmlNSDescriptor>>;
	a(arg1 : string) : XmlNSDescriptor;
	a(arg1 : string, arg2 : string, arg3 : string, arg4 : boolean) : XmlFile;
	a(arg1 : XmlFile, arg2 : string) : PsiMetaOwner;
	computeElementDescriptor() : XmlElementDescriptor;
	g() : XmlAttribute[];
	cacheOneAttributeValue(arg1 : string, arg2 : string, arg3 : Map<string, string>) : void;
	fillSubTags(arg1 : List<XmlTag>) : void;
	isCaseSensitive() : boolean;
	a(arg1 : PsiElement) : BidirectionalMap<string, string>;
	b(arg1 : PsiElement) : BidirectionalMap<string, string>;
	b(arg1 : string) : string;
	getRealNs(arg1 : string) : string;
	a(arg1 : TreeElement, arg2 : ASTNode, arg3 : boolean) : TreeElement;
	getBodyInsertTransaction(arg1 : TreeElement) : XmlTagImpl.InsertTransaction;
	h() : ASTNode;
}


declare interface XmlTagImpl extends XmlElementImpl, XmlTag {}

declare module XmlTagImpl {
	class InsertTransaction {
		firstInserted : TreeElement;
		constructor(arg1 : PsiElement);
		getFirstInserted() : TreeElement;
	}


	interface InsertTransaction extends PomTransactionBase {}	class GenericInsertTransaction {
		firstInserted : TreeElement;
		constructor(arg1 : TreeElement, arg2 : ASTNode, arg3 : boolean);
	}


	interface GenericInsertTransaction extends XmlTagImpl.InsertTransaction {}	class InsertAttributeTransaction {
		firstInserted : TreeElement;
		constructor(arg1 : TreeElement, arg2 : ASTNode, arg3 : boolean, arg4 : PomModel);
	}


	interface InsertAttributeTransaction extends XmlTagImpl.InsertTransaction {}	class BodyInsertTransaction {
		firstInserted : TreeElement;
		constructor(arg1 : TreeElement);
	}


	interface BodyInsertTransaction extends XmlTagImpl.InsertTransaction {}}

export = XmlTagImpl
