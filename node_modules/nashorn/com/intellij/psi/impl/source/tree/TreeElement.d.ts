import PsiManagerEx = require('nashorn/com/intellij/psi/impl/PsiManagerEx');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import CompositeElement = require('nashorn/com/intellij/psi/impl/source/tree/CompositeElement');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import CharSequence = require('nashorn/java/lang/CharSequence');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TreeElementVisitor = require('nashorn/com/intellij/psi/impl/source/tree/TreeElementVisitor');
import ElementBase = require('nashorn/com/intellij/psi/impl/ElementBase');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class TreeElement {
	static EMPTY_ARRAY : TreeElement[];
	manager : PsiManagerEx;
	firstChildNode : TreeElement;
	lastChildNode : TreeElement;
	notCachedLength : number;
	cachedLength : number;
	textRange : TextRange;
	startOffset : number;
	startOffsetInParent : number;
	textOffset : number;
	treeParent : CompositeElement;
	treePrev : TreeElement;
	treeNext : TreeElement;
	elementType : IElementType;
	constructor(arg1 : IElementType);
	getManager() : PsiManagerEx;
	textToCharArray() : string[];
	getNotCachedLength() : number;
	getCachedLength() : number;
	getStartOffsetInParent() : number;
	getTextOffset() : number;
	textMatches(arg1 : CharSequence, arg2 : number, arg3 : number) : boolean;
	textMatches(arg1 : CharSequence, arg2 : number) : number;
	textMatches(arg1 : CharSequence) : boolean;
	textMatches(arg1 : PsiElement) : boolean;
	setTreeParent(arg1 : CompositeElement) : void;
	setTreePrev(arg1 : TreeElement) : void;
	setTreeNext(arg1 : TreeElement) : void;
	static clearRelativeOffsets(arg1 : TreeElement) : void;
	clearCaches() : void;
	hc() : number;
	acceptTree(arg1 : TreeElementVisitor) : void;
	onInvalidated() : void;
	rawInsertBeforeMe(arg1 : TreeElement) : void;
	rawInsertAfterMe(arg1 : TreeElement) : void;
	rawInsertAfterMeWithoutNotifications(arg1 : TreeElement) : void;
	rawRemove() : void;
	rawReplaceWithList(arg1 : TreeElement) : void;
	invalidate() : void;
	rawRemoveUpToLast() : void;
	rawRemoveUpTo(arg1 : TreeElement) : void;
	rawRemoveUpToWithoutNotifications(arg1 : TreeElement, arg2 : boolean) : void;
}


declare interface TreeElement extends ElementBase, ASTNode, Cloneable {}
export = TreeElement
