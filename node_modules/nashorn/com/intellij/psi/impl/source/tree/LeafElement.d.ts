import CharSequence = require('nashorn/java/lang/CharSequence');
import TreeElement = require('nashorn/com/intellij/psi/impl/source/tree/TreeElement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Class = require('nashorn/java/lang/Class');
import Logger = require('nashorn/com/intellij/openapi/diagnostic/Logger');

declare class LeafElement {
	textLength : number;
	chars : CharSequence;
	text : string;
	firstChildNode : TreeElement;
	lastChildNode : TreeElement;
	notCachedLength : number;
	cachedLength : number;
	psi : PsiElement;
	charAt(arg1 : number) : string;
	copyTo(arg1 : string[], arg2 : number) : number;
	static leafTextMatches(arg1 : CharSequence, arg2 : CharSequence, arg3 : number) : number;
	rawReplaceWithText(arg1 : string) : LeafElement;
	replaceWithText(arg1 : string) : LeafElement;
	static leafHC(arg1 : CharSequence) : number;
	static getPsi<T extends PsiElement>(arg1 : Class<T>, arg2 : PsiElement, arg3 : Logger) : T;
}


declare interface LeafElement extends TreeElement {}
export = LeafElement
