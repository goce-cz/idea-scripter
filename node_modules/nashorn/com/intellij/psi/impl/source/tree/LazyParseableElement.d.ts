import CharSequence = require('nashorn/java/lang/CharSequence');
import TreeElement = require('nashorn/com/intellij/psi/impl/source/tree/TreeElement');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import CompositeElement = require('nashorn/com/intellij/psi/impl/source/tree/CompositeElement');
import Object = require('nashorn/java/lang/Object');

declare class LazyParseableElement {
	text : string;
	chars : CharSequence;
	textLength : number;
	notCachedLength : number;
	parsed : boolean;
	firstChildNode : TreeElement;
	lastChildNode : TreeElement;
	constructor(arg1 : IElementType, arg2 : CharSequence);
	isParsed() : boolean;
	e() : CharSequence;
	f() : void;
	copyTo(arg1 : string[], arg2 : number) : number;
	static setParsingAllowed(arg1 : boolean) : void;
	static setSuppressEagerPsiCreation(arg1 : boolean) : void;
}


declare interface LazyParseableElement extends CompositeElement {}

declare module LazyParseableElement {
	class ChameleonLock extends Object {
	}
}

export = LazyParseableElement
