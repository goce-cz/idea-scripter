import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Language = require('nashorn/com/intellij/lang/Language');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import ItemPresentation = require('nashorn/com/intellij/navigation/ItemPresentation');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import CharSequence = require('nashorn/java/lang/CharSequence');
import CharTable = require('nashorn/com/intellij/util/CharTable');
import LeafElement = require('nashorn/com/intellij/psi/impl/source/tree/LeafElement');
import NavigationItem = require('nashorn/com/intellij/navigation/NavigationItem');

declare class LeafPsiElement {
	children : PsiElement[];
	firstChild : PsiElement;
	lastChild : PsiElement;
	parent : PsiElement;
	nextSibling : PsiElement;
	prevSibling : PsiElement;
	containingFile : PsiFile;
	valid : boolean;
	writable : boolean;
	reference : PsiReference;
	references : PsiReference[];
	context : PsiElement;
	navigationElement : PsiElement;
	originalElement : PsiElement;
	physical : boolean;
	resolveScope : GlobalSearchScope;
	useScope : SearchScope;
	project : Project;
	language : Language;
	node : ASTNode;
	psi : PsiElement;
	presentation : ItemPresentation;
	name : string;
	constructor(arg1 : IElementType, arg2 : CharSequence);
	constructor(arg1 : IElementType, arg2 : CharSequence, arg3 : number, arg4 : number, arg5 : CharTable);
	a() : void;
}


declare interface LeafPsiElement extends LeafElement, PsiElement, NavigationItem {}
export = LeafPsiElement
