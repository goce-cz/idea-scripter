import CharSequence = require('nashorn/java/lang/CharSequence');
import TreeElement = require('nashorn/com/intellij/psi/impl/source/tree/TreeElement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import ArrayFactory = require('nashorn/com/intellij/util/ArrayFactory');
import TreeChangeEvent = require('nashorn/com/intellij/pom/tree/events/TreeChangeEvent');

declare class CompositeElement {
	modificationCount : number;
	text : string;
	chars : CharSequence;
	notCachedLength : number;
	textLength : number;
	cachedLength : number;
	firstChildNode : TreeElement;
	lastChildNode : TreeElement;
	psi : PsiElement;
	constructor(arg1 : IElementType);
	getModificationCount() : number;
	subtreeChanged() : void;
	assertThreading() : void;
	a() : string;
	b() : boolean;
	findPsiChildByType(arg1 : IElementType) : PsiElement;
	findPsiChildByType(arg1 : TokenSet) : PsiElement;
	a(arg1 : string, arg2 : number) : string;
	findChildByRoleAsPsiElement(arg1 : number) : PsiElement;
	findChildByRole(arg1 : number) : ASTNode;
	getChildRole(arg1 : ASTNode) : number;
	getChildRole(arg1 : ASTNode, arg2 : number) : number;
	getChildrenAsPsiElements<T extends PsiElement>(arg1 : TokenSet, arg2 : ArrayFactory<T>) : T[];
	getChildrenAsPsiElements<T extends PsiElement>(arg1 : IElementType, arg2 : ArrayFactory<T>) : T[];
	countChildren(arg1 : TokenSet) : number;
	countChildren(arg1 : IElementType) : number;
	addInternal(arg1 : TreeElement, arg2 : ASTNode, arg3 : ASTNode, arg4 : boolean) : TreeElement;
	deleteChildInternal(arg1 : ASTNode) : void;
	replaceChildInternal(arg1 : ASTNode, arg2 : TreeElement) : void;
	static a(arg1 : TreeElement) : TreeElement;
	c() : void;
	setCachedLength(arg1 : number) : void;
	setFirstChildNode(arg1 : TreeElement) : void;
	setLastChildNode(arg1 : TreeElement) : void;
	removeAllChildren() : void;
	d() : PsiElement;
	createPsiNoLock() : PsiElement;
	setPsi(arg1 : PsiElement) : void;
	clearPsi() : void;
	rawAddChildren(arg1 : TreeElement) : void;
	rawAddChildrenWithoutNotifications(arg1 : TreeElement) : void;
	rawRemoveAllChildren() : void;
	createAllChildrenPsiIfNecessary() : void;
	static a(arg1 : CompositeElement, arg2 : TreeElement) : void;
	static a(arg1 : TreeChangeEvent, arg2 : CompositeElement, arg3 : TreeElement) : void;
	static a(arg1 : TreeChangeEvent, arg2 : TreeElement, arg3 : TreeElement) : void;
	static b(arg1 : TreeChangeEvent, arg2 : TreeElement, arg3 : TreeElement) : void;
	static c(arg1 : TreeChangeEvent, arg2 : TreeElement, arg3 : TreeElement) : void;
	static b(arg1 : TreeElement) : void;
	static a(arg1 : TreeElement, arg2 : TreeElement) : void;
	rawFirstChild() : TreeElement;
	rawLastChild() : TreeElement;
}


declare interface CompositeElement extends TreeElement {}
export = CompositeElement
