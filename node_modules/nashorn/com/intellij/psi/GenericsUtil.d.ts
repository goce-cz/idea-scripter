import Object = require('nashorn/java/lang/Object');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import Set = require('nashorn/java/util/Set');
import Couple = require('nashorn/com/intellij/openapi/util/Couple');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import PsiTypeParameter = require('nashorn/com/intellij/psi/PsiTypeParameter');
import PsiSubstitutor = require('nashorn/com/intellij/psi/PsiSubstitutor');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import PsiClassType = require('nashorn/com/intellij/psi/PsiClassType');
import PsiReferenceParameterList = require('nashorn/com/intellij/psi/PsiReferenceParameterList');
import PsiWildcardType = require('nashorn/com/intellij/psi/PsiWildcardType');

declare class GenericsUtil extends Object {
	static getGreatestLowerBound(arg1 : PsiType, arg2 : PsiType) : PsiType;
	static getLeastUpperBound(arg1 : PsiType, arg2 : PsiType, arg3 : PsiManager) : PsiType;
	static getLeastUpperBound(arg1 : PsiType, arg2 : PsiType, arg3 : Set<Couple<PsiType>>, arg4 : PsiManager) : PsiType;
	static getLeastContainingTypeArgument(arg1 : PsiType, arg2 : PsiType, arg3 : Set<Couple<PsiType>>, arg4 : PsiManager, arg5 : PsiClass, arg6 : PsiTypeParameter) : PsiType;
	static getLeastUpperClasses(arg1 : PsiClass, arg2 : PsiClass) : PsiClass[];
	static getLeastUpperClassesInner(arg1 : PsiClass, arg2 : PsiClass, arg3 : Set<PsiClass>, arg4 : Set<PsiClass>) : void;
	static addSuper(arg1 : Set<PsiClass>, arg2 : PsiClass) : void;
	static isTypeArgumentsApplicable(arg1 : PsiTypeParameter[], arg2 : PsiSubstitutor, arg3 : PsiElement) : boolean;
	static isTypeArgumentsApplicable(arg1 : PsiTypeParameter[], arg2 : PsiSubstitutor, arg3 : PsiElement, arg4 : boolean) : boolean;
	static findTypeParameterWithBoundError(arg1 : PsiTypeParameter[], arg2 : PsiSubstitutor, arg3 : PsiElement, arg4 : boolean) : Pair<PsiTypeParameter, PsiType>;
	static findTypeParameterBoundError(arg1 : PsiTypeParameter, arg2 : PsiType[], arg3 : PsiSubstitutor, arg4 : PsiElement, arg5 : boolean) : PsiType;
	static acceptExtendsBound(arg1 : PsiType, arg2 : PsiType) : boolean;
	static acceptExtendsBound(arg1 : PsiClassType, arg2 : number) : boolean;
	static isFromExternalTypeLanguage(arg1 : PsiType) : boolean;
	static getVariableTypeByExpressionType(arg1 : PsiType) : PsiType;
	static getVariableTypeByExpressionType(arg1 : PsiType, arg2 : boolean) : PsiType;
	static substituteByParameterName(arg1 : PsiClass, arg2 : PsiSubstitutor) : PsiSubstitutor;
	static eliminateWildcards(arg1 : PsiType) : PsiType;
	static eliminateWildcards(arg1 : PsiType, arg2 : boolean) : PsiType;
	static checkNotInBounds(arg1 : PsiType, arg2 : PsiType, arg3 : PsiReferenceParameterList) : boolean;
	static checkNotInBounds(arg1 : PsiType, arg2 : PsiType, arg3 : boolean) : boolean;
	static checkExtendsWildcardCaptureFailure(arg1 : PsiWildcardType, arg2 : PsiType) : boolean;
	static checkNotAssignable(arg1 : PsiType, arg2 : PsiType, arg3 : boolean) : boolean;
}

export = GenericsUtil
