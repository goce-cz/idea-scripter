import Object = require('nashorn/java/lang/Object');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import PsiPrimitiveType = require('nashorn/com/intellij/psi/PsiPrimitiveType');
import PsiArrayType = require('nashorn/com/intellij/psi/PsiArrayType');
import PsiClassType = require('nashorn/com/intellij/psi/PsiClassType');
import PsiCapturedWildcardType = require('nashorn/com/intellij/psi/PsiCapturedWildcardType');
import PsiWildcardType = require('nashorn/com/intellij/psi/PsiWildcardType');
import PsiEllipsisType = require('nashorn/com/intellij/psi/PsiEllipsisType');
import PsiDisjunctionType = require('nashorn/com/intellij/psi/PsiDisjunctionType');
import PsiIntersectionType = require('nashorn/com/intellij/psi/PsiIntersectionType');
import PsiDiamondType = require('nashorn/com/intellij/psi/PsiDiamondType');
import PsiLambdaExpressionType = require('nashorn/com/intellij/psi/PsiLambdaExpressionType');
import PsiMethodReferenceType = require('nashorn/com/intellij/psi/PsiMethodReferenceType');

declare class PsiTypeVisitor<A> extends Object {
	constructor();
	visitType(arg1 : PsiType) : A;
	visitPrimitiveType(arg1 : PsiPrimitiveType) : A;
	visitArrayType(arg1 : PsiArrayType) : A;
	visitClassType(arg1 : PsiClassType) : A;
	visitCapturedWildcardType(arg1 : PsiCapturedWildcardType) : A;
	visitWildcardType(arg1 : PsiWildcardType) : A;
	visitEllipsisType(arg1 : PsiEllipsisType) : A;
	visitDisjunctionType(arg1 : PsiDisjunctionType) : A;
	visitIntersectionType(arg1 : PsiIntersectionType) : A;
	visitDiamondType(arg1 : PsiDiamondType) : A;
	visitLambdaExpressionType(arg1 : PsiLambdaExpressionType) : A;
	visitMethodReferenceType(arg1 : PsiMethodReferenceType) : A;
}

export = PsiTypeVisitor
