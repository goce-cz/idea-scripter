import LiteralTextEscaper = require('nashorn/com/intellij/psi/LiteralTextEscaper');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Object = require('nashorn/java/lang/Object');
import Segment = require('nashorn/com/intellij/openapi/util/Segment');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import List = require('nashorn/java/util/List');

declare class PsiLanguageInjectionHost {
	validHost : boolean;
	isValidHost() : boolean;
	updateText(arg1 : string) : PsiLanguageInjectionHost;
	createLiteralTextEscaper() : LiteralTextEscaper<PsiLanguageInjectionHost>;
}


declare interface PsiLanguageInjectionHost extends PsiElement {}

declare module PsiLanguageInjectionHost {
	class Shred extends Object {
		hostRangeMarker : Segment;
		rangeInsideHost : TextRange;
		valid : boolean;
		host : PsiLanguageInjectionHost;
		range : TextRange;
		prefix : string;
		suffix : string;
		getHostRangeMarker() : Segment;
		getRangeInsideHost() : TextRange;
		isValid() : boolean;
		dispose() : void;
		getHost() : PsiLanguageInjectionHost;
		getRange() : TextRange;
		getPrefix() : string;
		getSuffix() : string;
	}
	class InjectedPsiVisitor extends Object {
		visit(arg1 : PsiFile, arg2 : List<PsiLanguageInjectionHost.Shred>) : void;
	}
}

export = PsiLanguageInjectionHost
