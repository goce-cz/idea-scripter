import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import Element = require('nashorn/org/jdom/Element');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import PersistentStateComponent = require('nashorn/com/intellij/openapi/components/PersistentStateComponent');

declare class CodeStyleSettingsManager {
	PER_PROJECT_SETTINGS : CodeStyleSettings;
	USE_PER_PROJECT_SETTINGS : boolean;
	PREFERRED_PROJECT_CODE_STYLE : string;
	static instance : CodeStyleSettingsManager;
	currentSettings : CodeStyleSettings;
	state : Element;
	temporarySettings : CodeStyleSettings;
	loaded : boolean;
	constructor(arg1 : Project);
	constructor();
	static getInstance(arg1 : Project) : CodeStyleSettingsManager;
	static getInstance() : CodeStyleSettingsManager;
	static getSettings(arg1 : Project) : CodeStyleSettings;
	getCurrentSettings() : CodeStyleSettings;
	readExternal(arg1 : Element) : void;
	writeExternal(arg1 : Element) : void;
	getTemporarySettings() : CodeStyleSettings;
	setTemporarySettings(arg1 : CodeStyleSettings) : void;
	dropTemporarySettings() : void;
	isLoaded() : boolean;
	static updateDocumentIndentOptions(arg1 : Project, arg2 : Document) : void;
}


declare interface CodeStyleSettingsManager extends PersistentStateComponent<Element> {}
export = CodeStyleSettingsManager
