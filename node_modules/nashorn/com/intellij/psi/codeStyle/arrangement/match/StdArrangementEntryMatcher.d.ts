import ArrangementMatchCondition = require('nashorn/com/intellij/psi/codeStyle/arrangement/model/ArrangementMatchCondition');
import ArrangementEntryMatcher = require('nashorn/com/intellij/psi/codeStyle/arrangement/match/ArrangementEntryMatcher');
import ArrangementMatchConditionVisitor = require('nashorn/com/intellij/psi/codeStyle/arrangement/model/ArrangementMatchConditionVisitor');
import StdArrangementSettingsToken = require('nashorn/com/intellij/psi/codeStyle/arrangement/std/StdArrangementSettingsToken');
import ArrangementAtomMatchCondition = require('nashorn/com/intellij/psi/codeStyle/arrangement/model/ArrangementAtomMatchCondition');
import Object = require('nashorn/java/lang/Object');
import Collection = require('nashorn/java/util/Collection');

declare class StdArrangementEntryMatcher {
	condition : ArrangementMatchCondition;
	constructor(arg1 : ArrangementMatchCondition);
	constructor(arg1 : ArrangementMatchCondition, arg2 : StdArrangementEntryMatcher.StdMatcherBuilder);
	getCondition() : ArrangementMatchCondition;
	static doBuildMatcher(arg1 : ArrangementMatchCondition, arg2 : StdArrangementEntryMatcher.StdMatcherBuilder) : ArrangementEntryMatcher;
}


declare interface StdArrangementEntryMatcher extends ArrangementEntryMatcher {}

declare module StdArrangementEntryMatcher {
	class MyVisitor {
		matcher : ArrangementEntryMatcher;
		getMatcher() : ArrangementEntryMatcher;
	}


	interface MyVisitor extends ArrangementMatchConditionVisitor {}	class StdMatcherBuilderImpl {
		constructor();
		addToContext(arg1 : StdArrangementSettingsToken, arg2 : ArrangementAtomMatchCondition) : void;
	}


	interface StdMatcherBuilderImpl extends StdArrangementEntryMatcher.StdMatcherBuilder {}	class StdMatcherBuilder extends Object {
		onCondition(arg1 : ArrangementAtomMatchCondition) : void;
		buildMatchers() : Collection<ArrangementEntryMatcher>;
		addMatcher(arg1 : ArrangementEntryMatcher) : void;
	}
}

export = StdArrangementEntryMatcher
