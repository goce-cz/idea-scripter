import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import Matcher = require('nashorn/com/intellij/util/text/Matcher');
import MinusculeMatcher = require('nashorn/com/intellij/psi/codeStyle/MinusculeMatcher');
import Enum = require('nashorn/java/lang/Enum');

declare class NameUtil extends Object {
	static nameToWordsLowerCase(arg1 : string) : List<string>;
	static nameToWords(arg1 : string) : string[];
	static buildRegexp(arg1 : string, arg2 : number, arg3 : boolean, arg4 : boolean) : string;
	static buildRegexp(arg1 : string, arg2 : number, arg3 : boolean, arg4 : boolean, arg5 : boolean, arg6 : boolean) : string;
	static splitNameIntoWords(arg1 : string) : string[];
	static getSuggestionsByName(arg1 : string, arg2 : string, arg3 : string, arg4 : boolean, arg5 : boolean, arg6 : boolean) : List<string>;
	static compoundSuggestion(arg1 : string, arg2 : boolean, arg3 : string[], arg4 : number, arg5 : string, arg6 : string, arg7 : boolean, arg8 : boolean) : string;
	static isWordStart(arg1 : string) : boolean;
	static nextWord(arg1 : string, arg2 : number) : number;
	static addAllWords(arg1 : string, arg2 : List<string>) : void;
	static buildCompletionMatcher(arg1 : string, arg2 : number, arg3 : boolean, arg4 : boolean) : Matcher;
	static buildMatcher(arg1 : string, arg2 : number, arg3 : boolean, arg4 : boolean) : Matcher;
	static buildMatcher(arg1 : string, arg2 : number, arg3 : boolean, arg4 : boolean, arg5 : boolean) : Matcher;
	static buildMatcher(arg1 : string, arg2 : NameUtil.MatchingCaseSensitivity) : MinusculeMatcher;
}


declare module NameUtil {
	class MatchingCaseSensitivity {
		static NONE : NameUtil.MatchingCaseSensitivity;
		static FIRST_LETTER : NameUtil.MatchingCaseSensitivity;
		static ALL : NameUtil.MatchingCaseSensitivity;
	}


	interface MatchingCaseSensitivity extends Enum<NameUtil.MatchingCaseSensitivity> {}	class Matcher extends Object {
		matches(arg1 : string) : boolean;
	}
}

export = NameUtil
