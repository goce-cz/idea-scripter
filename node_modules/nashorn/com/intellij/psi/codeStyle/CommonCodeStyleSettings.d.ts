import Object = require('nashorn/java/lang/Object');
import Language = require('nashorn/com/intellij/lang/Language');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import ArrangementSettings = require('nashorn/com/intellij/psi/codeStyle/arrangement/ArrangementSettings');
import FileTypeIndentOptionsProvider = require('nashorn/com/intellij/psi/codeStyle/FileTypeIndentOptionsProvider');
import Element = require('nashorn/org/jdom/Element');
import Set = require('nashorn/java/util/Set');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import JDOMExternalizable = require('nashorn/com/intellij/openapi/util/JDOMExternalizable');
import Cloneable = require('nashorn/java/lang/Cloneable');
import Annotation = require('nashorn/java/lang/annotation/Annotation');
import DifferenceFilter = require('nashorn/com/intellij/openapi/util/DifferenceFilter');

declare class CommonCodeStyleSettings extends Object {
	RIGHT_MARGIN : number;
	LINE_COMMENT_AT_FIRST_COLUMN : boolean;
	BLOCK_COMMENT_AT_FIRST_COLUMN : boolean;
	KEEP_LINE_BREAKS : boolean;
	KEEP_FIRST_COLUMN_COMMENT : boolean;
	INSERT_FIRST_SPACE_IN_LINE : boolean;
	KEEP_CONTROL_STATEMENT_IN_ONE_LINE : boolean;
	KEEP_BLANK_LINES_IN_DECLARATIONS : number;
	KEEP_BLANK_LINES_IN_CODE : number;
	KEEP_BLANK_LINES_BEFORE_RBRACE : number;
	BLANK_LINES_BEFORE_PACKAGE : number;
	BLANK_LINES_AFTER_PACKAGE : number;
	BLANK_LINES_BEFORE_IMPORTS : number;
	BLANK_LINES_AFTER_IMPORTS : number;
	BLANK_LINES_AROUND_CLASS : number;
	BLANK_LINES_AROUND_FIELD : number;
	BLANK_LINES_AROUND_METHOD : number;
	BLANK_LINES_BEFORE_METHOD_BODY : number;
	BLANK_LINES_AROUND_FIELD_IN_INTERFACE : number;
	BLANK_LINES_AROUND_METHOD_IN_INTERFACE : number;
	BLANK_LINES_AFTER_CLASS_HEADER : number;
	BLANK_LINES_AFTER_ANONYMOUS_CLASS_HEADER : number;
	static END_OF_LINE : number;
	static NEXT_LINE : number;
	static NEXT_LINE_SHIFTED : number;
	static NEXT_LINE_SHIFTED2 : number;
	static NEXT_LINE_IF_WRAPPED : number;
	BRACE_STYLE : number;
	CLASS_BRACE_STYLE : number;
	METHOD_BRACE_STYLE : number;
	USE_FLYING_GEESE_BRACES : boolean;
	FLYING_GEESE_BRACES_GAP : number;
	DO_NOT_INDENT_TOP_LEVEL_CLASS_MEMBERS : boolean;
	ELSE_ON_NEW_LINE : boolean;
	WHILE_ON_NEW_LINE : boolean;
	CATCH_ON_NEW_LINE : boolean;
	FINALLY_ON_NEW_LINE : boolean;
	INDENT_CASE_FROM_SWITCH : boolean;
	INDENT_BREAK_FROM_CASE : boolean;
	SPECIAL_ELSE_IF_TREATMENT : boolean;
	ALIGN_MULTILINE_CHAINED_METHODS : boolean;
	ALIGN_MULTILINE_PARAMETERS : boolean;
	ALIGN_MULTILINE_PARAMETERS_IN_CALLS : boolean;
	ALIGN_MULTILINE_RESOURCES : boolean;
	ALIGN_MULTILINE_FOR : boolean;
	INDENT_WHEN_CASES : boolean;
	ALIGN_MULTILINE_BINARY_OPERATION : boolean;
	ALIGN_MULTILINE_ASSIGNMENT : boolean;
	ALIGN_MULTILINE_TERNARY_OPERATION : boolean;
	ALIGN_MULTILINE_THROWS_LIST : boolean;
	ALIGN_THROWS_KEYWORD : boolean;
	ALIGN_MULTILINE_EXTENDS_LIST : boolean;
	ALIGN_MULTILINE_METHOD_BRACKETS : boolean;
	ALIGN_MULTILINE_PARENTHESIZED_EXPRESSION : boolean;
	ALIGN_MULTILINE_ARRAY_INITIALIZER_EXPRESSION : boolean;
	ALIGN_GROUP_FIELD_DECLARATIONS : boolean;
	ALIGN_CONSECUTIVE_VARIABLE_DECLARATIONS : boolean;
	SPACE_AROUND_ASSIGNMENT_OPERATORS : boolean;
	SPACE_AROUND_LOGICAL_OPERATORS : boolean;
	SPACE_AROUND_EQUALITY_OPERATORS : boolean;
	SPACE_AROUND_RELATIONAL_OPERATORS : boolean;
	SPACE_AROUND_BITWISE_OPERATORS : boolean;
	SPACE_AROUND_ADDITIVE_OPERATORS : boolean;
	SPACE_AROUND_MULTIPLICATIVE_OPERATORS : boolean;
	SPACE_AROUND_SHIFT_OPERATORS : boolean;
	SPACE_AROUND_UNARY_OPERATOR : boolean;
	SPACE_AROUND_LAMBDA_ARROW : boolean;
	SPACE_AROUND_METHOD_REF_DBL_COLON : boolean;
	SPACE_AFTER_COMMA : boolean;
	SPACE_AFTER_COMMA_IN_TYPE_ARGUMENTS : boolean;
	SPACE_BEFORE_COMMA : boolean;
	SPACE_AFTER_SEMICOLON : boolean;
	SPACE_BEFORE_SEMICOLON : boolean;
	SPACE_WITHIN_PARENTHESES : boolean;
	SPACE_WITHIN_METHOD_CALL_PARENTHESES : boolean;
	SPACE_WITHIN_EMPTY_METHOD_CALL_PARENTHESES : boolean;
	SPACE_WITHIN_METHOD_PARENTHESES : boolean;
	SPACE_WITHIN_EMPTY_METHOD_PARENTHESES : boolean;
	SPACE_WITHIN_IF_PARENTHESES : boolean;
	SPACE_WITHIN_WHILE_PARENTHESES : boolean;
	SPACE_WITHIN_FOR_PARENTHESES : boolean;
	SPACE_WITHIN_TRY_PARENTHESES : boolean;
	SPACE_WITHIN_CATCH_PARENTHESES : boolean;
	SPACE_WITHIN_SWITCH_PARENTHESES : boolean;
	SPACE_WITHIN_SYNCHRONIZED_PARENTHESES : boolean;
	SPACE_WITHIN_CAST_PARENTHESES : boolean;
	SPACE_WITHIN_BRACKETS : boolean;
	SPACE_WITHIN_BRACES : boolean;
	SPACE_WITHIN_ARRAY_INITIALIZER_BRACES : boolean;
	SPACE_WITHIN_EMPTY_ARRAY_INITIALIZER_BRACES : boolean;
	SPACE_AFTER_TYPE_CAST : boolean;
	SPACE_BEFORE_METHOD_CALL_PARENTHESES : boolean;
	SPACE_BEFORE_METHOD_PARENTHESES : boolean;
	SPACE_BEFORE_IF_PARENTHESES : boolean;
	SPACE_BEFORE_WHILE_PARENTHESES : boolean;
	SPACE_BEFORE_FOR_PARENTHESES : boolean;
	SPACE_BEFORE_TRY_PARENTHESES : boolean;
	SPACE_BEFORE_CATCH_PARENTHESES : boolean;
	SPACE_BEFORE_SWITCH_PARENTHESES : boolean;
	SPACE_BEFORE_SYNCHRONIZED_PARENTHESES : boolean;
	SPACE_BEFORE_CLASS_LBRACE : boolean;
	SPACE_BEFORE_METHOD_LBRACE : boolean;
	SPACE_BEFORE_IF_LBRACE : boolean;
	SPACE_BEFORE_ELSE_LBRACE : boolean;
	SPACE_BEFORE_WHILE_LBRACE : boolean;
	SPACE_BEFORE_FOR_LBRACE : boolean;
	SPACE_BEFORE_DO_LBRACE : boolean;
	SPACE_BEFORE_SWITCH_LBRACE : boolean;
	SPACE_BEFORE_TRY_LBRACE : boolean;
	SPACE_BEFORE_CATCH_LBRACE : boolean;
	SPACE_BEFORE_FINALLY_LBRACE : boolean;
	SPACE_BEFORE_SYNCHRONIZED_LBRACE : boolean;
	SPACE_BEFORE_ARRAY_INITIALIZER_LBRACE : boolean;
	SPACE_BEFORE_ANNOTATION_ARRAY_INITIALIZER_LBRACE : boolean;
	SPACE_BEFORE_ELSE_KEYWORD : boolean;
	SPACE_BEFORE_WHILE_KEYWORD : boolean;
	SPACE_BEFORE_CATCH_KEYWORD : boolean;
	SPACE_BEFORE_FINALLY_KEYWORD : boolean;
	SPACE_BEFORE_QUEST : boolean;
	SPACE_AFTER_QUEST : boolean;
	SPACE_BEFORE_COLON : boolean;
	SPACE_AFTER_COLON : boolean;
	SPACE_BEFORE_TYPE_PARAMETER_LIST : boolean;
	static DO_NOT_WRAP : number;
	static WRAP_AS_NEEDED : number;
	static WRAP_ALWAYS : number;
	static WRAP_ON_EVERY_ITEM : number;
	CALL_PARAMETERS_WRAP : number;
	PREFER_PARAMETERS_WRAP : boolean;
	CALL_PARAMETERS_LPAREN_ON_NEXT_LINE : boolean;
	CALL_PARAMETERS_RPAREN_ON_NEXT_LINE : boolean;
	METHOD_PARAMETERS_WRAP : number;
	METHOD_PARAMETERS_LPAREN_ON_NEXT_LINE : boolean;
	METHOD_PARAMETERS_RPAREN_ON_NEXT_LINE : boolean;
	RESOURCE_LIST_WRAP : number;
	RESOURCE_LIST_LPAREN_ON_NEXT_LINE : boolean;
	RESOURCE_LIST_RPAREN_ON_NEXT_LINE : boolean;
	EXTENDS_LIST_WRAP : number;
	THROWS_LIST_WRAP : number;
	EXTENDS_KEYWORD_WRAP : number;
	THROWS_KEYWORD_WRAP : number;
	METHOD_CALL_CHAIN_WRAP : number;
	PARENTHESES_EXPRESSION_LPAREN_WRAP : boolean;
	PARENTHESES_EXPRESSION_RPAREN_WRAP : boolean;
	BINARY_OPERATION_WRAP : number;
	BINARY_OPERATION_SIGN_ON_NEXT_LINE : boolean;
	TERNARY_OPERATION_WRAP : number;
	TERNARY_OPERATION_SIGNS_ON_NEXT_LINE : boolean;
	MODIFIER_LIST_WRAP : boolean;
	KEEP_SIMPLE_BLOCKS_IN_ONE_LINE : boolean;
	KEEP_SIMPLE_METHODS_IN_ONE_LINE : boolean;
	KEEP_SIMPLE_CLASSES_IN_ONE_LINE : boolean;
	KEEP_MULTIPLE_EXPRESSIONS_IN_ONE_LINE : boolean;
	FOR_STATEMENT_WRAP : number;
	FOR_STATEMENT_LPAREN_ON_NEXT_LINE : boolean;
	FOR_STATEMENT_RPAREN_ON_NEXT_LINE : boolean;
	ARRAY_INITIALIZER_WRAP : number;
	ARRAY_INITIALIZER_LBRACE_ON_NEXT_LINE : boolean;
	ARRAY_INITIALIZER_RBRACE_ON_NEXT_LINE : boolean;
	ASSIGNMENT_WRAP : number;
	PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE : boolean;
	LABELED_STATEMENT_WRAP : number;
	WRAP_COMMENTS : boolean;
	ASSERT_STATEMENT_WRAP : number;
	ASSERT_STATEMENT_COLON_ON_NEXT_LINE : boolean;
	static DO_NOT_FORCE : number;
	static FORCE_BRACES_IF_MULTILINE : number;
	static FORCE_BRACES_ALWAYS : number;
	IF_BRACE_FORCE : number;
	DOWHILE_BRACE_FORCE : number;
	WHILE_BRACE_FORCE : number;
	FOR_BRACE_FORCE : number;
	WRAP_LONG_LINES : boolean;
	METHOD_ANNOTATION_WRAP : number;
	CLASS_ANNOTATION_WRAP : number;
	FIELD_ANNOTATION_WRAP : number;
	PARAMETER_ANNOTATION_WRAP : number;
	VARIABLE_ANNOTATION_WRAP : number;
	SPACE_BEFORE_ANOTATION_PARAMETER_LIST : boolean;
	SPACE_WITHIN_ANNOTATION_PARENTHESES : boolean;
	ENUM_CONSTANTS_WRAP : number;
	PARENT_SETTINGS_INSTALLED : boolean;
	static REARRANGE_ACCORDIND_TO_DIALOG : number;
	static REARRANGE_ALWAYS : number;
	static REARRANGE_NEVER : number;
	FORCE_REARRANGE_MODE : number;
	language : Language;
	fileType : FileType;
	rootSettings : CodeStyleSettings;
	indentOptions : CommonCodeStyleSettings.IndentOptions;
	arrangementSettings : ArrangementSettings;
	forceArrangeMenuAvailable : boolean;
	constructor(arg1 : Language, arg2 : FileType);
	constructor(arg1 : Language);
	setRootSettings(arg1 : CodeStyleSettings) : void;
	getLanguage() : Language;
	importOldIndentOptions(arg1 : CodeStyleSettings) : void;
	initIndentOptions() : CommonCodeStyleSettings.IndentOptions;
	getFileTypeIndentOptionsProvider() : FileTypeIndentOptionsProvider;
	getFileType() : FileType;
	getRootSettings() : CodeStyleSettings;
	getIndentOptions() : CommonCodeStyleSettings.IndentOptions;
	getArrangementSettings() : ArrangementSettings;
	setArrangementSettings(arg1 : ArrangementSettings) : void;
	setForceArrangeMenuAvailable(arg1 : boolean) : void;
	isForceArrangeMenuAvailable() : boolean;
	clone(arg1 : CodeStyleSettings) : CommonCodeStyleSettings;
	static copyPublicFields(arg1 : Object, arg2 : Object) : void;
	copyNonDefaultValuesFrom(arg1 : CommonCodeStyleSettings) : void;
	getDefaultSettings() : CommonCodeStyleSettings;
	readExternal(arg1 : Element) : void;
	writeExternal(arg1 : Element) : void;
	getSupportedFields() : Set<string>;
}


declare module CommonCodeStyleSettings {
	class IndentOptions {
		INDENT_SIZE : number;
		CONTINUATION_INDENT_SIZE : number;
		TAB_SIZE : number;
		USE_TAB_CHARACTER : boolean;
		SMART_TABS : boolean;
		LABEL_INDENT_SIZE : number;
		LABEL_INDENT_ABSOLUTE : boolean;
		USE_RELATIVE_INDENTS : boolean;
		KEEP_INDENTS_ON_EMPTY_LINES : boolean;
		constructor();
		serialize(arg1 : Element, arg2 : CommonCodeStyleSettings.IndentOptions) : void;
		deserialize(arg1 : Element) : void;
		copyFrom(arg1 : CommonCodeStyleSettings.IndentOptions) : void;
		static retrieveFromAssociatedDocument(arg1 : PsiFile) : CommonCodeStyleSettings.IndentOptions;
		associateWithDocument(arg1 : Document) : void;
	}


	interface IndentOptions extends JDOMExternalizable, Cloneable {}	class BraceStyleConstant {
	}


	interface BraceStyleConstant extends Annotation {}	class SupportedFieldsDiffFilter {
		constructor(arg1 : CommonCodeStyleSettings, arg2 : Set<string>, arg3 : CommonCodeStyleSettings);
	}


	interface SupportedFieldsDiffFilter extends DifferenceFilter<CommonCodeStyleSettings> {}}

export = CommonCodeStyleSettings
