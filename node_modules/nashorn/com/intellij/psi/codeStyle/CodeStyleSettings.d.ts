import CommonCodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CommonCodeStyleSettings');
import PackageEntryTable = require('nashorn/com/intellij/psi/codeStyle/PackageEntryTable');
import Pattern = require('nashorn/java/util/regex/Pattern');
import CustomCodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CustomCodeStyleSettings');
import Class = require('nashorn/java/lang/Class');
import Collection = require('nashorn/java/util/Collection');
import Element = require('nashorn/org/jdom/Element');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Processor = require('nashorn/com/intellij/util/Processor');
import FileIndentOptionsProvider = require('nashorn/com/intellij/psi/codeStyle/FileIndentOptionsProvider');
import FileTypeIndentOptionsProvider = require('nashorn/com/intellij/psi/codeStyle/FileTypeIndentOptionsProvider');
import Language = require('nashorn/com/intellij/lang/Language');
import Cloneable = require('nashorn/java/lang/Cloneable');
import JDOMExternalizable = require('nashorn/com/intellij/openapi/util/JDOMExternalizable');
import Icon = require('nashorn/javax/swing/Icon');

declare class CodeStyleSettings {
	USE_SAME_INDENTS : boolean;
	IGNORE_SAME_INDENTS_FOR_LANGUAGES : boolean;
	AUTODETECT_INDENTS : boolean;
	JAVA_INDENT_OPTIONS : CommonCodeStyleSettings.IndentOptions;
	JSP_INDENT_OPTIONS : CommonCodeStyleSettings.IndentOptions;
	XML_INDENT_OPTIONS : CommonCodeStyleSettings.IndentOptions;
	OTHER_INDENT_OPTIONS : CommonCodeStyleSettings.IndentOptions;
	LINE_SEPARATOR : string;
	FIELD_NAME_PREFIX : string;
	STATIC_FIELD_NAME_PREFIX : string;
	PARAMETER_NAME_PREFIX : string;
	LOCAL_VARIABLE_NAME_PREFIX : string;
	FIELD_NAME_SUFFIX : string;
	STATIC_FIELD_NAME_SUFFIX : string;
	PARAMETER_NAME_SUFFIX : string;
	LOCAL_VARIABLE_NAME_SUFFIX : string;
	PREFER_LONGER_NAMES : boolean;
	FIELD_TYPE_TO_NAME : CodeStyleSettings.TypeToNameMap;
	STATIC_FIELD_TYPE_TO_NAME : CodeStyleSettings.TypeToNameMap;
	PARAMETER_TYPE_TO_NAME : CodeStyleSettings.TypeToNameMap;
	LOCAL_VARIABLE_TYPE_TO_NAME : CodeStyleSettings.TypeToNameMap;
	GENERATE_FINAL_LOCALS : boolean;
	GENERATE_FINAL_PARAMETERS : boolean;
	VISIBILITY : string;
	PARENTHESES_AROUND_METHOD_ARGUMENTS : boolean;
	USE_EXTERNAL_ANNOTATIONS : boolean;
	INSERT_OVERRIDE_ANNOTATION : boolean;
	REPEAT_SYNCHRONIZED : boolean;
	LAYOUT_STATIC_IMPORTS_SEPARATELY : boolean;
	USE_FQ_CLASS_NAMES : boolean;
	USE_FQ_CLASS_NAMES_IN_JAVADOC : boolean;
	USE_SINGLE_CLASS_IMPORTS : boolean;
	INSERT_INNER_CLASS_IMPORTS : boolean;
	CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND : number;
	NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND : number;
	PACKAGES_TO_USE_IMPORT_ON_DEMAND : PackageEntryTable;
	IMPORT_LAYOUT_TABLE : PackageEntryTable;
	STATIC_FIELDS_ORDER_WEIGHT : number;
	FIELDS_ORDER_WEIGHT : number;
	CONSTRUCTORS_ORDER_WEIGHT : number;
	STATIC_METHODS_ORDER_WEIGHT : number;
	METHODS_ORDER_WEIGHT : number;
	STATIC_INNER_CLASSES_ORDER_WEIGHT : number;
	INNER_CLASSES_ORDER_WEIGHT : number;
	RIGHT_MARGIN : number;
	WRAP_WHEN_TYPING_REACHES_RIGHT_MARGIN : boolean;
	ENABLE_JAVADOC_FORMATTING : boolean;
	JD_ALIGN_PARAM_COMMENTS : boolean;
	JD_ALIGN_EXCEPTION_COMMENTS : boolean;
	JD_ADD_BLANK_AFTER_PARM_COMMENTS : boolean;
	JD_ADD_BLANK_AFTER_RETURN : boolean;
	JD_ADD_BLANK_AFTER_DESCRIPTION : boolean;
	JD_P_AT_EMPTY_LINES : boolean;
	JD_KEEP_INVALID_TAGS : boolean;
	JD_KEEP_EMPTY_LINES : boolean;
	JD_DO_NOT_WRAP_ONE_LINE_COMMENTS : boolean;
	JD_USE_THROWS_NOT_EXCEPTION : boolean;
	JD_KEEP_EMPTY_PARAMETER : boolean;
	JD_KEEP_EMPTY_EXCEPTION : boolean;
	JD_KEEP_EMPTY_RETURN : boolean;
	JD_LEADING_ASTERISKS_ARE_ENABLED : boolean;
	JD_PRESERVE_LINE_FEEDS : boolean;
	JD_PARAM_DESCRIPTION_ON_NEW_LINE : boolean;
	XML_KEEP_WHITESPACES : boolean;
	XML_ATTRIBUTE_WRAP : number;
	XML_TEXT_WRAP : number;
	XML_KEEP_LINE_BREAKS : boolean;
	XML_KEEP_LINE_BREAKS_IN_TEXT : boolean;
	XML_KEEP_BLANK_LINES : number;
	XML_ALIGN_ATTRIBUTES : boolean;
	XML_ALIGN_TEXT : boolean;
	XML_SPACE_AROUND_EQUALITY_IN_ATTRIBUTE : boolean;
	XML_SPACE_AFTER_TAG_NAME : boolean;
	XML_SPACE_INSIDE_EMPTY_TAG : boolean;
	XML_KEEP_WHITE_SPACES_INSIDE_CDATA : boolean;
	XML_WHITE_SPACE_AROUND_CDATA : number;
	HTML_KEEP_WHITESPACES : boolean;
	HTML_ATTRIBUTE_WRAP : number;
	HTML_TEXT_WRAP : number;
	HTML_KEEP_LINE_BREAKS : boolean;
	HTML_KEEP_LINE_BREAKS_IN_TEXT : boolean;
	HTML_KEEP_BLANK_LINES : number;
	HTML_ALIGN_ATTRIBUTES : boolean;
	HTML_ALIGN_TEXT : boolean;
	HTML_SPACE_AROUND_EQUALITY_IN_ATTRINUTE : boolean;
	HTML_SPACE_AFTER_TAG_NAME : boolean;
	HTML_SPACE_INSIDE_EMPTY_TAG : boolean;
	HTML_ELEMENTS_TO_INSERT_NEW_LINE_BEFORE : string;
	HTML_ELEMENTS_TO_REMOVE_NEW_LINE_BEFORE : string;
	HTML_DO_NOT_INDENT_CHILDREN_OF : string;
	HTML_DO_NOT_ALIGN_CHILDREN_OF_MIN_LINES : number;
	HTML_KEEP_WHITESPACES_INSIDE : string;
	HTML_INLINE_ELEMENTS : string;
	HTML_DONT_ADD_BREAKS_IF_INLINE_CONTENT : string;
	JSP_PREFER_COMMA_SEPARATED_IMPORT_LIST : boolean;
	FORMATTER_TAGS_ENABLED : boolean;
	FORMATTER_ON_TAG : string;
	FORMATTER_OFF_TAG : string;
	FORMATTER_TAGS_ACCEPT_REGEXP : boolean;
	parentSettings : CodeStyleSettings;
	lineSeparator : string;
	formatterOffPattern : Pattern;
	formatterOnPattern : Pattern;
	indentOptions : CommonCodeStyleSettings.IndentOptions;
	generateFinalLocals : boolean;
	generateFinalParameters : boolean;
	defaultRightMargin : number;
	constructor();
	constructor(arg1 : boolean);
	initImportsByDefault() : void;
	initTypeToName() : void;
	static initGeneralLocalVariable(arg1 : CodeStyleSettings.TypeToNameMap) : void;
	setParentSettings(arg1 : CodeStyleSettings) : void;
	getParentSettings() : CodeStyleSettings;
	addCustomSettings(arg1 : CustomCodeStyleSettings) : void;
	getCustomSettings<T extends CustomCodeStyleSettings>(arg1 : Class<T>) : T;
	copyCustomSettingsFrom(arg1 : CodeStyleSettings) : void;
	copyFrom(arg1 : CodeStyleSettings) : void;
	getLineSeparator() : string;
	getFormatterOffPattern() : Pattern;
	setFormatterOffPattern(arg1 : Pattern) : void;
	getFormatterOnPattern() : Pattern;
	setFormatterOnPattern(arg1 : Pattern) : void;
	getPatternOrDisableRegexp(arg1 : string) : Pattern;
	getCustomSettingsValues() : Collection<CustomCodeStyleSettings>;
	copyOldIndentOptions(arg1 : string, arg2 : CommonCodeStyleSettings.IndentOptions) : void;
	importOldIndentOptions(arg1 : Element) : boolean;
	static getDefaultIndentOptions(arg1 : FileType) : CommonCodeStyleSettings.IndentOptions;
	getIndentOptions(arg1 : FileType) : CommonCodeStyleSettings.IndentOptions;
	getIndentOptionsByFile(arg1 : PsiFile) : CommonCodeStyleSettings.IndentOptions;
	getIndentOptionsByFile(arg1 : PsiFile, arg2 : TextRange) : CommonCodeStyleSettings.IndentOptions;
	getIndentOptionsByFile(arg1 : PsiFile, arg2 : TextRange, arg3 : boolean, arg4 : Processor<FileIndentOptionsProvider>) : CommonCodeStyleSettings.IndentOptions;
	static isFileFullyCoveredByRange(arg1 : PsiFile, arg2 : TextRange) : boolean;
	static logIndentOptions(arg1 : PsiFile, arg2 : FileIndentOptionsProvider, arg3 : CommonCodeStyleSettings.IndentOptions) : void;
	getLanguageIndentOptions(arg1 : FileType) : CommonCodeStyleSettings.IndentOptions;
	isSmartTabs(arg1 : FileType) : boolean;
	getIndentSize(arg1 : FileType) : number;
	getContinuationIndentSize(arg1 : FileType) : number;
	getLabelIndentSize(arg1 : FileType) : number;
	getLabelIndentAbsolute(arg1 : FileType) : boolean;
	getTabSize(arg1 : FileType) : number;
	useTabCharacter(arg1 : FileType) : boolean;
	isGenerateFinalLocals() : boolean;
	isGenerateFinalParameters() : boolean;
	registerAdditionalIndentOptions(arg1 : FileType, arg2 : CommonCodeStyleSettings.IndentOptions) : void;
	unregisterAdditionalIndentOptions(arg1 : FileType) : void;
	getAdditionalIndentOptions(arg1 : FileType) : CommonCodeStyleSettings.IndentOptions;
	loadAdditionalIndentOptions() : void;
	static getFileTypeIndentOptions(arg1 : FileTypeIndentOptionsProvider) : CommonCodeStyleSettings.IndentOptions;
	clearCodeStyleSettings() : void;
	getCommonSettings(arg1 : Language) : CommonCodeStyleSettings;
	getCommonSettings(arg1 : string) : CommonCodeStyleSettings;
	getRightMargin(arg1 : Language) : number;
	setRightMargin(arg1 : Language, arg2 : number) : void;
	getDefaultRightMargin() : number;
	setDefaultRightMargin(arg1 : number) : void;
}


declare interface CodeStyleSettings extends CommonCodeStyleSettings, Cloneable, JDOMExternalizable {}

declare module CodeStyleSettings {
	class TempFileType {
		name : string;
		description : string;
		defaultExtension : string;
		icon : Icon;
		binary : boolean;
		readOnly : boolean;
	}


	interface TempFileType extends FileType {}	class TypeToNameMap {
		constructor();
		addPair(arg1 : string, arg2 : string) : void;
		nameByType(arg1 : string) : string;
		copyFrom(arg1 : CodeStyleSettings.TypeToNameMap) : void;
	}


	interface TypeToNameMap extends JDOMExternalizable {}}

export = CodeStyleSettings
