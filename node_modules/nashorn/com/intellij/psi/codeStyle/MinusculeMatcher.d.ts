import NameUtil = require('nashorn/com/intellij/psi/codeStyle/NameUtil');
import FList = require('nashorn/com/intellij/util/containers/FList');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Matcher = require('nashorn/com/intellij/util/text/Matcher');
import Object = require('nashorn/java/lang/Object');

declare class MinusculeMatcher {
	constructor(arg1 : string, arg2 : NameUtil.MatchingCaseSensitivity);
	static isWordSeparator(arg1 : string) : boolean;
	static isWordStart(arg1 : string, arg2 : number) : boolean;
	hasWildCards() : boolean;
	hasFlag(arg1 : number, arg2 : boolean[]) : boolean;
	hasDots(arg1 : number) : boolean;
	static prependRange(arg1 : FList<TextRange>, arg2 : number, arg3 : number) : FList<TextRange>;
	matchingDegree(arg1 : string) : number;
	matchingDegree(arg1 : string, arg2 : boolean) : number;
	isStartMatch(arg1 : string) : boolean;
	matchingFragments(arg1 : string) : FList<TextRange>;
	matchWildcards(arg1 : string, arg2 : number, arg3 : number, arg4 : MinusculeMatcher.MatchingState) : FList<TextRange>;
	matchSkippingWords(arg1 : string, arg2 : number, arg3 : number, arg4 : boolean, arg5 : MinusculeMatcher.MatchingState) : FList<TextRange>;
	charEquals(arg1 : string, arg2 : number, arg3 : string, arg4 : boolean) : boolean;
	matchFragment(arg1 : string, arg2 : number, arg3 : number, arg4 : MinusculeMatcher.MatchingState) : FList<TextRange>;
	doMatchFragments(arg1 : string, arg2 : number, arg3 : number, arg4 : MinusculeMatcher.MatchingState) : FList<TextRange>;
	isFirstCharMatching(arg1 : string, arg2 : number, arg3 : number) : boolean;
	isWildcard(arg1 : number) : boolean;
	isPatternChar(arg1 : number, arg2 : string) : boolean;
	indexOfWordStart(arg1 : string, arg2 : number, arg3 : number) : number;
	indexOfIgnoreCase(arg1 : string, arg2 : number, arg3 : string, arg4 : number, arg5 : boolean) : number;
	static toUpperAscii(arg1 : string) : string;
	static toLowerAscii(arg1 : string) : string;
}


declare interface MinusculeMatcher extends Matcher {}

declare module MinusculeMatcher {
	class MatchingState extends Object {
		initializeState(arg1 : string) : void;
		releaseState() : void;
		registerFailure(arg1 : number, arg2 : number) : void;
		hasFailed(arg1 : number, arg2 : number) : boolean;
	}
}

export = MinusculeMatcher
