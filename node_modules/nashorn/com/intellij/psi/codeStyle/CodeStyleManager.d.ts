import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Collection = require('nashorn/java/util/Collection');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import Indent = require('nashorn/com/intellij/psi/codeStyle/Indent');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import Runnable = require('nashorn/java/lang/Runnable');
import Throwable = require('nashorn/java/lang/Throwable');
import ThrowableRunnable = require('nashorn/com/intellij/util/ThrowableRunnable');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');

declare class CodeStyleManager extends Object {
	project : Project;
	sequentialProcessingAllowed : boolean;
	constructor();
	static getInstance(arg1 : Project) : CodeStyleManager;
	static getInstance(arg1 : PsiManager) : CodeStyleManager;
	getProject() : Project;
	reformat(arg1 : PsiElement) : PsiElement;
	reformat(arg1 : PsiElement, arg2 : boolean) : PsiElement;
	reformatRange(arg1 : PsiElement, arg2 : number, arg3 : number) : PsiElement;
	reformatRange(arg1 : PsiElement, arg2 : number, arg3 : number, arg4 : boolean) : PsiElement;
	reformatText(arg1 : PsiFile, arg2 : number, arg3 : number) : void;
	reformatText(arg1 : PsiFile, arg2 : Collection<TextRange>) : void;
	adjustLineIndent(arg1 : PsiFile, arg2 : TextRange) : void;
	adjustLineIndent(arg1 : PsiFile, arg2 : number) : number;
	adjustLineIndent(arg1 : Document, arg2 : number) : number;
	isLineToBeIndented(arg1 : PsiFile, arg2 : number) : boolean;
	getLineIndent(arg1 : PsiFile, arg2 : number) : string;
	getLineIndent(arg1 : Document, arg2 : number) : string;
	getIndent(arg1 : string, arg2 : FileType) : Indent;
	fillIndent(arg1 : Indent, arg2 : FileType) : string;
	zeroIndent() : Indent;
	reformatNewlyAddedElement(arg1 : ASTNode, arg2 : ASTNode) : void;
	isSequentialProcessingAllowed() : boolean;
	performActionWithFormatterDisabled(arg1 : Runnable) : void;
	performActionWithFormatterDisabled<T extends Throwable>(arg1 : ThrowableRunnable<T>) : void;
	performActionWithFormatterDisabled<T>(arg1 : Computable<T>) : T;
}

export = CodeStyleManager
