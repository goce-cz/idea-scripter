import ArrayFactory = require('nashorn/com/intellij/util/ArrayFactory');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import PsiTypeElement = require('nashorn/com/intellij/psi/PsiTypeElement');
import PsiParameterList = require('nashorn/com/intellij/psi/PsiParameterList');
import PsiReferenceList = require('nashorn/com/intellij/psi/PsiReferenceList');
import PsiCodeBlock = require('nashorn/com/intellij/psi/PsiCodeBlock');
import PsiIdentifier = require('nashorn/com/intellij/psi/PsiIdentifier');
import PsiModifierList = require('nashorn/com/intellij/psi/PsiModifierList');
import HierarchicalMethodSignature = require('nashorn/com/intellij/psi/HierarchicalMethodSignature');
import PsiSubstitutor = require('nashorn/com/intellij/psi/PsiSubstitutor');
import MethodSignature = require('nashorn/com/intellij/psi/util/MethodSignature');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import List = require('nashorn/java/util/List');
import MethodSignatureBackedByPsiMethod = require('nashorn/com/intellij/psi/util/MethodSignatureBackedByPsiMethod');
import PsiMember = require('nashorn/com/intellij/psi/PsiMember');
import PsiNameIdentifierOwner = require('nashorn/com/intellij/psi/PsiNameIdentifierOwner');
import PsiModifierListOwner = require('nashorn/com/intellij/psi/PsiModifierListOwner');
import PsiDocCommentOwner = require('nashorn/com/intellij/psi/PsiDocCommentOwner');
import PsiTypeParameterListOwner = require('nashorn/com/intellij/psi/PsiTypeParameterListOwner');
import PomRenameableTarget = require('nashorn/com/intellij/pom/PomRenameableTarget');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiTarget = require('nashorn/com/intellij/psi/PsiTarget');

declare class PsiMethod {
	static EMPTY_ARRAY : PsiMethod[];
	static ARRAY_FACTORY : ArrayFactory<PsiMethod>;
	returnType : PsiType;
	returnTypeElement : PsiTypeElement;
	parameterList : PsiParameterList;
	throwsList : PsiReferenceList;
	body : PsiCodeBlock;
	varArgs : boolean;
	nameIdentifier : PsiIdentifier;
	modifierList : PsiModifierList;
	name : string;
	hierarchicalMethodSignature : HierarchicalMethodSignature;
	getReturnType() : PsiType;
	getReturnTypeElement() : PsiTypeElement;
	getParameterList() : PsiParameterList;
	getThrowsList() : PsiReferenceList;
	getBody() : PsiCodeBlock;
	isConstructor() : boolean;
	isVarArgs() : boolean;
	getSignature(arg1 : PsiSubstitutor) : MethodSignature;
	findSuperMethods() : PsiMethod[];
	findSuperMethods(arg1 : boolean) : PsiMethod[];
	findSuperMethods(arg1 : PsiClass) : PsiMethod[];
	findSuperMethodSignaturesIncludingStatic(arg1 : boolean) : List<MethodSignatureBackedByPsiMethod>;
	findDeepestSuperMethod() : PsiMethod;
	findDeepestSuperMethods() : PsiMethod[];
	getHierarchicalMethodSignature() : HierarchicalMethodSignature;
}


declare interface PsiMethod extends PsiMember, PsiNameIdentifierOwner, PsiModifierListOwner, PsiDocCommentOwner, PsiTypeParameterListOwner, PomRenameableTarget<PsiElement>, PsiTarget {}
export = PsiMethod
