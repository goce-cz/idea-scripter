import Object = require('nashorn/java/lang/Object');
import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import PsiField = require('nashorn/com/intellij/psi/PsiField');
import PsiMethod = require('nashorn/com/intellij/psi/PsiMethod');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiClassInitializer = require('nashorn/com/intellij/psi/PsiClassInitializer');
import PsiParameter = require('nashorn/com/intellij/psi/PsiParameter');
import PsiParameterList = require('nashorn/com/intellij/psi/PsiParameterList');
import PsiAnnotation = require('nashorn/com/intellij/psi/PsiAnnotation');
import PsiClassType = require('nashorn/com/intellij/psi/PsiClassType');
import PsiTypeParameterList = require('nashorn/com/intellij/psi/PsiTypeParameterList');
import PsiTypeParameter = require('nashorn/com/intellij/psi/PsiTypeParameter');
import PsiSubstitutor = require('nashorn/com/intellij/psi/PsiSubstitutor');
import LanguageLevel = require('nashorn/com/intellij/pom/java/LanguageLevel');
import PsiTypeParameterListOwner = require('nashorn/com/intellij/psi/PsiTypeParameterListOwner');
import Map = require('nashorn/java/util/Map');
import PsiPrimitiveType = require('nashorn/com/intellij/psi/PsiPrimitiveType');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import PsiDocComment = require('nashorn/com/intellij/psi/javadoc/PsiDocComment');

declare class JVMElementFactory extends Object {
	createClass(arg1 : string) : PsiClass;
	createInterface(arg1 : string) : PsiClass;
	createEnum(arg1 : string) : PsiClass;
	createField(arg1 : string, arg2 : PsiType) : PsiField;
	createMethod(arg1 : string, arg2 : PsiType) : PsiMethod;
	createMethod(arg1 : string, arg2 : PsiType, arg3 : PsiElement) : PsiMethod;
	createConstructor() : PsiMethod;
	createClassInitializer() : PsiClassInitializer;
	createParameter(arg1 : string, arg2 : PsiType) : PsiParameter;
	createParameter(arg1 : string, arg2 : PsiType, arg3 : PsiElement) : PsiParameter;
	createParameterList(arg1 : string[], arg2 : PsiType[]) : PsiParameterList;
	createMethodFromText(arg1 : string, arg2 : PsiElement) : PsiMethod;
	createAnnotationFromText(arg1 : string, arg2 : PsiElement) : PsiAnnotation;
	createExpressionFromText(arg1 : string, arg2 : PsiElement) : PsiElement;
	createReferenceElementByType(arg1 : PsiClassType) : PsiElement;
	createTypeParameterList() : PsiTypeParameterList;
	createTypeParameter(arg1 : string, arg2 : PsiClassType[]) : PsiTypeParameter;
	createType(arg1 : PsiClass) : PsiClassType;
	createAnnotationType(arg1 : string) : PsiClass;
	createConstructor(arg1 : string) : PsiMethod;
	createConstructor(arg1 : string, arg2 : PsiElement) : PsiMethod;
	createType(arg1 : PsiClass, arg2 : PsiSubstitutor) : PsiClassType;
	createType(arg1 : PsiClass, arg2 : PsiSubstitutor, arg3 : LanguageLevel) : PsiClassType;
	createType(arg1 : PsiClass, arg2 : PsiSubstitutor, arg3 : LanguageLevel, arg4 : PsiAnnotation[]) : PsiClassType;
	createType(arg1 : PsiClass, arg2 : PsiType) : PsiClassType;
	createType(arg1 : PsiClass, arg2 : PsiType[]) : PsiClassType;
	createRawSubstitutor(arg1 : PsiTypeParameterListOwner) : PsiSubstitutor;
	createSubstitutor(arg1 : Map<PsiTypeParameter, PsiType>) : PsiSubstitutor;
	createPrimitiveType(arg1 : string) : PsiPrimitiveType;
	createTypeByFQClassName(arg1 : string) : PsiClassType;
	createTypeByFQClassName(arg1 : string, arg2 : GlobalSearchScope) : PsiClassType;
	createDocCommentFromText(arg1 : string) : PsiDocComment;
	isValidClassName(arg1 : string) : boolean;
	isValidMethodName(arg1 : string) : boolean;
	isValidParameterName(arg1 : string) : boolean;
	isValidFieldName(arg1 : string) : boolean;
	isValidLocalVariableName(arg1 : string) : boolean;
}

export = JVMElementFactory
