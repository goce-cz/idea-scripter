import Project = require('nashorn/com/intellij/openapi/project/Project');
import VirtualFileWithId = require('nashorn/com/intellij/openapi/vfs/VirtualFileWithId');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import Collection = require('nashorn/java/util/Collection');
import Object = require('nashorn/java/lang/Object');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import AbstractProjectComponent = require('nashorn/com/intellij/openapi/components/AbstractProjectComponent');

declare class RefResolveService {
	static ENABLED : boolean;
	upToDate : boolean;
	queueSize : number;
	constructor(arg1 : Project);
	static getInstance(arg1 : Project) : RefResolveService;
	getBackwardIds(arg1 : VirtualFileWithId) : number[];
	restrictByBackwardIds(arg1 : VirtualFile, arg2 : GlobalSearchScope) : GlobalSearchScope;
	queue(arg1 : Collection<VirtualFile>, arg2 : Object) : boolean;
	isUpToDate() : boolean;
	getQueueSize() : number;
	addListener(arg1 : Disposable, arg2 : RefResolveService.Listener) : void;
}


declare interface RefResolveService extends AbstractProjectComponent {}

declare module RefResolveService {
	class Listener extends Object {
		constructor();
		fileResolved(arg1 : VirtualFile) : void;
		allFilesResolved() : void;
	}
}

export = RefResolveService
