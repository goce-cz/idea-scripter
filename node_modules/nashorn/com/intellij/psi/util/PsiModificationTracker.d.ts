import Key = require('nashorn/com/intellij/openapi/util/Key');
import Topic = require('nashorn/com/intellij/util/messages/Topic');
import ModificationTracker = require('nashorn/com/intellij/openapi/util/ModificationTracker');
import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');

declare class PsiModificationTracker {
	static MODIFICATION_COUNT : Key;
	static OUT_OF_CODE_BLOCK_MODIFICATION_COUNT : Key;
	static JAVA_STRUCTURE_MODIFICATION_COUNT : Key;
	static TOPIC : Topic<PsiModificationTracker.Listener>;
	modificationCount : number;
	outOfCodeBlockModificationCount : number;
	outOfCodeBlockModificationTracker : ModificationTracker;
	javaStructureModificationCount : number;
	javaStructureModificationTracker : ModificationTracker;
	getOutOfCodeBlockModificationCount() : number;
	getOutOfCodeBlockModificationTracker() : ModificationTracker;
	getJavaStructureModificationCount() : number;
	getJavaStructureModificationTracker() : ModificationTracker;
}


declare interface PsiModificationTracker extends ModificationTracker {}

declare module PsiModificationTracker {
	class Listener extends Object {
		modificationCountChanged() : void;
	}
	class SERVICE extends Object {
		static getInstance(arg1 : Project) : PsiModificationTracker;
	}
}

export = PsiModificationTracker
