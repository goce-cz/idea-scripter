import PsiPrimitiveType = require('nashorn/com/intellij/psi/PsiPrimitiveType');
import ArrayFactory = require('nashorn/com/intellij/util/ArrayFactory');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import PsiAnnotation = require('nashorn/com/intellij/psi/PsiAnnotation');
import PsiArrayType = require('nashorn/com/intellij/psi/PsiArrayType');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiClassType = require('nashorn/com/intellij/psi/PsiClassType');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import PsiTypeVisitor = require('nashorn/com/intellij/psi/PsiTypeVisitor');
import PsiAnnotationOwner = require('nashorn/com/intellij/psi/PsiAnnotationOwner');

declare class PsiType {
	static BYTE : PsiPrimitiveType;
	static CHAR : PsiPrimitiveType;
	static DOUBLE : PsiPrimitiveType;
	static FLOAT : PsiPrimitiveType;
	static INT : PsiPrimitiveType;
	static LONG : PsiPrimitiveType;
	static SHORT : PsiPrimitiveType;
	static BOOLEAN : PsiPrimitiveType;
	static VOID : PsiPrimitiveType;
	static NULL : PsiPrimitiveType;
	static EMPTY_ARRAY : PsiType[];
	static ARRAY_FACTORY : ArrayFactory<PsiType>;
	presentableText : string;
	canonicalText : string;
	internalCanonicalText : string;
	valid : boolean;
	arrayDimensions : number;
	deepComponentType : PsiType;
	resolveScope : GlobalSearchScope;
	superTypes : PsiType[];
	annotations : PsiAnnotation[];
	applicableAnnotations : PsiAnnotation[];
	static createArray(arg1 : number) : PsiType[];
	createArrayType() : PsiArrayType;
	createArrayType(arg1 : PsiAnnotation[]) : PsiArrayType;
	getPresentableText() : string;
	getCanonicalText(arg1 : boolean) : string;
	getCanonicalText() : string;
	getInternalCanonicalText() : string;
	isValid() : boolean;
	isAssignableFrom(arg1 : PsiType) : boolean;
	isConvertibleFrom(arg1 : PsiType) : boolean;
	equalsToText(arg1 : string) : boolean;
	static getTypeByName(arg1 : string, arg2 : Project, arg3 : GlobalSearchScope) : PsiClassType;
	static getJavaLangObject(arg1 : PsiManager, arg2 : GlobalSearchScope) : PsiClassType;
	static getJavaLangClass(arg1 : PsiManager, arg2 : GlobalSearchScope) : PsiClassType;
	static getJavaLangThrowable(arg1 : PsiManager, arg2 : GlobalSearchScope) : PsiClassType;
	static getJavaLangString(arg1 : PsiManager, arg2 : GlobalSearchScope) : PsiClassType;
	static getJavaLangError(arg1 : PsiManager, arg2 : GlobalSearchScope) : PsiClassType;
	static getJavaLangRuntimeException(arg1 : PsiManager, arg2 : GlobalSearchScope) : PsiClassType;
	accept<A>(arg1 : PsiTypeVisitor<A>) : A;
	getArrayDimensions() : number;
	getDeepComponentType() : PsiType;
	getResolveScope() : GlobalSearchScope;
	getSuperTypes() : PsiType[];
	getAnnotationsTextPrefix(arg1 : boolean, arg2 : boolean, arg3 : boolean) : string;
}


declare interface PsiType extends PsiAnnotationOwner {}

declare module PsiType {
	class Stub {
		canonicalText : string;
	}


	interface Stub extends PsiType {}}

export = PsiType
