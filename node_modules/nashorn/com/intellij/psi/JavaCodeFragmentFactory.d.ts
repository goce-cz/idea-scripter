import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiType = require('nashorn/com/intellij/psi/PsiType');
import PsiExpressionCodeFragment = require('nashorn/com/intellij/psi/PsiExpressionCodeFragment');
import JavaCodeFragment = require('nashorn/com/intellij/psi/JavaCodeFragment');
import PsiTypeCodeFragment = require('nashorn/com/intellij/psi/PsiTypeCodeFragment');
import PsiJavaCodeReferenceCodeFragment = require('nashorn/com/intellij/psi/PsiJavaCodeReferenceCodeFragment');

declare class JavaCodeFragmentFactory extends Object {
	static ALLOW_VOID : number;
	static ALLOW_ELLIPSIS : number;
	static ALLOW_DISJUNCTION : number;
	constructor();
	static getInstance(arg1 : Project) : JavaCodeFragmentFactory;
	createExpressionCodeFragment(arg1 : string, arg2 : PsiElement, arg3 : PsiType, arg4 : boolean) : PsiExpressionCodeFragment;
	createCodeBlockCodeFragment(arg1 : string, arg2 : PsiElement, arg3 : boolean) : JavaCodeFragment;
	createTypeCodeFragment(arg1 : string, arg2 : PsiElement, arg3 : boolean) : PsiTypeCodeFragment;
	createTypeCodeFragment(arg1 : string, arg2 : PsiElement, arg3 : boolean, arg4 : number) : PsiTypeCodeFragment;
	createReferenceCodeFragment(arg1 : string, arg2 : PsiElement, arg3 : boolean, arg4 : boolean) : PsiJavaCodeReferenceCodeFragment;
}

export = JavaCodeFragmentFactory
