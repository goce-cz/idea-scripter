import Object = require('nashorn/java/lang/Object');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Runnable = require('nashorn/java/lang/Runnable');
import CharSequence = require('nashorn/java/lang/CharSequence');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import Collection = require('nashorn/java/util/Collection');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import EventListener = require('nashorn/java/util/EventListener');

declare class PsiDocumentManager extends Object {
	uncommittedDocuments : Document[];
	constructor();
	isCommitted(arg1 : Document) : boolean;
	static getInstance(arg1 : Project) : PsiDocumentManager;
	getPsiFile(arg1 : Document) : PsiFile;
	getCachedPsiFile(arg1 : Document) : PsiFile;
	getDocument(arg1 : PsiFile) : Document;
	getCachedDocument(arg1 : PsiFile) : Document;
	commitAllDocuments() : void;
	performForCommittedDocument(arg1 : Document, arg2 : Runnable) : void;
	commitDocument(arg1 : Document) : void;
	getLastCommittedText(arg1 : Document) : CharSequence;
	getLastCommittedStamp(arg1 : Document) : number;
	getUncommittedDocuments() : Document[];
	isUncommited(arg1 : Document) : boolean;
	hasUncommitedDocuments() : boolean;
	commitAndRunReadAction(arg1 : Runnable) : void;
	commitAndRunReadAction<T>(arg1 : Computable<T>) : T;
	reparseFiles(arg1 : Collection<VirtualFile>, arg2 : boolean) : void;
	addListener(arg1 : PsiDocumentManager.Listener) : void;
	removeListener(arg1 : PsiDocumentManager.Listener) : void;
	isDocumentBlockedByPsi(arg1 : Document) : boolean;
	doPostponedOperationsAndUnblockDocument(arg1 : Document) : void;
	performWhenAllCommitted(arg1 : Runnable) : boolean;
}


declare module PsiDocumentManager {
	class Listener {
		documentCreated(arg1 : Document, arg2 : PsiFile) : void;
		fileCreated(arg1 : PsiFile, arg2 : Document) : void;
	}


	interface Listener extends EventListener {}}

export = PsiDocumentManager
