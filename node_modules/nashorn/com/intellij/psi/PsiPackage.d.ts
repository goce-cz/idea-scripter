import PsiClass = require('nashorn/com/intellij/psi/PsiClass');
import PsiModifierList = require('nashorn/com/intellij/psi/PsiModifierList');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import PsiCheckedRenameElement = require('nashorn/com/intellij/psi/PsiCheckedRenameElement');
import NavigationItem = require('nashorn/com/intellij/navigation/NavigationItem');
import PsiModifierListOwner = require('nashorn/com/intellij/psi/PsiModifierListOwner');
import PsiDirectoryContainer = require('nashorn/com/intellij/psi/PsiDirectoryContainer');
import PsiQualifiedNamedElement = require('nashorn/com/intellij/psi/PsiQualifiedNamedElement');

declare class PsiPackage {
	static PACKAGE_INFO_CLASS : string;
	static PACKAGE_INFO_FILE : string;
	static EMPTY_ARRAY : PsiPackage[];
	qualifiedName : string;
	parentPackage : PsiPackage;
	subPackages : PsiPackage[];
	classes : PsiClass[];
	annotationList : PsiModifierList;
	name : string;
	getParentPackage() : PsiPackage;
	getSubPackages() : PsiPackage[];
	getSubPackages(arg1 : GlobalSearchScope) : PsiPackage[];
	getClasses() : PsiClass[];
	getClasses(arg1 : GlobalSearchScope) : PsiClass[];
	getFiles(arg1 : GlobalSearchScope) : PsiFile[];
	getAnnotationList() : PsiModifierList;
	handleQualifiedNameChange(arg1 : string) : void;
	occursInPackagePrefixes() : VirtualFile[];
	containsClassNamed(arg1 : string) : boolean;
	findClassByShortName(arg1 : string, arg2 : GlobalSearchScope) : PsiClass[];
}


declare interface PsiPackage extends PsiCheckedRenameElement, NavigationItem, PsiModifierListOwner, PsiDirectoryContainer, PsiQualifiedNamedElement {}
export = PsiPackage
