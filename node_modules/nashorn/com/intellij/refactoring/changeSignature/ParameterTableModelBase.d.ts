import ParameterInfo = require('nashorn/com/intellij/refactoring/changeSignature/ParameterInfo');
import ParameterTableModelItemBase = require('nashorn/com/intellij/refactoring/changeSignature/ParameterTableModelItemBase');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import ColumnInfo = require('nashorn/com/intellij/util/ui/ColumnInfo');
import List = require('nashorn/java/util/List');
import Object = require('nashorn/java/lang/Object');
import ListTableModel = require('nashorn/com/intellij/util/ui/ListTableModel');
import RowEditableTableModel = require('nashorn/com/intellij/ui/RowEditableTableModel');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import PsiCodeFragment = require('nashorn/com/intellij/psi/PsiCodeFragment');
import TableCellRenderer = require('nashorn/javax/swing/table/TableCellRenderer');
import TableCellEditor = require('nashorn/javax/swing/table/TableCellEditor');

declare class ParameterTableModelBase<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>> {
	constructor(arg1 : PsiElement, arg2 : PsiElement, arg3 : ColumnInfo[]);
	createRowItem(arg1 : P) : TableItem;
	setParameterInfos(arg1 : List<P>) : void;
	setValueAtWithoutUpdate(arg1 : Object, arg2 : number, arg3 : number) : void;
}


declare interface ParameterTableModelBase<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>> extends ListTableModel<TableItem>, RowEditableTableModel {}

declare module ParameterTableModelBase {
	class AnyVarColumn<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>> {
		constructor();
	}


	interface AnyVarColumn<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>> extends ParameterTableModelBase.ColumnInfoBase<P, TableItem, boolean> {}	class DefaultValueColumn<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>> {
		constructor(arg1 : Project, arg2 : FileType);
		constructor(arg1 : Project, arg2 : FileType, arg3 : string);
	}


	interface DefaultValueColumn<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>> extends ParameterTableModelBase.ColumnInfoBase<P, TableItem, PsiCodeFragment> {}	class NameColumn<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>> {
		constructor(arg1 : Project);
		constructor(arg1 : Project, arg2 : string);
	}


	interface NameColumn<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>> extends ParameterTableModelBase.ColumnInfoBase<P, TableItem, string> {}	class TypeColumn<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>> {
		constructor(arg1 : Project, arg2 : FileType);
		constructor(arg1 : Project, arg2 : FileType, arg3 : string);
	}


	interface TypeColumn<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>> extends ParameterTableModelBase.ColumnInfoBase<P, TableItem, PsiCodeFragment> {}	class ColumnInfoBase<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>, Aspect> {
		constructor(arg1 : string);
		doCreateRenderer(arg1 : TableItem) : TableCellRenderer;
		doCreateEditor(arg1 : TableItem) : TableCellEditor;
	}


	interface ColumnInfoBase<P extends ParameterInfo, TableItem extends ParameterTableModelItemBase<P>, Aspect> extends ColumnInfo<TableItem, Aspect> {}}

export = ParameterTableModelBase
