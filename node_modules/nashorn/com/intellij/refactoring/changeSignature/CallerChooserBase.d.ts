import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Tree = require('nashorn/com/intellij/ui/treeStructure/Tree');
import JComponent = require('nashorn/javax/swing/JComponent');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import Set = require('nashorn/java/util/Set');
import HashSet = require('nashorn/com/intellij/util/containers/HashSet');
import Runnable = require('nashorn/java/lang/Runnable');
import MethodNodeBase = require('nashorn/com/intellij/refactoring/changeSignature/MethodNodeBase');
import Collection = require('nashorn/java/util/Collection');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import DialogWrapper = require('nashorn/com/intellij/openapi/ui/DialogWrapper');

declare class CallerChooserBase<M extends PsiElement> {
	tree : Tree;
	preferredFocusedComponent : JComponent;
	constructor(arg1 : M, arg2 : Project, arg3 : string, arg4 : Tree, arg5 : string, arg6 : Consumer<Set<M>>);
	createTreeNode(arg1 : M, arg2 : HashSet<M>, arg3 : Runnable) : MethodNodeBase<M>;
	findDeepestSuperMethods(arg1 : M) : M[];
	getEmptyCalleeText() : string;
	getEmptyCallerText() : string;
	getTree() : Tree;
	a(arg1 : MethodNodeBase<M>) : void;
	getCalleeNode(arg1 : MethodNodeBase<M>) : MethodNodeBase<M>;
	getCallerNode(arg1 : MethodNodeBase<M>) : MethodNodeBase<M>;
	findElementsToHighlight(arg1 : M, arg2 : PsiElement) : Collection<PsiElement>;
	a(arg1 : M) : string;
	b(arg1 : M) : number;
	a() : JComponent;
	b() : Editor;
	c() : Tree;
	getTopMethod() : M;
	a(arg1 : Set<M>) : void;
	a(arg1 : MethodNodeBase<M>, arg2 : Set<M>) : void;
	getSelectedNodes() : Set<MethodNodeBase<M>>;
	b(arg1 : MethodNodeBase<M>, arg2 : Set<MethodNodeBase<M>>) : void;
}


declare interface CallerChooserBase<M extends PsiElement> extends DialogWrapper {}
export = CallerChooserBase
