import ParameterInfo = require('nashorn/com/intellij/refactoring/changeSignature/ParameterInfo');
import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Enum = require('nashorn/java/lang/Enum');

declare class MethodDescriptor<P extends ParameterInfo, V> extends Object {
	name : string;
	parameters : List<P>;
	parametersCount : number;
	visibility : V;
	method : PsiElement;
	getName() : string;
	getParameters() : List<P>;
	getParametersCount() : number;
	getVisibility() : V;
	getMethod() : PsiElement;
	canChangeVisibility() : boolean;
	canChangeParameters() : boolean;
	canChangeName() : boolean;
	canChangeReturnType() : MethodDescriptor.ReadWriteOption;
}


declare module MethodDescriptor {
	class ReadWriteOption {
		static ReadWrite : MethodDescriptor.ReadWriteOption;
		static Read : MethodDescriptor.ReadWriteOption;
		static None : MethodDescriptor.ReadWriteOption;
	}


	interface ReadWriteOption extends Enum<MethodDescriptor.ReadWriteOption> {}}

export = MethodDescriptor
