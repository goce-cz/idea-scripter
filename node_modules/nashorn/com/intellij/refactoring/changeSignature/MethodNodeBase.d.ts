import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import HashSet = require('nashorn/java/util/HashSet');
import List = require('nashorn/java/util/List');
import ColoredTreeCellRenderer = require('nashorn/com/intellij/ui/ColoredTreeCellRenderer');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import CheckedTreeNode = require('nashorn/com/intellij/ui/CheckedTreeNode');

declare class MethodNodeBase<M extends PsiElement> {
	childCount : number;
	method : M;
	elementToSearch : PsiElement;
	createNode(arg1 : M, arg2 : HashSet<M>) : MethodNodeBase<M>;
	computeCallers() : List<M>;
	customizeRendererText(arg1 : ColoredTreeCellRenderer) : void;
	getFilter() : Condition<M>;
	a() : void;
	b() : List<M>;
	customizeRenderer(arg1 : ColoredTreeCellRenderer) : void;
	getMethod() : M;
	getElementToSearch() : PsiElement;
}


declare interface MethodNodeBase<M extends PsiElement> extends CheckedTreeNode {}
export = MethodNodeBase
