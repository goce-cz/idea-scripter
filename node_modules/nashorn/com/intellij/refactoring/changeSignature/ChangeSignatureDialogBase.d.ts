import ParameterInfo = require('nashorn/com/intellij/refactoring/changeSignature/ParameterInfo');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import MethodDescriptor = require('nashorn/com/intellij/refactoring/changeSignature/MethodDescriptor');
import ParameterTableModelItemBase = require('nashorn/com/intellij/refactoring/changeSignature/ParameterTableModelItemBase');
import ParameterTableModelBase = require('nashorn/com/intellij/refactoring/changeSignature/ParameterTableModelBase');
import List = require('nashorn/java/util/List');
import JComponent = require('nashorn/javax/swing/JComponent');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import LanguageFileType = require('nashorn/com/intellij/openapi/fileTypes/LanguageFileType');
import BaseRefactoringProcessor = require('nashorn/com/intellij/refactoring/BaseRefactoringProcessor');
import PsiCodeFragment = require('nashorn/com/intellij/psi/PsiCodeFragment');
import Tree = require('nashorn/com/intellij/ui/treeStructure/Tree');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import Set = require('nashorn/java/util/Set');
import CallerChooserBase = require('nashorn/com/intellij/refactoring/changeSignature/CallerChooserBase');
import VisibilityPanelBase = require('nashorn/com/intellij/refactoring/ui/VisibilityPanelBase');
import JBTable = require('nashorn/com/intellij/ui/table/JBTable');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import EditorTextField = require('nashorn/com/intellij/ui/EditorTextField');
import DelegationPanel = require('nashorn/com/intellij/refactoring/ui/DelegationPanel');
import JPanel = require('nashorn/javax/swing/JPanel');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import JTable = require('nashorn/javax/swing/JTable');
import JBTableRowEditor = require('nashorn/com/intellij/util/ui/table/JBTableRowEditor');
import TableView = require('nashorn/com/intellij/ui/table/TableView');
import Container = require('nashorn/java/awt/Container');
import MethodSignatureComponent = require('nashorn/com/intellij/refactoring/ui/MethodSignatureComponent');
import RefactoringDialog = require('nashorn/com/intellij/refactoring/ui/RefactoringDialog');
import JBListTable = require('nashorn/com/intellij/util/ui/table/JBListTable');
import ChangeListener = require('nashorn/javax/swing/event/ChangeListener');
import DocumentListener = require('nashorn/com/intellij/openapi/editor/event/DocumentListener');
import TableModelListener = require('nashorn/javax/swing/event/TableModelListener');

declare class ChangeSignatureDialogBase<ParamInfo extends ParameterInfo, Method extends PsiElement, Visibility, Descriptor extends MethodDescriptor<ParamInfo, Visibility>, ParameterTableModelItem extends ParameterTableModelItemBase<ParamInfo>, ParameterTableModel extends ParameterTableModelBase<ParamInfo, ParameterTableModelItem>> {
	parameters : List<ParamInfo>;
	generateDelegate : boolean;
	preferredFocusedComponent : JComponent;
	constructor(arg1 : Project, arg2 : Descriptor, arg3 : boolean, arg4 : PsiElement);
	getFileType() : LanguageFileType;
	createParametersInfoModel(arg1 : Descriptor) : ParameterTableModel;
	createRefactoringProcessor() : BaseRefactoringProcessor;
	createReturnTypeCodeFragment() : PsiCodeFragment;
	createCallerChooser(arg1 : string, arg2 : Tree, arg3 : Consumer<Set<Method>>) : CallerChooserBase<Method>;
	validateAndCommitData() : string;
	calculateSignature() : string;
	createVisibilityControl() : VisibilityPanelBase<Visibility>;
	setParameterInfos(arg1 : List<ParamInfo>) : void;
	getMethodName() : string;
	getVisibility() : Visibility;
	getParameters() : List<ParamInfo>;
	isGenerateDelegate() : boolean;
	getSelectedIdx() : number;
	getTableComponent() : JBTable;
	createReturnTypeTextField(arg1 : Document) : EditorTextField;
	b() : DelegationPanel;
	createOptionsPanel() : JComponent;
	createVisibilityPanel() : JPanel;
	createAdditionalPanels() : List<Pair<string, JPanel>>;
	isListTableViewSupported() : boolean;
	createParametersPanel(arg1 : boolean) : JPanel;
	createParametersListTable() : ChangeSignatureDialogBase.ParametersListTable;
	getTableEditor(arg1 : JTable, arg2 : ParameterTableModelItemBase<ParamInfo>) : JBTableRowEditor;
	isEmptyRow(arg1 : ParameterTableModelItemBase<ParamInfo>) : boolean;
	getRowPresentation(arg1 : ParameterTableModelItemBase<ParamInfo>, arg2 : boolean, arg3 : boolean) : JComponent;
	customizeParametersTable(arg1 : TableView<ParameterTableModelItem>) : void;
	c() : JComponent;
	static a(arg1 : Container) : Container;
	createSignaturePreviewComponent() : MethodSignatureComponent;
	updateSignature() : void;
	updateSignatureAlarmFired() : void;
	d() : void;
	updatePropagateButtons() : void;
	mayPropagateParameters() : boolean;
}


declare interface ChangeSignatureDialogBase<ParamInfo extends ParameterInfo, Method extends PsiElement, Visibility, Descriptor extends MethodDescriptor<ParamInfo, Visibility>, ParameterTableModelItem extends ParameterTableModelItemBase<ParamInfo>, ParameterTableModel extends ParameterTableModelBase<ParamInfo, ParameterTableModelItem>> extends RefactoringDialog {}

declare module ChangeSignatureDialogBase {
	class ParametersListTable {
		constructor();
		getRowEditor(arg1 : ParameterTableModelItemBase<ParamInfo>) : JBTableRowEditor;
		getRowItem(arg1 : number) : ParameterTableModelItem;
	}


	interface ParametersListTable extends JBListTable {}	class UpdateSignatureListener {
		a() : void;
	}


	interface UpdateSignatureListener extends ChangeListener, DocumentListener, TableModelListener {}}

export = ChangeSignatureDialogBase
