import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JComponent = require('nashorn/javax/swing/JComponent');
import JCheckBox = require('nashorn/javax/swing/JCheckBox');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import JPanel = require('nashorn/javax/swing/JPanel');
import GridBagConstraints = require('nashorn/java/awt/GridBagConstraints');
import RenameProcessor = require('nashorn/com/intellij/refactoring/rename/RenameProcessor');
import NameSuggestionsField = require('nashorn/com/intellij/refactoring/ui/NameSuggestionsField');
import RefactoringDialog = require('nashorn/com/intellij/refactoring/ui/RefactoringDialog');

declare class RenameDialog {
	psiElement : PsiElement;
	suggestedNames : string[];
	newName : string;
	searchInComments : boolean;
	searchInNonJavaFiles : boolean;
	preferredFocusedComponent : JComponent;
	cbSearchInComments : JCheckBox;
	constructor(arg1 : Project, arg2 : PsiElement, arg3 : PsiElement, arg4 : Editor);
	static showRenameDialog(arg1 : DataContext, arg2 : RenameDialog) : void;
	getLabelText() : string;
	getPsiElement() : PsiElement;
	isToSearchForTextOccurencesForRename() : boolean;
	isToSearchInCommentsForRename() : boolean;
	getFullName() : string;
	createNewNameComponent() : void;
	preselectExtension(arg1 : number, arg2 : number) : void;
	processNewNameChanged() : void;
	getSuggestedNames() : string[];
	getNewName() : string;
	isSearchInComments() : boolean;
	isSearchInNonJavaFiles() : boolean;
	createCheckboxes(arg1 : JPanel, arg2 : GridBagConstraints) : void;
	performRename(arg1 : string) : void;
	createRenameProcessor(arg1 : string) : RenameProcessor;
	getNameSuggestionsField() : NameSuggestionsField;
	getCbSearchInComments() : JCheckBox;
}


declare interface RenameDialog extends RefactoringDialog {}
export = RenameDialog
