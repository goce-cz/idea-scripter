import LanguageExtension = require('nashorn/com/intellij/lang/LanguageExtension');
import ResolveSnapshotProvider = require('nashorn/com/intellij/refactoring/rename/ResolveSnapshotProvider');
import PsiNamedElement = require('nashorn/com/intellij/psi/PsiNamedElement');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Collection = require('nashorn/java/util/Collection');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import LinkedHashSet = require('nashorn/java/util/LinkedHashSet');
import StartMarkAction = require('nashorn/com/intellij/openapi/command/impl/StartMarkAction');
import InplaceRefactoring = require('nashorn/com/intellij/refactoring/rename/inplace/InplaceRefactoring');

declare class VariableInplaceRenamer {
	static INSTANCE : LanguageExtension<ResolveSnapshotProvider>;
	constructor(arg1 : PsiNamedElement, arg2 : Editor);
	constructor(arg1 : PsiNamedElement, arg2 : Editor, arg3 : Project);
	constructor(arg1 : PsiNamedElement, arg2 : Editor, arg3 : Project, arg4 : string, arg5 : string);
	performInplaceRename() : boolean;
	appendAdditionalElement(arg1 : Collection<PsiReference>, arg2 : Collection<Pair<PsiElement, TextRange>>) : boolean;
	shouldCreateSnapshot() : boolean;
	getRefactoringId() : string;
	createInplaceRenamerToRestart(arg1 : PsiNamedElement, arg2 : Editor, arg3 : string) : VariableInplaceRenamer;
	performOnInvalidIdentifier(arg1 : string, arg2 : LinkedHashSet<string>) : void;
	renameSynthetic(arg1 : string) : void;
	performRefactoringRename(arg1 : string, arg2 : StartMarkAction) : void;
	revertStateOnFinish() : void;
}


declare interface VariableInplaceRenamer extends InplaceRefactoring {}
export = VariableInplaceRenamer
