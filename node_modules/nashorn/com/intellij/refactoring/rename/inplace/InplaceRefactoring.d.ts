import Object = require('nashorn/java/lang/Object');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import PsiNamedElement = require('nashorn/com/intellij/psi/PsiNamedElement');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import LinkedHashSet = require('nashorn/java/util/LinkedHashSet');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import List = require('nashorn/java/util/List');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import MyLookupExpression = require('nashorn/com/intellij/refactoring/rename/inplace/MyLookupExpression');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Collection = require('nashorn/java/util/Collection');
import TemplateBuilderImpl = require('nashorn/com/intellij/codeInsight/template/TemplateBuilderImpl');
import Template = require('nashorn/com/intellij/codeInsight/template/Template');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import StartMarkAction = require('nashorn/com/intellij/openapi/command/impl/StartMarkAction');
import Map = require('nashorn/java/util/Map');
import TextAttributes = require('nashorn/com/intellij/openapi/editor/markup/TextAttributes');
import RangeHighlighter = require('nashorn/com/intellij/openapi/editor/markup/RangeHighlighter');
import HighlightManager = require('nashorn/com/intellij/codeInsight/highlighting/HighlightManager');
import Language = require('nashorn/com/intellij/lang/Language');
import FileViewProvider = require('nashorn/com/intellij/psi/FileViewProvider');
import RefactoringActionHandler = require('nashorn/com/intellij/refactoring/RefactoringActionHandler');
import JComponent = require('nashorn/javax/swing/JComponent');
import TemplateEditingAdapter = require('nashorn/com/intellij/codeInsight/template/TemplateEditingAdapter');

declare class InplaceRefactoring extends Object {
	static INPLACE_RENAMER : Key<InplaceRefactoring>;
	static INTRODUCE_RESTART : Key<boolean>;
	initialName : string;
	constructor(arg1 : Editor, arg2 : PsiNamedElement, arg3 : Project);
	constructor(arg1 : Editor, arg2 : PsiNamedElement, arg3 : Project, arg4 : string);
	constructor(arg1 : Editor, arg2 : PsiNamedElement, arg3 : Project, arg4 : string, arg5 : string);
	static unableToStartWarning(arg1 : Project, arg2 : Editor) : void;
	setAdvertisementText(arg1 : string) : void;
	performInplaceRefactoring(arg1 : LinkedHashSet<string>) : boolean;
	notSameFile(arg1 : VirtualFile, arg2 : PsiFile) : boolean;
	getReferencesSearchScope(arg1 : VirtualFile) : SearchScope;
	checkLocalScope() : PsiElement;
	collectAdditionalElementsToRename(arg1 : List<Pair<PsiElement, TextRange>>) : void;
	shouldSelectAll() : boolean;
	createLookupExpression(arg1 : PsiElement) : MyLookupExpression;
	acceptReference(arg1 : PsiReference) : boolean;
	collectRefs(arg1 : SearchScope) : Collection<PsiReference>;
	buildTemplateAndStart(arg1 : Collection<PsiReference>, arg2 : Collection<Pair<PsiElement, TextRange>>, arg3 : PsiElement, arg4 : PsiFile) : boolean;
	isReferenceAtCaret(arg1 : PsiElement, arg2 : PsiReference) : boolean;
	beforeTemplateStart() : void;
	a(arg1 : TemplateBuilderImpl) : void;
	a(arg1 : Template, arg2 : Editor) : void;
	a(arg1 : number) : void;
	restoreSelection() : void;
	restoreCaretOffset(arg1 : number) : number;
	navigateToAlreadyStarted(arg1 : Document, arg2 : number) : void;
	static a(arg1 : Document, arg2 : Project, arg3 : number) : void;
	getNameIdentifier() : PsiElement;
	startRename() : StartMarkAction;
	getVariable() : PsiNamedElement;
	moveOffsetAfter(arg1 : boolean) : void;
	addAdditionalVariables(arg1 : TemplateBuilderImpl) : void;
	addReferenceAtCaret(arg1 : Collection<PsiReference>) : void;
	a(arg1 : Collection<PsiReference>, arg2 : PsiReference) : void;
	showDialogAdvertisement(arg1 : string) : void;
	getInitialName() : string;
	revertState() : void;
	getCommandName() : string;
	finish(arg1 : boolean) : void;
	addHighlights(arg1 : Map<TextRange, TextAttributes>, arg2 : Editor, arg3 : Collection<RangeHighlighter>, arg4 : HighlightManager) : void;
	performRefactoring() : boolean;
	performCleanup() : void;
	a(arg1 : PsiReference, arg2 : PsiElement, arg3 : TemplateBuilderImpl, arg4 : number) : void;
	a(arg1 : PsiElement, arg2 : PsiElement, arg3 : TemplateBuilderImpl) : void;
	a(arg1 : PsiElement, arg2 : TextRange, arg3 : PsiElement, arg4 : TemplateBuilderImpl) : void;
	setElementToRename(arg1 : PsiNamedElement) : void;
	isIdentifier(arg1 : string, arg2 : Language) : boolean;
	static getTopLevelVirtualFile(arg1 : FileViewProvider) : VirtualFile;
	static checkCleared() : void;
	a(arg1 : PsiElement, arg2 : Collection<PsiReference>, arg3 : Collection<Pair<PsiElement, TextRange>>, arg4 : number) : PsiElement;
	a(arg1 : number, arg2 : TextRange, arg3 : PsiElement) : boolean;
	a(arg1 : number, arg2 : TextRange, arg3 : PsiElement, arg4 : number) : boolean;
	isRestart() : boolean;
	static canStartAnotherRefactoring(arg1 : Editor, arg2 : Project, arg3 : RefactoringActionHandler, arg4 : PsiElement[]) : boolean;
	static getActiveInplaceRenamer(arg1 : Editor) : InplaceRefactoring;
	startsOnTheSameElement(arg1 : RefactoringActionHandler, arg2 : PsiElement) : boolean;
	releaseResources() : void;
	getComponent() : JComponent;
	showBalloon() : void;
	releaseIfNotRestart() : void;
}


declare module InplaceRefactoring {
	class MyTemplateListener {
		restoreDaemonUpdateState() : void;
	}


	interface MyTemplateListener extends TemplateEditingAdapter {}}

export = InplaceRefactoring
