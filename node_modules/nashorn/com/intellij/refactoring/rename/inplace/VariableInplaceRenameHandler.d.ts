import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import InplaceRefactoring = require('nashorn/com/intellij/refactoring/rename/inplace/InplaceRefactoring');
import VariableInplaceRenamer = require('nashorn/com/intellij/refactoring/rename/inplace/VariableInplaceRenamer');
import RenameHandler = require('nashorn/com/intellij/refactoring/rename/RenameHandler');

declare class VariableInplaceRenameHandler {
	static initialName : string;
	constructor();
	isAvailable(arg1 : PsiElement, arg2 : Editor, arg3 : PsiFile) : boolean;
	checkAvailable(arg1 : PsiElement, arg2 : Editor, arg3 : DataContext) : boolean;
	doRename(arg1 : PsiElement, arg2 : Editor, arg3 : DataContext) : InplaceRefactoring;
	static performDialogRename(arg1 : PsiElement, arg2 : Editor, arg3 : DataContext) : void;
	static performDialogRename(arg1 : PsiElement, arg2 : Editor, arg3 : DataContext, arg4 : string) : void;
	static getInitialName() : string;
	createRenamer(arg1 : PsiElement, arg2 : Editor) : VariableInplaceRenamer;
}


declare interface VariableInplaceRenameHandler extends RenameHandler {}
export = VariableInplaceRenameHandler
