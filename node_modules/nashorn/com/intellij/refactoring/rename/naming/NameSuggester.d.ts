import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import TreeMap = require('nashorn/java/util/TreeMap');
import StringBuffer = require('nashorn/java/lang/StringBuffer');
import TIntIntHashMap = require('nashorn/gnu/trove/TIntIntHashMap');

declare class NameSuggester extends Object {
	constructor(arg1 : string, arg2 : string);
	a(arg1 : string, arg2 : number) : number;
	getChanges() : List<Pair<string, string>>;
	suggestName(arg1 : string) : string;
	static a(arg1 : string, arg2 : string[]) : Pair<number[], number[]>;
	static a(arg1 : TreeMap<Pair<number, number>, string>, arg2 : string[], arg3 : string) : string;
	static a(arg1 : StringBuffer, arg2 : string) : void;
	static a(arg1 : Pair<number[], number[]>, arg2 : number, arg3 : string) : string;
	a(arg1 : string[], arg2 : TIntIntHashMap) : TreeMap<Pair<number, number>, string>;
	static a(arg1 : string, arg2 : string) : string;
	static b(arg1 : string, arg2 : string) : string;
	static a(arg1 : TIntIntHashMap, arg2 : number, arg3 : number) : boolean;
	a(arg1 : string[]) : TIntIntHashMap;
	a(arg1 : number, arg2 : number, arg3 : string) : NameSuggester.Match;
}


declare module NameSuggester {
	class Match extends Object {
		constructor(arg1 : number, arg2 : number, arg3 : string);
	}
	class OriginalToNewChange extends Object {
		constructor(arg1 : number, arg2 : number, arg3 : number, arg4 : number);
		getOldLength() : number;
		getOldString() : string;
		getNewString() : string;
	}
}

export = NameSuggester
