import Object = require('nashorn/java/lang/Object');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import RenameDialog = require('nashorn/com/intellij/refactoring/rename/RenameDialog');
import UsageInfo = require('nashorn/com/intellij/usageView/UsageInfo');
import RefactoringElementListener = require('nashorn/com/intellij/refactoring/listeners/RefactoringElementListener');
import Collection = require('nashorn/java/util/Collection');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import Map = require('nashorn/java/util/Map');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import MultiMap = require('nashorn/com/intellij/util/containers/MultiMap');
import List = require('nashorn/java/util/List');
import Runnable = require('nashorn/java/lang/Runnable');
import Pass = require('nashorn/com/intellij/openapi/util/Pass');

declare class RenamePsiElementProcessor extends Object {
	static DEFAULT : RenamePsiElementProcessor;
	inplaceRenameSupported : boolean;
	constructor();
	canProcessElement(arg1 : PsiElement) : boolean;
	createRenameDialog(arg1 : Project, arg2 : PsiElement, arg3 : PsiElement, arg4 : Editor) : RenameDialog;
	renameElement(arg1 : PsiElement, arg2 : string, arg3 : UsageInfo[], arg4 : RefactoringElementListener) : void;
	findReferences(arg1 : PsiElement, arg2 : boolean) : Collection<PsiReference>;
	findReferences(arg1 : PsiElement) : Collection<PsiReference>;
	getTextOccurrenceSearchStrings(arg1 : PsiElement, arg2 : string) : Pair<string, string>;
	getQualifiedNameAfterRename(arg1 : PsiElement, arg2 : string, arg3 : boolean) : string;
	prepareRenaming(arg1 : PsiElement, arg2 : string, arg3 : Map<PsiElement, string>) : void;
	prepareRenaming(arg1 : PsiElement, arg2 : string, arg3 : Map<PsiElement, string>, arg4 : SearchScope) : void;
	findExistingNameConflicts(arg1 : PsiElement, arg2 : string, arg3 : MultiMap<PsiElement, string>) : void;
	findExistingNameConflicts(arg1 : PsiElement, arg2 : string, arg3 : MultiMap<PsiElement, string>, arg4 : Map<PsiElement, string>) : void;
	isInplaceRenameSupported() : boolean;
	static allForElement(arg1 : PsiElement) : List<RenamePsiElementProcessor>;
	static forElement(arg1 : PsiElement) : RenamePsiElementProcessor;
	getPostRenameCallback(arg1 : PsiElement, arg2 : string, arg3 : RefactoringElementListener) : Runnable;
	getHelpID(arg1 : PsiElement) : string;
	isToSearchInComments(arg1 : PsiElement) : boolean;
	setToSearchInComments(arg1 : PsiElement, arg2 : boolean) : void;
	isToSearchForTextOccurrences(arg1 : PsiElement) : boolean;
	setToSearchForTextOccurrences(arg1 : PsiElement, arg2 : boolean) : void;
	showRenamePreviewButton(arg1 : PsiElement) : boolean;
	substituteElementToRename(arg1 : PsiElement, arg2 : Editor) : PsiElement;
	substituteElementToRename(arg1 : PsiElement, arg2 : Editor, arg3 : Pass<PsiElement>) : void;
	findCollisions(arg1 : PsiElement, arg2 : string, arg3 : Map<PsiElement, string>, arg4 : List<UsageInfo>) : void;
	forcesShowPreview() : boolean;
	getElementToSearchInStringsAndComments(arg1 : PsiElement) : PsiElement;
}

export = RenamePsiElementProcessor
