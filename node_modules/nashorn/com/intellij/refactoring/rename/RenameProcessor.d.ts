import Set = require('nashorn/java/util/Set');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Collection = require('nashorn/java/util/Collection');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import AutomaticRenamerFactory = require('nashorn/com/intellij/refactoring/rename/naming/AutomaticRenamerFactory');
import LinkedHashMap = require('nashorn/java/util/LinkedHashMap');
import List = require('nashorn/java/util/List');
import UsageInfo = require('nashorn/com/intellij/usageView/UsageInfo');
import AutomaticRenamer = require('nashorn/com/intellij/refactoring/rename/naming/AutomaticRenamer');
import MultiMap = require('nashorn/com/intellij/util/containers/MultiMap');
import BaseRefactoringProcessor = require('nashorn/com/intellij/refactoring/BaseRefactoringProcessor');

declare class RenameProcessor {
	elements : Set<PsiElement>;
	newNames : Collection<string>;
	searchInComments : boolean;
	searchTextOccurrences : boolean;
	constructor(arg1 : Project, arg2 : PsiElement, arg3 : string, arg4 : boolean, arg5 : boolean);
	constructor(arg1 : Project);
	getElements() : Set<PsiElement>;
	getNewName(arg1 : PsiElement) : string;
	addRenamerFactory(arg1 : AutomaticRenamerFactory) : void;
	removeRenamerFactory(arg1 : AutomaticRenamerFactory) : void;
	prepareRenaming(arg1 : PsiElement, arg2 : string, arg3 : LinkedHashMap<PsiElement, string>) : void;
	a() : string;
	static assertNonCompileElement(arg1 : PsiElement) : void;
	a(arg1 : PsiElement, arg2 : string) : void;
	a(arg1 : List<UsageInfo>) : boolean;
	showAutomaticRenamingDialog(arg1 : AutomaticRenamer) : boolean;
	addElement(arg1 : PsiElement, arg2 : string) : void;
	a(arg1 : string) : void;
	static classifyUsages(arg1 : Collection<PsiElement>, arg2 : UsageInfo[]) : MultiMap<PsiElement, UsageInfo>;
	getNewNames() : Collection<string>;
	setSearchInComments(arg1 : boolean) : void;
	setSearchTextOccurrences(arg1 : boolean) : void;
	isSearchInComments() : boolean;
	isSearchTextOccurrences() : boolean;
	setCommandName(arg1 : string) : void;
}


declare interface RenameProcessor extends BaseRefactoringProcessor {}
export = RenameProcessor
