import UsageInfo = require('nashorn/com/intellij/usageView/UsageInfo');
import UsageViewDescriptor = require('nashorn/com/intellij/usageView/UsageViewDescriptor');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import Runnable = require('nashorn/java/lang/Runnable');
import RefactoringTransaction = require('nashorn/com/intellij/refactoring/listeners/impl/RefactoringTransaction');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Collection = require('nashorn/java/util/Collection');
import UndoConfirmationPolicy = require('nashorn/com/intellij/openapi/command/UndoConfirmationPolicy');
import Usage = require('nashorn/com/intellij/usages/Usage');
import UsageViewPresentation = require('nashorn/com/intellij/usages/UsageViewPresentation');
import Factory = require('nashorn/com/intellij/openapi/util/Factory');
import UsageSearcher = require('nashorn/com/intellij/usages/UsageSearcher');
import UsageView = require('nashorn/com/intellij/usages/UsageView');
import MultiMap = require('nashorn/com/intellij/util/containers/MultiMap');
import ConflictsDialog = require('nashorn/com/intellij/refactoring/ui/ConflictsDialog');
import RefactoringEventData = require('nashorn/com/intellij/refactoring/listeners/RefactoringEventData');
import Language = require('nashorn/com/intellij/lang/Language');
import RuntimeException = require('nashorn/java/lang/RuntimeException');

declare class BaseRefactoringProcessor {
	createUsageViewDescriptor(arg1 : UsageInfo[]) : UsageViewDescriptor;
	findUsages() : UsageInfo[];
	refreshElements(arg1 : PsiElement[]) : void;
	preprocessUsages(arg1 : Ref<UsageInfo[]>) : boolean;
	isPreviewUsages(arg1 : UsageInfo[]) : boolean;
	isPreviewUsages() : boolean;
	setPreviewUsages(arg1 : boolean) : void;
	setPrepareSuccessfulSwingThreadCallback(arg1 : Runnable) : void;
	getTransaction() : RefactoringTransaction;
	performRefactoring(arg1 : UsageInfo[]) : void;
	getCommandName() : string;
	doRun() : void;
	previewRefactoring(arg1 : UsageInfo[]) : void;
	skipNonCodeUsages() : boolean;
	a(arg1 : UsageInfo[], arg2 : UsageViewDescriptor) : boolean;
	static a(arg1 : Project, arg2 : Collection<PsiElement>) : boolean;
	execute(arg1 : UsageInfo[]) : void;
	isGlobalUndoAction() : boolean;
	getUndoConfirmationPolicy() : UndoConfirmationPolicy;
	static a(arg1 : UsageViewDescriptor, arg2 : Usage[]) : UsageViewPresentation;
	a(arg1 : UsageViewDescriptor, arg2 : Factory<UsageSearcher>, arg3 : UsageInfo[]) : void;
	addDoRefactoringAction(arg1 : UsageView, arg2 : Runnable, arg3 : string) : void;
	a(arg1 : Collection<UsageInfo>) : void;
	isToBeChanged(arg1 : UsageInfo) : boolean;
	performPsiSpoilingRefactoring() : void;
	prepareSuccessful() : void;
	showConflicts(arg1 : MultiMap<PsiElement, string>) : boolean;
	showConflicts(arg1 : MultiMap<PsiElement, string>, arg2 : UsageInfo[]) : boolean;
	prepareConflictsDialog(arg1 : MultiMap<PsiElement, string>, arg2 : UsageInfo[]) : ConflictsDialog;
	getBeforeData() : RefactoringEventData;
	getAfterData(arg1 : UsageInfo[]) : RefactoringEventData;
	getRefactoringId() : string;
	createConflictsDialog(arg1 : MultiMap<PsiElement, string>, arg2 : UsageInfo[]) : ConflictsDialog;
	getElementsToWrite(arg1 : UsageViewDescriptor) : Collection<PsiElement>;
}


declare interface BaseRefactoringProcessor extends Runnable {}

declare module BaseRefactoringProcessor {
	class UnknownReferenceTypeException {
		elementLanguage : Language;
		constructor(arg1 : Language);
		getElementLanguage() : Language;
	}


	interface UnknownReferenceTypeException extends RuntimeException {}	class ConflictsInTestsException {
		static testIgnore : boolean;
		messages : Collection<string>;
		message : string;
		constructor(arg1 : Collection<string>);
		static setTestIgnore(arg1 : boolean) : void;
		static isTestIgnore() : boolean;
		getMessages() : Collection<string>;
	}


	interface ConflictsInTestsException extends RuntimeException {}}

export = BaseRefactoringProcessor
