import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import MemberInfoBase = require('nashorn/com/intellij/refactoring/classMembers/MemberInfoBase');
import Collection = require('nashorn/java/util/Collection');
import MemberInfoModel = require('nashorn/com/intellij/refactoring/classMembers/MemberInfoModel');
import MemberInfoChangeListener = require('nashorn/com/intellij/refactoring/classMembers/MemberInfoChangeListener');
import Object = require('nashorn/java/lang/Object');
import RowIcon = require('nashorn/com/intellij/ui/RowIcon');
import Icon = require('nashorn/javax/swing/Icon');
import JBTable = require('nashorn/com/intellij/ui/table/JBTable');
import TypeSafeDataProvider = require('nashorn/com/intellij/openapi/actionSystem/TypeSafeDataProvider');
import BooleanTableCellRenderer = require('nashorn/com/intellij/ui/BooleanTableCellRenderer');
import ColoredTableCellRenderer = require('nashorn/com/intellij/ui/ColoredTableCellRenderer');
import EnableDisableAction = require('nashorn/com/intellij/refactoring/ui/EnableDisableAction');
import AbstractTableModel = require('nashorn/javax/swing/table/AbstractTableModel');

declare class AbstractMemberSelectionTable<T extends PsiElement, M extends MemberInfoBase<T>> {
	selectedMemberInfos : Collection<M>;
	memberInfoModel : MemberInfoModel<T, M>;
	constructor(arg1 : Collection<M>, arg2 : MemberInfoModel<T, M>, arg3 : string);
	getSelectedMemberInfos() : Collection<M>;
	a(arg1 : M) : boolean;
	getMemberInfoModel() : MemberInfoModel<T, M>;
	setMemberInfoModel(arg1 : MemberInfoModel<T, M>) : void;
	fireExternalDataChange() : void;
	redraw() : void;
	setMemberInfos(arg1 : Collection<M>) : void;
	addMemberInfoChangeListener(arg1 : MemberInfoChangeListener<T, M>) : void;
	fireMemberInfoChange(arg1 : Collection<M>) : void;
	scrollSelectionInView() : void;
	getAbstractColumnValue(arg1 : M) : Object;
	isAbstractColumnEditable(arg1 : number) : boolean;
	setVisibilityIcon(arg1 : M, arg2 : RowIcon) : void;
	getOverrideIcon(arg1 : M) : Icon;
	getMemberIcon(arg1 : M, arg2 : number) : Icon;
}


declare interface AbstractMemberSelectionTable<T extends PsiElement, M extends MemberInfoBase<T>> extends JBTable, TypeSafeDataProvider {}

declare module AbstractMemberSelectionTable {
	class MyBooleanRenderer<T extends PsiElement, M extends MemberInfoBase<T>> {
		constructor(arg1 : AbstractMemberSelectionTable<T, M>);
	}


	interface MyBooleanRenderer<T extends PsiElement, M extends MemberInfoBase<T>> extends BooleanTableCellRenderer {}	class MyTableRenderer<T extends PsiElement, M extends MemberInfoBase<T>> {
		constructor(arg1 : AbstractMemberSelectionTable<T, M>);
	}


	interface MyTableRenderer<T extends PsiElement, M extends MemberInfoBase<T>> extends ColoredTableCellRenderer {}	class MyEnableDisableAction {
	}


	interface MyEnableDisableAction extends EnableDisableAction {}	class MyTableModel<T extends PsiElement, M extends MemberInfoBase<T>> {
		columnCount : number;
		rowCount : number;
		constructor(arg1 : AbstractMemberSelectionTable<T, M>);
		redraw(arg1 : Collection<M>) : void;
	}


	interface MyTableModel<T extends PsiElement, M extends MemberInfoBase<T>> extends AbstractTableModel {}	class DefaultMemberInfoModel<T extends PsiElement, M extends MemberInfoBase<T>> {
	}


	interface DefaultMemberInfoModel<T extends PsiElement, M extends MemberInfoBase<T>> extends MemberInfoModel<T, M> {}}

export = AbstractMemberSelectionTable
