import Project = require('nashorn/com/intellij/openapi/project/Project');
import MultiMap = require('nashorn/com/intellij/util/containers/MultiMap');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Runnable = require('nashorn/java/lang/Runnable');
import Collection = require('nashorn/java/util/Collection');
import UsageView = require('nashorn/com/intellij/usages/UsageView');
import DialogWrapper = require('nashorn/com/intellij/openapi/ui/DialogWrapper');
import UsagePresentation = require('nashorn/com/intellij/usages/UsagePresentation');
import AbstractAction = require('nashorn/javax/swing/AbstractAction');
import FileEditorLocation = require('nashorn/com/intellij/openapi/fileEditor/FileEditorLocation');
import Usage = require('nashorn/com/intellij/usages/Usage');

declare class ConflictsDialog {
	showConflicts : boolean;
	constructor(arg1 : Project, arg2 : MultiMap<PsiElement, string>);
	constructor(arg1 : Project, arg2 : MultiMap<PsiElement, string>, arg3 : Runnable);
	constructor(arg1 : Project, arg2 : MultiMap<PsiElement, string>, arg3 : Runnable, arg4 : boolean, arg5 : boolean);
	constructor(arg1 : Project, arg2 : Collection<string>);
	constructor(arg1 : Project, arg2 : string[]);
	isShowConflicts() : boolean;
	setCommandName(arg1 : string) : void;
	getDoRefactoringRunnable(arg1 : UsageView) : Runnable;
}


declare interface ConflictsDialog extends DialogWrapper {}

declare module ConflictsDialog {
	class MyShowConflictsInUsageViewAction {
		constructor();
		a(arg1 : UsagePresentation, arg2 : PsiElement) : UsagePresentation;
	}


	interface MyShowConflictsInUsageViewAction extends AbstractAction {}

	module MyShowConflictsInUsageViewAction {
		class DescriptionOnlyUsage {
			presentation : UsagePresentation;
			location : FileEditorLocation;
			readOnly : boolean;
			valid : boolean;
		}


		interface DescriptionOnlyUsage extends Usage {}	}
	class CancelAction {
		constructor();
	}


	interface CancelAction extends AbstractAction {}}

export = ConflictsDialog
