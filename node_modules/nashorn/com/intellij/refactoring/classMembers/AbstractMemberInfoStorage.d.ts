import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import MemberInfoBase = require('nashorn/com/intellij/refactoring/classMembers/MemberInfoBase');
import Object = require('nashorn/java/lang/Object');
import Set = require('nashorn/java/util/Set');
import List = require('nashorn/java/util/List');
import ArrayList = require('nashorn/java/util/ArrayList');
import LinkedHashSet = require('nashorn/java/util/LinkedHashSet');
import HashSet = require('nashorn/java/util/HashSet');

declare class AbstractMemberInfoStorage<T extends PsiElement, C extends PsiElement, M extends MemberInfoBase<T>> extends Object {
	constructor(arg1 : C, arg2 : MemberInfoBase.Filter<T>);
	a() : Set<C>;
	getExtending(arg1 : C) : Set<C>;
	isInheritor(arg1 : C, arg2 : C) : boolean;
	buildSubClassesMap(arg1 : C) : void;
	getClassMemberInfos(arg1 : C) : List<M>;
	extractClassMembers(arg1 : C, arg2 : ArrayList<M>) : void;
	getIntermediateMemberInfosList(arg1 : C) : List<M>;
	a(arg1 : C) : Set<M>;
	getSubclasses(arg1 : C) : LinkedHashSet<C>;
	getDuplicatedMemberInfos(arg1 : C) : Set<M>;
	b(arg1 : C) : HashSet<M>;
	memberConflict(arg1 : T, arg2 : T) : boolean;
}

export = AbstractMemberInfoStorage
