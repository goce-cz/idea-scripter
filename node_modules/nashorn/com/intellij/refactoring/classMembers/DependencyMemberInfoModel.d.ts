import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import MemberInfoBase = require('nashorn/com/intellij/refactoring/classMembers/MemberInfoBase');
import MemberDependencyGraph = require('nashorn/com/intellij/refactoring/classMembers/MemberDependencyGraph');
import MemberInfoTooltipManager = require('nashorn/com/intellij/refactoring/classMembers/MemberInfoTooltipManager');
import Collection = require('nashorn/java/util/Collection');
import MemberInfoModel = require('nashorn/com/intellij/refactoring/classMembers/MemberInfoModel');

declare class DependencyMemberInfoModel<T extends PsiElement, M extends MemberInfoBase<T>> {
	constructor(arg1 : MemberDependencyGraph<T, M>, arg2 : number);
	setTooltipProvider(arg1 : MemberInfoTooltipManager.TooltipProvider<T, M>) : void;
	setMemberDependencyGraph(arg1 : MemberDependencyGraph<T, M>) : void;
	memberInfoChanged(arg1 : Collection<M>) : void;
}


declare interface DependencyMemberInfoModel<T extends PsiElement, M extends MemberInfoBase<T>> extends MemberInfoModel<T, M> {}
export = DependencyMemberInfoModel
