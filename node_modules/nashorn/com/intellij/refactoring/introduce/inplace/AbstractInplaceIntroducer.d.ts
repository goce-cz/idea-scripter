import PsiNameIdentifierOwner = require('nashorn/com/intellij/psi/PsiNameIdentifierOwner');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import JComponent = require('nashorn/javax/swing/JComponent');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import InplaceVariableIntroducer = require('nashorn/com/intellij/refactoring/introduce/inplace/InplaceVariableIntroducer');

declare class AbstractInplaceIntroducer<V extends PsiNameIdentifierOwner, E extends PsiElement> {
	static ACTIVE_INTRODUCE : Key<AbstractInplaceIntroducer>;
	replaceAllOccurrences : boolean;
	inputName : string;
	localVariable : V;
	constructor(arg1 : Project, arg2 : Editor, arg3 : E, arg4 : V, arg5 : E[], arg6 : string, arg7 : FileType);
	getExpressionText(arg1 : E) : string;
	setPreviewText(arg1 : string) : void;
	getPreviewComponent() : JComponent;
	getPreviewEditor() : Editor;
	getActionName() : string;
	createFieldToStartTemplateOn(arg1 : boolean, arg2 : string[]) : V;
	suggestNames(arg1 : boolean, arg2 : V) : string[];
	performIntroduce() : void;
	performPostIntroduceTasks() : void;
	isReplaceAllOccurrences() : boolean;
	setReplaceAllOccurrences(arg1 : boolean) : void;
	saveSettings(arg1 : V) : void;
	restoreExpression(arg1 : PsiFile, arg2 : V, arg3 : RangeMarker, arg4 : string) : E;
	startInplaceIntroduceTemplate() : boolean;
	getCaretOffset() : number;
	updateTitle(arg1 : V, arg2 : string) : void;
	updateTitle(arg1 : V) : void;
	revalidate() : void;
	restartInplaceIntroduceTemplate() : void;
	getInputName() : string;
	correctExpression() : void;
	restoreState(arg1 : V) : void;
	deleteTemplateField(arg1 : V) : void;
	getBeforeExpr() : E;
	ensureValid() : boolean;
	getRefactoringId() : string;
	getLocalVariable() : V;
	stopIntroduce(arg1 : Editor) : void;
	startsOnTheSameElement(arg1 : E, arg2 : V) : boolean;
	static getActiveIntroducer(arg1 : Editor) : AbstractInplaceIntroducer;
}


declare interface AbstractInplaceIntroducer<V extends PsiNameIdentifierOwner, E extends PsiElement> extends InplaceVariableIntroducer<E> {}
export = AbstractInplaceIntroducer
