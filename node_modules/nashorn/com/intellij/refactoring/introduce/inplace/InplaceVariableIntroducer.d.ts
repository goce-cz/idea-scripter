import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import List = require('nashorn/java/util/List');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import PsiNamedElement = require('nashorn/com/intellij/psi/PsiNamedElement');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import InplaceRefactoring = require('nashorn/com/intellij/refactoring/rename/inplace/InplaceRefactoring');
import LinkedHashSet = require('nashorn/java/util/LinkedHashSet');
import LookupElement = require('nashorn/com/intellij/codeInsight/lookup/LookupElement');
import MyLookupExpression = require('nashorn/com/intellij/refactoring/rename/inplace/MyLookupExpression');

declare class InplaceVariableIntroducer<E extends PsiElement> {
	expr : E;
	occurrences : E[];
	occurrenceMarkers : List<RangeMarker>;
	exprMarker : RangeMarker;
	constructor(arg1 : PsiNamedElement, arg2 : Editor, arg3 : Project, arg4 : string, arg5 : E[], arg6 : E);
	setOccurrenceMarkers(arg1 : List<RangeMarker>) : void;
	setExprMarker(arg1 : RangeMarker) : void;
	getExpr() : E;
	getOccurrences() : E[];
	getOccurrenceMarkers() : List<RangeMarker>;
	initOccurrencesMarkers() : void;
	createMarker(arg1 : PsiElement) : RangeMarker;
	getExprMarker() : RangeMarker;
}


declare interface InplaceVariableIntroducer<E extends PsiElement> extends InplaceRefactoring {}

declare module InplaceVariableIntroducer {
	class MyIntroduceLookupExpression {
		element : PsiNamedElement;
		constructor(arg1 : string, arg2 : LinkedHashSet<string>, arg3 : PsiNamedElement, arg4 : boolean, arg5 : string);
		getElement() : PsiNamedElement;
		a(arg1 : string, arg2 : Editor, arg3 : PsiNamedElement) : LookupElement[];
	}


	interface MyIntroduceLookupExpression extends MyLookupExpression {}}

export = InplaceVariableIntroducer
