import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import MoveCallback = require('nashorn/com/intellij/refactoring/move/MoveCallback');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import Set = require('nashorn/java/util/Set');

declare class MoveHandlerDelegate extends Object {
	static EP_NAME : ExtensionPointName<MoveHandlerDelegate>;
	constructor();
	canMove(arg1 : PsiElement[], arg2 : PsiElement) : boolean;
	canMove(arg1 : DataContext) : boolean;
	isValidTarget(arg1 : PsiElement, arg2 : PsiElement[]) : boolean;
	doMove(arg1 : Project, arg2 : PsiElement[], arg3 : PsiElement, arg4 : MoveCallback) : void;
	adjustTargetForMove(arg1 : DataContext, arg2 : PsiElement) : PsiElement;
	adjustForMove(arg1 : Project, arg2 : PsiElement[], arg3 : PsiElement) : PsiElement[];
	tryToMove(arg1 : PsiElement, arg2 : Project, arg3 : DataContext, arg4 : PsiReference, arg5 : Editor) : boolean;
	collectFilesOrDirsFromContext(arg1 : DataContext, arg2 : Set<PsiElement>) : void;
	isMoveRedundant(arg1 : PsiElement, arg2 : PsiElement) : boolean;
}

export = MoveHandlerDelegate
