import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import Class = require('nashorn/java/lang/Class');
import Location = require('nashorn/com/intellij/execution/Location');

declare class PsiLocation<E extends PsiElement> {
	psiElement : E;
	project : Project;
	module : Module;
	constructor(arg1 : Project, arg2 : E);
	constructor(arg1 : Project, arg2 : Module, arg3 : E);
	static findNext<ElementClass extends PsiElement>(arg1 : PsiElement, arg2 : Class<ElementClass>) : ElementClass;
	static fromPsiElement<T extends PsiElement>(arg1 : Project, arg2 : T) : Location<T>;
	static fromPsiElement<T extends PsiElement>(arg1 : T) : Location<T>;
	static fromPsiElement<T extends PsiElement>(arg1 : T, arg2 : Module) : Location<T>;
}


declare interface PsiLocation<E extends PsiElement> extends Location<E> {}
export = PsiLocation
