import Process = require('nashorn/java/lang/Process');
import OutputStream = require('nashorn/java/io/OutputStream');
import Charset = require('nashorn/java/nio/charset/Charset');
import Runnable = require('nashorn/java/lang/Runnable');
import Future = require('nashorn/java/util/concurrent/Future');
import BaseDataReader = require('nashorn/com/intellij/util/io/BaseDataReader');
import Reader = require('nashorn/java/io/Reader');
import InputStream = require('nashorn/java/io/InputStream');
import ProcessHandler = require('nashorn/com/intellij/execution/process/ProcessHandler');
import TaskExecutor = require('nashorn/com/intellij/execution/TaskExecutor');
import BaseOutputReader = require('nashorn/com/intellij/util/io/BaseOutputReader');
import Object = require('nashorn/java/lang/Object');
import ThreadPoolExecutor = require('nashorn/java/util/concurrent/ThreadPoolExecutor');

declare class BaseOSProcessHandler {
	process : Process;
	processInput : OutputStream;
	commandLine : string;
	charset : Charset;
	constructor(arg1 : Process, arg2 : string, arg3 : Charset);
	executeOnPooledThread(arg1 : Runnable) : Future<any>;
	getProcess() : Process;
	useAdaptiveSleepingPolicyWhenReadingOutput() : boolean;
	useNonBlockingRead() : boolean;
	processHasSeparateErrorStream() : boolean;
	getPolicy() : BaseDataReader.SleepingPolicy;
	createErrorDataReader(arg1 : BaseDataReader.SleepingPolicy) : BaseDataReader;
	createOutputDataReader(arg1 : BaseDataReader.SleepingPolicy) : BaseDataReader;
	onOSProcessTerminated(arg1 : number) : void;
	createProcessOutReader() : Reader;
	createProcessErrReader() : Reader;
	createInputStreamReader(arg1 : InputStream) : Reader;
	charsetNotNull() : Charset;
	doDestroyProcess() : void;
	closeStreams() : void;
	getCommandLine() : string;
	getCharset() : Charset;
}


declare interface BaseOSProcessHandler extends ProcessHandler, TaskExecutor {}

declare module BaseOSProcessHandler {
	class SimpleOutputReader {
	}


	interface SimpleOutputReader extends BaseOutputReader {}	class ExecutorServiceHolder extends Object {
		constructor();
		static createServiceImpl() : ThreadPoolExecutor;
		static submit(arg1 : Runnable) : Future<any>;
	}
}

export = BaseOSProcessHandler
