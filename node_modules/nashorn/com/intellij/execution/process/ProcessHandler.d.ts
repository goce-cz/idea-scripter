import Key = require('nashorn/com/intellij/openapi/util/Key');
import OutputStream = require('nashorn/java/io/OutputStream');
import ProcessListener = require('nashorn/com/intellij/execution/process/ProcessListener');
import Throwable = require('nashorn/java/lang/Throwable');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');
import Runnable = require('nashorn/java/lang/Runnable');
import ProcessAdapter = require('nashorn/com/intellij/execution/process/ProcessAdapter');

declare class ProcessHandler {
	static SILENTLY_DESTROY_ON_CLOSE : Key<boolean>;
	processTerminated : boolean;
	processTerminating : boolean;
	processInput : OutputStream;
	startNotified : boolean;
	silentlyDestroyOnClose : boolean;
	startNotify() : void;
	destroyProcessImpl() : void;
	detachProcessImpl() : void;
	detachIsDefault() : boolean;
	waitFor() : boolean;
	waitFor(arg1 : number) : boolean;
	destroyProcess() : void;
	detachProcess() : void;
	isProcessTerminated() : boolean;
	isProcessTerminating() : boolean;
	addProcessListener(arg1 : ProcessListener) : void;
	removeProcessListener(arg1 : ProcessListener) : void;
	notifyProcessDetached() : void;
	notifyProcessTerminated(arg1 : number) : void;
	notifyTerminated(arg1 : number, arg2 : boolean) : void;
	notifyTextAvailable(arg1 : string, arg2 : Key) : void;
	getProcessInput() : OutputStream;
	fireProcessWillTerminate(arg1 : boolean) : void;
	isStartNotified() : boolean;
	isSilentlyDestroyOnClose() : boolean;
	createEventMulticaster() : ProcessListener;
	static isCanceledException(arg1 : Throwable) : boolean;
}


declare interface ProcessHandler extends UserDataHolderBase {}

declare module ProcessHandler {
	class TasksRunner {
		execute(arg1 : Runnable) : void;
		runPendingTasks() : void;
	}


	interface TasksRunner extends ProcessAdapter {}}

export = ProcessHandler
