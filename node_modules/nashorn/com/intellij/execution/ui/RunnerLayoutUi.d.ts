import Object = require('nashorn/java/lang/Object');
import LayoutStateDefaults = require('nashorn/com/intellij/execution/ui/layout/LayoutStateDefaults');
import LayoutViewOptions = require('nashorn/com/intellij/execution/ui/layout/LayoutViewOptions');
import ContentManager = require('nashorn/com/intellij/ui/content/ContentManager');
import JComponent = require('nashorn/javax/swing/JComponent');
import Content = require('nashorn/com/intellij/ui/content/Content');
import PlaceInGrid = require('nashorn/com/intellij/execution/ui/layout/PlaceInGrid');
import Icon = require('nashorn/javax/swing/Icon');
import ComponentWithActions = require('nashorn/com/intellij/openapi/ui/ComponentWithActions');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import ContentManagerListener = require('nashorn/com/intellij/ui/content/ContentManagerListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Project = require('nashorn/com/intellij/openapi/project/Project');

declare class RunnerLayoutUi extends Object {
	defaults : LayoutStateDefaults;
	options : LayoutViewOptions;
	contentManager : ContentManager;
	component : JComponent;
	disposed : boolean;
	contents : Content[];
	getDefaults() : LayoutStateDefaults;
	getOptions() : LayoutViewOptions;
	getContentManager() : ContentManager;
	addContent(arg1 : Content) : Content;
	addContent(arg1 : Content, arg2 : number, arg3 : PlaceInGrid, arg4 : boolean) : Content;
	createContent(arg1 : string, arg2 : JComponent, arg3 : string, arg4 : Icon, arg5 : JComponent) : Content;
	createContent(arg1 : string, arg2 : ComponentWithActions, arg3 : string, arg4 : Icon, arg5 : JComponent) : Content;
	removeContent(arg1 : Content, arg2 : boolean) : boolean;
	findContent(arg1 : string) : Content;
	selectAndFocus(arg1 : Content, arg2 : boolean, arg3 : boolean) : ActionCallback;
	selectAndFocus(arg1 : Content, arg2 : boolean, arg3 : boolean, arg4 : boolean) : ActionCallback;
	addListener(arg1 : ContentManagerListener, arg2 : Disposable) : RunnerLayoutUi;
	removeListener(arg1 : ContentManagerListener) : void;
	attractBy(arg1 : string) : void;
	clearAttractionBy(arg1 : string) : void;
	setBouncing(arg1 : Content, arg2 : boolean) : void;
	getComponent() : JComponent;
	isDisposed() : boolean;
	updateActionsNow() : void;
	getContents() : Content[];
}


declare module RunnerLayoutUi {
	class Factory extends Object {
		static getInstance(arg1 : Project) : RunnerLayoutUi.Factory;
		create(arg1 : string, arg2 : string, arg3 : string, arg4 : Disposable) : RunnerLayoutUi;
	}
}

export = RunnerLayoutUi
