import Object = require('nashorn/java/lang/Object');
import Topic = require('nashorn/com/intellij/util/messages/Topic');
import RunContentWithExecutorListener = require('nashorn/com/intellij/execution/ui/RunContentWithExecutorListener');
import DataKey = require('nashorn/com/intellij/openapi/actionSystem/DataKey');
import RunContentDescriptor = require('nashorn/com/intellij/execution/ui/RunContentDescriptor');
import List = require('nashorn/java/util/List');
import Executor = require('nashorn/com/intellij/execution/Executor');
import ExecutionEnvironment = require('nashorn/com/intellij/execution/runners/ExecutionEnvironment');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import ProcessHandler = require('nashorn/com/intellij/execution/process/ProcessHandler');
import RunContentListener = require('nashorn/com/intellij/execution/ui/RunContentListener');
import ToolWindow = require('nashorn/com/intellij/openapi/wm/ToolWindow');

declare class RunContentManager extends Object {
	static TOPIC : Topic<RunContentWithExecutorListener>;
	static RUN_CONTENT_DESCRIPTOR : DataKey<RunContentDescriptor>;
	selectedContent : RunContentDescriptor;
	allDescriptors : List<RunContentDescriptor>;
	getSelectedContent() : RunContentDescriptor;
	getSelectedContent(arg1 : Executor) : RunContentDescriptor;
	getAllDescriptors() : List<RunContentDescriptor>;
	getReuseContent(arg1 : Executor, arg2 : RunContentDescriptor) : RunContentDescriptor;
	getReuseContent(arg1 : Executor, arg2 : ExecutionEnvironment) : RunContentDescriptor;
	getReuseContent(arg1 : ExecutionEnvironment) : RunContentDescriptor;
	getReuseContent(arg1 : Executor, arg2 : DataContext) : RunContentDescriptor;
	findContentDescriptor(arg1 : Executor, arg2 : ProcessHandler) : RunContentDescriptor;
	showRunContent(arg1 : Executor, arg2 : RunContentDescriptor, arg3 : RunContentDescriptor) : void;
	showRunContent(arg1 : Executor, arg2 : RunContentDescriptor) : void;
	hideRunContent(arg1 : Executor, arg2 : RunContentDescriptor) : void;
	removeRunContent(arg1 : Executor, arg2 : RunContentDescriptor) : boolean;
	toFrontRunContent(arg1 : Executor, arg2 : RunContentDescriptor) : void;
	toFrontRunContent(arg1 : Executor, arg2 : ProcessHandler) : void;
	addRunContentListener(arg1 : RunContentListener) : void;
	removeRunContentListener(arg1 : RunContentListener) : void;
	addRunContentListener(arg1 : RunContentListener, arg2 : Executor) : void;
	getToolWindowByDescriptor(arg1 : RunContentDescriptor) : ToolWindow;
}

export = RunContentManager
