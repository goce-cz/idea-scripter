import Map = require('nashorn/java/util/Map');
import List = require('nashorn/java/util/List');
import ParamsGroup = require('nashorn/com/intellij/execution/configurations/ParamsGroup');
import Cloneable = require('nashorn/java/lang/Cloneable');

declare class ParametersList {
	properties : Map<string, string>;
	parametersString : string;
	array : string[];
	list : List<string>;
	paramsGroupsCount : number;
	parameters : List<string>;
	paramsGroups : List<ParamsGroup>;
	constructor();
	hasParameter(arg1 : string) : boolean;
	hasProperty(arg1 : string) : boolean;
	getPropertyValue(arg1 : string) : string;
	getProperties() : Map<string, string>;
	getParametersString() : string;
	getArray() : string[];
	getList() : List<string>;
	clearAll() : void;
	prepend(arg1 : string) : void;
	prependAll(arg1 : string[]) : void;
	addParametersString(arg1 : string) : void;
	add(arg1 : string) : void;
	addParamsGroup(arg1 : string) : ParamsGroup;
	addParamsGroup(arg1 : ParamsGroup) : ParamsGroup;
	addParamsGroupAt(arg1 : number, arg2 : ParamsGroup) : ParamsGroup;
	addParamsGroupAt(arg1 : number, arg2 : string) : ParamsGroup;
	getParamsGroupsCount() : number;
	getParameters() : List<string>;
	getParamsGroups() : List<ParamsGroup>;
	getParamsGroupAt(arg1 : number) : ParamsGroup;
	getParamsGroup(arg1 : string) : ParamsGroup;
	removeParamsGroup(arg1 : number) : ParamsGroup;
	addAt(arg1 : number, arg2 : string) : void;
	defineProperty(arg1 : string, arg2 : string) : void;
	addProperty(arg1 : string) : void;
	addProperty(arg1 : string, arg2 : string) : void;
	replaceOrAppend(arg1 : string, arg2 : string) : void;
	replaceOrAdd(arg1 : string, arg2 : string, arg3 : number) : void;
	replaceOrPrepend(arg1 : string, arg2 : string) : void;
	set(arg1 : number, arg2 : string) : void;
	get(arg1 : number) : string;
	add(arg1 : string, arg2 : string) : void;
	addAll(arg1 : string[]) : void;
	addAll(arg1 : List<string>) : void;
	static join(arg1 : List<string>) : string;
	static join(arg1 : string[]) : string;
	static parse(arg1 : string) : string[];
	expandMacros(arg1 : string) : string;
	getMacroMap() : Map<string, string>;
}


declare interface ParametersList extends Cloneable {}
export = ParametersList
