import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Object = require('nashorn/java/lang/Object');
import DataKey = require('nashorn/com/intellij/openapi/actionSystem/DataKey');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import OpenFileDescriptor = require('nashorn/com/intellij/openapi/fileEditor/OpenFileDescriptor');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import Class = require('nashorn/java/lang/Class');
import Iterator = require('nashorn/java/util/Iterator');
import PsiLocation = require('nashorn/com/intellij/execution/PsiLocation');

declare class Location<E extends PsiElement> extends Object {
	static DATA_KEY : DataKey<Location<any>>;
	static DATA_KEYS : DataKey<Location<any>[]>;
	static LOCATION : string;
	psiElement : E;
	project : Project;
	virtualFile : VirtualFile;
	openFileDescriptor : OpenFileDescriptor;
	module : Module;
	constructor();
	getPsiElement() : E;
	getProject() : Project;
	getAncestors<T extends PsiElement>(arg1 : Class<T>, arg2 : boolean) : Iterator<Location<T>>;
	getVirtualFile() : VirtualFile;
	getOpenFileDescriptor() : OpenFileDescriptor;
	getParent<Ancestor extends PsiElement>(arg1 : Class<Ancestor>) : Location<Ancestor>;
	getAncestorOrSelf<T extends PsiElement>(arg1 : Class<T>) : Location<T>;
	getParentElement<Ancestor extends PsiElement>(arg1 : Class<Ancestor>) : Ancestor;
	static safeGetPsiElement<T extends PsiElement>(arg1 : Location<T>) : T;
	static safeCast<T>(arg1 : Object, arg2 : Class<T>) : T;
	toPsiLocation() : PsiLocation<E>;
	getModule() : Module;
}

export = Location
