import Object = require('nashorn/java/lang/Object');
import ConfigurationType = require('nashorn/com/intellij/execution/configurations/ConfigurationType');
import ConfigurationFactory = require('nashorn/com/intellij/execution/configurations/ConfigurationFactory');
import RunConfiguration = require('nashorn/com/intellij/execution/configurations/RunConfiguration');
import ProgramRunner = require('nashorn/com/intellij/execution/runners/ProgramRunner');
import RunnerSettings = require('nashorn/com/intellij/execution/configurations/RunnerSettings');
import ConfigurationPerRunnerSettings = require('nashorn/com/intellij/execution/configurations/ConfigurationPerRunnerSettings');
import Executor = require('nashorn/com/intellij/execution/Executor');
import ExecutionTarget = require('nashorn/com/intellij/execution/ExecutionTarget');
import Factory = require('nashorn/com/intellij/openapi/util/Factory');

declare class RunnerAndConfigurationSettings extends Object {
	type : ConfigurationType;
	factory : ConfigurationFactory;
	template : boolean;
	temporary : boolean;
	configuration : RunConfiguration;
	name : string;
	uniqueID : string;
	editBeforeRun : boolean;
	singleton : boolean;
	folderName : string;
	getType() : ConfigurationType;
	getFactory() : ConfigurationFactory;
	isTemplate() : boolean;
	isTemporary() : boolean;
	setTemporary(arg1 : boolean) : void;
	getConfiguration() : RunConfiguration;
	setName(arg1 : string) : void;
	getName() : string;
	getUniqueID() : string;
	getRunnerSettings(arg1 : ProgramRunner) : RunnerSettings;
	getConfigurationSettings(arg1 : ProgramRunner) : ConfigurationPerRunnerSettings;
	checkSettings() : void;
	checkSettings(arg1 : Executor) : void;
	canRunOn(arg1 : ExecutionTarget) : boolean;
	createFactory() : Factory<RunnerAndConfigurationSettings>;
	setEditBeforeRun(arg1 : boolean) : void;
	isEditBeforeRun() : boolean;
	setSingleton(arg1 : boolean) : void;
	isSingleton() : boolean;
	setFolderName(arg1 : string) : void;
	getFolderName() : string;
}

export = RunnerAndConfigurationSettings
