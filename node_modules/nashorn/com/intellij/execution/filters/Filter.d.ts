import Object = require('nashorn/java/lang/Object');
import TextAttributes = require('nashorn/com/intellij/openapi/editor/markup/TextAttributes');
import HyperlinkInfo = require('nashorn/com/intellij/execution/filters/HyperlinkInfo');
import Enum = require('nashorn/java/lang/Enum');
import List = require('nashorn/java/util/List');
import TextAttributesKey = require('nashorn/com/intellij/openapi/editor/colors/TextAttributesKey');

declare class Filter extends Object {
	static EMPTY_ARRAY : Filter[];
	applyFilter(arg1 : string, arg2 : number) : Filter.Result;
}


declare module Filter {
	class ResultItem extends Object {
		highlightStartOffset : number;
		highlightEndOffset : number;
		highlightAttributes : TextAttributes;
		hyperlinkInfo : HyperlinkInfo;
		followedHyperlinkAttributes : TextAttributes;
		constructor(arg1 : number, arg2 : number, arg3 : HyperlinkInfo);
		constructor(arg1 : number, arg2 : number, arg3 : HyperlinkInfo, arg4 : TextAttributes);
		constructor(arg1 : number, arg2 : number, arg3 : HyperlinkInfo, arg4 : TextAttributes, arg5 : TextAttributes);
		getHighlightStartOffset() : number;
		getHighlightEndOffset() : number;
		getHighlightAttributes() : TextAttributes;
		getFollowedHyperlinkAttributes() : TextAttributes;
		getHyperlinkInfo() : HyperlinkInfo;
	}
	class NextAction {
		static EXIT : Filter.NextAction;
		static CONTINUE_FILTERING : Filter.NextAction;
	}


	interface NextAction extends Enum<Filter.NextAction> {}	class Result {
		resultItems : List<Filter.ResultItem>;
		highlightStartOffset : number;
		highlightEndOffset : number;
		highlightAttributes : TextAttributes;
		hyperlinkInfo : HyperlinkInfo;
		firstHyperlinkInfo : HyperlinkInfo;
		nextAction : Filter.NextAction;
		constructor(arg1 : number, arg2 : number, arg3 : HyperlinkInfo);
		constructor(arg1 : number, arg2 : number, arg3 : HyperlinkInfo, arg4 : TextAttributes);
		constructor(arg1 : number, arg2 : number, arg3 : HyperlinkInfo, arg4 : TextAttributes, arg5 : TextAttributes);
		constructor(arg1 : number, arg2 : number, arg3 : HyperlinkInfo, arg4 : boolean);
		constructor(arg1 : List<Filter.ResultItem>);
		getResultItems() : List<Filter.ResultItem>;
		getFirstHyperlinkInfo() : HyperlinkInfo;
		getNextAction() : Filter.NextAction;
		setNextAction(arg1 : Filter.NextAction) : void;
		static getGrayedHyperlinkAttributes(arg1 : TextAttributesKey) : TextAttributes;
	}


	interface Result extends Filter.ResultItem {}}

export = Filter
