import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import Comparator = require('nashorn/java/util/Comparator');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import RunnerAndConfigurationSettings = require('nashorn/com/intellij/execution/RunnerAndConfigurationSettings');
import ConfigurationType = require('nashorn/com/intellij/execution/configurations/ConfigurationType');
import Location = require('nashorn/com/intellij/execution/Location');
import ConfigurationContext = require('nashorn/com/intellij/execution/actions/ConfigurationContext');
import List = require('nashorn/java/util/List');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import ConfigurationFactory = require('nashorn/com/intellij/execution/configurations/ConfigurationFactory');
import Runnable = require('nashorn/java/lang/Runnable');
import Class = require('nashorn/java/lang/Class');
import Comparable = require('nashorn/java/lang/Comparable');
import Cloneable = require('nashorn/java/lang/Cloneable');
import LocatableConfiguration = require('nashorn/com/intellij/execution/configurations/LocatableConfiguration');
import SettingsEditor = require('nashorn/com/intellij/openapi/options/SettingsEditor');
import RunConfiguration = require('nashorn/com/intellij/execution/configurations/RunConfiguration');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import LocatableConfigurationBase = require('nashorn/com/intellij/execution/configurations/LocatableConfigurationBase');
import ModuleRunConfiguration = require('nashorn/com/intellij/execution/configurations/ModuleRunConfiguration');

declare class RuntimeConfigurationProducer {
	static RUNTIME_CONFIGURATION_PRODUCER : ExtensionPointName<RuntimeConfigurationProducer>;
	static COMPARATOR : Comparator<RuntimeConfigurationProducer>;
	sourceElement : PsiElement;
	configuration : RunnerAndConfigurationSettings;
	configurationType : ConfigurationType;
	constructor(arg1 : ConfigurationType);
	createProducer(arg1 : Location, arg2 : ConfigurationContext) : RuntimeConfigurationProducer;
	findExistingConfiguration(arg1 : Location, arg2 : ConfigurationContext) : RunnerAndConfigurationSettings;
	getSourceElement() : PsiElement;
	getConfiguration() : RunnerAndConfigurationSettings;
	setConfiguration(arg1 : RunnerAndConfigurationSettings) : void;
	createConfigurationByElement(arg1 : Location, arg2 : ConfigurationContext) : RunnerAndConfigurationSettings;
	findExistingByElement(arg1 : Location, arg2 : List<RunnerAndConfigurationSettings>, arg3 : ConfigurationContext) : RunnerAndConfigurationSettings;
	cloneTemplateConfiguration(arg1 : Project, arg2 : ConfigurationContext) : RunnerAndConfigurationSettings;
	getConfigurationFactory() : ConfigurationFactory;
	getConfigurationType() : ConfigurationType;
	perform(arg1 : ConfigurationContext, arg2 : Runnable) : void;
	static getInstance<T extends RuntimeConfigurationProducer>(arg1 : Class<T>) : T;
}


declare interface RuntimeConfigurationProducer extends Comparable, Cloneable {}

declare module RuntimeConfigurationProducer {
	class DelegatingRuntimeConfiguration<T extends LocatableConfiguration> {
		configurationEditor : SettingsEditor<RunConfiguration>;
		peer : T;
		modules : Module[];
		constructor(arg1 : T);
		getPeer() : T;
	}


	interface DelegatingRuntimeConfiguration<T extends LocatableConfiguration> extends LocatableConfigurationBase, ModuleRunConfiguration {}	class ProducerComparator {
		static doesContain(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	}


	interface ProducerComparator extends Comparator<RuntimeConfigurationProducer> {}}

export = RuntimeConfigurationProducer
