import Object = require('nashorn/java/lang/Object');
import ConfigurationType = require('nashorn/com/intellij/execution/configurations/ConfigurationType');
import RunConfiguration = require('nashorn/com/intellij/execution/configurations/RunConfiguration');
import List = require('nashorn/java/util/List');
import RunnerAndConfigurationSettings = require('nashorn/com/intellij/execution/RunnerAndConfigurationSettings');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import ConfigurationFactory = require('nashorn/com/intellij/execution/configurations/ConfigurationFactory');
import RunProfile = require('nashorn/com/intellij/execution/configurations/RunProfile');
import Collection = require('nashorn/java/util/Collection');

declare class RunManager extends Object {
	configurationFactories : ConfigurationType[];
	allConfigurations : RunConfiguration[];
	allConfigurationsList : List<RunConfiguration>;
	allSettings : List<RunnerAndConfigurationSettings>;
	tempConfigurations : RunConfiguration[];
	tempConfigurationsList : List<RunnerAndConfigurationSettings>;
	selectedConfiguration : RunnerAndConfigurationSettings;
	constructor();
	static getInstance(arg1 : Project) : RunManager;
	getConfigurationFactories() : ConfigurationType[];
	getConfigurations(arg1 : ConfigurationType) : RunConfiguration[];
	getConfigurationsList(arg1 : ConfigurationType) : List<RunConfiguration>;
	getConfigurationSettings(arg1 : ConfigurationType) : RunnerAndConfigurationSettings[];
	getConfigurationSettingsList(arg1 : ConfigurationType) : List<RunnerAndConfigurationSettings>;
	getAllConfigurations() : RunConfiguration[];
	getAllConfigurationsList() : List<RunConfiguration>;
	getAllSettings() : List<RunnerAndConfigurationSettings>;
	getTempConfigurations() : RunConfiguration[];
	getTempConfigurationsList() : List<RunnerAndConfigurationSettings>;
	isTemporary(arg1 : RunConfiguration) : boolean;
	makeStable(arg1 : RunConfiguration) : void;
	makeStable(arg1 : RunnerAndConfigurationSettings) : void;
	getSelectedConfiguration() : RunnerAndConfigurationSettings;
	setSelectedConfiguration(arg1 : RunnerAndConfigurationSettings) : void;
	createRunConfiguration(arg1 : string, arg2 : ConfigurationFactory) : RunnerAndConfigurationSettings;
	createConfiguration(arg1 : RunConfiguration, arg2 : ConfigurationFactory) : RunnerAndConfigurationSettings;
	getConfigurationTemplate(arg1 : ConfigurationFactory) : RunnerAndConfigurationSettings;
	addConfiguration(arg1 : RunnerAndConfigurationSettings, arg2 : boolean) : void;
	refreshUsagesList(arg1 : RunProfile) : void;
	static suggestUniqueName(arg1 : string, arg2 : Collection<string>) : string;
}

export = RunManager
