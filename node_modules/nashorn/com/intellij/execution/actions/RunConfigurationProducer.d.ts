import RunConfiguration = require('nashorn/com/intellij/execution/configurations/RunConfiguration');
import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import ConfigurationFactory = require('nashorn/com/intellij/execution/configurations/ConfigurationFactory');
import ConfigurationType = require('nashorn/com/intellij/execution/configurations/ConfigurationType');
import ConfigurationContext = require('nashorn/com/intellij/execution/actions/ConfigurationContext');
import ConfigurationFromContext = require('nashorn/com/intellij/execution/actions/ConfigurationFromContext');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Runnable = require('nashorn/java/lang/Runnable');
import RunnerAndConfigurationSettings = require('nashorn/com/intellij/execution/RunnerAndConfigurationSettings');
import Class = require('nashorn/java/lang/Class');

declare class RunConfigurationProducer<T extends RunConfiguration> extends Object {
	static EP_NAME : ExtensionPointName<RunConfigurationProducer>;
	configurationFactory : ConfigurationFactory;
	configurationType : ConfigurationType;
	getConfigurationFactory() : ConfigurationFactory;
	getConfigurationType() : ConfigurationType;
	createConfigurationFromContext(arg1 : ConfigurationContext) : ConfigurationFromContext;
	setupConfigurationFromContext(arg1 : T, arg2 : ConfigurationContext, arg3 : Ref<PsiElement>) : boolean;
	isConfigurationFromContext(arg1 : T, arg2 : ConfigurationContext) : boolean;
	isPreferredConfiguration(arg1 : ConfigurationFromContext, arg2 : ConfigurationFromContext) : boolean;
	onFirstRun(arg1 : ConfigurationFromContext, arg2 : ConfigurationContext, arg3 : Runnable) : void;
	findOrCreateConfigurationFromContext(arg1 : ConfigurationContext) : ConfigurationFromContext;
	findExistingConfiguration(arg1 : ConfigurationContext) : RunnerAndConfigurationSettings;
	cloneTemplateConfiguration(arg1 : ConfigurationContext) : RunnerAndConfigurationSettings;
	static getInstance(arg1 : Class<RunConfigurationProducer>) : RunConfigurationProducer;
}

export = RunConfigurationProducer
