import Object = require('nashorn/java/lang/Object');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import RunnerAndConfigurationSettings = require('nashorn/com/intellij/execution/RunnerAndConfigurationSettings');
import Location = require('nashorn/com/intellij/execution/Location');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import RunManager = require('nashorn/com/intellij/execution/RunManager');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import List = require('nashorn/java/util/List');
import ConfigurationFromContext = require('nashorn/com/intellij/execution/actions/ConfigurationFromContext');
import RuntimeConfigurationProducer = require('nashorn/com/intellij/execution/junit/RuntimeConfigurationProducer');
import ConfigurationType = require('nashorn/com/intellij/execution/configurations/ConfigurationType');
import RunConfiguration = require('nashorn/com/intellij/execution/configurations/RunConfiguration');

declare class ConfigurationContext extends Object {
	static SHARED_CONTEXT : Key<ConfigurationContext>;
	configuration : RunnerAndConfigurationSettings;
	location : Location;
	psiLocation : PsiElement;
	runManager : RunManager;
	project : Project;
	module : Module;
	dataContext : DataContext;
	configurationsFromContext : List<ConfigurationFromContext>;
	static getFromContext(arg1 : DataContext) : ConfigurationContext;
	getConfiguration() : RunnerAndConfigurationSettings;
	createConfiguration() : void;
	setConfiguration(arg1 : RunnerAndConfigurationSettings) : void;
	updateConfiguration(arg1 : RuntimeConfigurationProducer) : RunnerAndConfigurationSettings;
	getLocation() : Location;
	getPsiLocation() : PsiElement;
	findExisting() : RunnerAndConfigurationSettings;
	static getSelectedPsiElement(arg1 : DataContext, arg2 : Project) : PsiElement;
	getRunManager() : RunManager;
	getProject() : Project;
	getModule() : Module;
	getDataContext() : DataContext;
	getOriginalConfiguration(arg1 : ConfigurationType) : RunConfiguration;
	findPreferredProducers() : List<RuntimeConfigurationProducer>;
	getConfigurationsFromContext() : List<ConfigurationFromContext>;
}

export = ConfigurationContext
