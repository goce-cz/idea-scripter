import Project = require('nashorn/com/intellij/openapi/project/Project');
import Element = require('nashorn/org/jdom/Element');
import NamedScopesHolder = require('nashorn/com/intellij/psi/search/scope/packageSet/NamedScopesHolder');
import Collection = require('nashorn/java/util/Collection');
import Profile = require('nashorn/com/intellij/profile/Profile');
import ApplicationProfileManager = require('nashorn/com/intellij/profile/ApplicationProfileManager');
import DependencyValidationManager = require('nashorn/com/intellij/packageDependencies/DependencyValidationManager');
import ProfileChangeAdapter = require('nashorn/com/intellij/profile/ProfileChangeAdapter');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import ProjectProfileManager = require('nashorn/com/intellij/profile/ProjectProfileManager');
import PersistentStateComponent = require('nashorn/com/intellij/openapi/components/PersistentStateComponent');
import MainConfigurationStateSplitter = require('nashorn/com/intellij/openapi/components/MainConfigurationStateSplitter');

declare class DefaultProjectProfileManager {
	static SCOPES : string;
	static PROFILE : string;
	USE_PROJECT_PROFILE : boolean;
	project : Project;
	state : Element;
	scopesManager : NamedScopesHolder;
	profiles : Collection<Profile>;
	availableProfileNames : string[];
	projectProfile : string;
	projectProfileImpl : Profile;
	constructor(arg1 : Project, arg2 : ApplicationProfileManager, arg3 : DependencyValidationManager);
	getProject() : Project;
	convert(arg1 : Element) : void;
	isDefaultProfileUsed() : boolean;
	getProjectProfileImpl() : Profile;
	addProfilesListener(arg1 : ProfileChangeAdapter, arg2 : Disposable) : void;
	removeProfilesListener(arg1 : ProfileChangeAdapter) : void;
	fireProfilesInitialized() : void;
	fireProfilesShutdown() : void;
}


declare interface DefaultProjectProfileManager extends ProjectProfileManager, PersistentStateComponent<Element> {}

declare module DefaultProjectProfileManager {
	class ProfileStateSplitter {
		constructor();
	}


	interface ProfileStateSplitter extends MainConfigurationStateSplitter {}}

export = DefaultProjectProfileManager
