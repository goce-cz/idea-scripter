import JComponent = require('nashorn/javax/swing/JComponent');
import Language = require('nashorn/com/intellij/lang/Language');
import CodeStyleSchemesModel = require('nashorn/com/intellij/application/options/codeStyle/CodeStyleSchemesModel');
import Component = require('nashorn/java/awt/Component');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import EditorSettings = require('nashorn/com/intellij/openapi/editor/EditorSettings');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import VisualPosition = require('nashorn/com/intellij/openapi/editor/VisualPosition');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import EditorEx = require('nashorn/com/intellij/openapi/editor/ex/EditorEx');
import EditorColorsScheme = require('nashorn/com/intellij/openapi/editor/colors/EditorColorsScheme');
import EditorHighlighter = require('nashorn/com/intellij/openapi/editor/highlighter/EditorHighlighter');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import JComboBox = require('nashorn/javax/swing/JComboBox');
import Class = require('nashorn/java/lang/Class');
import JPanel = require('nashorn/javax/swing/JPanel');
import Set = require('nashorn/java/util/Set');
import PredefinedCodeStyle = require('nashorn/com/intellij/psi/codeStyle/PredefinedCodeStyle');
import JPopupMenu = require('nashorn/javax/swing/JPopupMenu');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');

declare class CodeStyleAbstractPanel {
	panel : JComponent;
	defaultLanguage : Language;
	copyFromMenuAvailable : boolean;
	setShouldUpdatePreview(arg1 : boolean) : void;
	a(arg1 : boolean) : void;
	a() : boolean;
	setModel(arg1 : CodeStyleSchemesModel) : void;
	somethingChanged() : void;
	addPanelToWatch(arg1 : Component) : void;
	b() : Editor;
	static a(arg1 : EditorSettings) : void;
	updatePreview(arg1 : boolean) : void;
	b(arg1 : boolean) : void;
	c() : number;
	getRightMargin() : number;
	a(arg1 : Project) : void;
	b(arg1 : Project) : Document;
	prepareForReformat(arg1 : PsiFile) : void;
	getFileExt() : string;
	createFileFromText(arg1 : Project, arg2 : string) : PsiFile;
	doReformat(arg1 : Project, arg2 : PsiFile) : PsiFile;
	a(arg1 : Document) : void;
	static a(arg1 : VisualPosition, arg2 : VisualPosition, arg3 : VisualPosition) : boolean;
	a(arg1 : TextRange) : TextRange;
	a(arg1 : EditorEx) : void;
	createHighlighter(arg1 : EditorColorsScheme) : EditorHighlighter;
	getFileType() : FileType;
	getPreviewText() : string;
	apply(arg1 : CodeStyleSettings) : void;
	reset(arg1 : CodeStyleSettings) : void;
	static getIndexForWrapping(arg1 : number) : number;
	isModified(arg1 : CodeStyleSettings) : boolean;
	getPanel() : JComponent;
	resetImpl(arg1 : CodeStyleSettings) : void;
	static fillWrappingCombo(arg1 : JComboBox) : void;
	static readFromFile(arg1 : Class, arg2 : string) : string;
	installPreviewPanel(arg1 : JPanel) : void;
	getFileTypeExtension(arg1 : FileType) : string;
	onSomethingChanged() : void;
	d() : void;
	e() : void;
	getEditor() : Editor;
	getSettings() : CodeStyleSettings;
	processListOptions() : Set<string>;
	applyPredefinedSettings(arg1 : PredefinedCodeStyle) : void;
	getDefaultLanguage() : Language;
	getTabTitle() : string;
	getCurrentSettings() : CodeStyleSettings;
	setupCopyFromMenu(arg1 : JPopupMenu) : void;
	isCopyFromMenuAvailable() : boolean;
}


declare interface CodeStyleAbstractPanel extends Disposable {}
export = CodeStyleAbstractPanel
