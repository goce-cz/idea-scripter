import JComponent = require('nashorn/javax/swing/JComponent');
import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import JTree = require('nashorn/javax/swing/JTree');
import List = require('nashorn/java/util/List');
import TreePath = require('nashorn/javax/swing/tree/TreePath');
import TreeNode = require('nashorn/javax/swing/tree/TreeNode');
import CustomizableLanguageCodeStylePanel = require('nashorn/com/intellij/application/options/codeStyle/CustomizableLanguageCodeStylePanel');
import Object = require('nashorn/java/lang/Object');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import CustomCodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CustomCodeStyleSettings');
import CodeStyleSettingsCustomizable = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettingsCustomizable');
import Class = require('nashorn/java/lang/Class');
import Field = require('nashorn/java/lang/reflect/Field');
import TreeCellRenderer = require('nashorn/javax/swing/tree/TreeCellRenderer');

declare class OptionTreeWithPreviewPanel {
	panel : JComponent;
	constructor(arg1 : CodeStyleSettings);
	updateOptions(arg1 : boolean, arg2 : string[]) : void;
	enableOption(arg1 : string) : void;
	createOptionsTree() : JTree;
	a(arg1 : List<OptionTreeWithPreviewPanel.BooleanOptionKey>) : List<OptionTreeWithPreviewPanel.BooleanOptionKey>;
	getGroupOrder(arg1 : List<OptionTreeWithPreviewPanel.BooleanOptionKey>) : List<string>;
	a(arg1 : TreePath) : void;
	initTables() : void;
	a(arg1 : TreeNode, arg2 : CodeStyleSettings) : void;
	a(arg1 : OptionTreeWithPreviewPanel.MyToggleTreeNode, arg2 : CodeStyleSettings) : void;
	static b(arg1 : TreeNode, arg2 : CodeStyleSettings) : void;
	static b(arg1 : OptionTreeWithPreviewPanel.MyToggleTreeNode, arg2 : CodeStyleSettings) : void;
	static c(arg1 : TreeNode, arg2 : CodeStyleSettings) : boolean;
	static c(arg1 : OptionTreeWithPreviewPanel.MyToggleTreeNode, arg2 : CodeStyleSettings) : boolean;
	initBooleanField(arg1 : string, arg2 : string, arg3 : string) : void;
	a(arg1 : string, arg2 : string, arg3 : string) : void;
	initCustomOptions(arg1 : string) : void;
	a(arg1 : string, arg2 : string) : string;
	shouldHideOptions() : boolean;
	a(arg1 : OptionTreeWithPreviewPanel.BooleanOptionKey) : boolean;
	b(arg1 : string, arg2 : string) : string;
}


declare interface OptionTreeWithPreviewPanel extends CustomizableLanguageCodeStylePanel {}

declare module OptionTreeWithPreviewPanel {
	class MyToggleTreeNode {
		key : Object;
		text : string;
		selected : boolean;
		enabled : boolean;
		constructor(arg1 : Object, arg2 : string);
		getKey() : Object;
		getText() : string;
		setSelected(arg1 : boolean) : void;
		isSelected() : boolean;
		setEnabled(arg1 : boolean) : void;
		isEnabled() : boolean;
	}


	interface MyToggleTreeNode extends DefaultMutableTreeNode {}	class CustomBooleanOptionKey<T extends CustomCodeStyleSettings> {
		constructor(arg1 : string, arg2 : string, arg3 : string, arg4 : CodeStyleSettingsCustomizable.OptionAnchor, arg5 : string, arg6 : Class<T>, arg7 : Field);
	}


	interface CustomBooleanOptionKey<T extends CustomCodeStyleSettings> extends OptionTreeWithPreviewPanel.BooleanOptionKey {}	class CustomBooleanOptionInfo extends Object {
	}
	class BooleanOptionKey {
		enabled : boolean;
		constructor(arg1 : string, arg2 : string, arg3 : string, arg4 : Field);
		constructor(arg1 : string, arg2 : string, arg3 : string, arg4 : CodeStyleSettingsCustomizable.OptionAnchor, arg5 : string, arg6 : Field);
		setValue(arg1 : CodeStyleSettings, arg2 : boolean) : void;
		getValue(arg1 : CodeStyleSettings) : boolean;
		setEnabled(arg1 : boolean) : void;
		isEnabled() : boolean;
	}


	interface BooleanOptionKey extends CustomizableLanguageCodeStylePanel.OrderedOption {}	class MyTreeCellRenderer {
		constructor();
	}


	interface MyTreeCellRenderer extends TreeCellRenderer {}}

export = OptionTreeWithPreviewPanel
