import ColumnInfo = require('nashorn/com/intellij/util/ui/ColumnInfo');
import JComponent = require('nashorn/javax/swing/JComponent');
import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import TreeTable = require('nashorn/com/intellij/ui/treeStructure/treetable/TreeTable');
import JTree = require('nashorn/javax/swing/JTree');
import TreeNode = require('nashorn/javax/swing/tree/TreeNode');
import Set = require('nashorn/java/util/Set');
import List = require('nashorn/java/util/List');
import CustomizableLanguageCodeStylePanel = require('nashorn/com/intellij/application/options/codeStyle/CustomizableLanguageCodeStylePanel');
import Object = require('nashorn/java/lang/Object');
import AbstractTableCellEditor = require('nashorn/com/intellij/util/ui/AbstractTableCellEditor');
import JTextField = require('nashorn/javax/swing/JTextField');
import TableCellRenderer = require('nashorn/javax/swing/table/TableCellRenderer');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import Class = require('nashorn/java/lang/Class');
import CustomCodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CustomCodeStyleSettings');
import CodeStyleSettingsCustomizable = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettingsCustomizable');

declare class OptionTableWithPreviewPanel {
	TITLE : ColumnInfo;
	VALUE : ColumnInfo;
	COLUMNS : ColumnInfo[];
	panel : JComponent;
	constructor(arg1 : CodeStyleSettings);
	createOptionsTree(arg1 : CodeStyleSettings) : TreeTable;
	a(arg1 : string, arg2 : string) : string;
	static a(arg1 : JTree) : void;
	initTables() : void;
	a(arg1 : TreeNode, arg2 : CodeStyleSettings) : void;
	b(arg1 : TreeNode, arg2 : CodeStyleSettings) : void;
	c(arg1 : TreeNode, arg2 : CodeStyleSettings) : boolean;
	addOption(arg1 : string, arg2 : string) : void;
	addOption(arg1 : string, arg2 : string, arg3 : string[], arg4 : number[]) : void;
	addOption(arg1 : string, arg2 : string, arg3 : string, arg4 : number, arg5 : number, arg6 : number, arg7 : string) : void;
	addOption(arg1 : string, arg2 : string, arg3 : string) : void;
	addOption(arg1 : string, arg2 : string, arg3 : string, arg4 : string[], arg5 : number[]) : void;
	a(arg1 : Set<string>, arg2 : List<OptionTableWithPreviewPanel.Option>) : void;
}


declare interface OptionTableWithPreviewPanel extends CustomizableLanguageCodeStylePanel {}

declare module OptionTableWithPreviewPanel {
	class MyValueEditor {
		cellEditorValue : Object;
		constructor();
	}


	interface MyValueEditor extends AbstractTableCellEditor {}	class MyIntOptionEditor {
		presentableValue : Object;
		getPresentableValue() : Object;
		a() : number;
		setMinValue(arg1 : number) : void;
		setMaxValue(arg1 : number) : void;
		setDefaultValue(arg1 : number) : void;
		setDefaultValueText(arg1 : string) : void;
	}


	interface MyIntOptionEditor extends JTextField {}	class MyValueRenderer {
	}


	interface MyValueRenderer extends TableCellRenderer {}	class MyTreeNode {
		key : OptionTableWithPreviewPanel.Option;
		text : string;
		value : Object;
		enabled : boolean;
		constructor(arg1 : OptionTableWithPreviewPanel.Option, arg2 : string, arg3 : CodeStyleSettings);
		getKey() : OptionTableWithPreviewPanel.Option;
		getText() : string;
		getValue() : Object;
		setValue(arg1 : Object) : void;
		reset(arg1 : CodeStyleSettings) : void;
		isModified(arg1 : CodeStyleSettings) : boolean;
		apply(arg1 : CodeStyleSettings) : void;
		isEnabled() : boolean;
	}


	interface MyTreeNode extends DefaultMutableTreeNode {}	class IntOption {
		minValue : number;
		maxValue : number;
		defaultValue : number;
		defaultValueText : string;
		constructor(arg1 : Class<CustomCodeStyleSettings>, arg2 : string, arg3 : string, arg4 : string, arg5 : CodeStyleSettingsCustomizable.OptionAnchor, arg6 : string, arg7 : number, arg8 : number, arg9 : number, arg10 : string);
		getMinValue() : number;
		getMaxValue() : number;
		getDefaultValue() : number;
		isDefaultText(arg1 : Object) : boolean;
		getDefaultValueText() : string;
	}


	interface IntOption extends OptionTableWithPreviewPanel.Option {}	class SelectionOption {
		constructor(arg1 : Class<CustomCodeStyleSettings>, arg2 : string, arg3 : string, arg4 : string, arg5 : CodeStyleSettingsCustomizable.OptionAnchor, arg6 : string, arg7 : string[], arg8 : number[]);
	}


	interface SelectionOption extends OptionTableWithPreviewPanel.Option {}	class BooleanOption {
	}


	interface BooleanOption extends OptionTableWithPreviewPanel.Option {}	class Option {
		enabled : boolean;
		constructor(arg1 : Class<CustomCodeStyleSettings>, arg2 : string, arg3 : string, arg4 : string, arg5 : CodeStyleSettingsCustomizable.OptionAnchor, arg6 : string);
		setEnabled(arg1 : boolean) : void;
		isEnabled() : boolean;
		getValue(arg1 : CodeStyleSettings) : Object;
		setValue(arg1 : Object, arg2 : CodeStyleSettings) : void;
		getSettings(arg1 : CodeStyleSettings) : Object;
	}


	interface Option extends CustomizableLanguageCodeStylePanel.OrderedOption {}}

export = OptionTableWithPreviewPanel
