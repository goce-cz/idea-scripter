import Object = require('nashorn/java/lang/Object');
import CodeStyleScheme = require('nashorn/com/intellij/psi/codeStyle/CodeStyleScheme');
import List = require('nashorn/java/util/List');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import CodeStyleSettingsListener = require('nashorn/com/intellij/application/options/codeStyle/CodeStyleSettingsListener');
import CodeStyleSettingsManager = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettingsManager');

declare class CodeStyleSchemesModel extends Object {
	static PROJECT_SCHEME_NAME : string;
	selectedScheme : CodeStyleScheme;
	schemes : List<CodeStyleScheme>;
	usePerProjectSettings : boolean;
	schemeListModified : boolean;
	selectedGlobalScheme : CodeStyleScheme;
	projectScheme : CodeStyleScheme;
	allSortedSchemes : List<CodeStyleScheme>;
	constructor(arg1 : Project);
	selectScheme(arg1 : CodeStyleScheme, arg2 : Object) : void;
	addScheme(arg1 : CodeStyleScheme, arg2 : boolean) : void;
	removeScheme(arg1 : CodeStyleScheme) : void;
	getCloneSettings(arg1 : CodeStyleScheme) : CodeStyleSettings;
	getSelectedScheme() : CodeStyleScheme;
	addListener(arg1 : CodeStyleSettingsListener) : void;
	getSchemes() : List<CodeStyleScheme>;
	reset() : void;
	isUsePerProjectSettings() : boolean;
	setUsePerProjectSettings(arg1 : boolean) : void;
	setUsePerProjectSettings(arg1 : boolean, arg2 : boolean) : void;
	a() : CodeStyleSettingsManager;
	isSchemeListModified() : boolean;
	apply() : void;
	static cannotBeModified(arg1 : CodeStyleScheme) : boolean;
	static cannotBeDeleted(arg1 : CodeStyleScheme) : boolean;
	fireCurrentSettingsChanged() : void;
	fireSchemeChanged(arg1 : CodeStyleScheme) : void;
	getSelectedGlobalScheme() : CodeStyleScheme;
	copyToProject(arg1 : CodeStyleScheme) : void;
	exportProjectScheme(arg1 : string) : CodeStyleScheme;
	createNewScheme(arg1 : string, arg2 : CodeStyleScheme) : CodeStyleScheme;
	a(arg1 : string) : CodeStyleScheme;
	getProjectScheme() : CodeStyleScheme;
	isProjectScheme(arg1 : CodeStyleScheme) : boolean;
	getAllSortedSchemes() : List<CodeStyleScheme>;
}

export = CodeStyleSchemesModel
