import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Object = require('nashorn/java/lang/Object');
import Color = require('nashorn/java/awt/Color');
import SeparatorPlacement = require('nashorn/com/intellij/openapi/editor/markup/SeparatorPlacement');
import RangeHighlighter = require('nashorn/com/intellij/openapi/editor/markup/RangeHighlighter');
import GutterIconNavigationHandler = require('nashorn/com/intellij/codeInsight/daemon/GutterIconNavigationHandler');
import Icon = require('nashorn/javax/swing/Icon');
import Function = require('nashorn/com/intellij/util/Function');
import GutterIconRenderer = require('nashorn/com/intellij/openapi/editor/markup/GutterIconRenderer');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');

declare class LineMarkerInfo<T extends PsiElement> extends Object {
	startOffset : number;
	endOffset : number;
	separatorColor : Color;
	separatorPlacement : SeparatorPlacement;
	highlighter : RangeHighlighter;
	updatePass : number;
	lineMarkerTooltip : string;
	element : T;
	navigationHandler : GutterIconNavigationHandler<T>;
	constructor(arg1 : T, arg2 : number, arg3 : Icon, arg4 : number, arg5 : Function<any, string>, arg6 : GutterIconNavigationHandler<T>, arg7 : GutterIconRenderer.Alignment);
	constructor(arg1 : T, arg2 : TextRange, arg3 : Icon, arg4 : number, arg5 : Function<any, string>, arg6 : GutterIconNavigationHandler<T>, arg7 : GutterIconRenderer.Alignment);
	constructor(arg1 : T, arg2 : number, arg3 : Icon, arg4 : number, arg5 : Function<any, string>, arg6 : GutterIconNavigationHandler<T>);
	createGutterRenderer() : GutterIconRenderer;
	getLineMarkerTooltip() : string;
	getElement() : T;
	getNavigationHandler() : GutterIconNavigationHandler<T>;
}


declare module LineMarkerInfo {
	class LineMarkerGutterIconRenderer<T extends PsiElement> {
		lineMarkerInfo : LineMarkerInfo<T>;
		icon : Icon;
		clickAction : AnAction;
		navigateAction : boolean;
		tooltipText : string;
		alignment : GutterIconRenderer.Alignment;
		constructor(arg1 : LineMarkerInfo<T>);
		getLineMarkerInfo() : LineMarkerInfo<T>;
		looksTheSameAs(arg1 : LineMarkerInfo.LineMarkerGutterIconRenderer) : boolean;
	}


	interface LineMarkerGutterIconRenderer<T extends PsiElement> extends GutterIconRenderer {}	class NavigateAction {
	}


	interface NavigateAction extends AnAction {}}

export = LineMarkerInfo
