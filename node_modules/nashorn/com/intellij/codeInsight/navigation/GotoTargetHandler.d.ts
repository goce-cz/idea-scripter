import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Object = require('nashorn/java/lang/Object');
import Map = require('nashorn/java/util/Map');
import PsiElementListCellRenderer = require('nashorn/com/intellij/ide/util/PsiElementListCellRenderer');
import Comparator = require('nashorn/java/util/Comparator');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Navigatable = require('nashorn/com/intellij/pom/Navigatable');
import CodeInsightActionHandler = require('nashorn/com/intellij/codeInsight/CodeInsightActionHandler');
import DefaultListCellRenderer = require('nashorn/javax/swing/DefaultListCellRenderer');
import List = require('nashorn/java/util/List');
import ListBackgroundUpdaterTask = require('nashorn/com/intellij/codeInsight/navigation/ListBackgroundUpdaterTask');
import Icon = require('nashorn/javax/swing/Icon');

declare class GotoTargetHandler {
	constructor();
	getFeatureUsedKey() : string;
	getSourceAndTargetElements(arg1 : Editor, arg2 : PsiFile) : GotoTargetHandler.GotoData;
	a(arg1 : Project, arg2 : Editor, arg3 : PsiFile, arg4 : GotoTargetHandler.GotoData) : void;
	static a(arg1 : Object, arg2 : Map<Object, PsiElementListCellRenderer>, arg3 : GotoTargetHandler.GotoData) : PsiElementListCellRenderer;
	static createComparator(arg1 : Map<Object, PsiElementListCellRenderer>, arg2 : GotoTargetHandler.GotoData) : Comparator<PsiElement>;
	static createRenderer(arg1 : GotoTargetHandler.GotoData, arg2 : PsiElement) : PsiElementListCellRenderer;
	navigateToElement(arg1 : Navigatable) : void;
	shouldSortTargets() : boolean;
	getChooserTitle(arg1 : PsiElement, arg2 : string, arg3 : number) : string;
	getFindUsagesTitle(arg1 : PsiElement, arg2 : string, arg3 : number) : string;
	getNotFoundMessage(arg1 : Project, arg2 : Editor, arg3 : PsiFile) : string;
	getAdText(arg1 : PsiElement, arg2 : number) : string;
}


declare interface GotoTargetHandler extends CodeInsightActionHandler {}

declare module GotoTargetHandler {
	class ActionCellRenderer {
	}


	interface ActionCellRenderer extends DefaultListCellRenderer {}	class DefaultPsiElementListCellRenderer {
	}


	interface DefaultPsiElementListCellRenderer extends PsiElementListCellRenderer {}	class GotoData extends Object {
		source : PsiElement;
		targets : PsiElement[];
		additionalActions : List<GotoTargetHandler.AdditionalAction>;
		listUpdaterTask : ListBackgroundUpdaterTask;
		renderers : Map<Object, PsiElementListCellRenderer>;
		constructor(arg1 : PsiElement, arg2 : PsiElement[], arg3 : List<GotoTargetHandler.AdditionalAction>);
		hasDifferentNames() : boolean;
		addTarget(arg1 : PsiElement) : boolean;
		getRenderer(arg1 : Object) : PsiElementListCellRenderer;
	}
	class AdditionalAction extends Object {
		text : string;
		icon : Icon;
		getText() : string;
		getIcon() : Icon;
		execute() : void;
	}
}

export = GotoTargetHandler
