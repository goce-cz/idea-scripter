import Project = require('nashorn/com/intellij/openapi/project/Project');
import PerformInBackgroundOption = require('nashorn/com/intellij/openapi/progress/PerformInBackgroundOption');
import AbstractPopup = require('nashorn/com/intellij/ui/popup/AbstractPopup');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import UsageView = require('nashorn/com/intellij/usages/UsageView');
import List = require('nashorn/java/util/List');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Comparator = require('nashorn/java/util/Comparator');
import Task = require('nashorn/com/intellij/openapi/progress/Task');

declare class BackgroundUpdaterTask<T> {
	canceled : boolean;
	currentSize : number;
	constructor(arg1 : Project, arg2 : string, arg3 : boolean);
	constructor(arg1 : Project, arg2 : string);
	constructor(arg1 : Project, arg2 : string, arg3 : boolean, arg4 : PerformInBackgroundOption);
	init(arg1 : AbstractPopup, arg2 : T, arg3 : Ref<UsageView>) : void;
	getCaption(arg1 : number) : string;
	replaceModel(arg1 : List<PsiElement>) : void;
	paintBusy(arg1 : boolean) : void;
	setCanceled() : boolean;
	isCanceled() : boolean;
	updateComponent(arg1 : PsiElement, arg2 : Comparator) : boolean;
	getCurrentSize() : number;
}


declare interface BackgroundUpdaterTask<T> extends Task.Backgroundable {}
export = BackgroundUpdaterTask
