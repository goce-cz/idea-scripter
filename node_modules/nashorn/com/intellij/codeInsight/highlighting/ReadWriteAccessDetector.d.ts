import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Enum = require('nashorn/java/lang/Enum');

declare class ReadWriteAccessDetector extends Object {
	static EP_NAME : ExtensionPointName<ReadWriteAccessDetector>;
	constructor();
	static findDetector(arg1 : PsiElement) : ReadWriteAccessDetector;
	isReadWriteAccessible(arg1 : PsiElement) : boolean;
	isDeclarationWriteAccess(arg1 : PsiElement) : boolean;
	getReferenceAccess(arg1 : PsiElement, arg2 : PsiReference) : ReadWriteAccessDetector.Access;
	getExpressionAccess(arg1 : PsiElement) : ReadWriteAccessDetector.Access;
}


declare module ReadWriteAccessDetector {
	class Access {
		static Read : ReadWriteAccessDetector.Access;
		static Write : ReadWriteAccessDetector.Access;
		static ReadWrite : ReadWriteAccessDetector.Access;
	}


	interface Access extends Enum<ReadWriteAccessDetector.Access> {}}

export = ReadWriteAccessDetector
