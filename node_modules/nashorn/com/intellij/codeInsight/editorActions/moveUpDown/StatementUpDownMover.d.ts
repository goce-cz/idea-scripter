import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import LineRange = require('nashorn/com/intellij/codeInsight/editorActions/moveUpDown/LineRange');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');

declare class StatementUpDownMover extends Object {
	static STATEMENT_UP_DOWN_MOVER_EP : ExtensionPointName<StatementUpDownMover>;
	constructor();
	checkAvailable(arg1 : Editor, arg2 : PsiFile, arg3 : StatementUpDownMover.MoveInfo, arg4 : boolean) : boolean;
	beforeMove(arg1 : Editor, arg2 : StatementUpDownMover.MoveInfo, arg3 : boolean) : void;
	afterMove(arg1 : Editor, arg2 : PsiFile, arg3 : StatementUpDownMover.MoveInfo, arg4 : boolean) : void;
	static getLineStartSafeOffset(arg1 : Document, arg2 : number) : number;
	static getLineRangeFromSelection(arg1 : Editor) : LineRange;
	static getElementRange(arg1 : Editor, arg2 : PsiFile, arg3 : LineRange) : Pair<PsiElement, PsiElement>;
	static firstNonWhiteElement(arg1 : number, arg2 : PsiFile, arg3 : boolean) : PsiElement;
	static firstNonWhiteElement(arg1 : PsiElement, arg2 : boolean) : PsiElement;
}


declare module StatementUpDownMover {
	class MoveInfo {
		toMove : LineRange;
		toMove2 : LineRange;
		range1 : RangeMarker;
		range2 : RangeMarker;
		indentSource : boolean;
		indentTarget : boolean;
		constructor();
		prohibitMove() : boolean;
	}


	interface MoveInfo extends UserDataHolderBase {}}

export = StatementUpDownMover
