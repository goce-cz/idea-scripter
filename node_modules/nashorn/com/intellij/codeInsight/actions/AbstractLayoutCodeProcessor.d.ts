import Object = require('nashorn/java/lang/Object');
import LayoutCodeInfoCollector = require('nashorn/com/intellij/codeInsight/actions/LayoutCodeInfoCollector');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import List = require('nashorn/java/util/List');
import Runnable = require('nashorn/java/lang/Runnable');
import FutureTask = require('nashorn/java/util/concurrent/FutureTask');
import FileFilter = require('nashorn/com/intellij/codeInsight/actions/FileFilter');
import FileTreeIterator = require('nashorn/com/intellij/codeInsight/actions/FileTreeIterator');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import SelectionModel = require('nashorn/com/intellij/openapi/editor/SelectionModel');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Logger = require('nashorn/com/intellij/openapi/diagnostic/Logger');
import FilesTooBigForDiffException = require('nashorn/com/intellij/util/diff/FilesTooBigForDiffException');
import SequentialModalProgressTask = require('nashorn/com/intellij/util/SequentialModalProgressTask');
import SequentialTask = require('nashorn/com/intellij/util/SequentialTask');

declare class AbstractLayoutCodeProcessor extends Object {
	infoCollector : LayoutCodeInfoCollector;
	static a(arg1 : PsiFile[], arg2 : List<PsiFile>) : List<PsiFile>;
	setPostRunnable(arg1 : Runnable) : void;
	a(arg1 : PsiFile, arg2 : boolean) : FutureTask<boolean>;
	setCollectInfo(arg1 : boolean) : void;
	addFileFilter(arg1 : FileFilter) : void;
	setProcessChangedTextOnly(arg1 : boolean) : void;
	prepareTask(arg1 : PsiFile, arg2 : boolean) : FutureTask<boolean>;
	preprocessFile(arg1 : PsiFile, arg2 : boolean) : FutureTask<boolean>;
	run() : void;
	a() : FileTreeIterator;
	b() : FileTreeIterator;
	c() : List<PsiFile>;
	d() : List<PsiDirectory>;
	a(arg1 : PsiFile) : void;
	b(arg1 : PsiFile) : boolean;
	a(arg1 : FileTreeIterator) : Runnable;
	b(arg1 : FileTreeIterator) : void;
	static c(arg1 : PsiFile) : boolean;
	a(arg1 : Runnable, arg2 : Runnable, arg3 : boolean) : void;
	runWithoutProgress() : void;
	d(arg1 : PsiFile) : boolean;
	static getSelectedRanges(arg1 : SelectionModel) : List<TextRange>;
	handleFileTooBigException(arg1 : Logger, arg2 : FilesTooBigForDiffException, arg3 : PsiFile) : void;
	getInfoCollector() : LayoutCodeInfoCollector;
}


declare module AbstractLayoutCodeProcessor {
	class ReformatFilesTask {
		done : boolean;
		a() : void;
		a(arg1 : PsiFile) : void;
		a(arg1 : string, arg2 : string) : void;
		b(arg1 : PsiFile) : string;
		a(arg1 : number) : void;
		setCompositeTask(arg1 : SequentialModalProgressTask) : void;
	}


	interface ReformatFilesTask extends SequentialTask {}}

export = AbstractLayoutCodeProcessor
