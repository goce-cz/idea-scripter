import Project = require('nashorn/com/intellij/openapi/project/Project');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Runnable = require('nashorn/java/lang/Runnable');
import AbstractLayoutCodeProcessor = require('nashorn/com/intellij/codeInsight/actions/AbstractLayoutCodeProcessor');
import Object = require('nashorn/java/lang/Object');

declare class OptimizeImportsProcessor {
	static COMMAND_NAME : string;
	constructor(arg1 : Project);
	constructor(arg1 : Project, arg2 : Module);
	constructor(arg1 : Project, arg2 : PsiDirectory, arg3 : boolean);
	constructor(arg1 : Project, arg2 : PsiDirectory, arg3 : boolean, arg4 : boolean);
	constructor(arg1 : Project, arg2 : PsiFile);
	constructor(arg1 : Project, arg2 : PsiFile[], arg3 : Runnable);
	constructor(arg1 : Project, arg2 : PsiFile[], arg3 : string, arg4 : Runnable);
	constructor(arg1 : AbstractLayoutCodeProcessor);
	a(arg1 : Runnable) : void;
	e() : void;
}


declare interface OptimizeImportsProcessor extends AbstractLayoutCodeProcessor {}

declare module OptimizeImportsProcessor {
	class NotificationInfo extends Object {
		static NOTHING_CHANGED_NOTIFICATION : OptimizeImportsProcessor.NotificationInfo;
		static SOMETHING_CHANGED_WITHOUT_MESSAGE_NOTIFICATION : OptimizeImportsProcessor.NotificationInfo;
		somethingChanged : boolean;
		message : string;
		isSomethingChanged() : boolean;
		getMessage() : string;
	}
}

export = OptimizeImportsProcessor
