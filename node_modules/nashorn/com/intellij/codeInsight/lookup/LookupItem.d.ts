import ClassConditionKey = require('nashorn/com/intellij/openapi/util/ClassConditionKey');
import Object = require('nashorn/java/lang/Object');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import TailType = require('nashorn/com/intellij/codeInsight/TailType');
import InsertHandler = require('nashorn/com/intellij/codeInsight/completion/InsertHandler');
import AutoCompletionPolicy = require('nashorn/com/intellij/codeInsight/lookup/AutoCompletionPolicy');
import Set = require('nashorn/java/util/Set');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import LookupElement = require('nashorn/com/intellij/codeInsight/lookup/LookupElement');
import MutableLookupElement = require('nashorn/com/intellij/codeInsight/lookup/MutableLookupElement');
import Comparable = require('nashorn/java/lang/Comparable');

declare class LookupItem<T> {
	static CLASS_CONDITION_KEY : ClassConditionKey<LookupItem>;
	static HIGHLIGHTED_ATTR : Object;
	static ICON_ATTR : Object;
	static TYPE_TEXT_ATTR : Object;
	static TAIL_TEXT_ATTR : Object;
	static TAIL_TEXT_SMALL_ATTR : Object;
	static FORCE_SHOW_SIGNATURE_ATTR : Key<Object>;
	static FORCE_QUALIFY : Object;
	static SUBSTITUTOR : Object;
	static TYPE : Object;
	static DEPRECATED_ATTR : Key<Object>;
	static CASE_INSENSITIVE : Object;
	static TAIL_TYPE_ATTR : Key<TailType>;
	static EMPTY_ARRAY : LookupItem[];
	lookupString : string;
	insertHandler : InsertHandler<LookupItem>;
	bold : boolean;
	tailType : TailType;
	autoCompletionPolicy : AutoCompletionPolicy;
	priority : number;
	presentableText : string;
	allLookupStrings : Set<string>;
	caseSensitive : boolean;
	constructor(arg1 : T, arg2 : string);
	static fromString(arg1 : string) : LookupItem;
	setObject(arg1 : T) : void;
	setLookupString(arg1 : string) : void;
	getAttribute(arg1 : Object) : Object;
	getAttribute<T>(arg1 : Key<T>) : T;
	setAttribute(arg1 : Object, arg2 : Object) : void;
	setAttribute<T>(arg1 : Key<T>, arg2 : T) : void;
	static getDefaultTailType(arg1 : string) : TailType;
	static handleCompletionChar(arg1 : Editor, arg2 : LookupElement, arg3 : string) : TailType;
	getTailType() : TailType;
	forceQualify() : LookupItem<T>;
	setDeprecated(arg1 : boolean) : LookupItem<T>;
	getPriority() : number;
	getPresentableText() : string;
}


declare interface LookupItem<T> extends MutableLookupElement<T>, Comparable {}
export = LookupItem
