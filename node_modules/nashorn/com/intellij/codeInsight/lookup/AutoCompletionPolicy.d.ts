import LookupElement = require('nashorn/com/intellij/codeInsight/lookup/LookupElement');
import Enum = require('nashorn/java/lang/Enum');
import ClassConditionKey = require('nashorn/com/intellij/openapi/util/ClassConditionKey');
import LookupElementDecorator = require('nashorn/com/intellij/codeInsight/lookup/LookupElementDecorator');

declare class AutoCompletionPolicy {
	static NEVER_AUTOCOMPLETE : AutoCompletionPolicy;
	static SETTINGS_DEPENDENT : AutoCompletionPolicy;
	static GIVE_CHANCE_TO_OVERWRITE : AutoCompletionPolicy;
	static ALWAYS_AUTOCOMPLETE : AutoCompletionPolicy;
	applyPolicy(arg1 : LookupElement) : LookupElement;
	static getPolicy(arg1 : LookupElement) : AutoCompletionPolicy;
}


declare interface AutoCompletionPolicy extends Enum<AutoCompletionPolicy> {}

declare module AutoCompletionPolicy {
	class PolicyDecorator {
		static CLASS_CONDITION_KEY : ClassConditionKey<AutoCompletionPolicy.PolicyDecorator>;
		autoCompletionPolicy : AutoCompletionPolicy;
		constructor(arg1 : LookupElement, arg2 : AutoCompletionPolicy);
	}


	interface PolicyDecorator extends LookupElementDecorator<LookupElement> {}}

export = AutoCompletionPolicy
