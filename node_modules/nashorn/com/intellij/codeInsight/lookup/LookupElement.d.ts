import Set = require('nashorn/java/util/Set');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import AutoCompletionPolicy = require('nashorn/com/intellij/codeInsight/lookup/AutoCompletionPolicy');
import Object = require('nashorn/java/lang/Object');
import InsertionContext = require('nashorn/com/intellij/codeInsight/completion/InsertionContext');
import LookupElementPresentation = require('nashorn/com/intellij/codeInsight/lookup/LookupElementPresentation');
import Class = require('nashorn/java/lang/Class');
import ClassConditionKey = require('nashorn/com/intellij/openapi/util/ClassConditionKey');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');

declare class LookupElement {
	static EMPTY_ARRAY : LookupElement[];
	lookupString : string;
	allLookupStrings : Set<string>;
	psiElement : PsiElement;
	valid : boolean;
	autoCompletionPolicy : AutoCompletionPolicy;
	caseSensitive : boolean;
	worthShowingInAutoPopup : boolean;
	constructor();
	getLookupString() : string;
	getAllLookupStrings() : Set<string>;
	getObject() : Object;
	getPsiElement() : PsiElement;
	isValid() : boolean;
	handleInsert(arg1 : InsertionContext) : void;
	getAutoCompletionPolicy() : AutoCompletionPolicy;
	renderElement(arg1 : LookupElementPresentation) : void;
	as<T>(arg1 : Class<T>) : T;
	as<T>(arg1 : ClassConditionKey<T>) : T;
	isCaseSensitive() : boolean;
	isWorthShowingInAutoPopup() : boolean;
}


declare interface LookupElement extends UserDataHolderBase {}
export = LookupElement
