import LookupElement = require('nashorn/com/intellij/codeInsight/lookup/LookupElement');
import Set = require('nashorn/java/util/Set');
import AutoCompletionPolicy = require('nashorn/com/intellij/codeInsight/lookup/AutoCompletionPolicy');
import InsertHandler = require('nashorn/com/intellij/codeInsight/completion/InsertHandler');
import LookupElementRenderer = require('nashorn/com/intellij/codeInsight/lookup/LookupElementRenderer');

declare class LookupElementDecorator<T extends LookupElement> {
	delegate : T;
	valid : boolean;
	lookupString : string;
	allLookupStrings : Set<string>;
	autoCompletionPolicy : AutoCompletionPolicy;
	caseSensitive : boolean;
	getDelegate() : T;
	static withInsertHandler<T extends LookupElement>(arg1 : T, arg2 : InsertHandler<any>) : LookupElementDecorator<T>;
	static withRenderer<T extends LookupElement>(arg1 : T, arg2 : LookupElementRenderer<any>) : LookupElementDecorator<T>;
}


declare interface LookupElementDecorator<T extends LookupElement> extends LookupElement {}

declare module LookupElementDecorator {
	class VisagisteDecorator<T extends LookupElement> {
		constructor(arg1 : T, arg2 : LookupElementRenderer<any>);
	}


	interface VisagisteDecorator<T extends LookupElement> extends LookupElementDecorator<T> {}	class InsertingDecorator<T extends LookupElement> {
		constructor(arg1 : T, arg2 : InsertHandler<any>);
	}


	interface InsertingDecorator<T extends LookupElement> extends LookupElementDecorator<T> {}}

export = LookupElementDecorator
