import Object = require('nashorn/java/lang/Object');
import ObjectPattern = require('nashorn/com/intellij/patterns/ObjectPattern');
import Class = require('nashorn/java/lang/Class');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import CompletionVariant = require('nashorn/com/intellij/codeInsight/completion/CompletionVariant');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Set = require('nashorn/java/util/Set');
import LookupElement = require('nashorn/com/intellij/codeInsight/lookup/LookupElement');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PrefixMatcher = require('nashorn/com/intellij/codeInsight/completion/PrefixMatcher');
import ElementPattern = require('nashorn/com/intellij/patterns/ElementPattern');
import TailType = require('nashorn/com/intellij/codeInsight/TailType');
import ElementFilter = require('nashorn/com/intellij/psi/filters/ElementFilter');
import PsiMultiReference = require('nashorn/com/intellij/psi/impl/source/resolve/reference/impl/PsiMultiReference');

declare class CompletionData extends Object {
	static NOT_JAVA_ID : ObjectPattern.Capture<string>;
	declareFinalScope(arg1 : Class) : void;
	isScopeFinal(arg1 : Class) : boolean;
	a(arg1 : PsiElement) : boolean;
	defineScopeEquivalence(arg1 : Class, arg2 : Class) : void;
	registerVariant(arg1 : CompletionVariant) : void;
	completeReference(arg1 : PsiReference, arg2 : Set<LookupElement>, arg3 : PsiElement, arg4 : PsiFile, arg5 : number) : void;
	addKeywordVariants(arg1 : Set<CompletionVariant>, arg2 : PsiElement, arg3 : PsiFile) : void;
	completeKeywordsBySet(arg1 : Set<LookupElement>, arg2 : Set<CompletionVariant>, arg3 : PsiElement, arg4 : PrefixMatcher, arg5 : PsiFile) : void;
	findPrefix(arg1 : PsiElement, arg2 : number) : string;
	findVariants(arg1 : PsiElement, arg2 : PsiFile) : CompletionVariant[];
	static getReferencePrefix(arg1 : PsiElement, arg2 : number) : string;
	static findPrefixStatic(arg1 : PsiElement, arg2 : number, arg3 : ElementPattern<string>) : string;
	static findPrefixStatic(arg1 : PsiElement, arg2 : number) : string;
	static findPrefixDefault(arg1 : PsiElement, arg2 : number, arg3 : ElementPattern) : string;
	static objectToLookupItem(arg1 : Object) : LookupElement;
	addLookupItem(arg1 : Set<LookupElement>, arg2 : TailType, arg3 : Object, arg4 : PsiFile, arg5 : CompletionVariant) : void;
	completeReference(arg1 : PsiReference, arg2 : PsiElement, arg3 : Set<LookupElement>, arg4 : TailType, arg5 : PsiFile, arg6 : ElementFilter, arg7 : CompletionVariant) : void;
	static getReferences(arg1 : PsiMultiReference) : PsiReference[];
	addKeywords(arg1 : Set<LookupElement>, arg2 : PsiElement, arg3 : PrefixMatcher, arg4 : PsiFile, arg5 : CompletionVariant, arg6 : Object, arg7 : TailType) : void;
	addKeyword(arg1 : Set<LookupElement>, arg2 : TailType, arg3 : Object, arg4 : PrefixMatcher, arg5 : PsiFile, arg6 : CompletionVariant) : void;
}

export = CompletionData
