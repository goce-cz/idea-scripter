import Object = require('nashorn/java/lang/Object');
import InsertHandler = require('nashorn/com/intellij/codeInsight/completion/InsertHandler');
import Map = require('nashorn/java/util/Map');
import Class = require('nashorn/java/lang/Class');
import ElementPattern = require('nashorn/com/intellij/patterns/ElementPattern');
import ElementFilter = require('nashorn/com/intellij/psi/filters/ElementFilter');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TailType = require('nashorn/com/intellij/codeInsight/TailType');
import ContextGetter = require('nashorn/com/intellij/psi/filters/ContextGetter');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Set = require('nashorn/java/util/Set');
import LookupElement = require('nashorn/com/intellij/codeInsight/lookup/LookupElement');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import CompletionData = require('nashorn/com/intellij/codeInsight/completion/CompletionData');
import PrefixMatcher = require('nashorn/com/intellij/codeInsight/completion/PrefixMatcher');

declare class CompletionVariant extends Object {
	insertHandler : InsertHandler;
	itemProperties : Map<Object, Object>;
	constructor();
	constructor(arg1 : Class, arg2 : ElementPattern);
	constructor(arg1 : Class, arg2 : ElementFilter);
	constructor(arg1 : ElementPattern<PsiElement>);
	constructor(arg1 : ElementFilter);
	isScopeAcceptable(arg1 : PsiElement) : boolean;
	isScopeFinal(arg1 : PsiElement) : boolean;
	getInsertHandler() : InsertHandler;
	setInsertHandler(arg1 : InsertHandler) : void;
	setItemProperty(arg1 : Object, arg2 : Object) : void;
	getItemProperties() : Map<Object, Object>;
	isScopeClassFinal(arg1 : Class) : boolean;
	isScopeClassAcceptable(arg1 : Class) : boolean;
	excludeScopeClass(arg1 : Class<any>) : void;
	includeScopeClass(arg1 : Class<any>) : void;
	includeScopeClass(arg1 : Class<any>, arg2 : boolean) : void;
	addCompletionFilter(arg1 : ElementFilter, arg2 : TailType) : void;
	addCompletionFilter(arg1 : ElementFilter) : void;
	addCompletion(arg1 : string) : void;
	addCompletion(arg1 : string, arg2 : TailType) : void;
	addCompletion(arg1 : ContextGetter) : void;
	addCompletion(arg1 : ContextGetter, arg2 : TailType) : void;
	a(arg1 : Object, arg2 : TailType) : void;
	addCompletion(arg1 : string[]) : void;
	addCompletion(arg1 : string[], arg2 : TailType) : void;
	isVariantApplicable(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	addReferenceCompletions(arg1 : PsiReference, arg2 : PsiElement, arg3 : Set<LookupElement>, arg4 : PsiFile, arg5 : CompletionData) : void;
	addKeywords(arg1 : Set<LookupElement>, arg2 : PsiElement, arg3 : PrefixMatcher, arg4 : PsiFile, arg5 : CompletionData) : void;
	hasReferenceFilter() : boolean;
	hasKeywordCompletions() : boolean;
	setCaseInsensitive(arg1 : boolean) : void;
}


declare module CompletionVariant {
	class CompletionVariantItem extends Object {
		myCompletion : Object;
		myTailType : TailType;
		constructor(arg1 : Object, arg2 : TailType);
	}
	class Scope extends Object {
	}
}

export = CompletionVariant
