import PrefixMatcher = require('nashorn/com/intellij/codeInsight/completion/PrefixMatcher');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import CompletionResult = require('nashorn/com/intellij/codeInsight/completion/CompletionResult');
import LookupElement = require('nashorn/com/intellij/codeInsight/lookup/LookupElement');
import Iterable = require('nashorn/java/lang/Iterable');
import CompletionSorter = require('nashorn/com/intellij/codeInsight/completion/CompletionSorter');
import CompletionParameters = require('nashorn/com/intellij/codeInsight/completion/CompletionParameters');
import LinkedHashSet = require('nashorn/java/util/LinkedHashSet');
import ElementPattern = require('nashorn/com/intellij/patterns/ElementPattern');

declare class CompletionResultSet {
	prefixMatcher : PrefixMatcher;
	stopped : boolean;
	getConsumer() : Consumer<CompletionResult>;
	addElement(arg1 : LookupElement) : void;
	passResult(arg1 : CompletionResult) : void;
	addAllElements(arg1 : Iterable<LookupElement>) : void;
	withPrefixMatcher(arg1 : PrefixMatcher) : CompletionResultSet;
	withPrefixMatcher(arg1 : string) : CompletionResultSet;
	withRelevanceSorter(arg1 : CompletionSorter) : CompletionResultSet;
	addLookupAdvertisement(arg1 : string) : void;
	caseInsensitive() : CompletionResultSet;
	getPrefixMatcher() : PrefixMatcher;
	isStopped() : boolean;
	stopHere() : void;
	runRemainingContributors(arg1 : CompletionParameters, arg2 : boolean) : LinkedHashSet<CompletionResult>;
	runRemainingContributors(arg1 : CompletionParameters, arg2 : Consumer<CompletionResult>) : void;
	runRemainingContributors(arg1 : CompletionParameters, arg2 : Consumer<CompletionResult>, arg3 : boolean) : void;
	restartCompletionOnPrefixChange(arg1 : string) : void;
	restartCompletionOnPrefixChange(arg1 : ElementPattern<string>) : void;
	restartCompletionWhenNothingMatches() : void;
}


declare interface CompletionResultSet extends Consumer<LookupElement> {}
export = CompletionResultSet
