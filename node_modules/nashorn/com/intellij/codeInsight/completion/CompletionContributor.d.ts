import Object = require('nashorn/java/lang/Object');
import CompletionType = require('nashorn/com/intellij/codeInsight/completion/CompletionType');
import ElementPattern = require('nashorn/com/intellij/patterns/ElementPattern');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import CompletionProvider = require('nashorn/com/intellij/codeInsight/completion/CompletionProvider');
import CompletionParameters = require('nashorn/com/intellij/codeInsight/completion/CompletionParameters');
import CompletionResultSet = require('nashorn/com/intellij/codeInsight/completion/CompletionResultSet');
import CompletionInitializationContext = require('nashorn/com/intellij/codeInsight/completion/CompletionInitializationContext');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import AutoCompletionContext = require('nashorn/com/intellij/codeInsight/completion/AutoCompletionContext');
import AutoCompletionDecision = require('nashorn/com/intellij/codeInsight/completion/AutoCompletionDecision');
import List = require('nashorn/java/util/List');
import Language = require('nashorn/com/intellij/lang/Language');
import KeyedExtensionCollector = require('nashorn/com/intellij/openapi/util/KeyedExtensionCollector');

declare class CompletionContributor extends Object {
	constructor();
	extend(arg1 : CompletionType, arg2 : ElementPattern<PsiElement>, arg3 : CompletionProvider<CompletionParameters>) : void;
	fillCompletionVariants(arg1 : CompletionParameters, arg2 : CompletionResultSet) : void;
	beforeCompletion(arg1 : CompletionInitializationContext) : void;
	advertise(arg1 : CompletionParameters) : string;
	handleEmptyLookup(arg1 : CompletionParameters, arg2 : Editor) : string;
	handleAutoCompletionPossibility(arg1 : AutoCompletionContext) : AutoCompletionDecision;
	invokeAutoPopup(arg1 : PsiElement, arg2 : string) : boolean;
	duringCompletion(arg1 : CompletionInitializationContext) : void;
	static getActionShortcut(arg1 : string) : string;
	static forParameters(arg1 : CompletionParameters) : List<CompletionContributor>;
	static forLanguage(arg1 : Language) : List<CompletionContributor>;
}


declare module CompletionContributor {
	class MyExtensionPointManager {
		static INSTANCE : CompletionContributor.MyExtensionPointManager;
	}


	interface MyExtensionPointManager extends KeyedExtensionCollector<CompletionContributor, Language> {}}

export = CompletionContributor
