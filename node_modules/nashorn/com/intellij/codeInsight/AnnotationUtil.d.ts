import Object = require('nashorn/java/lang/Object');
import Set = require('nashorn/java/util/Set');
import PsiModifierListOwner = require('nashorn/com/intellij/psi/PsiModifierListOwner');
import PsiAnnotation = require('nashorn/com/intellij/psi/PsiAnnotation');
import Collection = require('nashorn/java/util/Collection');
import List = require('nashorn/java/util/List');
import LinkedHashSet = require('nashorn/java/util/LinkedHashSet');
import PsiParameter = require('nashorn/com/intellij/psi/PsiParameter');
import HierarchicalMethodSignature = require('nashorn/com/intellij/psi/HierarchicalMethodSignature');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiResolveHelper = require('nashorn/com/intellij/psi/PsiResolveHelper');
import PsiMember = require('nashorn/com/intellij/psi/PsiMember');
import PsiNameValuePair = require('nashorn/com/intellij/psi/PsiNameValuePair');
import PsiMethod = require('nashorn/com/intellij/psi/PsiMethod');
import Annotation = require('nashorn/java/lang/annotation/Annotation');
import Class = require('nashorn/java/lang/Class');

declare class AnnotationUtil extends Object {
	static NULLABLE : string;
	static NOT_NULL : string;
	static NOT_NULL_SIMPLE_NAME : string;
	static NULLABLE_SIMPLE_NAME : string;
	static NON_NLS : string;
	static NLS : string;
	static PROPERTY_KEY : string;
	static PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER : string;
	static NON_NLS_SIMPLE_NAME : string;
	static PROPERTY_KEY_SIMPLE_NAME : string;
	static TEST_ONLY : string;
	static TEST_ONLY_SIMPLE_NAME : string;
	static LANGUAGE : string;
	static ALL_ANNOTATIONS : Set<string>;
	constructor();
	static findAnnotation(arg1 : PsiModifierListOwner, arg2 : string[]) : PsiAnnotation;
	static findAnnotation(arg1 : PsiModifierListOwner, arg2 : boolean, arg3 : string[]) : PsiAnnotation;
	static findAnnotation(arg1 : PsiModifierListOwner, arg2 : Set<string>) : PsiAnnotation;
	static findAnnotation(arg1 : PsiModifierListOwner, arg2 : Collection<string>) : PsiAnnotation;
	static findAnnotation(arg1 : PsiModifierListOwner, arg2 : Collection<string>, arg3 : boolean) : PsiAnnotation;
	static findOwnAnnotation(arg1 : PsiModifierListOwner, arg2 : Collection<string>) : PsiAnnotation;
	static findNonCodeAnnotation(arg1 : PsiModifierListOwner, arg2 : Collection<string>) : PsiAnnotation;
	static findAnnotations(arg1 : PsiModifierListOwner, arg2 : Collection<string>) : PsiAnnotation[];
	static getSuperAnnotationOwners<T extends PsiModifierListOwner>(arg1 : T) : List<T>;
	static findAnnotationInHierarchy(arg1 : PsiModifierListOwner, arg2 : Set<string>) : PsiAnnotation;
	static collectSuperParameters(arg1 : LinkedHashSet<PsiModifierListOwner>, arg2 : PsiParameter) : void;
	static collectSuperMethods(arg1 : LinkedHashSet<PsiModifierListOwner>, arg2 : HierarchicalMethodSignature, arg3 : PsiElement, arg4 : PsiResolveHelper) : void;
	static isAnnotated(arg1 : PsiModifierListOwner, arg2 : Collection<string>) : boolean;
	static isAnnotated(arg1 : PsiModifierListOwner, arg2 : Collection<string>, arg3 : boolean) : boolean;
	static isAnnotated(arg1 : PsiModifierListOwner, arg2 : Collection<string>, arg3 : boolean, arg4 : boolean) : boolean;
	static isAnnotated(arg1 : PsiModifierListOwner, arg2 : string, arg3 : boolean) : boolean;
	static isAnnotated(arg1 : PsiModifierListOwner, arg2 : string, arg3 : boolean, arg4 : boolean) : boolean;
	static isAnnotated(arg1 : PsiModifierListOwner, arg2 : string, arg3 : boolean, arg4 : boolean, arg5 : Set<PsiMember>) : boolean;
	static isAnnotatingApplicable(arg1 : PsiElement) : boolean;
	static isAnnotatingApplicable(arg1 : PsiElement, arg2 : string) : boolean;
	static isJetbrainsAnnotation(arg1 : string) : boolean;
	static checkAnnotatedUsingPatterns(arg1 : PsiModifierListOwner, arg2 : Collection<string>) : boolean;
	static getAnnotationMethod(arg1 : PsiNameValuePair) : PsiMethod;
	static getAllAnnotations(arg1 : PsiModifierListOwner, arg2 : boolean, arg3 : Set<PsiModifierListOwner>) : PsiAnnotation[];
	static getAllAnnotations(arg1 : PsiModifierListOwner, arg2 : boolean, arg3 : Set<PsiModifierListOwner>, arg4 : boolean) : PsiAnnotation[];
	static isInsideAnnotation(arg1 : PsiElement) : boolean;
	static isInferredAnnotation(arg1 : PsiAnnotation) : boolean;
	static isExternalAnnotation(arg1 : PsiAnnotation) : boolean;
	static getStringAttributeValue(arg1 : PsiAnnotation, arg2 : string) : string;
	static getBooleanAttributeValue(arg1 : PsiAnnotation, arg2 : string) : boolean;
	static findAnnotationInHierarchy<T extends Annotation>(arg1 : PsiModifierListOwner, arg2 : Class<T>) : T;
}

export = AnnotationUtil
