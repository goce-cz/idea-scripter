import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Expression = require('nashorn/com/intellij/codeInsight/template/Expression');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Template = require('nashorn/com/intellij/codeInsight/template/Template');
import TemplateBuilder = require('nashorn/com/intellij/codeInsight/template/TemplateBuilder');

declare class TemplateBuilderImpl {
	constructor(arg1 : PsiElement);
	replaceElement(arg1 : PsiElement, arg2 : Expression, arg3 : boolean) : void;
	a(arg1 : PsiElement) : RangeMarker;
	a(arg1 : PsiReference) : RangeMarker;
	replaceElement(arg1 : PsiElement, arg2 : string, arg3 : Expression, arg4 : boolean) : void;
	replaceElement(arg1 : PsiReference, arg2 : string, arg3 : Expression, arg4 : boolean) : void;
	a(arg1 : RangeMarker, arg2 : Expression) : void;
	replaceElement(arg1 : PsiElement, arg2 : string, arg3 : string, arg4 : boolean) : void;
	replaceElement(arg1 : PsiReference, arg2 : string, arg3 : string, arg4 : boolean) : void;
	replaceElement(arg1 : PsiElement, arg2 : TextRange, arg3 : string, arg4 : string, arg5 : boolean) : void;
	setEndVariableAfter(arg1 : PsiElement) : void;
	setEndVariableBefore(arg1 : PsiElement) : void;
	setSelection(arg1 : PsiElement) : void;
	buildInlineTemplate() : Template;
	buildTemplate() : Template;
	a(arg1 : number, arg2 : number) : string;
	replaceElement(arg1 : PsiElement, arg2 : string, arg3 : Expression, arg4 : boolean, arg5 : boolean) : void;
}


declare interface TemplateBuilderImpl extends TemplateBuilder {}
export = TemplateBuilderImpl
