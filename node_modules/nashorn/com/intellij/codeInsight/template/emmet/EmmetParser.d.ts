import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import ZenCodingToken = require('nashorn/com/intellij/codeInsight/template/emmet/tokens/ZenCodingToken');
import CustomTemplateCallback = require('nashorn/com/intellij/codeInsight/template/CustomTemplateCallback');
import ZenCodingGenerator = require('nashorn/com/intellij/codeInsight/template/emmet/generators/ZenCodingGenerator');
import ZenCodingNode = require('nashorn/com/intellij/codeInsight/template/emmet/nodes/ZenCodingNode');
import TemplateToken = require('nashorn/com/intellij/codeInsight/template/emmet/tokens/TemplateToken');
import TemplateImpl = require('nashorn/com/intellij/codeInsight/template/impl/TemplateImpl');

declare class EmmetParser extends Object {
	index : number;
	constructor(arg1 : List<ZenCodingToken>, arg2 : CustomTemplateCallback, arg3 : ZenCodingGenerator);
	getIndex() : number;
	parse() : ZenCodingNode;
	parseAddOrMore() : ZenCodingNode;
	parseClimbUpOperation(arg1 : ZenCodingNode) : ZenCodingNode;
	parseMoreOperation(arg1 : ZenCodingNode) : ZenCodingNode;
	static a(arg1 : ZenCodingNode) : ZenCodingNode;
	advance() : number;
	a() : ZenCodingNode;
	b() : ZenCodingNode;
	parseTemplate() : ZenCodingNode;
	setTemplate(arg1 : TemplateToken, arg2 : TemplateImpl) : boolean;
	getToken() : ZenCodingToken;
	nextToken(arg1 : number) : ZenCodingToken;
	getCurrentPosition() : number;
	restorePosition(arg1 : number) : void;
}

export = EmmetParser
