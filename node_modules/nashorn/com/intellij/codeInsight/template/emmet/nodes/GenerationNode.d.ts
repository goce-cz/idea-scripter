import List = require('nashorn/java/util/List');
import TemplateToken = require('nashorn/com/intellij/codeInsight/template/emmet/tokens/TemplateToken');
import Collection = require('nashorn/java/util/Collection');
import CustomTemplateCallback = require('nashorn/com/intellij/codeInsight/template/CustomTemplateCallback');
import ZenCodingGenerator = require('nashorn/com/intellij/codeInsight/template/emmet/generators/ZenCodingGenerator');
import ZenCodingFilter = require('nashorn/com/intellij/codeInsight/template/emmet/filters/ZenCodingFilter');
import TemplateImpl = require('nashorn/com/intellij/codeInsight/template/impl/TemplateImpl');
import Map = require('nashorn/java/util/Map');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import CharSequence = require('nashorn/java/lang/CharSequence');
import XmlZenCodingGenerator = require('nashorn/com/intellij/codeInsight/template/emmet/generators/XmlZenCodingGenerator');
import XmlAttribute = require('nashorn/com/intellij/psi/xml/XmlAttribute');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');

declare class GenerationNode {
	insertNewLineBetweenNodes : boolean;
	children : List<GenerationNode>;
	leaf : boolean;
	templateToken : TemplateToken;
	surroundedText : string;
	parent : GenerationNode;
	constructor(arg1 : TemplateToken, arg2 : number, arg3 : number, arg4 : string, arg5 : boolean, arg6 : GenerationNode);
	constructor(arg1 : TemplateToken, arg2 : number, arg3 : number, arg4 : string, arg5 : boolean, arg6 : GenerationNode, arg7 : boolean);
	isInsertNewLineBetweenNodes() : boolean;
	getChildren() : List<GenerationNode>;
	addChild(arg1 : GenerationNode) : void;
	addChildren(arg1 : Collection<GenerationNode>) : void;
	isLeaf() : boolean;
	a() : boolean;
	generate(arg1 : CustomTemplateCallback, arg2 : ZenCodingGenerator, arg3 : Collection<ZenCodingFilter>, arg4 : boolean, arg5 : number) : TemplateImpl;
	static a(arg1 : TemplateToken, arg2 : boolean, arg3 : CustomTemplateCallback, arg4 : ZenCodingGenerator) : TemplateImpl;
	a(arg1 : TemplateToken, arg2 : CustomTemplateCallback, arg3 : ZenCodingGenerator, arg4 : boolean) : TemplateImpl;
	static a(arg1 : string) : string;
	static a(arg1 : TemplateImpl, arg2 : Map<string, string>, arg3 : string, arg4 : number) : TemplateImpl;
	static a(arg1 : XmlTag) : XmlTag;
	static a(arg1 : Project, arg2 : CharSequence, arg3 : number, arg4 : number, arg5 : number) : number;
	static a(arg1 : TemplateImpl) : void;
	a(arg1 : Map<string, string>, arg2 : XmlZenCodingGenerator, arg3 : boolean) : Map<string, string>;
	a(arg1 : XmlTag, arg2 : Map<string, string>, arg3 : CustomTemplateCallback, arg4 : boolean) : void;
	static a(arg1 : string, arg2 : XmlAttribute, arg3 : CustomTemplateCallback) : boolean;
	static b(arg1 : string) : boolean;
	static c(arg1 : string) : boolean;
	static d(arg1 : string) : boolean;
	static a(arg1 : List<XmlAttribute>) : XmlAttribute;
	static b(arg1 : List<XmlAttribute>) : XmlAttribute;
	static c(arg1 : List<XmlAttribute>) : XmlAttribute;
	static a(arg1 : CharSequence, arg2 : number) : boolean;
	static b(arg1 : CharSequence, arg2 : number) : boolean;
	getTemplateToken() : TemplateToken;
	getSurroundedText() : string;
	setSurroundedText(arg1 : string) : void;
	getParent() : GenerationNode;
	setParent(arg1 : GenerationNode) : void;
}


declare interface GenerationNode extends UserDataHolderBase {}
export = GenerationNode
