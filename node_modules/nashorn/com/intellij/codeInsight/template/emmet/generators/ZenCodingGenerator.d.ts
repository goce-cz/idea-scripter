import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import TemplateToken = require('nashorn/com/intellij/codeInsight/template/emmet/tokens/TemplateToken');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TemplateImpl = require('nashorn/com/intellij/codeInsight/template/impl/TemplateImpl');
import CustomTemplateCallback = require('nashorn/com/intellij/codeInsight/template/CustomTemplateCallback');
import CharSequence = require('nashorn/java/lang/CharSequence');
import List = require('nashorn/java/util/List');
import ZenCodingToken = require('nashorn/com/intellij/codeInsight/template/emmet/tokens/ZenCodingToken');
import EmmetParser = require('nashorn/com/intellij/codeInsight/template/emmet/EmmetParser');
import Configurable = require('nashorn/com/intellij/openapi/options/Configurable');

declare class ZenCodingGenerator extends Object {
	static EP_NAME : ExtensionPointName<ZenCodingGenerator>;
	suffix : string;
	enabled : boolean;
	static instances : ZenCodingGenerator[];
	constructor();
	generateTemplate(arg1 : TemplateToken, arg2 : boolean, arg3 : PsiElement) : TemplateImpl;
	createTemplateByKey(arg1 : string) : TemplateImpl;
	isMyContext(arg1 : PsiElement, arg2 : boolean) : boolean;
	getSuffix() : string;
	isAppliedByDefault(arg1 : PsiElement) : boolean;
	isEnabled() : boolean;
	static getInstances() : ZenCodingGenerator[];
	computeTemplateKey(arg1 : CustomTemplateCallback) : string;
	computeKey(arg1 : CharSequence) : string;
	isAllowedChar(arg1 : string) : boolean;
	createParser(arg1 : List<ZenCodingToken>, arg2 : CustomTemplateCallback, arg3 : ZenCodingGenerator, arg4 : boolean) : EmmetParser;
	createConfigurable() : Configurable;
	hasCompletionItem() : boolean;
	isHtml(arg1 : CustomTemplateCallback) : boolean;
	disableEmmet() : void;
}

export = ZenCodingGenerator
