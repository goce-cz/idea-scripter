import Map = require('nashorn/java/util/Map');
import XmlFile = require('nashorn/com/intellij/psi/xml/XmlFile');
import TemplateImpl = require('nashorn/com/intellij/codeInsight/template/impl/TemplateImpl');
import CustomTemplateCallback = require('nashorn/com/intellij/codeInsight/template/CustomTemplateCallback');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import ZenCodingToken = require('nashorn/com/intellij/codeInsight/template/emmet/tokens/ZenCodingToken');

declare class TemplateToken {
	static ATTRS : string;
	static EMPTY_TEMPLATE_TOKEN : TemplateToken;
	attributes : Map<string, string>;
	file : XmlFile;
	key : string;
	template : TemplateImpl;
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : Map<string, string>);
	getAttributes() : Map<string, string>;
	getFile() : XmlFile;
	setFile(arg1 : XmlFile) : void;
	getKey() : string;
	setTemplate(arg1 : TemplateImpl, arg2 : CustomTemplateCallback) : boolean;
	static a(arg1 : TemplateImpl) : boolean;
	static a(arg1 : TemplateImpl, arg2 : CustomTemplateCallback, arg3 : Map<string, string>) : XmlFile;
	static a(arg1 : XmlTag, arg2 : Map<string, string>) : void;
	getTemplate() : TemplateImpl;
}


declare interface TemplateToken extends ZenCodingToken {}
export = TemplateToken
