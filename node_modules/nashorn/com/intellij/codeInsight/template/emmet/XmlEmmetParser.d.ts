import List = require('nashorn/java/util/List');
import ZenCodingToken = require('nashorn/com/intellij/codeInsight/template/emmet/tokens/ZenCodingToken');
import CustomTemplateCallback = require('nashorn/com/intellij/codeInsight/template/CustomTemplateCallback');
import ZenCodingGenerator = require('nashorn/com/intellij/codeInsight/template/emmet/generators/ZenCodingGenerator');
import ZenCodingNode = require('nashorn/com/intellij/codeInsight/template/emmet/nodes/ZenCodingNode');
import Map = require('nashorn/java/util/Map');
import Couple = require('nashorn/com/intellij/openapi/util/Couple');
import EmmetParser = require('nashorn/com/intellij/codeInsight/template/emmet/EmmetParser');

declare class XmlEmmetParser {
	static DEFAULT_ATTRIBUTE_NAME : string;
	static BOOLEAN_ATTRIBUTE_VALUE : string;
	constructor(arg1 : List<ZenCodingToken>, arg2 : CustomTemplateCallback, arg3 : ZenCodingGenerator, arg4 : boolean);
	c() : string;
	static a(arg1 : ZenCodingToken) : string;
	d() : string;
	static b(arg1 : ZenCodingNode) : string;
	a(arg1 : string) : ZenCodingNode;
	e() : string;
	f() : void;
	g() : Map<string, string>;
	h() : List<Couple<string>>;
	getClassAttributeName() : string;
	i() : List<Couple<string>>;
	j() : Couple<string>;
	k() : string;
	static b(arg1 : ZenCodingToken) : boolean;
}


declare interface XmlEmmetParser extends EmmetParser {}
export = XmlEmmetParser
