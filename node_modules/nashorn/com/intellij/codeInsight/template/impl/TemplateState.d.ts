import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Map = require('nashorn/java/util/Map');
import TemplateImpl = require('nashorn/com/intellij/codeInsight/template/impl/TemplateImpl');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import TextResult = require('nashorn/com/intellij/codeInsight/template/TextResult');
import PairProcessor = require('nashorn/com/intellij/util/PairProcessor');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import List = require('nashorn/java/util/List');
import TemplateExpressionLookupElement = require('nashorn/com/intellij/codeInsight/template/impl/TemplateExpressionLookupElement');
import ExpressionContext = require('nashorn/com/intellij/codeInsight/template/ExpressionContext');
import Expression = require('nashorn/com/intellij/codeInsight/template/Expression');
import Result = require('nashorn/com/intellij/codeInsight/template/Result');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import IntArrayList = require('nashorn/com/intellij/util/containers/IntArrayList');
import RangeHighlighter = require('nashorn/com/intellij/openapi/editor/markup/RangeHighlighter');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import TemplateEditingListener = require('nashorn/com/intellij/codeInsight/template/TemplateEditingListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');

declare class TemplateState {
	toProcessTab : boolean;
	currentVariableRange : TextRange;
	segmentsCount : number;
	finished : boolean;
	currentVariableNumber : number;
	properties : Map;
	template : TemplateImpl;
	editor : Editor;
	constructor(arg1 : Project, arg2 : Editor);
	a() : void;
	b() : boolean;
	isToProcessTab() : boolean;
	a(arg1 : number) : void;
	getVariableValue(arg1 : string) : TextResult;
	c() : string;
	getCurrentVariableRange() : TextRange;
	getVariableRange(arg1 : string) : TextRange;
	getSegmentsCount() : number;
	getSegmentRange(arg1 : number) : TextRange;
	isFinished() : boolean;
	d() : void;
	e() : void;
	start(arg1 : TemplateImpl, arg2 : PairProcessor<string, string>, arg3 : Map<string, string>) : void;
	f() : void;
	static a(arg1 : PsiFile, arg2 : number, arg3 : TemplateImpl) : TemplateImpl;
	a(arg1 : PsiFile, arg2 : number, arg3 : string) : void;
	a(arg1 : TemplateImpl) : void;
	g() : string;
	a(arg1 : TextRange) : void;
	setSegmentsGreedy(arg1 : boolean) : void;
	setTabStopHighlightersGreedy(arg1 : boolean) : void;
	h() : void;
	i() : void;
	static b(arg1 : TemplateImpl) : string;
	b(arg1 : number) : string;
	j() : number;
	k() : void;
	getPsiFile() : PsiFile;
	a(arg1 : List<TemplateExpressionLookupElement>) : void;
	getCurrentExpressionLookupItems() : List<TemplateExpressionLookupElement>;
	getCurrentExpressionContext() : ExpressionContext;
	getCurrentExpression() : Expression;
	a(arg1 : List<TemplateExpressionLookupElement>, arg2 : string) : void;
	l() : void;
	calcResults(arg1 : boolean) : void;
	c(arg1 : number) : void;
	a(arg1 : string) : string;
	a(arg1 : number, arg2 : boolean, arg3 : Expression, arg4 : Expression) : void;
	static a(arg1 : Result, arg2 : PsiElement) : boolean;
	a(arg1 : string, arg2 : number, arg3 : number, arg4 : number) : void;
	getCurrentVariableNumber() : number;
	previousTab() : void;
	nextTab() : void;
	m() : void;
	d(arg1 : number) : ExpressionContext;
	gotoEnd(arg1 : boolean) : void;
	gotoEnd() : void;
	cancelTemplate() : void;
	a(arg1 : boolean) : void;
	n() : void;
	isDisposed() : boolean;
	b(arg1 : boolean) : void;
	e(arg1 : number) : number;
	f(arg1 : number) : number;
	g(arg1 : number) : boolean;
	o() : IntArrayList;
	a(arg1 : IntArrayList) : void;
	p() : void;
	a(arg1 : number, arg2 : boolean, arg3 : boolean) : RangeHighlighter;
	c(arg1 : boolean) : void;
	a(arg1 : RangeMarker) : void;
	a(arg1 : number, arg2 : number) : void;
	addTemplateStateListener(arg1 : TemplateEditingListener) : void;
	d(arg1 : boolean) : void;
	q() : void;
	r() : void;
	h(arg1 : number) : void;
	getProperties() : Map;
	getTemplate() : TemplateImpl;
	getEditor() : Editor;
}


declare interface TemplateState extends Disposable {}
export = TemplateState
