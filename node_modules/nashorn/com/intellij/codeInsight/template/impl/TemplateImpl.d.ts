import Set = require('nashorn/java/util/Set');
import TemplateContext = require('nashorn/com/intellij/codeInsight/template/impl/TemplateContext');
import ArrayList = require('nashorn/java/util/ArrayList');
import Variable = require('nashorn/com/intellij/codeInsight/template/impl/Variable');
import Expression = require('nashorn/com/intellij/codeInsight/template/Expression');
import Map = require('nashorn/java/util/Map');
import TemplateOptionalProcessor = require('nashorn/com/intellij/codeInsight/template/impl/TemplateOptionalProcessor');
import Template = require('nashorn/com/intellij/codeInsight/template/Template');
import SchemeElement = require('nashorn/com/intellij/openapi/options/SchemeElement');
import Object = require('nashorn/java/lang/Object');

declare class TemplateImpl {
	static END : string;
	static SELECTION : string;
	static SELECTION_START : string;
	static SELECTION_END : string;
	static ARG : string;
	static INTERNAL_VARS_SET : Set<string>;
	inline : boolean;
	id : string;
	toReformat : boolean;
	toIndent : boolean;
	toShortenLongNames : boolean;
	deactivated : boolean;
	templateContext : TemplateContext;
	endSegmentNumber : number;
	selectionStartSegmentNumber : number;
	selectionEndSegmentNumber : number;
	templateText : string;
	segmentsCount : number;
	variableCount : number;
	key : string;
	description : string;
	shortcutChar : string;
	groupName : string;
	selectionTemplate : boolean;
	variables : ArrayList<Variable>;
	constructor(arg1 : string, arg2 : string);
	constructor(arg1 : string, arg2 : string, arg3 : string);
	isInline() : boolean;
	resetFrom(arg1 : TemplateImpl) : void;
	isToIndent() : boolean;
	setDeactivated(arg1 : boolean) : void;
	isDeactivated() : boolean;
	getTemplateContext() : TemplateContext;
	getEndSegmentNumber() : number;
	getSelectionStartSegmentNumber() : number;
	getSelectionEndSegmentNumber() : number;
	getVariableSegmentNumber(arg1 : string) : number;
	parseSegments() : void;
	removeAllParsed() : void;
	removeVariable(arg1 : number) : void;
	getVariableCount() : number;
	getVariableNameAt(arg1 : number) : string;
	getExpressionStringAt(arg1 : number) : string;
	getExpressionAt(arg1 : number) : Expression;
	getDefaultValueStringAt(arg1 : number) : string;
	getDefaultValueAt(arg1 : number) : Expression;
	isAlwaysStopAt(arg1 : number) : boolean;
	setKey(arg1 : string) : void;
	getString() : string;
	setString(arg1 : string) : void;
	setDescription(arg1 : string) : void;
	getShortcutChar() : string;
	setShortcutChar(arg1 : string) : void;
	getGroupName() : string;
	isSelectionTemplate() : boolean;
	hasArgument() : boolean;
	setId(arg1 : string) : void;
	createOptions() : Map<TemplateOptionalProcessor, boolean>;
	createContext() : TemplateContext;
	contextsEqual(arg1 : TemplateImpl) : boolean;
	applyOptions(arg1 : Map<TemplateOptionalProcessor, boolean>) : void;
	applyContext(arg1 : TemplateContext) : void;
	skipOnStart(arg1 : number) : boolean;
	getVariables() : ArrayList<Variable>;
}


declare interface TemplateImpl extends Template, SchemeElement {}

declare module TemplateImpl {
	class Segment extends Object {
		name : string;
		offset : number;
	}
}

export = TemplateImpl
