import Object = require('nashorn/java/lang/Object');
import Expression = require('nashorn/com/intellij/codeInsight/template/Expression');
import Variable = require('nashorn/com/intellij/codeInsight/template/impl/Variable');
import Enum = require('nashorn/java/lang/Enum');

declare class Template extends Object {
	id : string;
	key : string;
	description : string;
	toReformat : boolean;
	segmentsCount : number;
	templateText : string;
	toShortenLongNames : boolean;
	constructor();
	addTextSegment(arg1 : string) : void;
	addVariableSegment(arg1 : string) : void;
	addVariable(arg1 : string, arg2 : Expression, arg3 : boolean) : Variable;
	addVariable(arg1 : Expression, arg2 : boolean) : Variable;
	addVariable(arg1 : string, arg2 : Expression, arg3 : Expression, arg4 : boolean) : Variable;
	addVariable(arg1 : string, arg2 : Expression, arg3 : Expression, arg4 : boolean, arg5 : boolean) : Variable;
	addVariable(arg1 : string, arg2 : string, arg3 : string, arg4 : boolean) : Variable;
	addEndVariable() : void;
	addSelectionStartVariable() : void;
	addSelectionEndVariable() : void;
	getId() : string;
	getKey() : string;
	getDescription() : string;
	isToReformat() : boolean;
	setToReformat(arg1 : boolean) : void;
	setToIndent(arg1 : boolean) : void;
	setInline(arg1 : boolean) : void;
	getSegmentsCount() : number;
	getSegmentName(arg1 : number) : string;
	getSegmentOffset(arg1 : number) : number;
	getTemplateText() : string;
	isToShortenLongNames() : boolean;
	setToShortenLongNames(arg1 : boolean) : void;
	getValue(arg1 : Template.Property) : boolean;
	setValue(arg1 : Template.Property, arg2 : boolean) : void;
	static getDefaultValue(arg1 : Template.Property) : boolean;
}


declare module Template {
	class Property {
		static USE_STATIC_IMPORT_IF_POSSIBLE : Template.Property;
	}


	interface Property extends Enum<Template.Property> {}}

export = Template
