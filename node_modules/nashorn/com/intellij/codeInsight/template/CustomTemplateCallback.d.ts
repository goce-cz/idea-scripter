import Object = require('nashorn/java/lang/Object');
import TemplateManager = require('nashorn/com/intellij/codeInsight/template/TemplateManager');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import TemplateImpl = require('nashorn/com/intellij/codeInsight/template/impl/TemplateImpl');
import List = require('nashorn/java/util/List');
import Template = require('nashorn/com/intellij/codeInsight/template/Template');
import Map = require('nashorn/java/util/Map');
import TemplateEditingListener = require('nashorn/com/intellij/codeInsight/template/TemplateEditingListener');

declare class CustomTemplateCallback extends Object {
	templateManager : TemplateManager;
	file : PsiFile;
	context : PsiElement;
	offset : number;
	editor : Editor;
	fileType : FileType;
	project : Project;
	inInjectedFragment : boolean;
	constructor(arg1 : Editor, arg2 : PsiFile);
	getTemplateManager() : TemplateManager;
	getFile() : PsiFile;
	getContext() : PsiElement;
	getOffset() : number;
	static getOffset(arg1 : Editor) : number;
	findApplicableTemplate(arg1 : string) : TemplateImpl;
	findApplicableTemplates(arg1 : string) : List<TemplateImpl>;
	a(arg1 : TemplateImpl) : boolean;
	startTemplate(arg1 : Template, arg2 : Map<string, string>, arg3 : TemplateEditingListener) : void;
	static a(arg1 : string) : List<TemplateImpl>;
	getEditor() : Editor;
	getFileType() : FileType;
	getProject() : Project;
	deleteTemplateKey(arg1 : string) : void;
	static getContext(arg1 : PsiFile, arg2 : number) : PsiElement;
	static getContext(arg1 : PsiFile, arg2 : number, arg3 : boolean) : PsiElement;
	isInInjectedFragment() : boolean;
}

export = CustomTemplateCallback
