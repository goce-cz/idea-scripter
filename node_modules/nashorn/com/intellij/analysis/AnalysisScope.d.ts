import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import Collection = require('nashorn/java/util/Collection');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import PsiElementVisitor = require('nashorn/com/intellij/psi/PsiElementVisitor');
import FileIndex = require('nashorn/com/intellij/openapi/roots/FileIndex');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Processor = require('nashorn/com/intellij/util/Processor');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import PsiFileSystemItem = require('nashorn/com/intellij/psi/PsiFileSystemItem');
import HashSet = require('nashorn/java/util/HashSet');
import Set = require('nashorn/java/util/Set');
import ProjectFileIndex = require('nashorn/com/intellij/openapi/roots/ProjectFileIndex');
import Annotation = require('nashorn/java/lang/annotation/Annotation');

declare class AnalysisScope extends Object {
	static PROJECT : number;
	static DIRECTORY : number;
	static FILE : number;
	static MODULE : number;
	static INVALID : number;
	static MODULES : number;
	static CUSTOM : number;
	static VIRTUAL_FILES : number;
	static UNCOMMITTED_FILES : number;
	valid : boolean;
	scopeType : number;
	displayName : string;
	shortenName : string;
	fileCount : number;
	analyzeTestsByDefault : boolean;
	includeTestSource : boolean;
	constructor(arg1 : Project);
	constructor(arg1 : Module);
	constructor(arg1 : Module[]);
	constructor(arg1 : PsiDirectory);
	constructor(arg1 : PsiFile);
	constructor(arg1 : SearchScope, arg2 : Project);
	constructor(arg1 : Project, arg2 : Collection<VirtualFile>);
	setScope(arg1 : SearchScope) : void;
	setSearchInLibraries(arg1 : boolean) : void;
	setIncludeTestSource(arg1 : boolean) : void;
	createFileSearcher() : PsiElementVisitor;
	getFileIndex() : FileIndex;
	static displayProjectRelativePath(arg1 : VirtualFile, arg2 : Project) : string;
	contains(arg1 : PsiElement) : boolean;
	contains(arg1 : VirtualFile) : boolean;
	initFilesSet() : void;
	accept(arg1 : PsiElementVisitor) : void;
	accept(arg1 : PsiElementVisitor, arg2 : boolean) : void;
	accept(arg1 : Processor<VirtualFile>) : boolean;
	processFile(arg1 : VirtualFile, arg2 : PsiElementVisitor, arg3 : FileIndex, arg4 : PsiManager, arg5 : boolean) : boolean;
	static isInGeneratedSources(arg1 : VirtualFile, arg2 : Project) : boolean;
	static processFile(arg1 : VirtualFile, arg2 : PsiElementVisitor, arg3 : PsiManager, arg4 : boolean) : boolean;
	static shouldHighlightFile(arg1 : PsiFile) : boolean;
	containsModule(arg1 : Module) : boolean;
	static doProcessFile(arg1 : PsiElementVisitor, arg2 : PsiManager, arg3 : PsiFile) : void;
	accept(arg1 : PsiDirectory, arg2 : Processor<VirtualFile>) : boolean;
	isValid() : boolean;
	getScopeType() : number;
	getDisplayName() : string;
	static getPresentableUrl(arg1 : PsiFileSystemItem) : string;
	getShortenName() : string;
	getRelativePath() : string;
	static pathToName(arg1 : string) : string;
	getFileCount() : number;
	checkScopeWritable(arg1 : Project) : boolean;
	invalidate() : void;
	containsSources(arg1 : boolean) : boolean;
	getNarrowedComplementaryScope(arg1 : Project) : AnalysisScope;
	static collectScopes(arg1 : Project, arg2 : HashSet<Module>) : AnalysisScope;
	static getExportBackwardDependencies(arg1 : Module, arg2 : Module[]) : Set<Module>;
	static getDirectBackwardDependencies(arg1 : Module, arg2 : Module[]) : Set<Module>;
	static getAllInterestingModules(arg1 : ProjectFileIndex, arg2 : VirtualFile) : HashSet<Module>;
	toSearchScope() : SearchScope;
	isAnalyzeTestsByDefault() : boolean;
	static isTestOnly(arg1 : Module) : boolean;
	isIncludeTestSource() : boolean;
}


declare module AnalysisScope {
	class Type {
	}


	interface Type extends Annotation {}}

export = AnalysisScope
