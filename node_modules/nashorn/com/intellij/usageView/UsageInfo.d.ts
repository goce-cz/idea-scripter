import Object = require('nashorn/java/lang/Object');
import SmartPsiElementPointer = require('nashorn/com/intellij/psi/SmartPsiElementPointer');
import SmartPsiFileRange = require('nashorn/com/intellij/psi/SmartPsiFileRange');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import ProperTextRange = require('nashorn/com/intellij/openapi/util/ProperTextRange');
import Segment = require('nashorn/com/intellij/openapi/util/Segment');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import PsiQualifiedReferenceElement = require('nashorn/com/intellij/psi/PsiQualifiedReferenceElement');

declare class UsageInfo extends Object {
	static EMPTY_ARRAY : UsageInfo[];
	isNonCodeUsage : boolean;
	smartPointer : SmartPsiElementPointer<any>;
	psiFileRange : SmartPsiFileRange;
	nonCodeUsage : boolean;
	element : PsiElement;
	reference : PsiReference;
	range : TextRange;
	rangeInElement : ProperTextRange;
	tooltipText : string;
	navigationOffset : number;
	navigationRange : Segment;
	valid : boolean;
	segment : Segment;
	project : Project;
	writable : boolean;
	file : PsiFile;
	virtualFile : VirtualFile;
	dynamicUsage : boolean;
	constructor(arg1 : PsiElement, arg2 : number, arg3 : number, arg4 : boolean);
	constructor(arg1 : SmartPsiElementPointer<any>, arg2 : SmartPsiFileRange, arg3 : boolean, arg4 : boolean);
	constructor(arg1 : PsiElement, arg2 : boolean);
	constructor(arg1 : PsiElement, arg2 : number, arg3 : number);
	constructor(arg1 : PsiReference);
	constructor(arg1 : PsiQualifiedReferenceElement);
	constructor(arg1 : PsiElement);
	getSmartPointer() : SmartPsiElementPointer<any>;
	getPsiFileRange() : SmartPsiFileRange;
	isNonCodeUsage() : boolean;
	setDynamicUsage(arg1 : boolean) : void;
	getElement() : PsiElement;
	getReference() : PsiReference;
	getRange() : TextRange;
	getRangeInElement() : ProperTextRange;
	getTooltipText() : string;
	getNavigationOffset() : number;
	getNavigationRange() : Segment;
	isValid() : boolean;
	getSegment() : Segment;
	getProject() : Project;
	isWritable() : boolean;
	getFile() : PsiFile;
	getVirtualFile() : VirtualFile;
	isDynamicUsage() : boolean;
	copy() : UsageInfo;
}

export = UsageInfo
