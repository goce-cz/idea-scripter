import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import ProgressIndicator = require('nashorn/com/intellij/openapi/progress/ProgressIndicator');
import Processor = require('nashorn/com/intellij/util/Processor');
import AsyncFuture = require('nashorn/com/intellij/concurrency/AsyncFuture');
import Runnable = require('nashorn/java/lang/Runnable');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import Future = require('nashorn/java/util/concurrent/Future');
import Job = require('nashorn/com/intellij/concurrency/Job');
import Void = require('nashorn/java/lang/Void');

declare class JobLauncher extends Object {
	static instance : JobLauncher;
	constructor();
	static getInstance() : JobLauncher;
	invokeConcurrentlyUnderProgress<T>(arg1 : List<T>, arg2 : ProgressIndicator, arg3 : boolean, arg4 : Processor<T>) : boolean;
	invokeConcurrentlyUnderProgress<T>(arg1 : List<T>, arg2 : ProgressIndicator, arg3 : boolean, arg4 : boolean, arg5 : Processor<T>) : boolean;
	invokeConcurrentlyUnderProgressAsync<T>(arg1 : List<T>, arg2 : ProgressIndicator, arg3 : boolean, arg4 : Processor<T>) : AsyncFuture<boolean>;
	submitToJobThread(arg1 : number, arg2 : Runnable, arg3 : Consumer<Future>) : Job<Void>;
	submitToJobThread(arg1 : number, arg2 : Runnable) : Job<Void>;
}

export = JobLauncher
