import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import Action = require('nashorn/javax/swing/Action');

declare class UsageViewPresentation extends Object {
	tabText : string;
	scopeText : string;
	showReadOnlyStatusAsRed : boolean;
	usagesString : string;
	targetsNodeText : string;
	showCancelButton : boolean;
	nonCodeUsagesString : string;
	codeUsagesString : string;
	openInNewTab : boolean;
	codeUsages : boolean;
	notFoundActions : List<Action>;
	usagesWord : string;
	tabName : string;
	toolwindowTitle : string;
	detachedMode : boolean;
	dynamicCodeUsagesString : string;
	usagesInGeneratedCodeString : string;
	mergeDupLinesAvailable : boolean;
	usageTypeFilteringAvailable : boolean;
	constructor();
	getTabText() : string;
	setTabText(arg1 : string) : void;
	getScopeText() : string;
	setScopeText(arg1 : string) : void;
	isShowReadOnlyStatusAsRed() : boolean;
	setShowReadOnlyStatusAsRed(arg1 : boolean) : void;
	getUsagesString() : string;
	setUsagesString(arg1 : string) : void;
	getTargetsNodeText() : string;
	setTargetsNodeText(arg1 : string) : void;
	isShowCancelButton() : boolean;
	setShowCancelButton(arg1 : boolean) : void;
	getNonCodeUsagesString() : string;
	setNonCodeUsagesString(arg1 : string) : void;
	getCodeUsagesString() : string;
	setCodeUsagesString(arg1 : string) : void;
	isOpenInNewTab() : boolean;
	setOpenInNewTab(arg1 : boolean) : void;
	isCodeUsages() : boolean;
	setCodeUsages(arg1 : boolean) : void;
	addNotFoundAction(arg1 : Action) : void;
	getNotFoundActions() : List<Action>;
	getUsagesWord() : string;
	setUsagesWord(arg1 : string) : void;
	getTabName() : string;
	setTabName(arg1 : string) : void;
	getToolwindowTitle() : string;
	setToolwindowTitle(arg1 : string) : void;
	isDetachedMode() : boolean;
	setDetachedMode(arg1 : boolean) : void;
	setDynamicUsagesString(arg1 : string) : void;
	getDynamicCodeUsagesString() : string;
	getUsagesInGeneratedCodeString() : string;
	setUsagesInGeneratedCodeString(arg1 : string) : void;
	isMergeDupLinesAvailable() : boolean;
	setMergeDupLinesAvailable(arg1 : boolean) : void;
	isUsageTypeFilteringAvailable() : boolean;
	setUsageTypeFilteringAvailable(arg1 : boolean) : void;
}

export = UsageViewPresentation
