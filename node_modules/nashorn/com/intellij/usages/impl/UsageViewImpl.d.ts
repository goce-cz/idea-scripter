import UsageNode = require('nashorn/com/intellij/usages/impl/UsageNode');
import Comparator = require('nashorn/java/util/Comparator');
import Usage = require('nashorn/com/intellij/usages/Usage');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import KeyboardShortcut = require('nashorn/com/intellij/openapi/actionSystem/KeyboardShortcut');
import JComponent = require('nashorn/javax/swing/JComponent');
import UsageViewPresentation = require('nashorn/com/intellij/usages/UsageViewPresentation');
import Set = require('nashorn/java/util/Set');
import List = require('nashorn/java/util/List');
import GroupNode = require('nashorn/com/intellij/usages/impl/GroupNode');
import UsageTarget = require('nashorn/com/intellij/usages/UsageTarget');
import UsageContextPanel = require('nashorn/com/intellij/usages/UsageContextPanel');
import UsageFilteringRule = require('nashorn/com/intellij/usages/rules/UsageFilteringRule');
import UsageGroupingRule = require('nashorn/com/intellij/usages/rules/UsageGroupingRule');
import DefaultActionGroup = require('nashorn/com/intellij/openapi/actionSystem/DefaultActionGroup');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import ConfigurableUsageTarget = require('nashorn/com/intellij/usages/ConfigurableUsageTarget');
import TreePath = require('nashorn/javax/swing/tree/TreePath');
import Collection = require('nashorn/java/util/Collection');
import ProgressIndicator = require('nashorn/com/intellij/openapi/progress/ProgressIndicator');
import Content = require('nashorn/com/intellij/ui/content/Content');
import TreeNode = require('nashorn/javax/swing/tree/TreeNode');
import Runnable = require('nashorn/java/lang/Runnable');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Node = require('nashorn/com/intellij/usages/impl/Node');
import Navigatable = require('nashorn/com/intellij/pom/Navigatable');
import UsageInfo = require('nashorn/com/intellij/usageView/UsageInfo');
import UsageView = require('nashorn/com/intellij/usages/UsageView');
import UsageModelTracker = require('nashorn/com/intellij/usages/UsageModelTracker');
import Object = require('nashorn/java/lang/Object');
import JPanel = require('nashorn/javax/swing/JPanel');
import AutoScrollToSourceOptionProvider = require('nashorn/com/intellij/ide/AutoScrollToSourceOptionProvider');
import TypeSafeDataProvider = require('nashorn/com/intellij/openapi/actionSystem/TypeSafeDataProvider');
import OccurenceNavigator = require('nashorn/com/intellij/ide/OccurenceNavigator');
import CopyProvider = require('nashorn/com/intellij/ide/CopyProvider');
import RuleAction = require('nashorn/com/intellij/usages/impl/RuleAction');
import CloseTabToolbarAction = require('nashorn/com/intellij/ide/actions/CloseTabToolbarAction');

declare class UsageViewImpl {
	static SHOW_RECENT_FIND_USAGES_ACTION_ID : string;
	static NULL_NODE : UsageNode;
	static USAGE_COMPARATOR : Comparator<Usage>;
	modelRoot : DefaultMutableTreeNode;
	project : Project;
	static showUsagesWithSettingsShortcut : KeyboardShortcut;
	component : JComponent;
	usagesCount : number;
	searchInProgress : boolean;
	disposed : boolean;
	presentation : UsageViewPresentation;
	excludedUsages : Set<Usage>;
	selectedUsages : Set<Usage>;
	usages : Set<Usage>;
	sortedUsages : List<Usage>;
	root : GroupNode;
	targets : UsageTarget[];
	searchHasBeenCancelled() : boolean;
	cancelCurrentSearch() : void;
	clearRendererCache() : void;
	setupCentralPanel() : void;
	tabSelected(arg1 : UsageContextPanel.Provider) : void;
	disposeUsageContextPanels() : void;
	static getActiveFilteringRules(arg1 : Project) : UsageFilteringRule[];
	static getActiveGroupingRules(arg1 : Project) : UsageGroupingRule[];
	initTree() : void;
	createActionsToolbar() : JComponent;
	toUsageViewToolbar(arg1 : DefaultActionGroup) : JComponent;
	createFiltersToolbar() : JComponent;
	addFilteringActions(arg1 : DefaultActionGroup) : void;
	scheduleDisposeOnClose(arg1 : Disposable) : void;
	createActions() : AnAction[];
	canShowSettings() : boolean;
	showSettings() : AnAction;
	static getConfigurableTarget(arg1 : UsageTarget[]) : ConfigurableUsageTarget;
	createRecentFindUsagesAction() : AnAction;
	createGroupingActions() : AnAction[];
	rulesChanged() : void;
	captureUsagesExpandState(arg1 : TreePath, arg2 : Collection<UsageViewImpl.UsageState>) : void;
	restoreUsageExpandState(arg1 : Collection<UsageViewImpl.UsageState>) : void;
	expandAll() : void;
	collapseAll() : void;
	getModelRoot() : DefaultMutableTreeNode;
	select() : void;
	getProject() : Project;
	static getShowUsagesWithSettingsShortcut() : KeyboardShortcut;
	static getShowUsagesWithSettingsShortcut(arg1 : UsageTarget[]) : KeyboardShortcut;
	associateProgress(arg1 : ProgressIndicator) : void;
	refreshUsages() : void;
	doReRun() : void;
	reset() : void;
	drainQueuedUsageNodes() : void;
	doAppendUsage(arg1 : Usage) : UsageNode;
	setContent(arg1 : Content) : void;
	updateImmediately() : void;
	updateImmediatelyNodesUpToRoot(arg1 : List<TreeNode>) : void;
	updateOnSelectionChanged() : void;
	checkNodeValidity(arg1 : TreeNode, arg2 : TreePath) : void;
	updateLater() : void;
	saveSplitterProportions() : void;
	disposeSmartPointers() : void;
	setSearchInProgress(arg1 : boolean) : void;
	isDisposed() : boolean;
	showNode(arg1 : UsageNode) : void;
	newPerformOperationRunnable(arg1 : Runnable, arg2 : string, arg3 : string, arg4 : boolean) : UsageViewImpl.MyPerformOperationRunnable;
	allTargetsAreValid() : boolean;
	canPerformReRun() : boolean;
	checkReadonlyUsages() : boolean;
	getReadOnlyUsages() : Set<Usage>;
	getReadOnlyUsagesFiles() : Set<VirtualFile>;
	getSelectedNode() : Node;
	getSelectedNodes() : Node[];
	static collectUsages(arg1 : DefaultMutableTreeNode, arg2 : Set<Usage>) : void;
	getSelectedUsageTargets() : UsageTarget[];
	static getNavigatableForNode(arg1 : DefaultMutableTreeNode) : Navigatable;
	static getNavigatablesForNodes(arg1 : Node[]) : Navigatable[];
	areTargetsValid() : boolean;
	getSelectedUsageInfos() : List<UsageInfo>;
	getRoot() : GroupNode;
	isVisible(arg1 : Usage) : boolean;
	getTargets() : UsageTarget[];
}


declare interface UsageViewImpl extends UsageView, UsageModelTracker.UsageModelTrackerListener {}

declare module UsageViewImpl {
	class MyPerformOperationRunnable {
	}


	interface MyPerformOperationRunnable extends Runnable {}	class UsageState extends Object {
		restore() : void;
	}
	class ButtonPanel {
		addButtonRunnable(arg1 : number, arg2 : Runnable, arg3 : string) : void;
		update() : void;
	}


	interface ButtonPanel extends JPanel {}	class MyAutoScrollToSourceOptionProvider {
		autoScrollMode : boolean;
	}


	interface MyAutoScrollToSourceOptionProvider extends AutoScrollToSourceOptionProvider {}	class MyPanel {
		nextOccurenceActionName : string;
		previousOccurenceActionName : string;
	}


	interface MyPanel extends JPanel, TypeSafeDataProvider, OccurenceNavigator, Disposable, CopyProvider {}	class MergeDupLines {
	}


	interface MergeDupLines extends RuleAction {}	class CloseAction {
	}


	interface CloseAction extends CloseTabToolbarAction {}}

export = UsageViewImpl
