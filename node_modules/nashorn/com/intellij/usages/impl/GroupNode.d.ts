import UsageGroup = require('nashorn/com/intellij/usages/UsageGroup');
import Collection = require('nashorn/java/util/Collection');
import UsageNode = require('nashorn/com/intellij/usages/impl/UsageNode');
import UsageViewTreeModelBuilder = require('nashorn/com/intellij/usages/impl/UsageViewTreeModelBuilder');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import Runnable = require('nashorn/java/lang/Runnable');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import Usage = require('nashorn/com/intellij/usages/Usage');
import Set = require('nashorn/java/util/Set');
import Node = require('nashorn/com/intellij/usages/impl/Node');
import Navigatable = require('nashorn/com/intellij/pom/Navigatable');
import Comparable = require('nashorn/java/lang/Comparable');
import Comparator = require('nashorn/java/util/Comparator');

declare class GroupNode {
	group : UsageGroup;
	recursiveUsageCount : number;
	subGroups : Collection<GroupNode>;
	usageNodes : Collection<UsageNode>;
	constructor(arg1 : UsageGroup, arg2 : number, arg3 : UsageViewTreeModelBuilder);
	addGroup(arg1 : UsageGroup, arg2 : number, arg3 : Consumer<Runnable>) : GroupNode;
	addNode(arg1 : DefaultMutableTreeNode, arg2 : Consumer<Runnable>) : void;
	getBuilder() : UsageViewTreeModelBuilder;
	tryMerge(arg1 : Usage) : UsageNode;
	removeUsage(arg1 : UsageNode) : boolean;
	removeUsagesBulk(arg1 : Set<UsageNode>) : boolean;
	doUpdate() : void;
	addUsage(arg1 : Usage, arg2 : Consumer<Runnable>) : UsageNode;
	getNodeIndex(arg1 : UsageNode) : number;
	indexedBinarySearch(arg1 : UsageNode) : number;
	incrementUsageCount() : void;
	getNodeInsertionIndex(arg1 : DefaultMutableTreeNode) : number;
	getGroup() : UsageGroup;
	getRecursiveUsageCount() : number;
	getSubGroups() : Collection<GroupNode>;
	getUsageNodes() : Collection<UsageNode>;
}


declare interface GroupNode extends Node, Navigatable, Comparable<GroupNode> {}

declare module GroupNode {
	class NodeComparator {
		static getClassIndex(arg1 : DefaultMutableTreeNode) : number;
	}


	interface NodeComparator extends Comparator<DefaultMutableTreeNode> {}}

export = GroupNode
