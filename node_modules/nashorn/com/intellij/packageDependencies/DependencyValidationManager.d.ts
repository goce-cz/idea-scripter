import DependencyRule = require('nashorn/com/intellij/packageDependencies/DependencyRule');
import Map = require('nashorn/java/util/Map');
import PackageSet = require('nashorn/com/intellij/psi/search/scope/packageSet/PackageSet');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import NamedScopesHolder = require('nashorn/com/intellij/psi/search/scope/packageSet/NamedScopesHolder');

declare class DependencyValidationManager {
	allRules : DependencyRule[];
	unnamedScopes : Map<string, PackageSet>;
	constructor(arg1 : Project);
	static getInstance(arg1 : Project) : DependencyValidationManager;
	hasRules() : boolean;
	getViolatorDependencyRule(arg1 : PsiFile, arg2 : PsiFile) : DependencyRule;
	getViolatorDependencyRules(arg1 : PsiFile, arg2 : PsiFile) : DependencyRule[];
	getApplicableRules(arg1 : PsiFile) : DependencyRule[];
	getAllRules() : DependencyRule[];
	removeAllRules() : void;
	addRule(arg1 : DependencyRule) : void;
	skipImportStatements() : boolean;
	setSkipImportStatements(arg1 : boolean) : void;
	getUnnamedScopes() : Map<string, PackageSet>;
	reloadRules() : void;
}


declare interface DependencyValidationManager extends NamedScopesHolder {}
export = DependencyValidationManager
