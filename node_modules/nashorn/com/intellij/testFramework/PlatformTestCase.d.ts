import Thread = require('nashorn/java/lang/Thread');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import File = require('nashorn/java/io/File');
import ModuleType = require('nashorn/com/intellij/openapi/module/ModuleType');
import Set = require('nashorn/java/util/Set');
import Collection = require('nashorn/java/util/Collection');
import CompositeException = require('nashorn/com/intellij/testFramework/CompositeException');
import Class = require('nashorn/java/lang/Class');
import Sdk = require('nashorn/com/intellij/openapi/projectRoots/Sdk');
import Runnable = require('nashorn/java/lang/Runnable');
import Charset = require('nashorn/java/nio/charset/Charset');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import UsefulTestCase = require('nashorn/com/intellij/testFramework/UsefulTestCase');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');
import Annotation = require('nashorn/java/lang/annotation/Annotation');

declare class PlatformTestCase {
	static TEST_DIR_PREFIX : string;
	static ourTestThread : Thread;
	static DEFAULT_TEST_TIME : number;
	static ourTestTime : number;
	project : Project;
	psiManager : PsiManager;
	module : Module;
	constructor();
	static getTimeRequired() : number;
	static synchronizeTempDirVfs(arg1 : VirtualFile) : void;
	getApplicationConfigDirPath() : string;
	initApplication() : void;
	static autodetectPlatformPrefix() : void;
	static b() : void;
	getProject() : Project;
	getPsiManager() : PsiManager;
	getModule() : Module;
	setUpProject() : void;
	doCreateProject(arg1 : File) : Project;
	static createProject(arg1 : File, arg2 : string) : Project;
	static getCreationPlace(arg1 : Project) : string;
	runStartupActivities() : void;
	getIprFile() : File;
	setUpModule() : void;
	createMainModule() : Module;
	createModule(arg1 : string) : Module;
	doCreateRealModule(arg1 : string) : Module;
	static doCreateRealModuleIn(arg1 : string, arg2 : Project, arg3 : ModuleType) : Module;
	getModuleType() : ModuleType;
	static cleanupApplicationCaches(arg1 : Project) : void;
	static c() : Set<VirtualFile>;
	static addSurvivingFiles(arg1 : Collection<VirtualFile>) : void;
	static a(arg1 : Set<VirtualFile>, arg2 : VirtualFile) : void;
	static a(arg1 : VirtualFile, arg2 : Set<VirtualFile>) : void;
	a(arg1 : CompositeException) : void;
	resetAllFields() : void;
	a(arg1 : Class<any>) : void;
	d() : string;
	a(arg1 : File) : void;
	simulateProjectOpen() : void;
	setUpJdk() : void;
	getTestProjectJdk() : Sdk;
	e() : void;
	static f() : void;
	isRunInEdt() : boolean;
	runBareRunnable(arg1 : Runnable) : void;
	isRunInWriteAction() : boolean;
	static createTempDir(arg1 : string) : File;
	static createTempDir(arg1 : string, arg2 : boolean) : File;
	static getVirtualFile(arg1 : File) : VirtualFile;
	createTempDirectory() : File;
	createTempDirectory(arg1 : boolean) : File;
	createTempFile(arg1 : string, arg2 : string) : File;
	static setContentOnDisk(arg1 : File, arg2 : number[], arg3 : string, arg4 : Charset) : void;
	static createTempFile(arg1 : string, arg2 : number[], arg3 : string, arg4 : Charset) : VirtualFile;
	getPsiFile(arg1 : Document) : PsiFile;
	static initPlatformLangPrefix() : void;
	static initPlatformPrefix(arg1 : string, arg2 : string) : void;
	static a(arg1 : string) : void;
	static createChildData(arg1 : VirtualFile, arg2 : string) : VirtualFile;
	static createChildDirectory(arg1 : VirtualFile, arg2 : string) : VirtualFile;
	static delete(arg1 : VirtualFile) : void;
	static rename(arg1 : VirtualFile, arg2 : string) : void;
	static setFileText(arg1 : VirtualFile, arg2 : string) : void;
	static setBinaryContent(arg1 : VirtualFile, arg2 : number[]) : void;
}


declare interface PlatformTestCase extends UsefulTestCase, DataProvider {}

declare module PlatformTestCase {
	class WrapInCommand {
	}


	interface WrapInCommand extends Annotation {}}

export = PlatformTestCase
