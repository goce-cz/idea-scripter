import InspectionProfileEntry = require('nashorn/com/intellij/codeInspection/InspectionProfileEntry');
import InspectionEP = require('nashorn/com/intellij/codeInspection/InspectionEP');
import Object = require('nashorn/java/lang/Object');
import HighlightDisplayLevel = require('nashorn/com/intellij/codeHighlighting/HighlightDisplayLevel');
import Class = require('nashorn/java/lang/Class');
import GlobalInspectionContext = require('nashorn/com/intellij/codeInspection/GlobalInspectionContext');
import Language = require('nashorn/com/intellij/lang/Language');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import URL = require('nashorn/java/net/URL');
import JobDescriptor = require('nashorn/com/intellij/codeInspection/ex/JobDescriptor');

declare class InspectionToolWrapper<T extends InspectionProfileEntry, E extends InspectionEP> extends Object {
	tool : T;
	initialized : boolean;
	language : string;
	cleanupTool : boolean;
	shortName : string;
	displayName : string;
	groupDisplayName : string;
	enabledByDefault : boolean;
	defaultLevel : HighlightDisplayLevel;
	groupPath : string[];
	staticDescription : string;
	descriptionFileName : string;
	folderName : string;
	descriptionContextClass : Class<InspectionProfileEntry>;
	mainToolId : string;
	extension : E;
	initialize(arg1 : GlobalInspectionContext) : void;
	createCopy() : InspectionToolWrapper<T, E>;
	getTool() : T;
	isInitialized() : boolean;
	getLanguage() : string;
	applyToDialects() : boolean;
	isApplicable(arg1 : Language) : boolean;
	isCleanupTool() : boolean;
	getShortName() : string;
	getDisplayName() : string;
	getGroupDisplayName() : string;
	isEnabledByDefault() : boolean;
	getDefaultLevel() : HighlightDisplayLevel;
	getGroupPath() : string[];
	projectOpened(arg1 : Project) : void;
	projectClosed(arg1 : Project) : void;
	getStaticDescription() : string;
	loadDescription() : string;
	getDescriptionUrl() : URL;
	superGetDescriptionUrl() : URL;
	getDescriptionFileName() : string;
	getFolderName() : string;
	getDescriptionContextClass() : Class<InspectionProfileEntry>;
	getMainToolId() : string;
	getExtension() : E;
	cleanup(arg1 : Project) : void;
	getJobDescriptors(arg1 : GlobalInspectionContext) : JobDescriptor[];
}

export = InspectionToolWrapper
