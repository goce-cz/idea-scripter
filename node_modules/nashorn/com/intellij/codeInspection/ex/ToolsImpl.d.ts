import List = require('nashorn/java/util/List');
import InspectionToolWrapper = require('nashorn/com/intellij/codeInspection/ex/InspectionToolWrapper');
import ScopeToolState = require('nashorn/com/intellij/codeInspection/ex/ScopeToolState');
import HighlightDisplayLevel = require('nashorn/com/intellij/codeHighlighting/HighlightDisplayLevel');
import NamedScope = require('nashorn/com/intellij/psi/search/scope/packageSet/NamedScope');
import Element = require('nashorn/org/jdom/Element');
import InspectionProfile = require('nashorn/com/intellij/codeInspection/InspectionProfile');
import Map = require('nashorn/java/util/Map');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Tools = require('nashorn/com/intellij/codeInspection/ex/Tools');

declare class ToolsImpl {
	static ENABLED_BY_DEFAULT_ATTRIBUTE : string;
	static ENABLED_ATTRIBUTE : string;
	static LEVEL_ATTRIBUTE : string;
	shortName : string;
	allTools : List<InspectionToolWrapper>;
	tool : InspectionToolWrapper;
	tools : List<ScopeToolState>;
	defaultState : ScopeToolState;
	level : HighlightDisplayLevel;
	enabled : boolean;
	nonDefaultTools : List<ScopeToolState>;
	constructor(arg1 : InspectionToolWrapper, arg2 : HighlightDisplayLevel, arg3 : boolean, arg4 : boolean);
	constructor(arg1 : InspectionToolWrapper, arg2 : HighlightDisplayLevel, arg3 : boolean);
	addTool(arg1 : NamedScope, arg2 : InspectionToolWrapper, arg3 : boolean, arg4 : HighlightDisplayLevel) : ScopeToolState;
	prependTool(arg1 : NamedScope, arg2 : InspectionToolWrapper, arg3 : boolean, arg4 : HighlightDisplayLevel) : ScopeToolState;
	addTool(arg1 : string, arg2 : InspectionToolWrapper, arg3 : boolean, arg4 : HighlightDisplayLevel) : ScopeToolState;
	a(arg1 : NamedScope, arg2 : InspectionToolWrapper, arg3 : boolean, arg4 : HighlightDisplayLevel, arg5 : number) : ScopeToolState;
	a(arg1 : ScopeToolState, arg2 : number) : ScopeToolState;
	getAllTools() : List<InspectionToolWrapper>;
	writeExternal(arg1 : Element) : void;
	readExternal(arg1 : Element, arg2 : InspectionProfile, arg3 : Map<string, List<string>>) : void;
	removeScope(arg1 : number) : void;
	removeScope(arg1 : string) : void;
	a() : void;
	removeAllScopes() : void;
	setScope(arg1 : number, arg2 : NamedScope) : void;
	moveScope(arg1 : number, arg2 : number) : void;
	isEnabled(arg1 : NamedScope, arg2 : Project) : boolean;
	getLevel(arg1 : PsiElement) : HighlightDisplayLevel;
	getLevel() : HighlightDisplayLevel;
	setEnabled(arg1 : boolean) : void;
	enableTool(arg1 : NamedScope, arg2 : Project) : void;
	disableTool(arg1 : NamedScope, arg2 : Project) : void;
	disableTool(arg1 : PsiElement) : void;
	getLevel(arg1 : NamedScope, arg2 : Project) : HighlightDisplayLevel;
	setLevel(arg1 : HighlightDisplayLevel, arg2 : string, arg3 : Project) : void;
	setDefaultState(arg1 : InspectionToolWrapper, arg2 : boolean, arg3 : HighlightDisplayLevel) : void;
	setLevel(arg1 : HighlightDisplayLevel) : void;
	getNonDefaultTools() : List<ScopeToolState>;
}


declare interface ToolsImpl extends Tools {}
export = ToolsImpl
