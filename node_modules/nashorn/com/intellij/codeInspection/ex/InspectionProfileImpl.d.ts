import InspectionProfile = require('nashorn/com/intellij/codeInspection/InspectionProfile');
import Set = require('nashorn/java/util/Set');
import HighlightSeverity = require('nashorn/com/intellij/lang/annotation/HighlightSeverity');
import ModifiableModel = require('nashorn/com/intellij/codeInspection/ModifiableModel');
import ExternalInfo = require('nashorn/com/intellij/openapi/options/ExternalInfo');
import InspectionToolRegistrar = require('nashorn/com/intellij/codeInspection/ex/InspectionToolRegistrar');
import ProfileManager = require('nashorn/com/intellij/profile/ProfileManager');
import Map = require('nashorn/java/util/Map');
import InspectionElementsMerger = require('nashorn/com/intellij/codeInspection/ex/InspectionElementsMerger');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import InspectionToolWrapper = require('nashorn/com/intellij/codeInspection/ex/InspectionToolWrapper');
import Element = require('nashorn/org/jdom/Element');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import List = require('nashorn/java/util/List');
import ScopeToolState = require('nashorn/com/intellij/codeInspection/ex/ScopeToolState');
import HighlightDisplayKey = require('nashorn/com/intellij/codeInsight/daemon/HighlightDisplayKey');
import HighlightDisplayLevel = require('nashorn/com/intellij/codeHighlighting/HighlightDisplayLevel');
import NamedScope = require('nashorn/com/intellij/psi/search/scope/packageSet/NamedScope');
import ToolsImpl = require('nashorn/com/intellij/codeInspection/ex/ToolsImpl');
import ProfileEx = require('nashorn/com/intellij/profile/ProfileEx');
import ExternalizableScheme = require('nashorn/com/intellij/openapi/options/ExternalizableScheme');
import Object = require('nashorn/java/lang/Object');

declare class InspectionProfileImpl {
	static INSPECTION_TOOL_TAG : string;
	static CLASS_TAG : string;
	static INIT_INSPECTIONS : boolean;
	static defaultProfile : InspectionProfileImpl;
	parentProfile : InspectionProfile;
	baseProfileName : string;
	changed : boolean;
	usedSeverities : Set<HighlightSeverity>;
	editable : boolean;
	displayName : string;
	profileLocked : boolean;
	scopesOrder : string[];
	modifiableModel : ModifiableModel;
	description : string;
	externalInfo : ExternalInfo;
	constructor(arg1 : string, arg2 : InspectionToolRegistrar, arg3 : ProfileManager);
	constructor(arg1 : string);
	static a() : Map<string, InspectionElementsMerger>;
	static createSimple(arg1 : string, arg2 : Project, arg3 : InspectionToolWrapper[]) : InspectionProfileImpl;
	static a(arg1 : string, arg2 : InspectionProfileImpl, arg3 : InspectionProfileImpl) : boolean;
	static a(arg1 : InspectionToolWrapper) : InspectionToolWrapper;
	static getDefaultProfile() : InspectionProfileImpl;
	getUsedSeverities() : Set<HighlightSeverity>;
	a(arg1 : string, arg2 : Element) : void;
	b(arg1 : string, arg2 : Element) : boolean;
	collectDependentInspections(arg1 : InspectionToolWrapper, arg2 : Set<InspectionToolWrapper>, arg3 : Project) : void;
	getToolById(arg1 : string, arg2 : PsiElement) : InspectionToolWrapper;
	disableToolByDefault(arg1 : List<string>, arg2 : Project) : void;
	getToolDefaultState(arg1 : string, arg2 : Project) : ScopeToolState;
	enableToolsByDefault(arg1 : List<string>, arg2 : Project) : void;
	wasInitialized() : boolean;
	initInspectionTools(arg1 : Project) : void;
	a(arg1 : Project) : boolean;
	getScopesOrder() : string[];
	setScopesOrder(arg1 : string[]) : void;
	b(arg1 : Project) : List<InspectionToolWrapper>;
	a(arg1 : HighlightDisplayKey, arg2 : Project) : HighlightDisplayLevel;
	a(arg1 : InspectionProfileImpl, arg2 : Project) : void;
	enableTool(arg1 : string, arg2 : Project) : void;
	enableTools(arg1 : List<string>, arg2 : NamedScope, arg3 : Project) : void;
	disableTools(arg1 : List<string>, arg2 : NamedScope, arg3 : Project) : void;
	a(arg1 : InspectionProfileImpl) : void;
	getDescription() : string;
	setDescription(arg1 : string) : void;
	b() : void;
	getAllTools(arg1 : Project) : List<ScopeToolState>;
	getDefaultStates(arg1 : Project) : List<ScopeToolState>;
	getNonDefaultTools(arg1 : string, arg2 : Project) : List<ScopeToolState>;
	isToolEnabled(arg1 : HighlightDisplayKey, arg2 : NamedScope, arg3 : Project) : boolean;
	removeScope(arg1 : string, arg2 : number, arg3 : Project) : void;
	removeScope(arg1 : string, arg2 : string, arg3 : Project) : void;
	removeScopes(arg1 : List<string>, arg2 : string, arg3 : Project) : void;
	c() : Map<string, boolean>;
	getErrorLevel(arg1 : HighlightDisplayKey, arg2 : NamedScope, arg3 : Project) : HighlightDisplayLevel;
	addScope(arg1 : InspectionToolWrapper, arg2 : NamedScope, arg3 : HighlightDisplayLevel, arg4 : boolean, arg5 : Project) : ScopeToolState;
	setErrorLevel(arg1 : HighlightDisplayKey, arg2 : HighlightDisplayLevel, arg3 : string, arg4 : Project) : void;
	setErrorLevel(arg1 : List<HighlightDisplayKey>, arg2 : HighlightDisplayLevel, arg3 : string, arg4 : Project) : void;
	getTools(arg1 : string, arg2 : Project) : ToolsImpl;
	enableAllTools(arg1 : Project) : void;
	disableAllTools(arg1 : Project) : void;
}


declare interface InspectionProfileImpl extends ProfileEx, ModifiableModel, InspectionProfile, ExternalizableScheme {}

declare module InspectionProfileImpl {
	class InspectionProfileImplHolder extends Object {
	}
}

export = InspectionProfileImpl
