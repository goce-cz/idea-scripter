import RefModule = require('nashorn/com/intellij/codeInspection/reference/RefModule');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import SmartPsiElementPointer = require('nashorn/com/intellij/psi/SmartPsiElementPointer');
import Collection = require('nashorn/java/util/Collection');
import RefEntity = require('nashorn/com/intellij/codeInspection/reference/RefEntity');

declare class RefElement {
	module : RefModule;
	element : PsiElement;
	pointer : SmartPsiElementPointer;
	reachable : boolean;
	referenced : boolean;
	outReferences : Collection<RefElement>;
	inReferences : Collection<RefElement>;
	entry : boolean;
	permanentEntry : boolean;
	containingEntry : RefElement;
	getModule() : RefModule;
	getElement() : PsiElement;
	getPointer() : SmartPsiElementPointer;
	isReachable() : boolean;
	isReferenced() : boolean;
	getOutReferences() : Collection<RefElement>;
	getInReferences() : Collection<RefElement>;
	isEntry() : boolean;
	isPermanentEntry() : boolean;
	getContainingEntry() : RefElement;
}


declare interface RefElement extends RefEntity {}
export = RefElement
