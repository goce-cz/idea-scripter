import Object = require('nashorn/java/lang/Object');
import AnalysisScope = require('nashorn/com/intellij/analysis/AnalysisScope');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import RefProject = require('nashorn/com/intellij/codeInspection/reference/RefProject');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import RefVisitor = require('nashorn/com/intellij/codeInspection/reference/RefVisitor');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import RefModule = require('nashorn/com/intellij/codeInspection/reference/RefModule');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import RefElement = require('nashorn/com/intellij/codeInspection/reference/RefElement');
import RefEntity = require('nashorn/com/intellij/codeInspection/reference/RefEntity');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import Element = require('nashorn/org/jdom/Element');
import List = require('nashorn/java/util/List');

declare class RefManager extends Object {
	scope : AnalysisScope;
	project : Project;
	refProject : RefProject;
	lastUsedMask : number;
	psiManager : PsiManager;
	constructor();
	iterate(arg1 : RefVisitor) : void;
	getScope() : AnalysisScope;
	getProject() : Project;
	getRefProject() : RefProject;
	getRefModule(arg1 : Module) : RefModule;
	getReference(arg1 : PsiElement) : RefElement;
	getReference(arg1 : string, arg2 : string) : RefEntity;
	getLastUsedMask() : number;
	getExtension<T>(arg1 : Key<T>) : T;
	getType(arg1 : RefEntity) : string;
	getRefinedElement(arg1 : RefEntity) : RefEntity;
	export(arg1 : RefEntity, arg2 : Element, arg3 : number) : Element;
	getGroupName(arg1 : RefElement) : string;
	belongsToScope(arg1 : PsiElement) : boolean;
	getQualifiedName(arg1 : RefEntity) : string;
	removeRefElement(arg1 : RefElement, arg2 : List<RefElement>) : void;
	getPsiManager() : PsiManager;
}

export = RefManager
