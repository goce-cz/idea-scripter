import Object = require('nashorn/java/lang/Object');
import StringBuffer = require('nashorn/java/lang/StringBuffer');
import RefElement = require('nashorn/com/intellij/codeInspection/reference/RefElement');
import Key = require('nashorn/com/intellij/openapi/util/Key');

declare class HTMLComposer extends Object {
	constructor();
	appendElementReference(arg1 : StringBuffer, arg2 : RefElement, arg3 : string, arg4 : string) : void;
	appendElementReference(arg1 : StringBuffer, arg2 : string, arg3 : string, arg4 : string) : void;
	appendElementInReferences(arg1 : StringBuffer, arg2 : RefElement) : void;
	appendElementOutReferences(arg1 : StringBuffer, arg2 : RefElement) : void;
	appendElementReference(arg1 : StringBuffer, arg2 : RefElement) : void;
	appendListItem(arg1 : StringBuffer, arg2 : RefElement) : void;
	static appendHeading(arg1 : StringBuffer, arg2 : string) : void;
	appendElementReference(arg1 : StringBuffer, arg2 : RefElement, arg3 : boolean) : void;
	composeNumereables(arg1 : number, arg2 : string, arg3 : string, arg4 : string) : string;
	startList(arg1 : StringBuffer) : void;
	doneList(arg1 : StringBuffer) : void;
	startListItem(arg1 : StringBuffer) : void;
	static appendAfterHeaderIndention(arg1 : StringBuffer) : void;
	appendNoProblems(arg1 : StringBuffer) : void;
	getExtension<T>(arg1 : Key<T>) : T;
}

export = HTMLComposer
