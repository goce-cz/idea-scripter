import InspectionProfile = require('nashorn/com/intellij/codeInspection/InspectionProfile');
import NamedScope = require('nashorn/com/intellij/psi/search/scope/packageSet/NamedScope');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import HighlightDisplayKey = require('nashorn/com/intellij/codeInsight/daemon/HighlightDisplayKey');
import HighlightDisplayLevel = require('nashorn/com/intellij/codeHighlighting/HighlightDisplayLevel');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import InspectionToolWrapper = require('nashorn/com/intellij/codeInspection/ex/InspectionToolWrapper');
import InspectionProfileEntry = require('nashorn/com/intellij/codeInspection/InspectionProfileEntry');
import Profile = require('nashorn/com/intellij/profile/Profile');

declare class ModifiableModel {
	parentProfile : InspectionProfile;
	baseProfileName : string;
	changed : boolean;
	profileLocked : boolean;
	getParentProfile() : InspectionProfile;
	getBaseProfileName() : string;
	setBaseProfile(arg1 : InspectionProfile) : void;
	enableTool(arg1 : string, arg2 : NamedScope, arg3 : Project) : void;
	disableTool(arg1 : string, arg2 : NamedScope, arg3 : Project) : void;
	setErrorLevel(arg1 : HighlightDisplayKey, arg2 : HighlightDisplayLevel, arg3 : Project) : void;
	getErrorLevel(arg1 : HighlightDisplayKey, arg2 : PsiElement) : HighlightDisplayLevel;
	isToolEnabled(arg1 : HighlightDisplayKey) : boolean;
	isToolEnabled(arg1 : HighlightDisplayKey, arg2 : PsiElement) : boolean;
	commit() : void;
	isChanged() : boolean;
	setModified(arg1 : boolean) : void;
	isProperSetting(arg1 : string) : boolean;
	resetToBase(arg1 : Project) : void;
	resetToEmpty(arg1 : Project) : void;
	getInspectionTool(arg1 : string, arg2 : PsiElement) : InspectionToolWrapper;
	getUnwrappedTool(arg1 : string, arg2 : PsiElement) : InspectionProfileEntry;
	getInspectionTools(arg1 : PsiElement) : InspectionToolWrapper[];
	copyFrom(arg1 : InspectionProfile) : void;
	setEditable(arg1 : string) : void;
	save() : void;
	isProfileLocked() : boolean;
	lockProfile(arg1 : boolean) : void;
	disableTool(arg1 : string, arg2 : PsiElement) : void;
	disableTool(arg1 : string, arg2 : Project) : void;
}


declare interface ModifiableModel extends Profile {}
export = ModifiableModel
