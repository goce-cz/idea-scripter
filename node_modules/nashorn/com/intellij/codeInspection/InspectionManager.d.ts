import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import QuickFix = require('nashorn/com/intellij/codeInspection/QuickFix');
import CommonProblemDescriptor = require('nashorn/com/intellij/codeInspection/CommonProblemDescriptor');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import ProblemHighlightType = require('nashorn/com/intellij/codeInspection/ProblemHighlightType');
import ProblemDescriptor = require('nashorn/com/intellij/codeInspection/ProblemDescriptor');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import GlobalInspectionContext = require('nashorn/com/intellij/codeInspection/GlobalInspectionContext');

declare class InspectionManager extends Object {
	static CANT_BE_STATIC_EXTENSION : ExtensionPointName<Condition<PsiElement>>;
	project : Project;
	constructor();
	static getInstance(arg1 : Project) : InspectionManager;
	getProject() : Project;
	createProblemDescriptor(arg1 : string, arg2 : QuickFix[]) : CommonProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : string, arg3 : LocalQuickFix, arg4 : ProblemHighlightType, arg5 : boolean) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : string, arg3 : boolean, arg4 : LocalQuickFix[], arg5 : ProblemHighlightType) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : string, arg3 : LocalQuickFix[], arg4 : ProblemHighlightType, arg5 : boolean, arg6 : boolean) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : PsiElement, arg3 : string, arg4 : ProblemHighlightType, arg5 : boolean, arg6 : LocalQuickFix[]) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : TextRange, arg3 : string, arg4 : ProblemHighlightType, arg5 : boolean, arg6 : LocalQuickFix[]) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : string, arg3 : boolean, arg4 : ProblemHighlightType, arg5 : boolean, arg6 : LocalQuickFix[]) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : string, arg3 : LocalQuickFix, arg4 : ProblemHighlightType) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : string, arg3 : LocalQuickFix[], arg4 : ProblemHighlightType) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : string, arg3 : LocalQuickFix[], arg4 : ProblemHighlightType, arg5 : boolean) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : PsiElement, arg3 : string, arg4 : ProblemHighlightType, arg5 : LocalQuickFix[]) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : TextRange, arg3 : string, arg4 : ProblemHighlightType, arg5 : LocalQuickFix[]) : ProblemDescriptor;
	createProblemDescriptor(arg1 : PsiElement, arg2 : string, arg3 : boolean, arg4 : ProblemHighlightType, arg5 : LocalQuickFix[]) : ProblemDescriptor;
	createNewGlobalContext(arg1 : boolean) : GlobalInspectionContext;
}

export = InspectionManager
