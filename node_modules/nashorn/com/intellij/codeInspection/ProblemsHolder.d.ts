import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import ProblemDescriptor = require('nashorn/com/intellij/codeInspection/ProblemDescriptor');
import InspectionManager = require('nashorn/com/intellij/codeInspection/InspectionManager');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import ProblemHighlightType = require('nashorn/com/intellij/codeInspection/ProblemHighlightType');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');

declare class ProblemsHolder extends Object {
	results : List<ProblemDescriptor>;
	resultsArray : ProblemDescriptor[];
	manager : InspectionManager;
	resultCount : number;
	onTheFly : boolean;
	file : PsiFile;
	project : Project;
	constructor(arg1 : InspectionManager, arg2 : PsiFile, arg3 : boolean);
	registerProblem(arg1 : PsiElement, arg2 : string, arg3 : LocalQuickFix[]) : void;
	registerProblem(arg1 : PsiElement, arg2 : string, arg3 : ProblemHighlightType, arg4 : LocalQuickFix[]) : void;
	registerProblem(arg1 : ProblemDescriptor) : void;
	isInPsiFile(arg1 : PsiElement) : boolean;
	redirectProblem(arg1 : ProblemDescriptor, arg2 : PsiElement) : void;
	registerProblem(arg1 : PsiReference, arg2 : string, arg3 : ProblemHighlightType) : void;
	registerProblemForReference(arg1 : PsiReference, arg2 : ProblemHighlightType, arg3 : string, arg4 : LocalQuickFix[]) : void;
	registerProblem(arg1 : PsiReference) : void;
	static unresolvedReferenceMessage(arg1 : PsiReference) : string;
	registerProblem(arg1 : PsiElement, arg2 : string, arg3 : ProblemHighlightType, arg4 : TextRange, arg5 : LocalQuickFix[]) : void;
	registerProblem(arg1 : PsiElement, arg2 : TextRange, arg3 : string, arg4 : LocalQuickFix[]) : void;
	getResults() : List<ProblemDescriptor>;
	getResultsArray() : ProblemDescriptor[];
	getManager() : InspectionManager;
	hasResults() : boolean;
	getResultCount() : number;
	isOnTheFly() : boolean;
	getFile() : PsiFile;
	getProject() : Project;
}

export = ProblemsHolder
