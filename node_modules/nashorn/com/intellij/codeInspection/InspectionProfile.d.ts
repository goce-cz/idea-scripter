import ModifiableModel = require('nashorn/com/intellij/codeInspection/ModifiableModel');
import HighlightDisplayKey = require('nashorn/com/intellij/codeInsight/daemon/HighlightDisplayKey');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import HighlightDisplayLevel = require('nashorn/com/intellij/codeHighlighting/HighlightDisplayLevel');
import InspectionToolWrapper = require('nashorn/com/intellij/codeInspection/ex/InspectionToolWrapper');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import InspectionProfileEntry = require('nashorn/com/intellij/codeInspection/InspectionProfileEntry');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import List = require('nashorn/java/util/List');
import Tools = require('nashorn/com/intellij/codeInspection/ex/Tools');
import Profile = require('nashorn/com/intellij/profile/Profile');

declare class InspectionProfile {
	modifiableModel : ModifiableModel;
	editable : boolean;
	displayName : string;
	getErrorLevel(arg1 : HighlightDisplayKey, arg2 : PsiElement) : HighlightDisplayLevel;
	getInspectionTool(arg1 : string, arg2 : PsiElement) : InspectionToolWrapper;
	getInspectionTool(arg1 : string, arg2 : Project) : InspectionToolWrapper;
	getUnwrappedTool(arg1 : string, arg2 : PsiElement) : InspectionProfileEntry;
	getUnwrappedTool<T extends InspectionProfileEntry>(arg1 : Key<T>, arg2 : PsiElement) : T;
	modifyProfile(arg1 : Consumer<ModifiableModel>) : void;
	modifyToolSettings<T extends InspectionProfileEntry>(arg1 : Key<T>, arg2 : PsiElement, arg3 : Consumer<T>) : void;
	getInspectionTools(arg1 : PsiElement) : InspectionToolWrapper[];
	cleanup(arg1 : Project) : void;
	getModifiableModel() : ModifiableModel;
	isToolEnabled(arg1 : HighlightDisplayKey, arg2 : PsiElement) : boolean;
	isToolEnabled(arg1 : HighlightDisplayKey) : boolean;
	isExecutable(arg1 : Project) : boolean;
	isEditable() : boolean;
	getDisplayName() : string;
	scopesChanged() : void;
	getAllEnabledInspectionTools(arg1 : Project) : List<Tools>;
}


declare interface InspectionProfile extends Profile {}
export = InspectionProfile
