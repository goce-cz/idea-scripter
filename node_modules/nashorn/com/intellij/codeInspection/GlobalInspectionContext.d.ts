import RefManager = require('nashorn/com/intellij/codeInspection/reference/RefManager');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import StdJobDescriptors = require('nashorn/com/intellij/codeInspection/ex/StdJobDescriptors');
import RefEntity = require('nashorn/com/intellij/codeInspection/reference/RefEntity');
import GlobalInspectionTool = require('nashorn/com/intellij/codeInspection/GlobalInspectionTool');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import JobDescriptor = require('nashorn/com/intellij/codeInspection/ex/JobDescriptor');
import UserDataHolder = require('nashorn/com/intellij/openapi/util/UserDataHolder');

declare class GlobalInspectionContext {
	refManager : RefManager;
	project : Project;
	stdJobDescriptors : StdJobDescriptors;
	getRefManager() : RefManager;
	isSuppressed(arg1 : RefEntity, arg2 : string) : boolean;
	shouldCheck(arg1 : RefEntity, arg2 : GlobalInspectionTool) : boolean;
	isSuppressed(arg1 : PsiElement, arg2 : string) : boolean;
	getProject() : Project;
	getExtension<T>(arg1 : Key<T>) : T;
	incrementJobDoneAmount(arg1 : JobDescriptor, arg2 : string) : void;
	getStdJobDescriptors() : StdJobDescriptors;
	cleanup() : void;
}


declare interface GlobalInspectionContext extends UserDataHolder {}
export = GlobalInspectionContext
