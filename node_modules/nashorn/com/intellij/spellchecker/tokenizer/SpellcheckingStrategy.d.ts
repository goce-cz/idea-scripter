import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import Tokenizer = require('nashorn/com/intellij/spellchecker/tokenizer/Tokenizer');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import SpellCheckerQuickFix = require('nashorn/com/intellij/spellchecker/quickfixes/SpellCheckerQuickFix');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import XmlAttributeValue = require('nashorn/com/intellij/psi/xml/XmlAttributeValue');

declare class SpellcheckingStrategy extends Object {
	static EP_NAME : ExtensionPointName<SpellcheckingStrategy>;
	static EMPTY_TOKENIZER : Tokenizer;
	static TEXT_TOKENIZER : Tokenizer<PsiElement>;
	static defaultBatchFixes : SpellCheckerQuickFix[];
	constructor();
	getTokenizer(arg1 : PsiElement) : Tokenizer;
	getRegularFixes(arg1 : PsiElement, arg2 : number, arg3 : TextRange, arg4 : boolean, arg5 : string) : SpellCheckerQuickFix[];
	static getDefaultRegularFixes(arg1 : boolean, arg2 : string) : SpellCheckerQuickFix[];
	static getDefaultBatchFixes() : SpellCheckerQuickFix[];
	isMyContext(arg1 : PsiElement) : boolean;
}


declare module SpellcheckingStrategy {
	class XmlAttributeValueTokenizer {
		static a(arg1 : string) : boolean;
	}


	interface XmlAttributeValueTokenizer extends Tokenizer<XmlAttributeValue> {}}

export = SpellcheckingStrategy
