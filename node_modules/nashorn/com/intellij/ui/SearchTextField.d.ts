import List = require('nashorn/java/util/List');
import JTextField = require('nashorn/javax/swing/JTextField');
import Dimension = require('nashorn/java/awt/Dimension');
import DocumentListener = require('nashorn/javax/swing/event/DocumentListener');
import KeyListener = require('nashorn/java/awt/event/KeyListener');
import JList = require('nashorn/javax/swing/JList');
import Runnable = require('nashorn/java/lang/Runnable');
import Component = require('nashorn/java/awt/Component');
import KeyEvent = require('nashorn/java/awt/event/KeyEvent');
import Icon = require('nashorn/javax/swing/Icon');
import JPanel = require('nashorn/javax/swing/JPanel');
import AbstractListModel = require('nashorn/javax/swing/AbstractListModel');

declare class SearchTextField {
	history : List<string>;
	text : string;
	textEditor : JTextField;
	preferredSize : Dimension;
	selectedIndex : number;
	constructor();
	constructor(arg1 : boolean);
	onFieldCleared() : void;
	onFocusLost() : void;
	onFocusGained() : void;
	updateMenu() : void;
	isSearchControlUISupported() : boolean;
	hasIconsOutsideOfTextField() : boolean;
	addDocumentListener(arg1 : DocumentListener) : void;
	removeDocumentListener(arg1 : DocumentListener) : void;
	addKeyboardListener(arg1 : KeyListener) : void;
	setHistorySize(arg1 : number) : void;
	setHistory(arg1 : List<string>) : void;
	getHistory() : List<string>;
	setText(arg1 : string) : void;
	getText() : string;
	addCurrentTextToHistory() : void;
	addMenuItem(arg1 : string) : void;
	selectText() : void;
	getTextEditor() : JTextField;
	hidePopup() : void;
	createItemChosenCallback(arg1 : JList) : Runnable;
	showPopup() : void;
	getPopupLocationComponent() : Component;
	togglePopup() : void;
	setSelectedItem(arg1 : string) : void;
	getSelectedIndex() : number;
	keyEventToTextField(arg1 : KeyEvent) : void;
	preprocessEventForTextField(arg1 : KeyEvent) : boolean;
	setSearchIcon(arg1 : Icon) : void;
}


declare interface SearchTextField extends JPanel {}

declare module SearchTextField {
	class TextFieldWithProcessing {
	}


	interface TextFieldWithProcessing extends JTextField {}	class MyModel {
		size : number;
		selectedItem : string;
		constructor();
		addElement(arg1 : string) : void;
		insertElementAt(arg1 : string, arg2 : number) : void;
		getSelectedItem() : string;
		setSelectedItem(arg1 : string) : void;
		fireContentsChanged() : void;
		setItems(arg1 : List<string>) : void;
	}


	interface MyModel extends AbstractListModel {}}

export = SearchTextField
