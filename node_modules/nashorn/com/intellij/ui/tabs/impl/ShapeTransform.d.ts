import Object = require('nashorn/java/lang/Object');
import GeneralPath = require('nashorn/java/awt/geom/GeneralPath');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Insets = require('nashorn/java/awt/Insets');
import Line2D = require('nashorn/java/awt/geom/Line2D');

declare class ShapeTransform extends Object {
	x : number;
	y : number;
	maxX : number;
	maxY : number;
	width : number;
	height : number;
	shape : GeneralPath;
	getShapeRect() : Rectangle;
	getX() : number;
	getY() : number;
	getMaxX() : number;
	getMaxY() : number;
	deltaX(arg1 : number) : number;
	deltaY(arg1 : number) : number;
	transformY1<T>(arg1 : T, arg2 : T) : T;
	transformInsets(arg1 : Insets) : Insets;
	transformLine(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : Line2D.Float;
	createTransform(arg1 : Rectangle) : ShapeTransform;
	copy() : ShapeTransform;
	getWidth() : number;
	getHeight() : number;
	moveTo(arg1 : number, arg2 : number) : ShapeTransform;
	quadTo(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : ShapeTransform;
	lineTo(arg1 : number, arg2 : number) : ShapeTransform;
	getShape() : GeneralPath;
	reset() : ShapeTransform;
	reset(arg1 : Rectangle) : ShapeTransform;
	closePath() : ShapeTransform;
	doRect(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : ShapeTransform;
}


declare module ShapeTransform {
	class Right {
		x : number;
		y : number;
		maxX : number;
		maxY : number;
		constructor(arg1 : Rectangle, arg2 : GeneralPath);
		constructor(arg1 : Rectangle);
		constructor();
	}


	interface Right extends ShapeTransform {}	class Bottom {
		x : number;
		y : number;
		maxX : number;
		maxY : number;
		constructor(arg1 : Rectangle, arg2 : GeneralPath);
		constructor(arg1 : Rectangle);
		constructor();
	}


	interface Bottom extends ShapeTransform {}	class Left {
		x : number;
		y : number;
		maxX : number;
		maxY : number;
		constructor();
		constructor(arg1 : Rectangle);
		constructor(arg1 : Rectangle, arg2 : GeneralPath);
	}


	interface Left extends ShapeTransform {}	class Top {
		x : number;
		y : number;
		maxX : number;
		maxY : number;
		constructor();
		constructor(arg1 : Rectangle);
		constructor(arg1 : Rectangle, arg2 : GeneralPath);
	}


	interface Top extends ShapeTransform {}}

export = ShapeTransform
