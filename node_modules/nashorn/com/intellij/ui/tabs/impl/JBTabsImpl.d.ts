import DataKey = require('nashorn/com/intellij/openapi/actionSystem/DataKey');
import Color = require('nashorn/java/awt/Color');
import Map = require('nashorn/java/util/Map');
import TabInfo = require('nashorn/com/intellij/ui/tabs/TabInfo');
import TabLabel = require('nashorn/com/intellij/ui/tabs/impl/TabLabel');
import Dimension = require('nashorn/java/awt/Dimension');
import ModalityState = require('nashorn/com/intellij/openapi/application/ModalityState');
import ActionGroup = require('nashorn/com/intellij/openapi/actionSystem/ActionGroup');
import List = require('nashorn/java/util/List');
import JBTabs = require('nashorn/com/intellij/ui/tabs/JBTabs');
import Insets = require('nashorn/java/awt/Insets');
import JBTabsPresentation = require('nashorn/com/intellij/ui/tabs/JBTabsPresentation');
import TabsBorder = require('nashorn/com/intellij/ui/tabs/impl/TabsBorder');
import JComponent = require('nashorn/javax/swing/JComponent');
import TabLayout = require('nashorn/com/intellij/ui/tabs/impl/TabLayout');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');
import JBTabsPosition = require('nashorn/com/intellij/ui/tabs/JBTabsPosition');
import TimedDeadzone = require('nashorn/com/intellij/util/ui/TimedDeadzone');
import SwitchTarget = require('nashorn/com/intellij/ui/switcher/SwitchTarget');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import IdeFocusManager = require('nashorn/com/intellij/openapi/wm/IdeFocusManager');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import ActionManager = require('nashorn/com/intellij/openapi/actionSystem/ActionManager');
import SingleRowLayout = require('nashorn/com/intellij/ui/tabs/impl/singleRow/SingleRowLayout');
import Image = require('nashorn/java/awt/Image');
import SingleRowPassInfo = require('nashorn/com/intellij/ui/tabs/impl/singleRow/SingleRowPassInfo');
import MouseEvent = require('nashorn/java/awt/event/MouseEvent');
import Getter = require('nashorn/com/intellij/openapi/util/Getter');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import Component = require('nashorn/java/awt/Component');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import Rectangle = require('nashorn/java/awt/Rectangle');
import Graphics2D = require('nashorn/java/awt/Graphics2D');
import LayoutPassInfo = require('nashorn/com/intellij/ui/tabs/impl/LayoutPassInfo');
import Function = require('nashorn/com/intellij/util/Function');
import Point = require('nashorn/java/awt/Point');
import Object = require('nashorn/java/lang/Object');
import Comparator = require('nashorn/java/util/Comparator');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import TimerListener = require('nashorn/com/intellij/openapi/actionSystem/TimerListener');
import PopupMenuListener = require('nashorn/javax/swing/event/PopupMenuListener');
import Queryable = require('nashorn/com/intellij/openapi/ui/Queryable');
import QuickActionProvider = require('nashorn/com/intellij/ui/switcher/QuickActionProvider');
import RelativeRectangle = require('nashorn/com/intellij/ui/awt/RelativeRectangle');
import ComparableObject = require('nashorn/com/intellij/util/ui/update/ComparableObject');
import UiDecorator = require('nashorn/com/intellij/ui/tabs/UiDecorator');
import AnActionEvent = require('nashorn/com/intellij/openapi/actionSystem/AnActionEvent');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import ShapeTransform = require('nashorn/com/intellij/ui/tabs/impl/ShapeTransform');
import JPanel = require('nashorn/javax/swing/JPanel');
import MouseMotionAdapter = require('nashorn/java/awt/event/MouseMotionAdapter');
import Weighted = require('nashorn/com/intellij/openapi/util/Weighted');

declare class JBTabsImpl {
	static NAVIGATION_ACTIONS_KEY : DataKey<JBTabsImpl>;
	static MAC_AQUA_BG_COLOR : Color;
	myInfo2Label : Map<TabInfo, TabLabel>;
	myInfo2Toolbar : Map<TabInfo, JBTabsImpl.Toolbar>;
	myHeaderFitSize : Dimension;
	myHorizontalSide : boolean;
	myForcedRelayout : boolean;
	static STRETCHED_BY_WIDTH : string;
	activeTabUnderlineHeight : number;
	editorTabs : boolean;
	disposed : boolean;
	firstTabOffset : number;
	modalityState : ModalityState;
	popupGroup : ActionGroup;
	popupPlace : string;
	selectedInfo : TabInfo;
	alphabeticalMode : boolean;
	tabs : List<TabInfo>;
	targetInfo : TabInfo;
	jBTabs : JBTabs;
	layoutInsets : Insets;
	toolbarInset : number;
	ghostTabLength : number;
	background : Color;
	static selectionTabVShift : number;
	minimumSize : Dimension;
	preferredSize : Dimension;
	tabCount : number;
	presentation : JBTabsPresentation;
	tabsBorder : TabsBorder;
	component : JComponent;
	cycleRoot : boolean;
	hideTabs : boolean;
	stealthTabMode : boolean;
	sizeBySelected : boolean;
	ghostsAlwaysVisible : boolean;
	singleRow : boolean;
	sideComponentVertical : boolean;
	sideComponentOnTabs : boolean;
	effectiveLayout : TabLayout;
	dataProvider : DataProvider;
	tabsPosition : JBTabsPosition;
	tabActionsMouseDeadzone : TimedDeadzone.Length;
	tabDraggingEnabled : boolean;
	currentTarget : SwitchTarget;
	dropInfoIndex : number;
	emptyVisible : boolean;
	interTabSpaceLength : number;
	constructor(arg1 : Project);
	constructor(arg1 : Project, arg2 : IdeFocusManager, arg3 : Disposable);
	constructor(arg1 : Project, arg2 : ActionManager, arg3 : IdeFocusManager, arg4 : Disposable);
	createSingleRowLayout() : SingleRowLayout;
	getActiveTabUnderlineHeight() : number;
	isEditorTabs() : boolean;
	supportsCompression() : boolean;
	static getComponentImage(arg1 : TabInfo) : Image;
	resetTabsCache() : void;
	processFocusChange() : void;
	repaintAttractions() : void;
	addTimerUpdate() : void;
	removeTimerUpdate() : void;
	setTestMode(arg1 : boolean) : void;
	layoutComp(arg1 : SingleRowPassInfo, arg2 : number, arg3 : number, arg4 : number, arg5 : number) : void;
	isDropTarget(arg1 : TabInfo) : boolean;
	setDropInfoIndex(arg1 : number) : void;
	getFirstTabOffset() : number;
	setFirstTabOffset(arg1 : number) : void;
	tabMSize() : number;
	updateTabActions(arg1 : boolean) : void;
	canShowMorePopup() : boolean;
	showMorePopup(arg1 : MouseEvent) : void;
	getToFocus() : JComponent;
	addTabSilently(arg1 : TabInfo, arg2 : number) : TabInfo;
	addTab(arg1 : TabInfo, arg2 : number, arg3 : boolean, arg4 : boolean) : TabInfo;
	createTabLabel(arg1 : TabInfo) : TabLabel;
	getPopupGroup() : ActionGroup;
	getPopupPlace() : string;
	setPopupGroup(arg1 : Getter<ActionGroup>, arg2 : string, arg3 : boolean) : JBTabs;
	updateAll(arg1 : boolean, arg2 : boolean) : void;
	isMyChildIsFocusedNow() : boolean;
	static getFocusOwner() : JComponent;
	_setSelected(arg1 : TabInfo, arg2 : boolean) : ActionCallback;
	executeSelectionChange(arg1 : TabInfo, arg2 : boolean) : ActionCallback;
	fireBeforeSelectionChanged(arg1 : TabInfo, arg2 : TabInfo) : void;
	fireSelectionChanged(arg1 : TabInfo, arg2 : TabInfo) : void;
	fireTabsMoved() : void;
	fireTabRemoved(arg1 : TabInfo) : void;
	requestFocus(arg1 : JComponent) : ActionCallback;
	removeDeferred() : ActionCallback;
	queueForRemove(arg1 : Component) : void;
	unqueueFromRemove(arg1 : Component) : void;
	removeDeferredNow() : void;
	updateEnabling() : void;
	updateHiding() : void;
	getIndexInVisibleArray(arg1 : TabInfo) : number;
	updateIcon(arg1 : TabInfo) : void;
	updateColor(arg1 : TabInfo) : void;
	updateTab(arg1 : Computable<boolean>, arg2 : TabInfo) : void;
	revalidateAndRepaint(arg1 : boolean) : void;
	updateAttraction(arg1 : TabInfo, arg2 : boolean) : void;
	updateText(arg1 : TabInfo) : void;
	updateSideComponent(arg1 : TabInfo) : void;
	updateTabActions(arg1 : TabInfo) : void;
	getToSelectOnRemoveOf(arg1 : TabInfo) : TabInfo;
	findEnabledForward(arg1 : number, arg2 : boolean) : TabInfo;
	isAlphabeticalMode() : boolean;
	findEnabledBackward(arg1 : number, arg2 : boolean) : TabInfo;
	createToolbarComponent(arg1 : TabInfo) : JBTabsImpl.Toolbar;
	getTabs() : List<TabInfo>;
	resetPopup() : void;
	addToDeferredRemove(arg1 : Component) : void;
	isToDrawBorderIfTabsHidden() : boolean;
	moveDraggedTabLabel() : void;
	computeHeaderFitSize() : Dimension;
	layoutComp(arg1 : number, arg2 : number, arg3 : JComponent, arg4 : number, arg5 : number) : Rectangle;
	getInnerInsets() : Insets;
	getLayoutInsets() : Insets;
	getToolbarInset() : number;
	resetLayout(arg1 : boolean) : void;
	reset(arg1 : TabInfo, arg2 : boolean) : void;
	static getArcSize() : number;
	static getEdgeArcSize() : number;
	getGhostTabLength() : number;
	getPosition() : JBTabsPosition;
	doPaintBackground(arg1 : Graphics2D, arg2 : Rectangle) : void;
	getActiveTabColor(arg1 : Color) : Color;
	paintSelectionAndBorder(arg1 : Graphics2D) : void;
	getFocusedTopFillColor() : Color;
	getFocusedBottomFillColor() : Color;
	computeSelectedLabelShape() : JBTabsImpl.ShapeInfo;
	getSelectedLabel() : TabLabel;
	paintFirstGhost(arg1 : Graphics2D) : void;
	paintLastGhost(arg1 : Graphics2D) : void;
	static getCurveArc() : number;
	static getBoundsColor() : Color;
	static getRightBlockColor() : Color;
	static getTopBlockColor() : Color;
	paintNonSelectedTabs(arg1 : Graphics2D, arg2 : boolean, arg3 : boolean) : void;
	paintNonSelected(arg1 : Graphics2D, arg2 : TabInfo, arg3 : boolean, arg4 : boolean, arg5 : number, arg6 : number) : void;
	isToBufferPainting() : boolean;
	getVisibleInfos() : List<TabInfo>;
	getLastLayoutPass() : LayoutPassInfo;
	doPaintInactive(arg1 : Graphics2D, arg2 : boolean, arg3 : TabLabel, arg4 : Rectangle, arg5 : boolean, arg6 : number, arg7 : number) : void;
	static getSelectionTabVShift() : number;
	paintBorder(arg1 : Graphics2D, arg2 : JBTabsImpl.ShapeInfo, arg3 : Color) : void;
	isStealthModeEffective() : boolean;
	isNavigationVisible() : boolean;
	computeMaxSize() : JBTabsImpl.Max;
	computeSizeBySelected(arg1 : boolean) : Dimension;
	computeSize(arg1 : Function<JComponent, Dimension>, arg2 : number) : Dimension;
	addHeaderSize(arg1 : Dimension, arg2 : number) : void;
	computeHeaderPreferredSize(arg1 : number) : Dimension;
	removeTab(arg1 : TabInfo, arg2 : TabInfo, arg3 : boolean) : ActionCallback;
	removeTab(arg1 : TabInfo, arg2 : TabInfo, arg3 : boolean, arg4 : boolean) : ActionCallback;
	processRemove(arg1 : TabInfo, arg2 : boolean) : void;
	findInfo(arg1 : Component) : TabInfo;
	findInfo(arg1 : MouseEvent, arg2 : boolean) : TabInfo;
	_findInfo(arg1 : Point, arg2 : boolean) : TabInfo;
	updateContainer(arg1 : boolean, arg2 : boolean) : void;
	static isToDeferRemoveForLater(arg1 : JComponent) : boolean;
	relayout(arg1 : boolean, arg2 : boolean) : void;
	getTabsBorder() : TabsBorder;
	addListeners() : void;
	removeListeners() : void;
	updateListeners() : void;
	setFocused(arg1 : boolean) : void;
	static getBorder(arg1 : number) : number;
	isPaintFocus() : boolean;
	static isChanged(arg1 : Object, arg2 : Object) : boolean;
	getActiveTabFillIn() : Color;
	disposePopupListener() : void;
	isStealthTabMode() : boolean;
	isSizeBySelected() : boolean;
	setSizeBySelected(arg1 : boolean) : void;
	useSmallLabels() : boolean;
	useBoldLabels() : boolean;
	hasUnderline() : boolean;
	isGhostsAlwaysVisible() : boolean;
	isSideComponentVertical() : boolean;
	isSideComponentOnTabs() : boolean;
	getEffectiveLayout() : TabLayout;
	applyDecoration() : void;
	adjust(arg1 : TabInfo) : void;
	sortTabs(arg1 : Comparator<TabInfo>) : void;
	isRequestFocusOnLastFocusedComponent() : boolean;
	setDataProvider(arg1 : DataProvider) : JBTabsImpl;
	static isSelectionClick(arg1 : MouseEvent, arg2 : boolean) : boolean;
	layout(arg1 : JComponent, arg2 : Rectangle) : Rectangle;
	layout(arg1 : JComponent, arg2 : number, arg3 : number, arg4 : number, arg5 : number) : Rectangle;
	static resetLayout(arg1 : JComponent) : void;
	applyResetComponents() : void;
	getTabActionsMouseDeadzone() : TimedDeadzone.Length;
	isTabDraggingEnabled() : boolean;
	reallocate(arg1 : TabInfo, arg2 : TabInfo) : void;
	isHorizontalTabs() : boolean;
	setUseBufferedPaint(arg1 : boolean) : void;
	getDropInfoIndex() : number;
	isEmptyVisible() : boolean;
	getInterTabSpaceLength() : number;
}


declare interface JBTabsImpl extends JComponent, JBTabs, PropertyChangeListener, TimerListener, DataProvider, PopupMenuListener, Disposable, JBTabsPresentation, Queryable, QuickActionProvider {}

declare module JBTabsImpl {
	class TabTarget {
		visible : boolean;
		rectangle : RelativeRectangle;
		component : Component;
		equalityObjects : Object[];
	}


	interface TabTarget extends ComparableObject.Impl, SwitchTarget {}	class DefaultDecorator {
		decoration : UiDecorator.UiDecoration;
	}


	interface DefaultDecorator extends UiDecorator {}	class SelectPreviousAction {
	}


	interface SelectPreviousAction extends JBTabsImpl.BaseNavigationAction {}	class SelectNextAction {
	}


	interface SelectNextAction extends JBTabsImpl.BaseNavigationAction {}	class BaseNavigationAction {
		findNavigatableTabs(arg1 : JBTabsImpl) : JBTabsImpl;
		static isNavigatable(arg1 : JBTabsImpl) : boolean;
		reconnect(arg1 : string) : void;
		_update(arg1 : AnActionEvent, arg2 : JBTabsImpl, arg3 : number) : void;
		_actionPerformed(arg1 : AnActionEvent, arg2 : JBTabsImpl, arg3 : number) : void;
	}


	interface BaseNavigationAction extends AnAction {}	class Max extends Object {
	}
	class ShapeInfo extends Object {
		path : ShapeTransform;
		fillPath : ShapeTransform;
		labelPath : ShapeTransform;
		labelBottomY : number;
		labelTopY : number;
		labelLeftX : number;
		labelRightX : number;
		insets : Insets;
		from : Color;
		to : Color;
		constructor();
	}
	class Toolbar {
		empty : boolean;
		constructor(arg1 : JBTabsImpl, arg2 : TabInfo);
		isEmpty() : boolean;
	}


	interface Toolbar extends JPanel {}	class TabActionsAutoHideListener {
		weight : number;
		processMouseOver() : void;
	}


	interface TabActionsAutoHideListener extends MouseMotionAdapter, Weighted {}}

export = JBTabsImpl
