import PropertyChangeSupport = require('nashorn/java/beans/PropertyChangeSupport');
import ActionGroup = require('nashorn/com/intellij/openapi/actionSystem/ActionGroup');
import JComponent = require('nashorn/javax/swing/JComponent');
import SimpleColoredText = require('nashorn/com/intellij/ui/SimpleColoredText');
import Icon = require('nashorn/javax/swing/Icon');
import AlertIcon = require('nashorn/com/intellij/ui/content/AlertIcon');
import Color = require('nashorn/java/awt/Color');
import SimpleTextAttributes = require('nashorn/com/intellij/ui/SimpleTextAttributes');
import Component = require('nashorn/java/awt/Component');
import Object = require('nashorn/java/lang/Object');
import Queryable = require('nashorn/com/intellij/openapi/ui/Queryable');
import PlaceProvider = require('nashorn/com/intellij/ui/PlaceProvider');
import MouseEvent = require('nashorn/java/awt/event/MouseEvent');

declare class TabInfo {
	static ACTION_GROUP : string;
	static ICON : string;
	static TAB_COLOR : string;
	static COMPONENT : string;
	static TEXT : string;
	static TAB_ACTION_GROUP : string;
	static ALERT_ICON : string;
	static ALERT_STATUS : string;
	static HIDDEN : string;
	static ENABLED : string;
	changeSupport : PropertyChangeSupport;
	group : ActionGroup;
	component : JComponent;
	text : string;
	coloredText : SimpleColoredText;
	icon : Icon;
	place : string;
	sideComponent : JComponent;
	actionsContextComponent : JComponent;
	preferredFocusableComponent : JComponent;
	tabLabelActions : ActionGroup;
	tabActionPlace : string;
	lastFocusOwner : JComponent;
	blinkCount : number;
	alertIcon : AlertIcon;
	alertRequested : boolean;
	hidden : boolean;
	enabled : boolean;
	defaultForeground : Color;
	tooltipText : string;
	tabColor : Color;
	dragOutDelegate : TabInfo.DragOutDelegate;
	previousSelection : TabInfo;
	constructor(arg1 : JComponent);
	getChangeSupport() : PropertyChangeSupport;
	setText(arg1 : string) : TabInfo;
	getDefaultAttributes() : SimpleTextAttributes;
	clearText(arg1 : boolean) : TabInfo;
	append(arg1 : string, arg2 : SimpleTextAttributes) : TabInfo;
	setIcon(arg1 : Icon) : TabInfo;
	setComponent(arg1 : Component) : TabInfo;
	getGroup() : ActionGroup;
	getComponent() : JComponent;
	getText() : string;
	getColoredText() : SimpleColoredText;
	getIcon() : Icon;
	setSideComponent(arg1 : JComponent) : TabInfo;
	getSideComponent() : JComponent;
	setActions(arg1 : ActionGroup, arg2 : string) : TabInfo;
	setActionsContextComponent(arg1 : JComponent) : TabInfo;
	getActionsContextComponent() : JComponent;
	setObject(arg1 : Object) : TabInfo;
	getObject() : Object;
	getPreferredFocusableComponent() : JComponent;
	setPreferredFocusableComponent(arg1 : JComponent) : TabInfo;
	setLastFocusOwner(arg1 : JComponent) : void;
	getTabLabelActions() : ActionGroup;
	getTabActionPlace() : string;
	setTabLabelActions(arg1 : ActionGroup, arg2 : string) : TabInfo;
	getLastFocusOwner() : JComponent;
	setAlertIcon(arg1 : AlertIcon) : TabInfo;
	fireAlert() : void;
	stopAlerting() : void;
	getBlinkCount() : number;
	setBlinkCount(arg1 : number) : void;
	getAlertIcon() : AlertIcon;
	resetAlertRequest() : void;
	isAlertRequested() : boolean;
	setHidden(arg1 : boolean) : void;
	isHidden() : boolean;
	setEnabled(arg1 : boolean) : void;
	isEnabled() : boolean;
	setDefaultStyle(arg1 : number) : TabInfo;
	setDefaultForeground(arg1 : Color) : TabInfo;
	getDefaultForeground() : Color;
	setDefaultWaveColor(arg1 : Color) : TabInfo;
	update() : void;
	revalidate() : void;
	setTooltipText(arg1 : string) : TabInfo;
	getTooltipText() : string;
	setTabColor(arg1 : Color) : TabInfo;
	getTabColor() : Color;
	setTestableUi(arg1 : Queryable) : TabInfo;
	setDragOutDelegate(arg1 : TabInfo.DragOutDelegate) : TabInfo;
	canBeDraggedOut() : boolean;
	getDragOutDelegate() : TabInfo.DragOutDelegate;
	setPreviousSelection(arg1 : TabInfo) : void;
	getPreviousSelection() : TabInfo;
}


declare interface TabInfo extends Queryable, PlaceProvider<string> {}

declare module TabInfo {
	class DragOutDelegate extends Object {
		dragOutStarted(arg1 : MouseEvent, arg2 : TabInfo) : void;
		processDragOut(arg1 : MouseEvent, arg2 : TabInfo) : void;
		dragOutFinished(arg1 : MouseEvent, arg2 : TabInfo) : void;
		dragOutCancelled(arg1 : TabInfo) : void;
	}
}

export = TabInfo
