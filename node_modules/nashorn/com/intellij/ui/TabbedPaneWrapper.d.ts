import Object = require('nashorn/java/lang/Object');
import JComponent = require('nashorn/javax/swing/JComponent');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import PrevNextActionsDescriptor = require('nashorn/com/intellij/ui/PrevNextActionsDescriptor');
import ChangeListener = require('nashorn/javax/swing/event/ChangeListener');
import Icon = require('nashorn/javax/swing/Icon');
import TabbedPane = require('nashorn/com/intellij/ui/TabbedPane');
import MouseListener = require('nashorn/java/awt/event/MouseListener');
import Color = require('nashorn/java/awt/Color');
import JTabbedPane = require('nashorn/javax/swing/JTabbedPane');
import JBTabs = require('nashorn/com/intellij/ui/tabs/JBTabs');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import JPanel = require('nashorn/javax/swing/JPanel');
import IdeFocusTraversalPolicy = require('nashorn/com/intellij/openapi/wm/ex/IdeFocusTraversalPolicy');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');

declare class TabbedPaneWrapper extends Object {
	disposed : boolean;
	component : JComponent;
	selectedIndex : number;
	selectedComponent : JComponent;
	tabCount : number;
	tabLayoutPolicy : number;
	selectedTitle : string;
	constructor(arg1 : Disposable);
	constructor(arg1 : number, arg2 : PrevNextActionsDescriptor, arg3 : Disposable);
	init(arg1 : number, arg2 : PrevNextActionsDescriptor, arg3 : TabbedPaneWrapper.TabFactory) : void;
	isDisposed() : boolean;
	a() : void;
	addChangeListener(arg1 : ChangeListener) : void;
	removeChangeListener(arg1 : ChangeListener) : void;
	createTabbedPaneHolder() : TabbedPaneWrapper.TabbedPaneHolder;
	getComponent() : JComponent;
	addTab(arg1 : string, arg2 : Icon, arg3 : JComponent, arg4 : string) : void;
	addTab(arg1 : string, arg2 : JComponent) : void;
	insertTab(arg1 : string, arg2 : Icon, arg3 : JComponent, arg4 : string, arg5 : number) : void;
	createTabWrapper(arg1 : JComponent) : TabbedPaneWrapper.TabWrapper;
	createTabbedPane(arg1 : number) : TabbedPane;
	setTabPlacement(arg1 : number) : void;
	addMouseListener(arg1 : MouseListener) : void;
	getSelectedIndex() : number;
	getSelectedComponent() : JComponent;
	setSelectedIndex(arg1 : number) : void;
	setSelectedIndex(arg1 : number, arg2 : boolean) : void;
	setSelectedComponent(arg1 : JComponent) : void;
	removeTabAt(arg1 : number) : void;
	getTabCount() : number;
	getForegroundAt(arg1 : number) : Color;
	setForegroundAt(arg1 : number, arg2 : Color) : void;
	getComponentAt(arg1 : number) : JComponent;
	a(arg1 : number) : TabbedPaneWrapper.TabWrapper;
	setTitleAt(arg1 : number, arg2 : string) : void;
	setToolTipTextAt(arg1 : number, arg2 : string) : void;
	setComponentAt(arg1 : number, arg2 : JComponent) : void;
	setIconAt(arg1 : number, arg2 : Icon) : void;
	setEnabledAt(arg1 : number, arg2 : boolean) : void;
	indexOfComponent(arg1 : JComponent) : number;
	getTabLayoutPolicy() : number;
	setTabLayoutPolicy(arg1 : number) : void;
	installKeyboardNavigation() : void;
	uninstallKeyboardNavigation() : void;
	getTitleAt(arg1 : number) : string;
	setSelectedTitle(arg1 : string) : void;
	getSelectedTitle() : string;
	removeAll() : void;
	static get(arg1 : JTabbedPane) : TabbedPaneWrapper;
}


declare module TabbedPaneWrapper {
	class AsJTabbedPane {
		constructor(arg1 : number);
	}


	interface AsJTabbedPane extends TabbedPaneWrapper {}	class AsJBTabs {
		tabs : JBTabs;
		constructor(arg1 : Project, arg2 : number, arg3 : PrevNextActionsDescriptor, arg4 : Disposable);
		getTabs() : JBTabs;
	}


	interface AsJBTabs extends TabbedPaneWrapper {}	class JBTabsFactory {
		tabs : JBTabs;
		getTabs() : JBTabs;
		dispose() : void;
	}


	interface JBTabsFactory extends TabbedPaneWrapper.TabFactory {}	class JTabbedPaneFactory {
	}


	interface JTabbedPaneFactory extends TabbedPaneWrapper.TabFactory {}	class TabFactory extends Object {
		createTabbedPane(arg1 : number) : TabbedPane;
		createTabbedPaneHolder() : TabbedPaneWrapper.TabbedPaneHolder;
		createTabWrapper(arg1 : JComponent) : TabbedPaneWrapper.TabWrapper;
	}
	class TabbedPaneHolder {
	}


	interface TabbedPaneHolder extends JPanel {}	class _MyFocusTraversalPolicy {
	}


	interface _MyFocusTraversalPolicy extends IdeFocusTraversalPolicy {}	class TabWrapper {
		component : JComponent;
		constructor(arg1 : JComponent);
		getComponent() : JComponent;
		dispose() : void;
	}


	interface TabWrapper extends JPanel, DataProvider {}}

export = TabbedPaneWrapper
