import RelativeRectangle = require('nashorn/com/intellij/ui/awt/RelativeRectangle');
import JComponent = require('nashorn/javax/swing/JComponent');
import DockableContent = require('nashorn/com/intellij/ui/docking/DockableContent');
import RelativePoint = require('nashorn/com/intellij/ui/awt/RelativePoint');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Image = require('nashorn/java/awt/Image');
import Activatable = require('nashorn/com/intellij/util/ui/update/Activatable');
import Object = require('nashorn/java/lang/Object');
import Element = require('nashorn/org/jdom/Element');
import Enum = require('nashorn/java/lang/Enum');

declare class DockContainer {
	acceptArea : RelativeRectangle;
	acceptAreaFallback : RelativeRectangle;
	containerComponent : JComponent;
	empty : boolean;
	disposeWhenEmpty : boolean;
	getAcceptArea() : RelativeRectangle;
	getAcceptAreaFallback() : RelativeRectangle;
	getContentResponse(arg1 : DockableContent, arg2 : RelativePoint) : DockContainer.ContentResponse;
	getContainerComponent() : JComponent;
	add(arg1 : DockableContent, arg2 : RelativePoint) : void;
	closeAll() : void;
	addListener(arg1 : DockContainer.Listener, arg2 : Disposable) : void;
	isEmpty() : boolean;
	startDropOver(arg1 : DockableContent, arg2 : RelativePoint) : Image;
	processDropOver(arg1 : DockableContent, arg2 : RelativePoint) : Image;
	resetDropOver(arg1 : DockableContent) : void;
	isDisposeWhenEmpty() : boolean;
}


declare interface DockContainer extends Disposable, Activatable {}

declare module DockContainer {
	class Listener extends Object {
		contentAdded(arg1 : Object) : void;
		contentRemoved(arg1 : Object) : void;
	}


	module Listener {
		class Adapter {
			constructor();
		}


		interface Adapter extends DockContainer.Listener {}	}
	class Persistent {
		dockContainerType : string;
		state : Element;
		getDockContainerType() : string;
		getState() : Element;
	}


	interface Persistent extends DockContainer {}	class Dialog {
	}


	interface Dialog extends DockContainer {}	class ContentResponse {
		static ACCEPT_MOVE : DockContainer.ContentResponse;
		static ACCEPT_COPY : DockContainer.ContentResponse;
		static DENY : DockContainer.ContentResponse;
		canAccept() : boolean;
	}


	interface ContentResponse extends Enum<DockContainer.ContentResponse> {}}

export = DockContainer
