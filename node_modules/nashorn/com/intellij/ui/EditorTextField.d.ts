import Key = require('nashorn/com/intellij/openapi/util/Key');
import JComponent = require('nashorn/javax/swing/JComponent');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import CaretModel = require('nashorn/com/intellij/openapi/editor/CaretModel');
import Color = require('nashorn/java/awt/Color');
import Dimension = require('nashorn/java/awt/Dimension');
import Component = require('nashorn/java/awt/Component');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import DocumentListener = require('nashorn/com/intellij/openapi/editor/event/DocumentListener');
import CharSequence = require('nashorn/java/lang/CharSequence');
import EditorEx = require('nashorn/com/intellij/openapi/editor/ex/EditorEx');
import EditorColorsScheme = require('nashorn/com/intellij/openapi/editor/colors/EditorColorsScheme');
import EditorSettingsProvider = require('nashorn/com/intellij/ui/EditorSettingsProvider');
import NonOpaquePanel = require('nashorn/com/intellij/ui/components/panels/NonOpaquePanel');
import TextComponent = require('nashorn/com/intellij/ui/TextComponent');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');
import DocumentBasedComponent = require('nashorn/com/intellij/ui/DocumentBasedComponent');
import FocusListener = require('nashorn/java/awt/event/FocusListener');
import AbstractDelegatingToRootTraversalPolicy = require('nashorn/com/intellij/openapi/wm/ex/AbstractDelegatingToRootTraversalPolicy');

declare class EditorTextField {
	static SUPPLEMENTARY_KEY : Key<boolean>;
	text : string;
	component : JComponent;
	project : Project;
	document : Document;
	caretModel : CaretModel;
	focusOwner : boolean;
	background : Color;
	preferredSize : Dimension;
	minimumSize : Dimension;
	nextFocusableComponent : Component;
	editor : Editor;
	focusTarget : JComponent;
	constructor();
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : Project, arg3 : FileType);
	constructor(arg1 : Document, arg2 : Project, arg3 : FileType);
	constructor(arg1 : Document, arg2 : Project, arg3 : FileType, arg4 : boolean);
	constructor(arg1 : Document, arg2 : Project, arg3 : FileType, arg4 : boolean, arg5 : boolean);
	setSupplementary(arg1 : boolean) : void;
	setFontInheritedFromLAF(arg1 : boolean) : void;
	addDocumentListener(arg1 : DocumentListener) : void;
	removeDocumentListener(arg1 : DocumentListener) : void;
	getProject() : Project;
	setDocument(arg1 : Document) : void;
	a() : void;
	a(arg1 : boolean) : void;
	setText(arg1 : string) : void;
	setPlaceholder(arg1 : CharSequence) : void;
	selectAll() : void;
	static a(arg1 : Editor) : void;
	removeSelection() : void;
	getCaretModel() : CaretModel;
	releaseEditor(arg1 : Editor) : void;
	b() : void;
	c() : void;
	isOneLineMode() : boolean;
	initOneLineMode(arg1 : EditorEx) : void;
	setOneLineMode(arg1 : boolean) : void;
	createEditor() : EditorEx;
	updateBorder(arg1 : EditorEx) : void;
	a(arg1 : EditorEx) : void;
	shouldHaveBorder() : boolean;
	a(arg1 : boolean, arg2 : EditorColorsScheme) : Color;
	setPreferredWidth(arg1 : number) : void;
	getEditor() : Editor;
	getFocusTarget() : JComponent;
	setFileType(arg1 : FileType) : void;
	setNewDocumentAndFileType(arg1 : FileType, arg2 : Document) : void;
	ensureWillComputePreferredSize() : void;
	setAsRendererWithSelection(arg1 : Color, arg2 : Color) : void;
	addSettingsProvider(arg1 : EditorSettingsProvider) : void;
	removeSettingsProvider(arg1 : EditorSettingsProvider) : boolean;
}


declare interface EditorTextField extends NonOpaquePanel, DocumentListener, TextComponent, DataProvider, DocumentBasedComponent, FocusListener {}

declare module EditorTextField {
	class DelegatingToRootTraversalPolicy {
	}


	interface DelegatingToRootTraversalPolicy extends AbstractDelegatingToRootTraversalPolicy {}	class Jdk7DelegatingToRootTraversalPolicy {
	}


	interface Jdk7DelegatingToRootTraversalPolicy extends EditorTextField.DelegatingToRootTraversalPolicy {}}

export = EditorTextField
