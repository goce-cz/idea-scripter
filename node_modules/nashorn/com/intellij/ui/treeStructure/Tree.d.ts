import StatusText = require('nashorn/com/intellij/util/ui/StatusText');
import ExpandableItemsHandler = require('nashorn/com/intellij/ui/ExpandableItemsHandler');
import Color = require('nashorn/java/awt/Color');
import Insets = require('nashorn/java/awt/Insets');
import Dimension = require('nashorn/java/awt/Dimension');
import TreeNode = require('nashorn/javax/swing/tree/TreeNode');
import TreeModel = require('nashorn/javax/swing/tree/TreeModel');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import Graphics = require('nashorn/java/awt/Graphics');
import TreePath = require('nashorn/javax/swing/tree/TreePath');
import Object = require('nashorn/java/lang/Object');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import PresentableNodeDescriptor = require('nashorn/com/intellij/ide/util/treeView/PresentableNodeDescriptor');
import AbstractTreeStructure = require('nashorn/com/intellij/ide/util/treeView/AbstractTreeStructure');
import Class = require('nashorn/java/lang/Class');
import Component = require('nashorn/java/awt/Component');
import JTree = require('nashorn/javax/swing/JTree');
import ComponentWithEmptyText = require('nashorn/com/intellij/util/ui/ComponentWithEmptyText');
import ComponentWithExpandableItems = require('nashorn/com/intellij/ui/ComponentWithExpandableItems');
import Autoscroll = require('nashorn/java/awt/dnd/Autoscroll');
import Queryable = require('nashorn/com/intellij/openapi/ui/Queryable');
import ComponentWithFileColors = require('nashorn/com/intellij/ui/ComponentWithFileColors');
import FocusAdapter = require('nashorn/java/awt/event/FocusAdapter');
import MouseAdapter = require('nashorn/java/awt/event/MouseAdapter');
import DefaultTreeSelectionModel = require('nashorn/javax/swing/tree/DefaultTreeSelectionModel');

declare class Tree {
	empty : boolean;
	fileColorsEnabled : boolean;
	emptyText : StatusText;
	expandableItemsHandler : ExpandableItemsHandler<number>;
	background : Color;
	foreground : Color;
	autoscrollInsets : Insets;
	preferredSize : Dimension;
	horizontalAutoScrollingEnabled : boolean;
	constructor();
	constructor(arg1 : TreeNode);
	constructor(arg1 : TreeModel);
	isEmpty() : boolean;
	isCustomUI() : boolean;
	isMacWideSelection() : boolean;
	isWideSelection() : boolean;
	getWideSelectionBackgroundCondition() : Condition<number>;
	updateBusyIconLocation() : void;
	setPaintBusy(arg1 : boolean) : void;
	updateBusy() : void;
	shouldShowBusyIconIfNeeded() : boolean;
	paintNodes() : boolean;
	paintFileColorGutter(arg1 : Graphics) : void;
	getFileColorForPath(arg1 : TreePath) : Color;
	getFileColorFor(arg1 : Object) : Color;
	getFileColorFor(arg1 : DefaultMutableTreeNode) : Color;
	isLocationInExpandControl(arg1 : TreePath, arg2 : number, arg3 : number) : boolean;
	highlightSingleNode() : boolean;
	paintNodeContent(arg1 : Graphics) : void;
	getMax(arg1 : PresentableNodeDescriptor, arg2 : AbstractTreeStructure) : number[];
	static toPresentableNode(arg1 : Object) : PresentableNodeDescriptor;
	getPath(arg1 : PresentableNodeDescriptor) : TreePath;
	isLocationInExpandControl(arg1 : TreePath, arg2 : number) : boolean;
	setLineStyleAngled() : void;
	getSelectedNodes<T>(arg1 : Class<T>, arg2 : Tree.NodeFilter<T>) : T[];
	setHoldSize(arg1 : boolean) : void;
	isHorizontalAutoScrollingEnabled() : boolean;
	setHorizontalAutoScrollingEnabled(arg1 : boolean) : void;
	getDeepestRendererComponentAt(arg1 : number, arg2 : number) : Component;
}


declare interface Tree extends JTree, ComponentWithEmptyText, ComponentWithExpandableItems<number>, Autoscroll, Queryable, ComponentWithFileColors {}

declare module Tree {
	class NodeFilter<T> extends Object {
		accept(arg1 : T) : boolean;
	}
	class MyFocusListener {
		focusChanges() : void;
	}


	interface MyFocusListener extends FocusAdapter {}	class MyMouseListener {
	}


	interface MyMouseListener extends MouseAdapter {}	class MySelectionModel {
		holdSelection() : void;
		unholdSelection() : void;
	}


	interface MySelectionModel extends DefaultTreeSelectionModel {}}

export = Tree
