import Object = require('nashorn/java/lang/Object');
import Component = require('nashorn/java/awt/Component');
import Window = require('nashorn/java/awt/Window');
import List = require('nashorn/java/util/List');
import ActionCallback = require('nashorn/com/intellij/openapi/util/ActionCallback');
import JFrame = require('nashorn/javax/swing/JFrame');
import JBPopup = require('nashorn/com/intellij/openapi/ui/popup/JBPopup');
import FocusCommand = require('nashorn/com/intellij/openapi/wm/FocusCommand');

declare class FocusTrackback extends Object {
	focusOwner : Component;
	mustBeShown : boolean;
	requestor : Object;
	sheduledForRestore : boolean;
	willBeSheduledForRestore : boolean;
	constructor(arg1 : Object, arg2 : Component, arg3 : boolean);
	constructor(arg1 : Object, arg2 : Window, arg3 : boolean);
	a(arg1 : Component) : void;
	static getFocusFor(arg1 : Window) : Component;
	static a(arg1 : Window, arg2 : Component) : void;
	static a() : boolean;
	registerFocusComponent(arg1 : Component) : void;
	registerFocusComponent(arg1 : FocusTrackback.ComponentQuery) : void;
	a(arg1 : Window) : void;
	b() : List<FocusTrackback>;
	static b(arg1 : Window) : List<FocusTrackback>;
	restoreFocus() : void;
	c() : ActionCallback;
	static a(arg1 : List<FocusTrackback>, arg2 : FocusTrackback, arg3 : boolean) : Component;
	d() : List<FocusTrackback>;
	static c(arg1 : Window) : List<FocusTrackback>;
	static d(arg1 : Window) : Window;
	getFocusOwner() : Component;
	dispose() : void;
	e() : boolean;
	consume() : void;
	b(arg1 : Component) : void;
	setMustBeShown(arg1 : boolean) : void;
	isMustBeShown() : boolean;
	static release(arg1 : JFrame) : void;
	getRequestor() : Object;
	setWillBeSheduledForRestore() : void;
	isSheduledForRestore() : boolean;
	isWillBeSheduledForRestore() : boolean;
	setForcedRestore(arg1 : boolean) : void;
	cleanParentWindow() : void;
	static getChildPopups(arg1 : Component) : List<JBPopup>;
	c(arg1 : Component) : boolean;
}


declare module FocusTrackback {
	class MyFocusCommand {
	}


	interface MyFocusCommand extends FocusCommand {}	class ComponentQuery extends Object {
		component : Component;
		getComponent() : Component;
	}
	class Provider extends Object {
		focusTrackback : FocusTrackback;
		getFocusTrackback() : FocusTrackback;
	}
}

export = FocusTrackback
