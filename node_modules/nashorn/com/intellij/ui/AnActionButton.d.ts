import ShortcutSet = require('nashorn/com/intellij/openapi/actionSystem/ShortcutSet');
import JComponent = require('nashorn/javax/swing/JComponent');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import RelativePoint = require('nashorn/com/intellij/ui/awt/RelativePoint');
import Icon = require('nashorn/javax/swing/Icon');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import AnActionButtonUpdater = require('nashorn/com/intellij/ui/AnActionButtonUpdater');
import AnActionEvent = require('nashorn/com/intellij/openapi/actionSystem/AnActionEvent');
import ShortcutProvider = require('nashorn/com/intellij/openapi/actionSystem/ShortcutProvider');
import JBPopup = require('nashorn/com/intellij/openapi/ui/popup/JBPopup');
import Presentation = require('nashorn/com/intellij/openapi/actionSystem/Presentation');
import CheckedActionGroup = require('nashorn/com/intellij/openapi/actionSystem/CheckedActionGroup');

declare class AnActionButton {
	enabled : boolean;
	visible : boolean;
	shortcut : ShortcutSet;
	contextComponent : JComponent;
	dataContext : DataContext;
	preferredPopupPoint : RelativePoint;
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : string, arg3 : Icon);
	constructor(arg1 : string, arg2 : Icon);
	constructor();
	static fromAction(arg1 : AnAction) : AnActionButton;
	isEnabled() : boolean;
	setEnabled(arg1 : boolean) : void;
	isVisible() : boolean;
	setVisible(arg1 : boolean) : void;
	addCustomUpdater(arg1 : AnActionButtonUpdater) : void;
	updateButton(arg1 : AnActionEvent) : void;
	setShortcut(arg1 : ShortcutSet) : void;
	setContextComponent(arg1 : JComponent) : void;
	getContextComponent() : JComponent;
	getDataContext() : DataContext;
	isContextComponentOk() : boolean;
	getPreferredPopupPoint() : RelativePoint;
}


declare interface AnActionButton extends AnAction, ShortcutProvider {}

declare module AnActionButton {
	class AnActionEventWrapper {
		showPopup(arg1 : JBPopup) : void;
	}


	interface AnActionEventWrapper extends AnActionEvent {}	class AnActionButtonWrapper {
		dumbAware : boolean;
		constructor(arg1 : Presentation, arg2 : AnAction);
	}


	interface AnActionButtonWrapper extends AnActionButton {}	class CheckedAnActionButton {
		delegate : AnAction;
		constructor(arg1 : Presentation, arg2 : AnAction);
		getDelegate() : AnAction;
	}


	interface CheckedAnActionButton extends AnActionButton.AnActionButtonWrapper, CheckedActionGroup {}}

export = AnActionButton
