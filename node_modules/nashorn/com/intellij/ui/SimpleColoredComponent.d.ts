import Color = require('nashorn/java/awt/Color');
import Icon = require('nashorn/javax/swing/Icon');
import Insets = require('nashorn/java/awt/Insets');
import Border = require('nashorn/javax/swing/border/Border');
import Dimension = require('nashorn/java/awt/Dimension');
import AccessibleContext = require('nashorn/javax/accessibility/AccessibleContext');
import SimpleTextAttributes = require('nashorn/com/intellij/ui/SimpleTextAttributes');
import Object = require('nashorn/java/lang/Object');
import Font = require('nashorn/java/awt/Font');
import Graphics2D = require('nashorn/java/awt/Graphics2D');
import FontRenderContext = require('nashorn/java/awt/font/FontRenderContext');
import TextLayout = require('nashorn/java/awt/font/TextLayout');
import JLabel = require('nashorn/javax/swing/JLabel');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import Graphics = require('nashorn/java/awt/Graphics');
import FontMetrics = require('nashorn/java/awt/FontMetrics');
import CharSequence = require('nashorn/java/lang/CharSequence');
import Runnable = require('nashorn/java/lang/Runnable');
import JComponent = require('nashorn/javax/swing/JComponent');
import Accessible = require('nashorn/javax/accessibility/Accessible');
import ColoredTextContainer = require('nashorn/com/intellij/ui/ColoredTextContainer');
import Iterator = require('nashorn/java/util/Iterator');
import AccessibleRole = require('nashorn/javax/accessibility/AccessibleRole');
import AccessibleStateSet = require('nashorn/javax/accessibility/AccessibleStateSet');
import Locale = require('nashorn/java/util/Locale');

declare class SimpleColoredComponent {
	static SHADOW_COLOR : Color;
	static STYLE_SEARCH_MATCH_BACKGROUND : Color;
	static FRAGMENT_ICON : number;
	iconOnTheRight : boolean;
	icon : Icon;
	ipad : Insets;
	iconTextGap : number;
	myBorder : Border;
	iconOpaque : boolean;
	preferredSize : Dimension;
	minimumSize : Dimension;
	transparentIconBackground : boolean;
	accessibleContext : AccessibleContext;
	constructor();
	iterator() : SimpleColoredComponent.ColoredIterator;
	isIconOnTheRight() : boolean;
	setIconOnTheRight(arg1 : boolean) : void;
	append(arg1 : string) : SimpleColoredComponent;
	append(arg1 : string, arg2 : SimpleTextAttributes, arg3 : number, arg4 : number) : void;
	append(arg1 : string, arg2 : SimpleTextAttributes, arg3 : boolean) : void;
	_append(arg1 : string, arg2 : SimpleTextAttributes, arg3 : boolean) : void;
	revalidateAndRepaint() : void;
	_append(arg1 : string, arg2 : SimpleTextAttributes, arg3 : Object) : void;
	appendFixedTextFragmentWidth(arg1 : number) : void;
	appendTextPadding(arg1 : number) : void;
	appendTextPadding(arg1 : number, arg2 : number) : void;
	setTextAlign(arg1 : number) : void;
	clear() : void;
	_clear() : void;
	getIcon() : Icon;
	getIpad() : Insets;
	setIpad(arg1 : Insets) : void;
	getIconTextGap() : number;
	setIconTextGap(arg1 : number) : void;
	getMyBorder() : Border;
	setMyBorder(arg1 : Border) : void;
	setPaintFocusBorder(arg1 : boolean) : void;
	setFocusBorderAroundIcon(arg1 : boolean) : void;
	isIconOpaque() : boolean;
	setIconOpaque(arg1 : boolean) : void;
	getFragmentTag(arg1 : number) : Object;
	computePreferredSize(arg1 : boolean) : Dimension;
	computeTextWidth(arg1 : Font, arg2 : boolean) : number;
	doDrawString(arg1 : Graphics2D, arg2 : string, arg3 : number, arg4 : number) : void;
	computeStringWidth(arg1 : string, arg2 : Font) : number;
	createTextLayout(arg1 : string, arg2 : Font, arg3 : FontRenderContext) : TextLayout;
	needFontFallback(arg1 : Font, arg2 : string) : boolean;
	setSupportFontFallback(arg1 : boolean) : void;
	findFragmentAt(arg1 : number) : number;
	getFragmentTagAt(arg1 : number) : Object;
	formatToLabel(arg1 : JLabel) : JLabel;
	static formatText(arg1 : StringBuilder, arg2 : string, arg3 : SimpleTextAttributes) : void;
	static formatLink(arg1 : StringBuilder, arg2 : string, arg3 : SimpleTextAttributes, arg4 : string) : void;
	static convertFragment(arg1 : string) : string;
	static formatStyle(arg1 : StringBuilder, arg2 : SimpleTextAttributes) : void;
	_doPaint(arg1 : Graphics) : void;
	doPaint(arg1 : Graphics2D) : void;
	doPaintTextBackground(arg1 : Graphics2D, arg2 : number) : void;
	paintBackground(arg1 : Graphics2D, arg2 : number, arg3 : number, arg4 : number) : void;
	doPaintIcon(arg1 : Graphics2D, arg2 : Icon, arg3 : number) : void;
	doPaintText(arg1 : Graphics2D, arg2 : number, arg3 : boolean) : number;
	computeTextAlignShift(arg1 : Font) : number;
	shouldDrawMacShadow() : boolean;
	shouldDrawDimmed() : boolean;
	shouldDrawBackground() : boolean;
	paintIcon(arg1 : Graphics, arg2 : Icon, arg3 : number) : void;
	applyAdditionalHints(arg1 : Graphics2D) : void;
	isTransparentIconBackground() : boolean;
	setTransparentIconBackground(arg1 : boolean) : void;
	static getTextBaseLine(arg1 : FontMetrics, arg2 : number) : number;
	static checkCanPaint(arg1 : Graphics) : void;
	logSwingPath() : string;
	setBorderInsets(arg1 : Insets) : void;
	getCharSequence(arg1 : boolean) : CharSequence;
	change(arg1 : Runnable, arg2 : boolean) : void;
}


declare interface SimpleColoredComponent extends JComponent, Accessible, ColoredTextContainer {}

declare module SimpleColoredComponent {
	class MyIterator {
		offset : number;
		endOffset : number;
		fragment : string;
		textAttributes : SimpleTextAttributes;
	}


	interface MyIterator extends SimpleColoredComponent.ColoredIterator {}	class ColoredIterator {
		offset : number;
		endOffset : number;
		fragment : string;
		textAttributes : SimpleTextAttributes;
		getOffset() : number;
		getEndOffset() : number;
		getFragment() : string;
		getTextAttributes() : SimpleTextAttributes;
		split(arg1 : number, arg2 : SimpleTextAttributes) : number;
	}


	interface ColoredIterator extends Iterator<string> {}	class BrowserLauncherTag {
		constructor(arg1 : string);
	}


	interface BrowserLauncherTag extends Runnable {}	class MyAccessibleContext {
		accessibleRole : AccessibleRole;
		accessibleStateSet : AccessibleStateSet;
		accessibleIndexInParent : number;
		accessibleChildrenCount : number;
		locale : Locale;
	}


	interface MyAccessibleContext extends AccessibleContext {}	class MyBorder {
		borderOpaque : boolean;
		constructor();
		setInsets(arg1 : Insets) : void;
	}


	interface MyBorder extends Border {}}

export = SimpleColoredComponent
