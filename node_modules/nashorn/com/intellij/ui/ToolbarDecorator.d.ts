import CommonActionsPanel = require('nashorn/com/intellij/ui/CommonActionsPanel');
import JComponent = require('nashorn/javax/swing/JComponent');
import JTable = require('nashorn/javax/swing/JTable');
import JTree = require('nashorn/javax/swing/JTree');
import ElementProducer = require('nashorn/com/intellij/util/ui/ElementProducer');
import JList = require('nashorn/javax/swing/JList');
import EditableModel = require('nashorn/com/intellij/util/ui/EditableModel');
import TableView = require('nashorn/com/intellij/ui/table/TableView');
import Border = require('nashorn/javax/swing/border/Border');
import Comparator = require('nashorn/java/util/Comparator');
import AnActionButton = require('nashorn/com/intellij/ui/AnActionButton');
import ActionToolbarPosition = require('nashorn/com/intellij/openapi/actionSystem/ActionToolbarPosition');
import AnActionButtonRunnable = require('nashorn/com/intellij/ui/AnActionButtonRunnable');
import AnActionButtonUpdater = require('nashorn/com/intellij/ui/AnActionButtonUpdater');
import ActionGroup = require('nashorn/com/intellij/openapi/actionSystem/ActionGroup');
import Dimension = require('nashorn/java/awt/Dimension');
import Icon = require('nashorn/javax/swing/Icon');
import JPanel = require('nashorn/javax/swing/JPanel');
import Object = require('nashorn/java/lang/Object');

declare class ToolbarDecorator {
	actionsPanel : CommonActionsPanel;
	constructor();
	getComponent() : JComponent;
	updateButtons() : void;
	updateExtraElementActions(arg1 : boolean) : void;
	getActionsPanel() : CommonActionsPanel;
	initPosition() : ToolbarDecorator;
	setAsUsualTopToolbar() : ToolbarDecorator;
	static createDecorator(arg1 : JTable) : ToolbarDecorator;
	static createDecorator(arg1 : JTree) : ToolbarDecorator;
	static createDecorator(arg1 : JTree, arg2 : ElementProducer<any>) : ToolbarDecorator;
	static createDecorator(arg1 : JList) : ToolbarDecorator;
	static createDecorator(arg1 : JList, arg2 : EditableModel) : ToolbarDecorator;
	static createDecorator<T>(arg1 : TableView<T>, arg2 : ElementProducer<T>) : ToolbarDecorator;
	disableAddAction() : ToolbarDecorator;
	disableRemoveAction() : ToolbarDecorator;
	disableUpAction() : ToolbarDecorator;
	disableUpDownActions() : ToolbarDecorator;
	disableDownAction() : ToolbarDecorator;
	setPanelBorder(arg1 : Border) : ToolbarDecorator;
	setToolbarBorder(arg1 : Border) : ToolbarDecorator;
	setButtonComparator(arg1 : Comparator<AnActionButton>) : ToolbarDecorator;
	setButtonComparator(arg1 : string[]) : ToolbarDecorator;
	setLineBorder(arg1 : number, arg2 : number, arg3 : number, arg4 : number) : ToolbarDecorator;
	addExtraAction(arg1 : AnActionButton) : ToolbarDecorator;
	addExtraActions(arg1 : AnActionButton[]) : ToolbarDecorator;
	setToolbarPosition(arg1 : ActionToolbarPosition) : ToolbarDecorator;
	setAddAction(arg1 : AnActionButtonRunnable) : ToolbarDecorator;
	setEditAction(arg1 : AnActionButtonRunnable) : ToolbarDecorator;
	setRemoveAction(arg1 : AnActionButtonRunnable) : ToolbarDecorator;
	setMoveUpAction(arg1 : AnActionButtonRunnable) : ToolbarDecorator;
	setMoveDownAction(arg1 : AnActionButtonRunnable) : ToolbarDecorator;
	setAddActionName(arg1 : string) : ToolbarDecorator;
	setEditActionName(arg1 : string) : ToolbarDecorator;
	setRemoveActionName(arg1 : string) : ToolbarDecorator;
	setMoveUpActionName(arg1 : string) : ToolbarDecorator;
	setMoveDownActionName(arg1 : string) : ToolbarDecorator;
	setAddActionUpdater(arg1 : AnActionButtonUpdater) : ToolbarDecorator;
	setRemoveActionUpdater(arg1 : AnActionButtonUpdater) : ToolbarDecorator;
	setEditActionUpdater(arg1 : AnActionButtonUpdater) : ToolbarDecorator;
	setMoveUpActionUpdater(arg1 : AnActionButtonUpdater) : ToolbarDecorator;
	setMoveDownActionUpdater(arg1 : AnActionButtonUpdater) : ToolbarDecorator;
	setForcedDnD() : ToolbarDecorator;
	setActionGroup(arg1 : ActionGroup) : ToolbarDecorator;
	setPreferredSize(arg1 : Dimension) : ToolbarDecorator;
	setVisibleRowCount(arg1 : number) : ToolbarDecorator;
	setAddIcon(arg1 : Icon) : ToolbarDecorator;
	createPanel() : JPanel;
	installUpdaters() : void;
	installDnD() : void;
	installDnDSupport() : void;
	isModelEditable() : boolean;
	getPlacement() : Object;
	getButtons() : CommonActionsPanel.Buttons[];
	static findAddButton(arg1 : JComponent) : AnActionButton;
	static findEditButton(arg1 : JComponent) : AnActionButton;
	static findRemoveButton(arg1 : JComponent) : AnActionButton;
	static findUpButton(arg1 : JComponent) : AnActionButton;
	static findDownButton(arg1 : JComponent) : AnActionButton;
	static findButton(arg1 : JComponent, arg2 : CommonActionsPanel.Buttons) : AnActionButton;
}


declare interface ToolbarDecorator extends CommonActionsPanel.ListenerFactory {}

declare module ToolbarDecorator {
	class ElementActionButton {
		constructor(arg1 : string, arg2 : string, arg3 : Icon);
		constructor(arg1 : string, arg2 : Icon);
		constructor();
		constructor(arg1 : string);
	}


	interface ElementActionButton extends AnActionButton {}}

export = ToolbarDecorator
