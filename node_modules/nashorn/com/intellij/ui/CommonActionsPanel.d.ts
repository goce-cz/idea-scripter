import ActionToolbarPosition = require('nashorn/com/intellij/openapi/actionSystem/ActionToolbarPosition');
import AnActionButton = require('nashorn/com/intellij/ui/AnActionButton');
import ShortcutSet = require('nashorn/com/intellij/openapi/actionSystem/ShortcutSet');
import JPanel = require('nashorn/javax/swing/JPanel');
import Object = require('nashorn/java/lang/Object');
import DumbAware = require('nashorn/com/intellij/openapi/project/DumbAware');
import Icon = require('nashorn/javax/swing/Icon');
import Enum = require('nashorn/java/lang/Enum');

declare class CommonActionsPanel {
	position : ActionToolbarPosition;
	getAnActionButton(arg1 : CommonActionsPanel.Buttons) : AnActionButton;
	static registerDeleteHook(arg1 : CommonActionsPanel.MyActionButton) : void;
	setEnabled(arg1 : CommonActionsPanel.Buttons, arg2 : boolean) : void;
	getPosition() : ActionToolbarPosition;
	static getCommonShortcut(arg1 : CommonActionsPanel.Buttons) : ShortcutSet;
}


declare interface CommonActionsPanel extends JPanel {}

declare module CommonActionsPanel {
	class ListenerFactory extends Object {
		createListener(arg1 : CommonActionsPanel) : CommonActionsPanel.Listener;
	}
	class MyActionButton {
		shortcut : ShortcutSet;
		isAddButton() : boolean;
		isRemoveButton() : boolean;
	}


	interface MyActionButton extends AnActionButton, DumbAware {}	class Listener extends Object {
		doAdd() : void;
		doRemove() : void;
		doUp() : void;
		doDown() : void;
		doEdit() : void;
	}


	module Listener {
		class Adapter {
			constructor();
		}


		interface Adapter extends CommonActionsPanel.Listener {}	}
	class Buttons {
		static ADD : CommonActionsPanel.Buttons;
		static REMOVE : CommonActionsPanel.Buttons;
		static EDIT : CommonActionsPanel.Buttons;
		static UP : CommonActionsPanel.Buttons;
		static DOWN : CommonActionsPanel.Buttons;
		static ALL : CommonActionsPanel.Buttons[];
		icon : Icon;
		text : string;
		getIcon() : Icon;
		createButton(arg1 : CommonActionsPanel.Listener, arg2 : string, arg3 : Icon) : CommonActionsPanel.MyActionButton;
		getText() : string;
		performAction(arg1 : CommonActionsPanel.Listener) : void;
	}


	interface Buttons extends Enum<CommonActionsPanel.Buttons> {}}

export = CommonActionsPanel
