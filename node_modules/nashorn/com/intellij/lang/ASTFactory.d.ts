import Object = require('nashorn/java/lang/Object');
import ILazyParseableElementType = require('nashorn/com/intellij/psi/tree/ILazyParseableElementType');
import CharSequence = require('nashorn/java/lang/CharSequence');
import LazyParseableElement = require('nashorn/com/intellij/psi/impl/source/tree/LazyParseableElement');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import CompositeElement = require('nashorn/com/intellij/psi/impl/source/tree/CompositeElement');
import LeafElement = require('nashorn/com/intellij/psi/impl/source/tree/LeafElement');

declare class ASTFactory extends Object {
	constructor();
	createLazy(arg1 : ILazyParseableElementType, arg2 : CharSequence) : LazyParseableElement;
	createComposite(arg1 : IElementType) : CompositeElement;
	createLeaf(arg1 : IElementType, arg2 : CharSequence) : LeafElement;
	static lazy(arg1 : ILazyParseableElementType, arg2 : CharSequence) : LazyParseableElement;
	static composite(arg1 : IElementType) : CompositeElement;
	static leaf(arg1 : IElementType, arg2 : CharSequence) : LeafElement;
	static a(arg1 : IElementType) : ASTFactory;
	static whitespace(arg1 : CharSequence) : LeafElement;
}


declare module ASTFactory {
	class DefaultFactoryHolder extends Object {
		static DEFAULT : ASTFactory;
		static a() : ASTFactory;
	}
}

export = ASTFactory
