import Map = require('nashorn/java/util/Map');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Element = require('nashorn/org/jdom/Element');
import FilePropertyPusher = require('nashorn/com/intellij/openapi/roots/impl/FilePropertyPusher');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import Collection = require('nashorn/java/util/Collection');
import List = require('nashorn/java/util/List');
import PersistentStateComponent = require('nashorn/com/intellij/openapi/components/PersistentStateComponent');
import PerFileMappings = require('nashorn/com/intellij/lang/PerFileMappings');

declare class PerFileMappingsBase<T> {
	mappings : Map<VirtualFile, T>;
	state : Element;
	constructor();
	getFilePropertyPusher() : FilePropertyPusher<T>;
	getProject() : Project;
	cleanup() : void;
	static getMappingInner<T>(arg1 : VirtualFile, arg2 : Map<VirtualFile, T>, arg3 : Key<T>) : T;
	getImmediateMapping(arg1 : VirtualFile) : T;
	handleMappingChange(arg1 : Collection<VirtualFile>, arg2 : Collection<VirtualFile>, arg3 : boolean) : void;
	getAvailableValues() : List<T>;
	serialize(arg1 : T) : string;
	handleUnknownMapping(arg1 : VirtualFile, arg2 : string) : T;
	getValueAttribute() : string;
	cleanupForNextTest() : void;
	shouldReparseFiles() : boolean;
	hasMappings() : boolean;
}


declare interface PerFileMappingsBase<T> extends PersistentStateComponent<Element>, PerFileMappings<T> {}
export = PerFileMappingsBase
