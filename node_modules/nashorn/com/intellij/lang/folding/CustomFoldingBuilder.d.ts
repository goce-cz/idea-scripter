import List = require('nashorn/java/util/List');
import FoldingDescriptor = require('nashorn/com/intellij/lang/folding/FoldingDescriptor');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import CustomFoldingProvider = require('nashorn/com/intellij/lang/folding/CustomFoldingProvider');
import FoldingBuilderEx = require('nashorn/com/intellij/lang/folding/FoldingBuilderEx');
import PossiblyDumbAware = require('nashorn/com/intellij/openapi/project/PossiblyDumbAware');
import Stack = require('nashorn/com/intellij/util/containers/Stack');

declare class CustomFoldingBuilder {
	dumbAware : boolean;
	constructor();
	buildLanguageFoldRegions(arg1 : List<FoldingDescriptor>, arg2 : PsiElement, arg3 : Document, arg4 : boolean) : void;
	addCustomFoldingRegionsRecursively(arg1 : CustomFoldingBuilder.FoldingStack, arg2 : ASTNode, arg3 : List<FoldingDescriptor>, arg4 : number) : void;
	getLanguagePlaceholderText(arg1 : ASTNode, arg2 : TextRange) : string;
	isRegionCollapsedByDefault(arg1 : ASTNode) : boolean;
	isCustomRegionStart(arg1 : ASTNode) : boolean;
	isCustomRegionEnd(arg1 : ASTNode) : boolean;
	static isCustomRegionElement(arg1 : PsiElement) : boolean;
	getDefaultProvider(arg1 : string) : CustomFoldingProvider;
	isCustomFoldingCandidate(arg1 : ASTNode) : boolean;
	isCustomFoldingRoot(arg1 : ASTNode) : boolean;
}


declare interface CustomFoldingBuilder extends FoldingBuilderEx, PossiblyDumbAware {}

declare module CustomFoldingBuilder {
	class FoldingStack {
		owner : ASTNode;
		constructor(arg1 : ASTNode);
		getOwner() : ASTNode;
	}


	interface FoldingStack extends Stack<ASTNode> {}}

export = CustomFoldingBuilder
