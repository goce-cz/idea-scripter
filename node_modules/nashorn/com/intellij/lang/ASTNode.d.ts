import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import CharSequence = require('nashorn/java/lang/CharSequence');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import Class = require('nashorn/java/lang/Class');
import UserDataHolder = require('nashorn/com/intellij/openapi/util/UserDataHolder');

declare class ASTNode {
	static EMPTY_ARRAY : ASTNode[];
	elementType : IElementType;
	text : string;
	chars : CharSequence;
	startOffset : number;
	textLength : number;
	textRange : TextRange;
	treeParent : ASTNode;
	firstChildNode : ASTNode;
	lastChildNode : ASTNode;
	treeNext : ASTNode;
	treePrev : ASTNode;
	psi : PsiElement;
	getElementType() : IElementType;
	getText() : string;
	getChars() : CharSequence;
	textContains(arg1 : string) : boolean;
	getStartOffset() : number;
	getTextLength() : number;
	getTextRange() : TextRange;
	getTreeParent() : ASTNode;
	getFirstChildNode() : ASTNode;
	getLastChildNode() : ASTNode;
	getTreeNext() : ASTNode;
	getTreePrev() : ASTNode;
	getChildren(arg1 : TokenSet) : ASTNode[];
	addChild(arg1 : ASTNode) : void;
	addChild(arg1 : ASTNode, arg2 : ASTNode) : void;
	addLeaf(arg1 : IElementType, arg2 : CharSequence, arg3 : ASTNode) : void;
	removeChild(arg1 : ASTNode) : void;
	removeRange(arg1 : ASTNode, arg2 : ASTNode) : void;
	replaceChild(arg1 : ASTNode, arg2 : ASTNode) : void;
	replaceAllChildrenToChildrenOf(arg1 : ASTNode) : void;
	addChildren(arg1 : ASTNode, arg2 : ASTNode, arg3 : ASTNode) : void;
	copyElement() : ASTNode;
	findLeafElementAt(arg1 : number) : ASTNode;
	getCopyableUserData<T>(arg1 : Key<T>) : T;
	putCopyableUserData<T>(arg1 : Key<T>, arg2 : T) : void;
	findChildByType(arg1 : IElementType) : ASTNode;
	findChildByType(arg1 : IElementType, arg2 : ASTNode) : ASTNode;
	findChildByType(arg1 : TokenSet) : ASTNode;
	findChildByType(arg1 : TokenSet, arg2 : ASTNode) : ASTNode;
	getPsi() : PsiElement;
	getPsi<T extends PsiElement>(arg1 : Class<T>) : T;
}


declare interface ASTNode extends UserDataHolder {}
export = ASTNode
