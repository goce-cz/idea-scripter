import HighlightSeverity = require('nashorn/com/intellij/lang/annotation/HighlightSeverity');
import ProblemHighlightType = require('nashorn/com/intellij/codeInspection/ProblemHighlightType');
import TextAttributesKey = require('nashorn/com/intellij/openapi/editor/colors/TextAttributesKey');
import TextAttributes = require('nashorn/com/intellij/openapi/editor/markup/TextAttributes');
import List = require('nashorn/java/util/List');
import GutterIconRenderer = require('nashorn/com/intellij/openapi/editor/markup/GutterIconRenderer');
import ProblemGroup = require('nashorn/com/intellij/lang/annotation/ProblemGroup');
import IntentionAction = require('nashorn/com/intellij/codeInsight/intention/IntentionAction');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import HighlightDisplayKey = require('nashorn/com/intellij/codeInsight/daemon/HighlightDisplayKey');
import ProblemDescriptor = require('nashorn/com/intellij/codeInspection/ProblemDescriptor');
import Segment = require('nashorn/com/intellij/openapi/util/Segment');
import Object = require('nashorn/java/lang/Object');

declare class Annotation {
	startOffset : number;
	endOffset : number;
	severity : HighlightSeverity;
	highlightType : ProblemHighlightType;
	textAttributes : TextAttributesKey;
	enforcedTextAttributes : TextAttributes;
	quickFixes : List<Annotation.QuickFixInfo>;
	batchFixes : List<Annotation.QuickFixInfo>;
	message : string;
	tooltip : string;
	afterEndOfLine : boolean;
	fileLevelAnnotation : boolean;
	gutterIconRenderer : GutterIconRenderer;
	problemGroup : ProblemGroup;
	constructor(arg1 : number, arg2 : number, arg3 : HighlightSeverity, arg4 : string, arg5 : string);
	registerFix(arg1 : IntentionAction) : void;
	registerFix(arg1 : IntentionAction, arg2 : TextRange) : void;
	registerFix(arg1 : LocalQuickFix, arg2 : TextRange, arg3 : HighlightDisplayKey, arg4 : ProblemDescriptor) : void;
	registerFix(arg1 : IntentionAction, arg2 : TextRange, arg3 : HighlightDisplayKey) : void;
	registerBatchFix<T extends IntentionAction>(arg1 : T, arg2 : TextRange, arg3 : HighlightDisplayKey) : void;
	registerUniversalFix<T extends IntentionAction>(arg1 : T, arg2 : TextRange, arg3 : HighlightDisplayKey) : void;
	setNeedsUpdateOnTyping(arg1 : boolean) : void;
	needsUpdateOnTyping() : boolean;
	getSeverity() : HighlightSeverity;
	getHighlightType() : ProblemHighlightType;
	getTextAttributes() : TextAttributesKey;
	getEnforcedTextAttributes() : TextAttributes;
	setEnforcedTextAttributes(arg1 : TextAttributes) : void;
	getQuickFixes() : List<Annotation.QuickFixInfo>;
	getBatchFixes() : List<Annotation.QuickFixInfo>;
	getMessage() : string;
	getTooltip() : string;
	setTooltip(arg1 : string) : void;
	setHighlightType(arg1 : ProblemHighlightType) : void;
	setTextAttributes(arg1 : TextAttributesKey) : void;
	isAfterEndOfLine() : boolean;
	setAfterEndOfLine(arg1 : boolean) : void;
	isFileLevelAnnotation() : boolean;
	setFileLevelAnnotation(arg1 : boolean) : void;
	getGutterIconRenderer() : GutterIconRenderer;
	setGutterIconRenderer(arg1 : GutterIconRenderer) : void;
	getProblemGroup() : ProblemGroup;
	setProblemGroup(arg1 : ProblemGroup) : void;
}


declare interface Annotation extends Segment {}

declare module Annotation {
	class QuickFixInfo extends Object {
		quickFix : IntentionAction;
		textRange : TextRange;
		key : HighlightDisplayKey;
		constructor(arg1 : IntentionAction, arg2 : TextRange, arg3 : HighlightDisplayKey);
	}
}

export = Annotation
