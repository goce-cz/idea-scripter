import Object = require('nashorn/java/lang/Object');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import Function = require('nashorn/com/intellij/util/Function');
import JSParameter = require('nashorn/com/intellij/lang/javascript/psi/JSParameter');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import LocalQuickFixAndIntentionActionOnPsiElement = require('nashorn/com/intellij/codeInspection/LocalQuickFixAndIntentionActionOnPsiElement');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSArgumentList = require('nashorn/com/intellij/lang/javascript/psi/JSArgumentList');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import IntentionAction = require('nashorn/com/intellij/codeInsight/intention/IntentionAction');
import FixAndIntentionAction = require('nashorn/com/intellij/lang/javascript/validation/fixes/FixAndIntentionAction');
import JSNamedElementKind = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSNamedElementKind');
import List = require('nashorn/java/util/List');
import Set = require('nashorn/java/util/Set');
import JSRecordTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSRecordTypeImpl');
import Map = require('nashorn/java/util/Map');
import InspectionJSFix = require('nashorn/com/sixrr/inspectjs/InspectionJSFix');

declare class JSFixFactory extends Object {
	static instance : JSFixFactory;
	constructor();
	static getInstance() : JSFixFactory;
	changeTypeFix(arg1 : JSNamedElement, arg2 : string, arg3 : string) : LocalQuickFix;
	changeSignatureFix(arg1 : JSFunction, arg2 : Function<JSParameter, string>, arg3 : string) : LocalQuickFix;
	createInheritanceFix(arg1 : JSClass, arg2 : PsiElement) : LocalQuickFix;
	jsInsertCastFix(arg1 : string) : LocalQuickFix;
	removeASTNodeFix(arg1 : string, arg2 : ASTNode) : LocalQuickFixAndIntentionActionOnPsiElement;
	removeASTNodeFix(arg1 : string, arg2 : boolean, arg3 : ASTNode, arg4 : ASTNode) : LocalQuickFixAndIntentionActionOnPsiElement;
	renameReferenceFix() : LocalQuickFix;
	createJSVariableIntentionAction(arg1 : string, arg2 : boolean, arg3 : boolean) : LocalQuickFix;
	createJSParameterIntentionAction(arg1 : string) : LocalQuickFix;
	createJSFunctionIntentionAction(arg1 : string, arg2 : boolean) : LocalQuickFix;
	createJSFunctionFromArgumentIntentionAction(arg1 : string, arg2 : JSExpression, arg3 : boolean) : LocalQuickFix;
	createClassOrInterfaceFix(arg1 : JSReferenceExpression, arg2 : boolean, arg3 : JSArgumentList, arg4 : JSType) : LocalQuickFix;
	addSuperInvocationFix(arg1 : JSReferenceExpression, arg2 : JSFunction) : IntentionAction;
	addConstructorAndSuperInvocationFix(arg1 : JSReferenceExpression, arg2 : JSFunction) : IntentionAction;
	changeSignatureFix(arg1 : PsiElement, arg2 : JSExpression[]) : LocalQuickFix;
	createJSNamespaceIntentionAction(arg1 : string) : LocalQuickFix;
	makeMethodStaticFix() : LocalQuickFix;
	createFieldFromParameterAction(arg1 : string) : FixAndIntentionAction;
	assignParameterToFieldAction(arg1 : FixAndIntentionAction, arg2 : string, arg3 : string, arg4 : string) : FixAndIntentionAction;
	downloadLibraryQuickFix() : LocalQuickFix;
	jsMoveToScopeStartIntentionAction(arg1 : boolean) : LocalQuickFix;
	removeElementLocalQuickFix(arg1 : JSNamedElementKind, arg2 : string) : FixAndIntentionAction;
	addFixesForFields(arg1 : JSFunction, arg2 : PsiElement, arg3 : string, arg4 : List<LocalQuickFix>) : void;
	typeScriptImplementMethodsFix(arg1 : JSClass, arg2 : Set<JSRecordTypeImpl.TypeMember>, arg3 : Map<JSRecordTypeImpl.TypeMember, List<string>>) : IntentionAction;
	renameFix() : InspectionJSFix;
}

export = JSFixFactory
