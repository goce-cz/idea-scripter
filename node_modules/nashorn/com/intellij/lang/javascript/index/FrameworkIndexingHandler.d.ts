import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import JSFile = require('nashorn/com/intellij/lang/javascript/psi/JSFile');
import JSFileCachedData = require('nashorn/com/intellij/lang/javascript/psi/stubs/impl/JSFileCachedData');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import JSElementIndexingData = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSElementIndexingData');
import JSProperty = require('nashorn/com/intellij/lang/javascript/psi/JSProperty');
import Map = require('nashorn/java/util/Map');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');
import JSIndexContentBuilder = require('nashorn/com/intellij/lang/javascript/index/JSIndexContentBuilder');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSObjectLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSObjectLiteralExpression');
import JSDocComment = require('nashorn/com/intellij/lang/javascript/psi/jsdoc/JSDocComment');
import JSLiteralImplicitElementProvider = require('nashorn/com/intellij/lang/javascript/psi/literal/JSLiteralImplicitElementProvider');
import JSLiteralImplicitElementCustomProvider = require('nashorn/com/intellij/lang/javascript/psi/literal/JSLiteralImplicitElementCustomProvider');
import JSTypeEvaluator = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSTypeEvaluator');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');

declare class FrameworkIndexingHandler extends Object {
	static EP_NAME : ExtensionPointName<FrameworkIndexingHandler>;
	version : number;
	constructor();
	processFile(arg1 : JSFile, arg2 : JSFileCachedData) : void;
	processProperty(arg1 : string, arg2 : JSElement, arg3 : JSElementIndexingData) : boolean;
	processProperty(arg1 : JSProperty, arg2 : Map<string, string>) : boolean;
	interestedProperties() : string[];
	interestedMethodNames() : string[];
	processCallExpression(arg1 : JSCallExpression, arg2 : JSFileCachedData) : void;
	processCallExpression(arg1 : JSCallExpression, arg2 : JSElementIndexingData) : void;
	processCallExpression(arg1 : JSCallExpression, arg2 : JSIndexContentBuilder) : void;
	shouldCreateStubForCallExpression(arg1 : ASTNode) : boolean;
	resolveContextFromProperty(arg1 : JSObjectLiteralExpression) : string;
	processJSDocComment(arg1 : JSDocComment, arg2 : JSIndexContentBuilder) : void;
	createLiteralImplicitElementProvider(arg1 : string) : JSLiteralImplicitElementProvider;
	createLiteralImplicitElementCustomProvider() : JSLiteralImplicitElementCustomProvider;
	addTypeFromResolveResult(arg1 : JSTypeEvaluator, arg2 : JSReferenceExpression, arg3 : PsiElement, arg4 : PsiElement, arg5 : boolean) : boolean;
	getVersion() : number;
	static computeTotalVersion(arg1 : number) : number;
}

export = FrameworkIndexingHandler
