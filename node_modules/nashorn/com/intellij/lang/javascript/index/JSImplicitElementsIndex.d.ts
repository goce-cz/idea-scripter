import ID = require('nashorn/com/intellij/util/indexing/ID');
import Collection = require('nashorn/java/util/Collection');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import DataIndexer = require('nashorn/com/intellij/util/indexing/DataIndexer');
import FileContent = require('nashorn/com/intellij/util/indexing/FileContent');
import KeyDescriptor = require('nashorn/com/intellij/util/io/KeyDescriptor');
import DataExternalizer = require('nashorn/com/intellij/util/io/DataExternalizer');
import FileBasedIndex = require('nashorn/com/intellij/util/indexing/FileBasedIndex');
import FileBasedIndexExtension = require('nashorn/com/intellij/util/indexing/FileBasedIndexExtension');
import Object = require('nashorn/java/lang/Object');
import JSImplicitElementImpl = require('nashorn/com/intellij/lang/javascript/psi/stubs/impl/JSImplicitElementImpl');

declare class JSImplicitElementsIndex {
	static INDEX_ID : ID<string, Collection<JSImplicitElementsIndex.JSElementProxy>>;
	static FILE_TYPES : FileType[];
	name : ID<string, Collection<JSImplicitElementsIndex.JSElementProxy>>;
	indexer : DataIndexer<string, Collection<JSImplicitElementsIndex.JSElementProxy>, FileContent>;
	keyDescriptor : KeyDescriptor<string>;
	valueExternalizer : DataExternalizer<Collection<JSImplicitElementsIndex.JSElementProxy>>;
	inputFilter : FileBasedIndex.InputFilter;
	version : number;
	constructor();
}


declare interface JSImplicitElementsIndex extends FileBasedIndexExtension<string, Collection<JSImplicitElementsIndex.JSElementProxy>> {}

declare module JSImplicitElementsIndex {
	class JSElementProxy extends Object {
		builder : JSImplicitElementImpl.Builder;
		offset : number;
		constructor(arg1 : JSImplicitElementImpl.Builder, arg2 : number);
		getBuilder() : JSImplicitElementImpl.Builder;
		getOffset() : number;
	}
}

export = JSImplicitElementsIndex
