import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import Query = require('nashorn/com/intellij/util/Query');
import Processor = require('nashorn/com/intellij/util/Processor');
import Set = require('nashorn/java/util/Set');
import JSClassInheritorsProvider = require('nashorn/com/intellij/lang/javascript/search/JSClassInheritorsProvider');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Collection = require('nashorn/java/util/Collection');
import StubIndexKey = require('nashorn/com/intellij/psi/stubs/StubIndexKey');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import Object = require('nashorn/java/lang/Object');

declare class JSClassSearch {
	constructor();
	static searchClassInheritors(arg1 : JSClass, arg2 : boolean, arg3 : GlobalSearchScope) : Query<JSClass>;
	static searchClassInheritors(arg1 : JSClass, arg2 : boolean) : Query<JSClass>;
	static getUseScope(arg1 : JSClass) : GlobalSearchScope;
	static searchInterfaceImplementations(arg1 : JSClass, arg2 : boolean, arg3 : GlobalSearchScope) : Query<JSClass>;
	static searchInterfaceImplementations(arg1 : JSClass, arg2 : boolean) : Query<JSClass>;
	processDirectInheritors(arg1 : JSClass, arg2 : Processor<JSClass>, arg3 : boolean, arg4 : Set<string>, arg5 : GlobalSearchScope) : boolean;
	static getUniqueQName(arg1 : JSClass) : string;
	getInheritors(arg1 : JSClassInheritorsProvider, arg2 : string, arg3 : Project, arg4 : GlobalSearchScope) : Collection<JSClass>;
	getIndexKey() : StubIndexKey<string, JSClass>;
	getSupers(arg1 : JSClass) : JSClass[];
}


declare interface JSClassSearch extends QueryExecutor<JSClass, JSClassSearch.SearchParameters> {}

declare module JSClassSearch {
	class SearchParameters extends Object {
		targetClass : JSClass;
		checkDeepInheritance : boolean;
		scope : GlobalSearchScope;
		constructor(arg1 : JSClass, arg2 : boolean, arg3 : GlobalSearchScope);
		getTargetClass() : JSClass;
		isCheckDeepInheritance() : boolean;
		getScope() : GlobalSearchScope;
	}
}

export = JSClassSearch
