import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import Query = require('nashorn/com/intellij/util/Query');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import QueryExecutor = require('nashorn/com/intellij/util/QueryExecutor');
import Object = require('nashorn/java/lang/Object');

declare class JSFunctionsSearch {
	constructor();
	static searchOverridingFunctions(arg1 : JSFunction, arg2 : boolean) : Query<JSFunction>;
	static searchImplementingFunctions(arg1 : JSFunction, arg2 : boolean) : Query<JSFunction>;
	makeQuery(arg1 : JSFunctionsSearch.SearchParameters, arg2 : PsiElement) : Query<JSClass>;
}


declare interface JSFunctionsSearch extends QueryExecutor<JSFunction, JSFunctionsSearch.SearchParameters> {}

declare module JSFunctionsSearch {
	class ImplementingFunctionsSearch {
	}


	interface ImplementingFunctionsSearch extends JSFunctionsSearch {}	class SearchParameters extends Object {
		baseFunction : JSFunction;
		checkDeepInheritance : boolean;
		constructor(arg1 : JSFunction, arg2 : boolean);
		getBaseFunction() : JSFunction;
		isCheckDeepInheritance() : boolean;
	}
}

export = JSFunctionsSearch
