import Collection = require('nashorn/java/util/Collection');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import CatchingConsumer = require('nashorn/com/intellij/util/CatchingConsumer');
import GulpfileStructure = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpfileStructure');
import GulpTaskFetchException = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpTaskFetchException');
import GulpfileListener = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpfileListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import List = require('nashorn/java/util/List');
import PersistentStateComponent = require('nashorn/com/intellij/openapi/components/PersistentStateComponent');
import Object = require('nashorn/java/lang/Object');

declare class GulpfileManager {
	detectionDone : boolean;
	gulpfiles : Collection<VirtualFile>;
	state : GulpfileManager.ManagerState;
	constructor(arg1 : Project);
	static getInstance(arg1 : Project) : GulpfileManager;
	isDetectionDone() : boolean;
	setDetectionDone() : void;
	fetchStructureByFile(arg1 : VirtualFile, arg2 : CatchingConsumer<GulpfileStructure, GulpTaskFetchException>) : void;
	addGulpfile(arg1 : VirtualFile) : void;
	getCachedStructure(arg1 : VirtualFile) : GulpfileStructure;
	removeGulpfile(arg1 : VirtualFile) : void;
	containsGulpfile(arg1 : VirtualFile) : boolean;
	getGulpfiles() : Collection<VirtualFile>;
	hasGulpfiles() : boolean;
	addListener(arg1 : GulpfileListener, arg2 : Disposable) : void;
	removeListener(arg1 : GulpfileListener) : void;
	fireGulpfileAdded(arg1 : VirtualFile) : void;
	fireGulpfileSelected(arg1 : VirtualFile) : void;
	fireGulpfileRemoved(arg1 : VirtualFile) : void;
	static toGulpfileState(arg1 : VirtualFile, arg2 : GulpfileStructure) : GulpfileManager.GulpfileState;
	static notNullList<E>(arg1 : List<E>) : List<E>;
}


declare interface GulpfileManager extends PersistentStateComponent<GulpfileManager.ManagerState> {}

declare module GulpfileManager {
	class GulpTaskState extends Object {
		name : string;
		dependencies : List<string>;
		constructor();
		getName() : string;
		setName(arg1 : string) : void;
		getDependencies() : List<string>;
		setDependencies(arg1 : List<string>) : void;
	}
	class GulpfileState extends Object {
		path : string;
		tasks : List<GulpfileManager.GulpTaskState>;
		constructor();
		getPath() : string;
		setPath(arg1 : string) : void;
		getTasks() : List<GulpfileManager.GulpTaskState>;
		setTasks(arg1 : List<GulpfileManager.GulpTaskState>) : void;
	}
	class ManagerState extends Object {
		gulpfileStates : List<GulpfileManager.GulpfileState>;
		detectionDone : boolean;
		constructor();
		getGulpfileStates() : List<GulpfileManager.GulpfileState>;
		setGulpfileStates(arg1 : List<GulpfileManager.GulpfileState>) : void;
		isDetectionDone() : boolean;
		setDetectionDone(arg1 : boolean) : void;
	}
}

export = GulpfileManager
