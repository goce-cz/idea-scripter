import Tree = require('nashorn/com/intellij/ui/treeStructure/Tree');
import List = require('nashorn/java/util/List');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Runnable = require('nashorn/java/lang/Runnable');
import Processor = require('nashorn/com/intellij/util/Processor');
import GulpfileStructure = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpfileStructure');
import GulpTaskFetchException = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpTaskFetchException');
import Set = require('nashorn/java/util/Set');
import TreePath = require('nashorn/javax/swing/tree/TreePath');
import GulpTaskSet = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpTaskSet');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import GulpfileListener = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpfileListener');
import TreeModel = require('nashorn/javax/swing/tree/TreeModel');
import DataProvider = require('nashorn/com/intellij/openapi/actionSystem/DataProvider');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import DumbAware = require('nashorn/com/intellij/openapi/project/DumbAware');
import OpenFileDescriptor = require('nashorn/com/intellij/openapi/fileEditor/OpenFileDescriptor');
import ColoredTreeCellRenderer = require('nashorn/com/intellij/ui/ColoredTreeCellRenderer');
import Rectangle = require('nashorn/java/awt/Rectangle');
import TreeCellHyperlink = require('nashorn/com/intellij/lang/javascript/buildTools/TreeCellHyperlink');
import Object = require('nashorn/java/lang/Object');

declare class GulpTaskTreeView {
	reloading : boolean;
	component : Tree;
	selectedNodes : List<DefaultMutableTreeNode>;
	constructor(arg1 : Project, arg2 : string);
	restoreLayout() : void;
	findNode(arg1 : string, arg2 : string) : DefaultMutableTreeNode;
	static findTaskNodeByName(arg1 : DefaultMutableTreeNode, arg2 : string) : DefaultMutableTreeNode;
	saveLayout() : void;
	selectGulpfile(arg1 : VirtualFile) : void;
	addActionCallback(arg1 : Runnable) : void;
	fireAction() : void;
	static installSpeedSearch(arg1 : Tree) : void;
	installPopupActions() : void;
	findGulpfileNode(arg1 : VirtualFile) : DefaultMutableTreeNode;
	reloadTasksForAllGulpfiles(arg1 : boolean, arg2 : boolean) : void;
	processGulpfileNodes(arg1 : Processor<DefaultMutableTreeNode>) : void;
	addGulpfile(arg1 : VirtualFile) : void;
	reloadTasksFor(arg1 : DefaultMutableTreeNode, arg2 : boolean) : void;
	static hasTaskNodes(arg1 : DefaultMutableTreeNode) : boolean;
	static getErrorInfo(arg1 : DefaultMutableTreeNode) : GulpTaskTreeView.StructureFetchErrorInfo;
	structureFetchingStarted() : void;
	structureFetchingDone() : void;
	setGulpfileChildren(arg1 : DefaultMutableTreeNode, arg2 : GulpfileStructure, arg3 : GulpTaskFetchException) : void;
	getSelectedTasks(arg1 : DefaultMutableTreeNode) : Set<string>;
	expandTreeNode(arg1 : DefaultMutableTreeNode) : void;
	isReloading() : boolean;
	getComponent() : Tree;
	getSelectedNodes() : List<DefaultMutableTreeNode>;
	static toNode(arg1 : TreePath) : DefaultMutableTreeNode;
	static toPath(arg1 : DefaultMutableTreeNode) : TreePath;
	buildTaskSetFromSelectedNodes() : GulpTaskSet;
	showError(arg1 : Project, arg2 : GulpTaskFetchException) : void;
}


declare interface GulpTaskTreeView extends Disposable {}

declare module GulpTaskTreeView {
	class MyGulpfileListener {
	}


	interface MyGulpfileListener extends GulpfileListener {}	class GulpTree {
		constructor(arg1 : TreeModel);
	}


	interface GulpTree extends Tree, DataProvider {}	class ReloadTasks {
	}


	interface ReloadTasks extends AnAction, DumbAware {}	class JumpToSourceAction {
		static JUMP_TO_SOURCE : string;
		getDescriptor(arg1 : DefaultMutableTreeNode) : OpenFileDescriptor;
	}


	interface JumpToSourceAction extends AnAction {}	class EditRunSettingsAction {
	}


	interface EditRunSettingsAction extends AnAction, DumbAware {}	class DebugAction {
	}


	interface DebugAction extends AnAction, DumbAware {}	class RunAction {
	}


	interface RunAction extends AnAction, DumbAware {}	class GulpTreeCellRenderer {
		doCustomize(arg1 : DefaultMutableTreeNode) : void;
	}


	interface GulpTreeCellRenderer extends ColoredTreeCellRenderer {}	class StructureFetchErrorInfo {
		exception : GulpTaskFetchException;
		clickHandler : Runnable;
		hyperlinkBounds : Rectangle;
		toolTipText : string;
		constructor(arg1 : Project, arg2 : GulpTaskFetchException, arg3 : GulpTaskTreeView);
		getException() : GulpTaskFetchException;
		setHyperlinkBounds(arg1 : Rectangle) : void;
		static getUserObject(arg1 : DefaultMutableTreeNode) : GulpTaskTreeView.StructureFetchErrorInfo;
	}


	interface StructureFetchErrorInfo extends TreeCellHyperlink {}	class NoTasksFound extends Object {
	}
}

export = GulpTaskTreeView
