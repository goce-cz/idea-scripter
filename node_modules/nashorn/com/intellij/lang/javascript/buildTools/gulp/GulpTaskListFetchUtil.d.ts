import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import GulpfileStructure = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpfileStructure');
import List = require('nashorn/java/util/List');
import GulpInvalidSetting = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpInvalidSetting');
import LinkedHashMap = require('nashorn/java/util/LinkedHashMap');
import BaseOSProcessHandler = require('nashorn/com/intellij/execution/process/BaseOSProcessHandler');
import ProcessOutput = require('nashorn/com/intellij/execution/process/ProcessOutput');
import GeneralCommandLine = require('nashorn/com/intellij/execution/configurations/GeneralCommandLine');
import GulpTaskListFetchFail = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpTaskListFetchFail');
import GulpTaskFetchException = require('nashorn/com/intellij/lang/javascript/buildTools/gulp/GulpTaskFetchException');
import Executor = require('nashorn/com/intellij/execution/Executor');
import RunContentDescriptor = require('nashorn/com/intellij/execution/ui/RunContentDescriptor');
import ConsoleView = require('nashorn/com/intellij/execution/ui/ConsoleView');
import ProcessHandler = require('nashorn/com/intellij/execution/process/ProcessHandler');
import RunContentManager = require('nashorn/com/intellij/execution/ui/RunContentManager');
import DefaultActionGroup = require('nashorn/com/intellij/openapi/actionSystem/DefaultActionGroup');
import JPanel = require('nashorn/javax/swing/JPanel');

declare class GulpTaskListFetchUtil extends Object {
	static listTasks(arg1 : Project, arg2 : VirtualFile) : GulpfileStructure;
	static loadNodeOptions(arg1 : Project) : string;
	static checkSettings(arg1 : string, arg2 : string) : List<GulpInvalidSetting>;
	static validateNodeInterpreter(arg1 : string) : GulpInvalidSetting;
	static validateGulpPackageDir(arg1 : string) : GulpInvalidSetting;
	static doListTasks(arg1 : string, arg2 : string, arg3 : string, arg4 : VirtualFile) : GulpfileStructure;
	static parseTasksOutput(arg1 : string) : LinkedHashMap<string, List<string>>;
	static getName(arg1 : string, arg2 : number) : string;
	static isPseudoTreeStartChar(arg1 : number) : boolean;
	static trimPrefix(arg1 : string) : string;
	static captureTasksFetchOutput(arg1 : BaseOSProcessHandler) : ProcessOutput;
	static createTasksFetchCommandLine(arg1 : string, arg2 : string, arg3 : string, arg4 : string) : GeneralCommandLine;
	static formatGulpMainFilePath(arg1 : string) : string;
	static showError(arg1 : Project, arg2 : GulpTaskListFetchFail) : void;
	static hideError(arg1 : Project, arg2 : GulpTaskFetchException) : void;
	static createDescriptor(arg1 : Project, arg2 : GulpTaskListFetchFail, arg3 : Executor) : RunContentDescriptor;
	static createDescriptor(arg1 : Project, arg2 : Executor, arg3 : ConsoleView, arg4 : ProcessHandler) : RunContentDescriptor;
	static findDescriptor(arg1 : RunContentManager, arg2 : GulpTaskListFetchFail) : RunContentDescriptor;
	static printFetchFail(arg1 : Project, arg2 : ConsoleView, arg3 : GulpTaskListFetchFail) : void;
	static createConsoleView(arg1 : Project) : ConsoleView;
	static createConsoleComponent(arg1 : ConsoleView, arg2 : DefaultActionGroup) : JPanel;
}


declare module GulpTaskListFetchUtil {
	class GulpRunContentDescriptor {
		contentReuseProhibited : boolean;
		constructor(arg1 : ConsoleView, arg2 : ProcessHandler, arg3 : JPanel);
	}


	interface GulpRunContentDescriptor extends RunContentDescriptor {}}

export = GulpTaskListFetchUtil
