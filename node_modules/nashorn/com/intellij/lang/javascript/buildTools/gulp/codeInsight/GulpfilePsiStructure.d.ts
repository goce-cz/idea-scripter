import Object = require('nashorn/java/lang/Object');
import Collection = require('nashorn/java/util/Collection');
import Map = require('nashorn/java/util/Map');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');
import JSFile = require('nashorn/com/intellij/lang/javascript/psi/JSFile');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSLiteralExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');

declare class GulpfilePsiStructure extends Object {
	tasks : Collection<string>;
	constructor(arg1 : Map<string, JSCallExpression>);
	getPsiByName(arg1 : string) : JSCallExpression;
	getTasks() : Collection<string>;
	static build(arg1 : JSFile) : GulpfilePsiStructure;
	static processRequireDirCall(arg1 : JSFile, arg2 : JSCallExpression, arg3 : Map<string, JSCallExpression>) : void;
	static processFileRequireCall(arg1 : JSFile, arg2 : JSCallExpression, arg3 : Map<string, JSCallExpression>) : void;
	static processFileRequireCall2(arg1 : JSFile, arg2 : JSCallExpression, arg3 : Map<string, JSCallExpression>) : void;
	static addTasksFromFile(arg1 : PsiManager, arg2 : VirtualFile, arg3 : Map<string, JSCallExpression>) : void;
	static getGulpTaskName(arg1 : JSCallExpression) : string;
	static isGulpTaskFunctionReference(arg1 : JSReferenceExpression) : boolean;
	static isDependency(arg1 : JSLiteralExpression) : boolean;
	static get(arg1 : JSFile) : GulpfilePsiStructure;
	static findEnclosingTask(arg1 : PsiElement, arg2 : JSFile) : Pair<string, JSCallExpression>;
}

export = GulpfilePsiStructure
