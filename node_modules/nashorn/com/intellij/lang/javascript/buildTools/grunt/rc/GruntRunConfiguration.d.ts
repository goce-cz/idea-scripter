import GruntRunSettings = require('nashorn/com/intellij/lang/javascript/buildTools/grunt/rc/GruntRunSettings');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import SettingsEditor = require('nashorn/com/intellij/openapi/options/SettingsEditor');
import RunConfiguration = require('nashorn/com/intellij/execution/configurations/RunConfiguration');
import InetSocketAddress = require('nashorn/java/net/InetSocketAddress');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import ConfigurationFactory = require('nashorn/com/intellij/execution/configurations/ConfigurationFactory');
import LocatableConfigurationBase = require('nashorn/com/intellij/execution/configurations/LocatableConfigurationBase');
import NodeDebugRunConfiguration = require('nashorn/com/intellij/javascript/nodejs/debug/NodeDebugRunConfiguration');

declare class GruntRunConfiguration {
	runSettings : GruntRunSettings;
	gruntfile : VirtualFile;
	configurationEditor : SettingsEditor<RunConfiguration>;
	debugAddress : InetSocketAddress;
	constructor(arg1 : Project, arg2 : ConfigurationFactory, arg3 : string);
	detectDefaults() : void;
	getRunSettings() : GruntRunSettings;
	setRunSettings(arg1 : GruntRunSettings) : void;
	isTemplate() : boolean;
	static getTemplateRunConfiguration(arg1 : Project) : GruntRunConfiguration;
	static getTemplateRunSettings(arg1 : Project) : GruntRunSettings;
	static setTemplateRunSettings(arg1 : Project, arg2 : GruntRunSettings) : void;
	getGruntfile() : VirtualFile;
}


declare interface GruntRunConfiguration extends LocatableConfigurationBase, NodeDebugRunConfiguration {}
export = GruntRunConfiguration
