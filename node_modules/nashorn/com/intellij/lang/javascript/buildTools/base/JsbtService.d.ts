import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import Icon = require('nashorn/javax/swing/Icon');
import ConfigurationFactory = require('nashorn/com/intellij/execution/configurations/ConfigurationFactory');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import JsbtFileManager = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtFileManager');
import JsbtToolWindowManager = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtToolWindowManager');
import JsbtTaskTreeView = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtTaskTreeView');
import List = require('nashorn/java/util/List');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import JsbtFileStructure = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtFileStructure');
import RunConfiguration = require('nashorn/com/intellij/execution/configurations/RunConfiguration');
import JsbtTaskSet = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtTaskSet');

declare class JsbtService extends Object {
	static EP_NAME : ExtensionPointName<JsbtService>;
	name : string;
	icon : Icon;
	buildfileCommonName : string;
	configurationFactory : ConfigurationFactory;
	constructor();
	getName() : string;
	getIcon() : Icon;
	getFileManager(arg1 : Project) : JsbtFileManager;
	getToolWindowManager(arg1 : Project) : JsbtToolWindowManager;
	createToolWindowManager(arg1 : Project) : JsbtToolWindowManager;
	createTaskTreeView(arg1 : Project, arg2 : string) : JsbtTaskTreeView;
	detectAllBuildfiles(arg1 : Project) : List<VirtualFile>;
	detectAllBuildfilesInContentRoots(arg1 : Project, arg2 : boolean) : List<VirtualFile>;
	getBuildfileCommonName() : string;
	isBuildfileName(arg1 : string) : boolean;
	createEmptyFileStructure(arg1 : VirtualFile) : JsbtFileStructure;
	fetchBuildfileStructure(arg1 : Project, arg2 : VirtualFile) : JsbtFileStructure;
	getConfigurationFactory() : ConfigurationFactory;
	isConfigurationMatched(arg1 : RunConfiguration, arg2 : JsbtTaskSet) : boolean;
	setupRunConfiguration(arg1 : RunConfiguration, arg2 : JsbtTaskSet) : void;
	showTaskListingSettingsDialog(arg1 : Project, arg2 : VirtualFile) : boolean;
}

export = JsbtService
