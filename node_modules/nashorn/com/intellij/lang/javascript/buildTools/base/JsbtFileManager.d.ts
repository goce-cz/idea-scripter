import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Collection = require('nashorn/java/util/Collection');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import JsbtService = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtService');
import CatchingConsumer = require('nashorn/com/intellij/util/CatchingConsumer');
import JsbtFileStructure = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtFileStructure');
import JsbtTaskFetchException = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtTaskFetchException');
import JsbtFileListener = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtFileListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');

declare class JsbtFileManager extends Object {
	project : Project;
	detectionDone : boolean;
	buildfiles : Collection<VirtualFile>;
	constructor(arg1 : Project, arg2 : JsbtService);
	getProject() : Project;
	isDetectionDone() : boolean;
	setDetectionDone() : void;
	fetchStructure(arg1 : VirtualFile, arg2 : CatchingConsumer<JsbtFileStructure, JsbtTaskFetchException>) : void;
	addBuildfile(arg1 : VirtualFile) : void;
	addBuildfileStructure(arg1 : JsbtFileStructure) : void;
	getCachedStructure(arg1 : VirtualFile) : JsbtFileStructure;
	removeBuildfile(arg1 : VirtualFile) : void;
	containsBuildfile(arg1 : VirtualFile) : boolean;
	getBuildfiles() : Collection<VirtualFile>;
	hasBuildfiles() : boolean;
	addListener(arg1 : JsbtFileListener, arg2 : Disposable) : void;
	removeListener(arg1 : JsbtFileListener) : void;
	fireBuildfileAdded(arg1 : VirtualFile) : void;
	fireBuildfileSelected(arg1 : VirtualFile) : void;
	fireBuildfileRemoved(arg1 : VirtualFile) : void;
}

export = JsbtFileManager
