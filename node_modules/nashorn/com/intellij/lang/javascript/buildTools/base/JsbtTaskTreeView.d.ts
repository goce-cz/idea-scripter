import Tree = require('nashorn/com/intellij/ui/treeStructure/Tree');
import List = require('nashorn/java/util/List');
import DefaultMutableTreeNode = require('nashorn/javax/swing/tree/DefaultMutableTreeNode');
import JsbtService = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtService');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import JsbtFileStructure = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtFileStructure');
import ColoredTreeCellRenderer = require('nashorn/com/intellij/ui/ColoredTreeCellRenderer');
import Object = require('nashorn/java/lang/Object');
import JsbtTaskSet = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtTaskSet');
import OpenFileDescriptor = require('nashorn/com/intellij/openapi/fileEditor/OpenFileDescriptor');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Runnable = require('nashorn/java/lang/Runnable');
import Processor = require('nashorn/com/intellij/util/Processor');
import JsbtTaskFetchException = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtTaskFetchException');
import JsbtTreeUiState = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtTreeUiState');
import TreeNode = require('nashorn/javax/swing/tree/TreeNode');
import TreePath = require('nashorn/javax/swing/tree/TreePath');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import JsbtFileListener = require('nashorn/com/intellij/lang/javascript/buildTools/base/JsbtFileListener');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import DumbAware = require('nashorn/com/intellij/openapi/project/DumbAware');
import Rectangle = require('nashorn/java/awt/Rectangle');
import TreeCellHyperlink = require('nashorn/com/intellij/lang/javascript/buildTools/TreeCellHyperlink');

declare class JsbtTaskTreeView {
	reloading : boolean;
	component : Tree;
	selectedNodes : List<DefaultMutableTreeNode>;
	constructor(arg1 : JsbtService, arg2 : Project, arg3 : string);
	init() : void;
	addBuildfileChildren(arg1 : DefaultMutableTreeNode, arg2 : JsbtFileStructure) : void;
	hasTaskNodes(arg1 : DefaultMutableTreeNode) : boolean;
	customizeCell(arg1 : Project, arg2 : ColoredTreeCellRenderer, arg3 : DefaultMutableTreeNode) : void;
	getPersistentId(arg1 : DefaultMutableTreeNode) : Object;
	stringifyForSpeedSearch(arg1 : DefaultMutableTreeNode) : string;
	createTaskSetFromSelectedNodes() : JsbtTaskSet;
	createJumpToSourceDescriptor(arg1 : Project, arg2 : DefaultMutableTreeNode) : OpenFileDescriptor;
	getRoot() : DefaultMutableTreeNode;
	restoreLayout() : void;
	findNode(arg1 : string, arg2 : string) : DefaultMutableTreeNode;
	static findTaskNodeByName(arg1 : DefaultMutableTreeNode, arg2 : string) : DefaultMutableTreeNode;
	saveLayout() : void;
	selectBuildfile(arg1 : VirtualFile) : void;
	addActionCallback(arg1 : Runnable) : void;
	fireAction() : void;
	installSpeedSearch(arg1 : Tree) : void;
	installPopupActions() : void;
	findBuildfileNode(arg1 : VirtualFile) : DefaultMutableTreeNode;
	reloadTasksForAllBuildfiles(arg1 : boolean, arg2 : boolean) : void;
	processBuildfileNodes(arg1 : Processor<DefaultMutableTreeNode>) : void;
	addBuildfile(arg1 : VirtualFile) : void;
	reloadTasksFor(arg1 : DefaultMutableTreeNode, arg2 : boolean) : void;
	static getErrorInfo(arg1 : DefaultMutableTreeNode) : JsbtTaskTreeView.StructureFetchErrorInfo;
	structureFetchStarted() : void;
	structureFetchDone() : void;
	setBuildfileChildren(arg1 : DefaultMutableTreeNode, arg2 : JsbtFileStructure, arg3 : JsbtTaskFetchException) : void;
	getUiState(arg1 : DefaultMutableTreeNode) : JsbtTreeUiState;
	addUiState(arg1 : JsbtTreeUiState, arg2 : TreeNode) : void;
	convertPathToIds(arg1 : TreePath) : Object[];
	restoreUiState(arg1 : JsbtTreeUiState) : void;
	findNodeByIds(arg1 : Object[]) : TreeNode;
	expandNode(arg1 : DefaultMutableTreeNode) : void;
	isReloading() : boolean;
	getComponent() : Tree;
	getSelectedNodes() : List<DefaultMutableTreeNode>;
	showError(arg1 : Project, arg2 : JsbtTaskFetchException) : void;
	getSelectedBuildfileStructure() : JsbtFileStructure;
}


declare interface JsbtTaskTreeView extends Disposable {}

declare module JsbtTaskTreeView {
	class MyJsbtFileListener {
	}


	interface MyJsbtFileListener extends JsbtFileListener {}	class JsbtTreeCellRenderer {
	}


	interface JsbtTreeCellRenderer extends ColoredTreeCellRenderer {}	class ReloadTasks {
	}


	interface ReloadTasks extends AnAction, DumbAware {}	class JumpToSourceAction {
		createDescriptor(arg1 : DefaultMutableTreeNode) : OpenFileDescriptor;
	}


	interface JumpToSourceAction extends AnAction {}	class ShowTaskListSetting {
	}


	interface ShowTaskListSetting extends AnAction, DumbAware {}	class EditRunSettingsAction {
	}


	interface EditRunSettingsAction extends AnAction, DumbAware {}	class DebugAction {
	}


	interface DebugAction extends AnAction, DumbAware {}	class RunAction {
	}


	interface RunAction extends AnAction, DumbAware {}	class StructureFetchErrorInfo {
		exception : JsbtTaskFetchException;
		clickHandler : Runnable;
		hyperlinkBounds : Rectangle;
		toolTipText : string;
		constructor(arg1 : Project, arg2 : JsbtTaskFetchException, arg3 : JsbtTaskTreeView);
		getException() : JsbtTaskFetchException;
		setHyperlinkBounds(arg1 : Rectangle) : void;
		static getUserObject(arg1 : DefaultMutableTreeNode) : JsbtTaskTreeView.StructureFetchErrorInfo;
	}


	interface StructureFetchErrorInfo extends TreeCellHyperlink {}}

export = JsbtTaskTreeView
