import List = require('nashorn/java/util/List');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PersistentStateComponent = require('nashorn/com/intellij/openapi/components/PersistentStateComponent');
import Object = require('nashorn/java/lang/Object');

declare class GruntfileManager {
	initial : boolean;
	gruntfilesAndClear : List<VirtualFile>;
	state : GruntfileManager.ManagerState;
	constructor(arg1 : Project);
	static getInstance(arg1 : Project) : GruntfileManager;
	isInitial() : boolean;
	getGruntfilesAndClear() : List<VirtualFile>;
	static notNullList<E>(arg1 : List<E>) : List<E>;
}


declare interface GruntfileManager extends PersistentStateComponent<GruntfileManager.ManagerState> {}

declare module GruntfileManager {
	class GruntMultiTaskState extends Object {
		name : string;
		targets : List<string>;
		constructor();
		getName() : string;
		setName(arg1 : string) : void;
		getTargets() : List<string>;
		setTargets(arg1 : List<string>) : void;
	}
	class GruntfileState extends Object {
		path : string;
		aliasTasks : List<string>;
		multiTasks : List<GruntfileManager.GruntMultiTaskState>;
		constructor();
		getPath() : string;
		setPath(arg1 : string) : void;
		getAliasTasks() : List<string>;
		setAliasTasks(arg1 : List<string>) : void;
		getMultiTasks() : List<GruntfileManager.GruntMultiTaskState>;
		setMultiTasks(arg1 : List<GruntfileManager.GruntMultiTaskState>) : void;
	}
	class ManagerState extends Object {
		gruntfileStates : List<GruntfileManager.GruntfileState>;
		initial : boolean;
		constructor();
		getGruntfileStates() : List<GruntfileManager.GruntfileState>;
		setGruntfileStates(arg1 : List<GruntfileManager.GruntfileState>) : void;
		isInitial() : boolean;
		setInitial(arg1 : boolean) : void;
	}
}

export = GruntfileManager
