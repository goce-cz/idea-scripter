import ResolveResult = require('nashorn/com/intellij/psi/ResolveResult');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Map = require('nashorn/java/util/Map');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import TypeScriptTypeParameter = require('nashorn/com/intellij/lang/javascript/psi/ecma6/TypeScriptTypeParameter');
import JSTypeDeclaration = require('nashorn/com/intellij/lang/javascript/psi/ecma6/JSTypeDeclaration');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import List = require('nashorn/java/util/List');
import JSParameterList = require('nashorn/com/intellij/lang/javascript/psi/JSParameterList');
import JSParameterTypeDecorator = require('nashorn/com/intellij/lang/javascript/psi/JSParameterTypeDecorator');
import TypeScriptQualifiedItemProcessor = require('nashorn/com/intellij/lang/javascript/ecmascript6/TypeScriptQualifiedItemProcessor');
import ResolveResultSink = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResolveResultSink');

declare class TypeScriptResolveProcessor {
	resultsAsResolveResults : ResolveResult[];
	constructor(arg1 : string, arg2 : PsiFile, arg3 : PsiElement);
	static addGenericArgumentsFromCall(arg1 : PsiElement, arg2 : PsiElement, arg3 : Map<string, JSType>) : Map<string, JSType>;
	static addExplicitGenericArguments(arg1 : Map<string, JSType>, arg2 : TypeScriptTypeParameter[], arg3 : JSTypeDeclaration[]) : void;
	static checkParameterTypes(arg1 : Ref<PsiElement>, arg2 : List<JSType>, arg3 : Map<string, JSType>, arg4 : boolean) : string;
	static checkParameterTypes(arg1 : List<JSType>, arg2 : Map<string, JSType>, arg3 : JSParameterList, arg4 : List<JSParameterTypeDecorator>) : string;
	static checkArgumentsForTypeElement(arg1 : Ref<PsiElement>, arg2 : List<JSType>, arg3 : Map<string, JSType>, arg4 : boolean, arg5 : JSTypeDeclaration) : string;
}


declare interface TypeScriptResolveProcessor extends TypeScriptQualifiedItemProcessor<ResolveResultSink> {}
export = TypeScriptResolveProcessor
