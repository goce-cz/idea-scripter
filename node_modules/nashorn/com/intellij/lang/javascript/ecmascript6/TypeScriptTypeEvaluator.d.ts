import BaseJSSymbolProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/BaseJSSymbolProcessor');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import TypeScriptImportStatement = require('nashorn/com/intellij/lang/javascript/psi/ecma6/TypeScriptImportStatement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSTypeEvaluator = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSTypeEvaluator');

declare class TypeScriptTypeEvaluator {
	constructor(arg1 : BaseJSSymbolProcessor.EvaluateContext, arg2 : BaseJSSymbolProcessor.TypeProcessor, arg3 : boolean);
	addTypeFromImportStatement(arg1 : JSReferenceExpression, arg2 : TypeScriptImportStatement) : void;
	processAllIdenticallyNamedElements(arg1 : JSReferenceExpression, arg2 : PsiElement) : void;
}


declare interface TypeScriptTypeEvaluator extends JSTypeEvaluator {}
export = TypeScriptTypeEvaluator
