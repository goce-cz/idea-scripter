import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import ProblemHighlightType = require('nashorn/com/intellij/codeInspection/ProblemHighlightType');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import IntentionAction = require('nashorn/com/intellij/codeInsight/intention/IntentionAction');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSRecordTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSRecordTypeImpl');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import TypedJSAnnotatingVisitor = require('nashorn/com/intellij/lang/javascript/validation/TypedJSAnnotatingVisitor');

declare class TypeScriptAnnotatingVisitor {
	constructor();
	skipAnnotator() : boolean;
	shouldSkipProblem(arg1 : PsiElement, arg2 : string, arg3 : ProblemHighlightType, arg4 : string, arg5 : LocalQuickFix[], arg6 : IntentionAction[]) : boolean;
	static isAnnotateExternal(arg1 : Project) : boolean;
	checkOverloads(arg1 : JSClass, arg2 : JSRecordTypeImpl, arg3 : JSClass, arg4 : boolean) : void;
	checkTypeScriptFunction(arg1 : JSFunction) : void;
	static isConstEnumModifier(arg1 : JSAttributeList, arg2 : IElementType) : boolean;
}


declare interface TypeScriptAnnotatingVisitor extends TypedJSAnnotatingVisitor {}
export = TypeScriptAnnotatingVisitor
