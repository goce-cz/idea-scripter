import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import Class = require('nashorn/java/lang/Class');
import InitialPatternCondition = require('nashorn/com/intellij/patterns/InitialPatternCondition');
import PsiElementPattern = require('nashorn/com/intellij/patterns/PsiElementPattern');

declare class JSElementPattern<T extends JSElement, Self extends JSElementPattern<T, Self>> {
	constructor(arg1 : Class<T>);
	constructor(arg1 : InitialPatternCondition<T>);
}


declare interface JSElementPattern<T extends JSElement, Self extends JSElementPattern<T, Self>> extends PsiElementPattern<T, Self> {}

declare module JSElementPattern {
	class Capture<T extends JSElement> {
		constructor(arg1 : Class<T>);
		constructor(arg1 : InitialPatternCondition<T>);
	}


	interface Capture<T extends JSElement> extends JSElementPattern<T, JSElementPattern.Capture<T>> {}}

export = JSElementPattern
