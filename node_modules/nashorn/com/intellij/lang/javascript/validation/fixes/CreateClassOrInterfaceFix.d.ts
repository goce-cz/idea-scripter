import Collection = require('nashorn/java/util/Collection');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSArgumentList = require('nashorn/com/intellij/lang/javascript/psi/JSArgumentList');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import CreateClassParameters = require('nashorn/com/intellij/lang/javascript/validation/fixes/CreateClassParameters');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import List = require('nashorn/java/util/List');
import FileTemplate = require('nashorn/com/intellij/ide/fileTemplates/FileTemplate');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Map = require('nashorn/java/util/Map');
import Object = require('nashorn/java/lang/Object');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Icon = require('nashorn/javax/swing/Icon');
import FixAndIntentionAction = require('nashorn/com/intellij/lang/javascript/validation/fixes/FixAndIntentionAction');
import CreateClassIntentionWithCallback = require('nashorn/com/intellij/lang/javascript/validation/fixes/CreateClassIntentionWithCallback');

declare class CreateClassOrInterfaceFix {
	static ACTION_SCRIPT_CLASS_TEMPLATE_NAME : string;
	static ACTION_SCRIPT_CLASS_WITH_SUPERS_TEMPLATE_NAME : string;
	static ACTION_SCRIPT_INTERFACE_TEMPLATE_NAME : string;
	static ACCESS_MODIFIER_PROPERTY : string;
	static SUPERCLASS : string;
	static SUPER_INTERFACES : string;
	static ACTIONSCRIPT_TEMPLATES_EXTENSIONS : Collection<string>;
	name : string;
	constructor(arg1 : JSReferenceExpression, arg2 : boolean, arg3 : JSArgumentList, arg4 : JSType);
	constructor(arg1 : string, arg2 : string, arg3 : PsiElement);
	constructor(arg1 : PsiDirectory);
	static getBaseClassifier(arg1 : JSType) : JSClass;
	static getBaseClassifier(arg1 : string, arg2 : PsiElement) : JSClass;
	execute() : void;
	static calcClass(arg1 : string, arg2 : PsiElement) : JSClass;
	getTemplateForTest(arg1 : boolean) : string;
	postProcess(arg1 : JSClass, arg2 : string) : void;
	createDialog(arg1 : string) : CreateClassParameters;
	static createAndShow(arg1 : string, arg2 : PsiElement, arg3 : string, arg4 : boolean, arg5 : string, arg6 : JSClass, arg7 : string, arg8 : Computable<List<FileTemplate>>) : CreateClassParameters;
	computeApplicableTemplates() : List<FileTemplate>;
	getTopLevelContextFile() : PsiFile;
	fixConstructor(arg1 : JSClass, arg2 : JSArgumentList, arg3 : PsiElement) : boolean;
	static createClass(arg1 : string, arg2 : string, arg3 : string, arg4 : JSClass, arg5 : Collection<string>, arg6 : PsiDirectory, arg7 : string, arg8 : boolean, arg9 : Map<string, Object>, arg10 : Consumer<JSClass>) : JSClass;
	static fillAttributes(arg1 : JSClass, arg2 : Collection<string>) : Map<string, Object>;
	static findOrCreateDirectory(arg1 : string, arg2 : PsiElement) : PsiDirectory;
	static getClassText(arg1 : string, arg2 : string, arg3 : boolean, arg4 : string, arg5 : Project) : string;
	static createProperties(arg1 : string, arg2 : string, arg3 : string) : Map<string, Object>;
	static getTemplateName(arg1 : boolean, arg2 : boolean, arg3 : string, arg4 : string, arg5 : Project) : string;
	static createClass(arg1 : string, arg2 : string, arg3 : PsiDirectory, arg4 : string) : PsiElement;
	static createClass(arg1 : string, arg2 : string, arg3 : PsiDirectory, arg4 : boolean) : void;
	static doCreateClass(arg1 : string, arg2 : string, arg3 : PsiDirectory, arg4 : string, arg5 : Map<string, Object>) : PsiElement;
	static getTemplateIcon(arg1 : FileTemplate) : Icon;
	static getTemplateShortName(arg1 : string) : string;
	static getApplicableTemplates(arg1 : Collection<string>, arg2 : Project) : List<FileTemplate>;
}


declare interface CreateClassOrInterfaceFix extends FixAndIntentionAction, CreateClassIntentionWithCallback {}
export = CreateClassOrInterfaceFix
