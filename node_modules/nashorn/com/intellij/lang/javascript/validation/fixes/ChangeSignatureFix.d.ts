import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSParameterList = require('nashorn/com/intellij/lang/javascript/psi/JSParameterList');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import List = require('nashorn/java/util/List');
import JSParameterInfo = require('nashorn/com/intellij/lang/javascript/refactoring/changeSignature/JSParameterInfo');
import JSChangeSignatureDialog = require('nashorn/com/intellij/lang/javascript/refactoring/changeSignature/JSChangeSignatureDialog');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSChangeSignatureProcessor = require('nashorn/com/intellij/lang/javascript/refactoring/changeSignature/JSChangeSignatureProcessor');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import Collection = require('nashorn/java/util/Collection');
import IntentionAction = require('nashorn/com/intellij/codeInsight/intention/IntentionAction');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');

declare class ChangeSignatureFix {
	text : string;
	familyName : string;
	name : string;
	constructor(arg1 : JSFunction, arg2 : JSParameterList, arg3 : boolean);
	constructor(arg1 : JSFunction, arg2 : Computable.NotNullCachedComputable<JSParameterList>);
	constructor(arg1 : PsiElement, arg2 : JSExpression[]);
	constructor(arg1 : JSFunction, arg2 : List<JSParameterInfo>);
	invoke(arg1 : PsiElement) : void;
	createDialog(arg1 : PsiElement, arg2 : List<JSParameterInfo>) : JSChangeSignatureDialog;
	needToShowDialog() : boolean;
	runSilently(arg1 : List<JSParameterInfo>) : void;
	createProcessor(arg1 : List<JSParameterInfo>, arg2 : JSAttributeList) : JSChangeSignatureProcessor;
	getOverriddenReturnType() : string;
	setOverriddenReturnType(arg1 : string) : void;
	setFilter(arg1 : JSChangeSignatureProcessor) : void;
	handleCall(arg1 : JSFunction, arg2 : JSExpression[], arg3 : boolean) : Pair<boolean, List<JSParameterInfo>>;
	static trimPrefix(arg1 : JSExpression, arg2 : string) : string;
	static trim(arg1 : string, arg2 : string) : string;
	static isAssignableType(arg1 : string, arg2 : string, arg3 : JSExpression) : boolean;
	static adjustParameterName(arg1 : JSExpression, arg2 : Collection<string>, arg3 : Computable<JSFunction>, arg4 : string) : string;
	handleDeclaration() : List<JSParameterInfo>;
}


declare interface ChangeSignatureFix extends IntentionAction, LocalQuickFix {}
export = ChangeSignatureFix
