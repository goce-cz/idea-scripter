import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import Template = require('nashorn/com/intellij/codeInsight/template/Template');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import FixAndIntentionAction = require('nashorn/com/intellij/lang/javascript/validation/fixes/FixAndIntentionAction');
import Expression = require('nashorn/com/intellij/codeInsight/template/Expression');
import Object = require('nashorn/java/lang/Object');

declare class BaseCreateFix {
	constructor();
	doApplyFix(arg1 : Project, arg2 : PsiElement, arg3 : PsiFile, arg4 : Editor, arg5 : PsiElement) : void;
	beforeStartTemplateAction(arg1 : JSReferenceExpression, arg2 : Editor) : JSReferenceExpression;
	static isStatic(arg1 : PsiElement, arg2 : boolean, arg3 : JSExpression) : boolean;
	calculateOffset(arg1 : PsiFile, arg2 : PsiFile, arg3 : BaseCreateFix.InsertPlaceInfo) : number;
	produceDeclarationOnClassLevel(arg1 : PsiElement) : boolean;
	calculateAnchors(arg1 : PsiElement) : Pair<JSReferenceExpression, PsiElement>;
	static navigate(arg1 : Project, arg2 : Editor, arg3 : number, arg4 : VirtualFile) : void;
	findInsertionAnchorForClass(arg1 : JSClass) : PsiElement;
	static doNotContainsNewline(arg1 : PsiElement) : boolean;
	isIntroducingVariable() : boolean;
	static findInsertionPlaceBackward(arg1 : PsiElement) : PsiElement;
	static toSkipElement(arg1 : PsiElement) : boolean;
	static getEditor(arg1 : Project, arg2 : PsiFile) : Editor;
	buildTemplate(arg1 : Template, arg2 : JSReferenceExpression, arg3 : boolean, arg4 : PsiFile, arg5 : PsiElement) : void;
	static getType(arg1 : JSExpression, arg2 : PsiFile) : PsiElement;
	static addAccessModifier(arg1 : Template, arg2 : JSReferenceExpression, arg3 : PsiFile, arg4 : boolean, arg5 : JSClass) : JSExpression;
	addCompletionVar(arg1 : Template) : void;
	addSemicolonSegment(arg1 : Template, arg2 : PsiFile) : void;
	static addTypeVariable(arg1 : string, arg2 : Template, arg3 : string, arg4 : PsiElement) : void;
	static addTypeVar(arg1 : Template, arg2 : string, arg3 : PsiElement, arg4 : string) : void;
	guessTypeAndAddTemplateVariable(arg1 : Template, arg2 : JSExpression, arg3 : PsiFile, arg4 : boolean) : void;
	static guessTypeForExpression(arg1 : JSExpression, arg2 : PsiFile, arg3 : boolean) : string;
	static addNumberTypeForPrefixSuffixIncrement(arg1 : PsiFile, arg2 : string, arg3 : IElementType) : string;
	static findClass(arg1 : PsiElement) : JSClass;
}


declare interface BaseCreateFix extends FixAndIntentionAction {}

declare module BaseCreateFix {
	class MyExpression {
		constructor(arg1 : string);
	}


	interface MyExpression extends Expression {}	class InsertPlaceInfo extends Object {
	}
}

export = BaseCreateFix
