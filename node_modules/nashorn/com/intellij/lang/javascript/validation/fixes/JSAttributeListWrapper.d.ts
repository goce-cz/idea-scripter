import Object = require('nashorn/java/lang/Object');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import List = require('nashorn/java/util/List');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');

declare class JSAttributeListWrapper extends Object {
	conditionalCompileVariableReference : string;
	namespaceValue : string;
	constructor(arg1 : JSAttributeList);
	getConditionalCompileVariableReference() : string;
	overrideAccessType(arg1 : JSAttributeList.AccessType) : void;
	overrideNamespace(arg1 : string) : void;
	removeAccessModifier() : void;
	getAccessType() : JSAttributeList.AccessType;
	getNamespace() : string;
	hasModifier(arg1 : JSAttributeList.ModifierType) : boolean;
	overrideModifiers(arg1 : boolean, arg2 : JSAttributeList.ModifierType[]) : void;
	overrideModifier(arg1 : JSAttributeList.ModifierType, arg2 : boolean) : void;
	getNamespaceValue() : string;
	addAttribute(arg1 : string, arg2 : string, arg3 : string) : void;
	getAttributes() : List<JSAttributeListWrapper.Attribute>;
	computeText() : string;
	removeOriginalAttributes() : void;
	applyTo(arg1 : JSAttributeListOwner) : void;
	static appendWithSpace(arg1 : StringBuilder, arg2 : string) : void;
}


declare module JSAttributeListWrapper {
	class Attribute extends Object {
		name : string;
		nameValuePairs : List<Pair<string, string>>;
		simpleValue : string;
		constructor(arg1 : string, arg2 : List<Pair<string, string>>);
		getSimpleValue() : string;
	}
}

export = JSAttributeListWrapper
