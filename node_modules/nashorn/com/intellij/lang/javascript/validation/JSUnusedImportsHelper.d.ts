import Object = require('nashorn/java/lang/Object');
import JSImportStatement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSImportStatement');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Collection = require('nashorn/java/util/Collection');
import MultiMap = require('nashorn/com/intellij/util/containers/MultiMap');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import Map = require('nashorn/java/util/Map');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSFile = require('nashorn/com/intellij/lang/javascript/psi/JSFile');

declare class JSUnusedImportsHelper extends Object {
	registerUnused(arg1 : JSImportStatement) : void;
	process(arg1 : JSReferenceExpression) : void;
	static getUsedImportStatement(arg1 : JSReferenceExpression, arg2 : string) : JSImportStatement;
	registerUsedImportsFromResolveResults(arg1 : JSReferenceExpression, arg2 : string) : void;
	static sameContainingFile(arg1 : PsiFile, arg2 : PsiFile) : boolean;
	registerUsed(arg1 : JSImportStatement, arg2 : JSReferenceExpression) : void;
	filter(arg1 : Collection<JSImportStatement>) : Collection<JSImportStatement>;
	filter(arg1 : MultiMap<JSImportStatement, JSReferenceExpression>) : MultiMap<JSImportStatement, JSReferenceExpression>;
	isAcceptable(arg1 : JSImportStatement) : boolean;
	static getUnusedImports(arg1 : PsiFile) : JSUnusedImportsHelper.Results;
	static getContainingFile(arg1 : PsiFile) : PsiFile;
	getUnusedImports() : JSUnusedImportsHelper.Results;
	static addImport(arg1 : MultiMap<Computable<JSElement>, string>, arg2 : Computable<JSElement>, arg3 : string) : void;
	static collectElements(arg1 : XmlTag, arg2 : PsiFile, arg3 : Map<XmlTag, Collection<PsiElement>>, arg4 : Collection<JSFile>) : void;
}


declare module JSUnusedImportsHelper {
	class Results extends Object {
		unusedImports : Collection<JSImportStatement>;
		importsByHolder : MultiMap<Computable<JSElement>, string>;
		fqnsToReplaceWithShortName : Collection<JSReferenceExpression>;
		usedImports : MultiMap<JSImportStatement, JSReferenceExpression>;
		allImports : Collection<JSImportStatement>;
		merge(arg1 : JSUnusedImportsHelper.Results) : void;
		getAllImports() : Collection<JSImportStatement>;
	}
}

export = JSUnusedImportsHelper
