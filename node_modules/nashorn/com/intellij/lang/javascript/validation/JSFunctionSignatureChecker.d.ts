import JSTypeChecker = require('nashorn/com/intellij/lang/javascript/validation/JSTypeChecker');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSParameterItem = require('nashorn/com/intellij/lang/javascript/psi/JSParameterItem');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSElementVisitor = require('nashorn/com/intellij/lang/javascript/psi/JSElementVisitor');

declare class JSFunctionSignatureChecker {
	constructor(arg1 : JSTypeChecker<any>);
	registerProblem(arg1 : JSCallExpression, arg2 : string, arg3 : LocalQuickFix[]) : void;
	checkFunction(arg1 : JSCallExpression, arg2 : PsiElement) : void;
	reportProblemIfNotExpectedCountOfParameters(arg1 : JSCallExpression, arg2 : number, arg3 : string) : void;
	isCallableType(arg1 : boolean, arg2 : JSType) : boolean;
	canBeCalledWithArguments(arg1 : JSType, arg2 : JSCallExpression) : void;
	checkCallParameters(arg1 : JSCallExpression, arg2 : PsiElement) : void;
	obtainNextMatchedParams(arg1 : number[], arg2 : JSParameterItem[]) : boolean;
	static tryMakeInitialMatch(arg1 : number[], arg2 : number, arg3 : number, arg4 : JSParameterItem[]) : boolean;
	addGenericTypesFromCall(arg1 : JSType, arg2 : JSCallExpression, arg3 : PsiElement) : JSType;
	checkCallArgumentType(arg1 : JSParameterItem, arg2 : JSExpression, arg3 : JSCallExpression, arg4 : PsiElement) : void;
}


declare interface JSFunctionSignatureChecker extends JSElementVisitor {}
export = JSFunctionSignatureChecker
