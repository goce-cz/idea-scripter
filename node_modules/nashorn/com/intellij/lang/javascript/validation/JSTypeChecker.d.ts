import Object = require('nashorn/java/lang/Object');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import ProblemHighlightType = require('nashorn/com/intellij/codeInspection/ProblemHighlightType');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Collection = require('nashorn/java/util/Collection');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import JSReturnStatement = require('nashorn/com/intellij/lang/javascript/psi/JSReturnStatement');

declare class JSTypeChecker<T> extends Object {
	constructor();
	registerProblem(arg1 : PsiElement, arg2 : string, arg3 : ProblemHighlightType, arg4 : LocalQuickFix[]) : T;
	checkExpressionIsAssignableToType(arg1 : JSExpression, arg2 : string, arg3 : string, arg4 : PsiElement) : Pair<T, string>;
	checkExpressionIsAssignableToType(arg1 : JSExpression, arg2 : JSType, arg3 : string, arg4 : PsiElement) : Pair<T, string>;
	static getFixes(arg1 : JSExpression, arg2 : JSType, arg3 : PsiElement, arg4 : PsiFile, arg5 : JSType, arg6 : string, arg7 : string, arg8 : boolean) : Collection<LocalQuickFix>;
	checkExpressionIsAssignableToVariable(arg1 : JSVariable, arg2 : JSExpression, arg3 : PsiFile, arg4 : string, arg5 : boolean) : void;
	checkTypesInReturnStatement(arg1 : JSReturnStatement) : void;
}

export = JSTypeChecker
