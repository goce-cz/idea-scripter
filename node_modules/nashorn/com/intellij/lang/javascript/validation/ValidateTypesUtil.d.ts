import Object = require('nashorn/java/lang/Object');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSTypeChecker = require('nashorn/com/intellij/lang/javascript/validation/JSTypeChecker');
import JSConditionalExpression = require('nashorn/com/intellij/lang/javascript/psi/JSConditionalExpression');
import JSAssignmentExpression = require('nashorn/com/intellij/lang/javascript/psi/JSAssignmentExpression');
import JSBinaryExpression = require('nashorn/com/intellij/lang/javascript/psi/JSBinaryExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSAnnotatorProblemReporter = require('nashorn/com/intellij/lang/javascript/validation/JSAnnotatorProblemReporter');
import JSArgumentList = require('nashorn/com/intellij/lang/javascript/psi/JSArgumentList');
import List = require('nashorn/java/util/List');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');
import JSParameterItem = require('nashorn/com/intellij/lang/javascript/psi/JSParameterItem');
import Trinity = require('nashorn/com/intellij/openapi/util/Trinity');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import Function = require('nashorn/com/intellij/util/Function');
import JSParameter = require('nashorn/com/intellij/lang/javascript/psi/JSParameter');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import ProblemHighlightType = require('nashorn/com/intellij/codeInspection/ProblemHighlightType');
import JSForInStatement = require('nashorn/com/intellij/lang/javascript/psi/JSForInStatement');

declare class ValidateTypesUtil extends Object {
	static FLASH_UTILS_DICTIONARY : string;
	constructor();
	static checkNumericTypesInUnaryOperation(arg1 : IElementType, arg2 : JSExpression, arg3 : JSTypeChecker<any>) : void;
	static checkTypesInConditionalExpr(arg1 : JSConditionalExpression, arg2 : JSTypeChecker<any>) : void;
	static isInStringConcatenation(arg1 : JSConditionalExpression) : boolean;
	static checkTypesInAssignment(arg1 : JSAssignmentExpression, arg2 : JSTypeChecker<any>) : void;
	static checkAssignableTypesInBinaryExpression(arg1 : JSBinaryExpression, arg2 : JSTypeChecker<any>, arg3 : string) : void;
	static checkTypeIs(arg1 : PsiElement, arg2 : PsiElement, arg3 : JSAnnotatorProblemReporter, arg4 : string, arg5 : string) : void;
	static checkTypeIs(arg1 : JSExpression, arg2 : PsiElement, arg3 : JSAnnotatorProblemReporter, arg4 : string, arg5 : string) : void;
	static getArgumentTypes(arg1 : JSArgumentList) : List<JSType>;
	static getPlaceForSignatureProblem(arg1 : JSCallExpression, arg2 : JSArgumentList) : PsiElement;
	static getMinMaxParameters(arg1 : JSParameterItem[]) : Trinity<number, number, boolean>;
	static jsInsertCastFix(arg1 : string) : LocalQuickFix;
	static changeSignatureFix(arg1 : JSFunction, arg2 : Function<JSParameter, string>, arg3 : string) : LocalQuickFix;
	static changeTypeFix(arg1 : JSNamedElement, arg2 : string, arg3 : string) : LocalQuickFix;
	static tryCreateInheritanceFix(arg1 : string, arg2 : string, arg3 : PsiElement) : LocalQuickFix;
	static createInheritanceFix(arg1 : JSClass, arg2 : PsiElement) : LocalQuickFix;
	static checkIfNullIsAssignedToNumeric(arg1 : JSExpression, arg2 : string, arg3 : string) : boolean;
	static isParameterTypeValidityCheck(arg1 : JSType, arg2 : JSType) : boolean;
	static getHighlightTypeForTypeOrSignatureProblem(arg1 : PsiElement) : ProblemHighlightType;
	static checkTypesInForIn(arg1 : JSForInStatement, arg2 : JSAnnotatorProblemReporter) : void;
	static isValidArrayIndexType(arg1 : string) : boolean;
	static removeASTNodeFix(arg1 : PsiElement, arg2 : string) : LocalQuickFix;
	static checkTypesInBinaryExpression(arg1 : JSBinaryExpression, arg2 : JSAnnotatorProblemReporter) : void;
	static hasRequiredParameters(arg1 : JSFunction) : boolean;
	static emptyReturnIsAcceptable(arg1 : JSFunction, arg2 : JSType) : boolean;
}

export = ValidateTypesUtil
