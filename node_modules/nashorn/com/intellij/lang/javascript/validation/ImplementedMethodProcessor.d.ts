import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import Collection = require('nashorn/java/util/Collection');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSResolveUtil = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSResolveUtil');

declare class ImplementedMethodProcessor {
	constructor(arg1 : JSClass);
	static collectFunctionsToImplement(arg1 : JSClass) : Collection<JSFunction>;
	addImplementedFunction(arg1 : JSFunction, arg2 : JSFunction) : void;
	addNonimplementedFunction(arg1 : JSFunction) : void;
}


declare interface ImplementedMethodProcessor extends JSResolveUtil.CollectMethodsToImplementProcessor {}
export = ImplementedMethodProcessor
