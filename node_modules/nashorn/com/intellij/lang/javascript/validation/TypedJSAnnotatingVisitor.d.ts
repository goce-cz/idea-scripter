import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSAnnotatingVisitor = require('nashorn/com/intellij/lang/javascript/validation/JSAnnotatingVisitor');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');

declare class TypedJSAnnotatingVisitor {
	constructor();
	static checkCompatibleSignature(arg1 : JSFunction, arg2 : JSFunction) : JSAnnotatingVisitor.SignatureMatchResult;
	static findElementForAccessModifierError(arg1 : JSFunction, arg2 : JSAttributeList) : ASTNode;
	getResolveResultType(arg1 : JSExpression, arg2 : PsiElement) : JSType;
	checkExtendsRef(arg1 : JSClass, arg2 : JSClass, arg3 : JSReferenceExpression) : void;
	checkImplementsRef(arg1 : JSClass, arg2 : JSReferenceExpression) : void;
	checkImplementedMethods(arg1 : JSClass, arg2 : JSAnnotatingVisitor.ErrorReportingClient) : void;
	checkOverriddenMethods(arg1 : JSClass) : void;
}


declare interface TypedJSAnnotatingVisitor extends JSAnnotatingVisitor {}
export = TypedJSAnnotatingVisitor
