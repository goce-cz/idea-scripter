import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiScopeProcessor = require('nashorn/com/intellij/psi/scope/PsiScopeProcessor');
import PsiNamedElement = require('nashorn/com/intellij/psi/PsiNamedElement');
import Processor = require('nashorn/com/intellij/util/Processor');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import ResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResolveProcessor');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');

declare class JSResolveHelper extends Object {
	static EP_NAME : ExtensionPointName<JSResolveHelper>;
	findClassByQName(arg1 : string, arg2 : Project, arg3 : string, arg4 : GlobalSearchScope) : PsiElement;
	importClass(arg1 : PsiScopeProcessor, arg2 : PsiNamedElement) : boolean;
	processPackage(arg1 : string, arg2 : string, arg3 : Processor<VirtualFile>, arg4 : GlobalSearchScope, arg5 : Project) : boolean;
	isAdequatePlaceForImport(arg1 : PsiElement) : boolean;
	resolveTypeNameUsingImports(arg1 : ResolveProcessor, arg2 : PsiNamedElement) : boolean;
	getResolveResultTimestamp(arg1 : PsiElement) : number;
	bindReferenceToElement(arg1 : JSReferenceExpression, arg2 : string, arg3 : string, arg4 : boolean, arg5 : PsiNamedElement) : JSReferenceExpression;
	isStrictTypeContext(arg1 : PsiElement) : boolean;
}

export = JSResolveHelper
