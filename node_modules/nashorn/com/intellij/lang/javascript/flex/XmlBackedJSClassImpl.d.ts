import JSReferenceList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSReferenceList');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSLanguageDialect = require('nashorn/com/intellij/lang/javascript/JSLanguageDialect');
import JSFile = require('nashorn/com/intellij/lang/javascript/psi/JSFile');
import Processor = require('nashorn/com/intellij/util/Processor');
import PsiScopeProcessor = require('nashorn/com/intellij/psi/scope/PsiScopeProcessor');
import XmlElement = require('nashorn/com/intellij/psi/xml/XmlElement');
import ResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResolveProcessor');
import XmlFile = require('nashorn/com/intellij/psi/xml/XmlFile');
import Collection = require('nashorn/java/util/Collection');
import XmlBackedJSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/XmlBackedJSClass');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import JSClassBase = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/impl/JSClassBase');
import JSClassStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSClassStub');
import XmlBackedJSClassProvider = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/XmlBackedJSClassProvider');
import PsiElementProcessor = require('nashorn/com/intellij/psi/search/PsiElementProcessor');
import MultiHostRegistrar = require('nashorn/com/intellij/lang/injection/MultiHostRegistrar');

declare class XmlBackedJSClassImpl {
	static COMPONENT_TAG_NAME : string;
	static CLASS_NAME_ATTRIBUTE_NAME : string;
	static SCRIPT_TAG_NAME : string;
	static SOURCE_ATTR : string;
	extendsList : JSReferenceList;
	textOffset : number;
	implementsList : JSReferenceList;
	navigationElement : PsiElement;
	name : string;
	qualifiedName : string;
	interface : boolean;
	deprecated : boolean;
	attributeList : JSAttributeList;
	valid : boolean;
	parent : XmlTag;
	constructor(arg1 : XmlTag);
	getSuperClassName() : string;
	createReferenceList(arg1 : string) : JSReferenceList;
	createDummyClass(arg1 : string) : JSClass;
	getClassLanguage() : JSLanguageDialect;
	static isImplementsAttribute(arg1 : JSFile) : boolean;
	addToImplementsList(arg1 : string) : void;
	removeFromImplementsList(arg1 : string) : void;
	processInjectedFiles(arg1 : Processor<JSFile>) : boolean;
	processImplicitMembers(arg1 : PsiScopeProcessor) : void;
	canResolveTo(arg1 : XmlElement) : boolean;
	doImportFromScripts(arg1 : PsiScopeProcessor, arg2 : PsiElement) : boolean;
	resolveViaImplicitImports(arg1 : ResolveProcessor) : boolean;
	processComponentNames(arg1 : ResolveProcessor) : boolean;
	static getClasses(arg1 : XmlFile) : Collection<JSClass>;
	static getContainingComponent(arg1 : XmlElement) : XmlBackedJSClass;
	createScriptTag() : JSFile;
	findFirstScriptTag() : JSFile;
	createOrGetFirstScriptTag() : JSFile;
	static isComponentTag(arg1 : XmlTag) : boolean;
	static isInsideTag(arg1 : XmlTag, arg2 : Condition<XmlTag>) : boolean;
	static syncInjectedFiles(arg1 : XmlFile) : void;
}


declare interface XmlBackedJSClassImpl extends JSClassBase<JSClassStub>, XmlBackedJSClass {}

declare module XmlBackedJSClassImpl {
	class InjectedScriptsVisitor {
		constructor(arg1 : XmlTag, arg2 : XmlBackedJSClassProvider, arg3 : boolean, arg4 : boolean, arg5 : XmlBackedJSClass.InjectedFileVisitor, arg6 : Processor<XmlTag>, arg7 : boolean);
		constructor(arg1 : XmlTag, arg2 : XmlBackedJSClassProvider, arg3 : boolean, arg4 : boolean, arg5 : XmlBackedJSClass.InjectedFileVisitor, arg6 : boolean);
		go() : void;
		goFromChildren() : void;
	}


	interface InjectedScriptsVisitor extends PsiElementProcessor {}

	module InjectedScriptsVisitor {
		class MyRegistrar {
			constructor(arg1 : XmlTag, arg2 : XmlBackedJSClass.InjectedFileVisitor);
		}


		interface MyRegistrar extends MultiHostRegistrar {}		class InjectingProcessor {
			constructor(arg1 : XmlBackedJSClass.InjectedFileVisitor, arg2 : XmlTag, arg3 : boolean);
		}


		interface InjectingProcessor extends Processor<XmlTag> {}	}
}

export = XmlBackedJSClassImpl
