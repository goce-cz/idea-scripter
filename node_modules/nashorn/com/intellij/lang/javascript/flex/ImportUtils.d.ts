import Object = require('nashorn/java/lang/Object');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Collection = require('nashorn/java/util/Collection');
import FormatFixer = require('nashorn/com/intellij/lang/javascript/refactoring/FormatFixer');
import JSFile = require('nashorn/com/intellij/lang/javascript/psi/JSFile');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import Class = require('nashorn/java/lang/Class');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import JSImportStatement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSImportStatement');
import ResolveResult = require('nashorn/com/intellij/psi/ResolveResult');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import XmlBackedJSClassImpl = require('nashorn/com/intellij/lang/javascript/flex/XmlBackedJSClassImpl');

declare class ImportUtils extends Object {
	constructor();
	static findLBrace(arg1 : JSElement) : PsiElement;
	static specifyInsertionPlace(arg1 : PsiElement, arg2 : string) : PsiElement;
	static doImport(arg1 : PsiElement, arg2 : string, arg3 : boolean) : void;
	static insertImportStatements(arg1 : PsiElement, arg2 : Collection<string>) : FormatFixer;
	static getAnonymousEventHandlerBody(arg1 : JSFile) : JSElement;
	static compareImports(arg1 : string, arg2 : string) : number;
	static getImportInsertionPlace(arg1 : JSElement) : Pair<PsiElement, boolean>;
	static hasCDATA(arg1 : PsiElement) : boolean;
	static hasCDATAEnd(arg1 : PsiElement) : boolean;
	static getImportHolder(arg1 : PsiElement, arg2 : boolean, arg3 : Class<JSElement>[]) : Computable<JSElement>;
	static getNonStrictParentOfTypeOrConditionalCompilationBlock<T extends PsiElement>(arg1 : PsiElement, arg2 : boolean, arg3 : Class<T>[]) : T;
	static isConditionalCompilationBlock(arg1 : PsiElement) : boolean;
	static createImportBlock(arg1 : PsiFile, arg2 : Collection<string>) : string;
	static findEarlyImport(arg1 : PsiElement) : JSImportStatement;
	static importAndShortenReference(arg1 : string, arg2 : PsiElement, arg3 : boolean, arg4 : boolean) : Pair<string, PsiElement>;
	static insertUseNamespaceIfNeeded(arg1 : string, arg2 : PsiElement) : void;
	static ensureUseNamespacePresentIfNeeded(arg1 : ResolveResult, arg2 : string, arg3 : string, arg4 : PsiElement) : void;
	static needsImport(arg1 : JSQualifiedNamedElement, arg2 : string) : boolean;
	static needsImport(arg1 : string, arg2 : JSQualifiedNamedElement) : boolean;
}


declare module ImportUtils {
	class XmlBackedClassImportHolder {
		constructor(arg1 : XmlBackedJSClassImpl);
	}


	interface XmlBackedClassImportHolder extends Computable<JSElement> {}	class Wrapper {
		constructor(arg1 : JSElement);
	}


	interface Wrapper extends Computable<JSElement> {}}

export = ImportUtils
