import Object = require('nashorn/java/lang/Object');
import Map = require('nashorn/java/util/Map');
import JSImportStatement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSImportStatement');
import PsiNamedElement = require('nashorn/com/intellij/psi/PsiNamedElement');
import JSImportedElementResolveResult = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSImportedElementResolveResult');
import ResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResolveProcessor');
import PsiScopeProcessor = require('nashorn/com/intellij/psi/scope/PsiScopeProcessor');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');

declare class ScopedImportSet extends Object {
	constructor();
	static appendToMap(arg1 : Map<string, Object>, arg2 : JSImportStatement) : void;
	static doAppendToMap(arg1 : Map<string, Object>, arg2 : Object) : void;
	static resolveImportedClass(arg1 : string, arg2 : PsiNamedElement, arg3 : ScopedImportSet.ImportProcessor.ImportInfo) : JSImportedElementResolveResult;
	tryResolveImportedClass(arg1 : PsiNamedElement, arg2 : ResolveProcessor) : boolean;
	static dispatchResult(arg1 : JSImportedElementResolveResult, arg2 : PsiScopeProcessor) : boolean;
	process<T>(arg1 : string, arg2 : string, arg3 : PsiNamedElement, arg4 : ScopedImportSet.ImportProcessor<T>) : T;
	static tryEntry<T>(arg1 : Object, arg2 : string, arg3 : PsiNamedElement, arg4 : ScopedImportSet.ImportProcessor<T>, arg5 : boolean) : T;
	static dispatch<T>(arg1 : string, arg2 : Object, arg3 : boolean, arg4 : PsiNamedElement, arg5 : ScopedImportSet.ImportProcessor<T>) : T;
	getUpToDateMap(arg1 : PsiElement) : Map<string, Object>;
}


declare module ScopedImportSet {
	class ImportProcessor<T> extends Object {
		process(arg1 : string, arg2 : ScopedImportSet.ImportProcessor.ImportInfo, arg3 : PsiNamedElement) : T;
	}


	module ImportProcessor {
		class ImportInfo extends Object {
			importString : string;
			starImport : boolean;
			source : Object;
			constructor(arg1 : string, arg2 : boolean, arg3 : Object);
			getQNameToSearch(arg1 : string) : string;
		}
	}
}

export = ScopedImportSet
