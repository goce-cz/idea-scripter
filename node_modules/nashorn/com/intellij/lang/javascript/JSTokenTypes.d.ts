import Object = require('nashorn/java/lang/Object');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import PsiBuilder = require('nashorn/com/intellij/lang/PsiBuilder');
import Lexer = require('nashorn/com/intellij/lexer/Lexer');
import ILazyParseableElementType = require('nashorn/com/intellij/psi/tree/ILazyParseableElementType');

declare class JSTokenTypes extends Object {
	static IDENTIFIER : IElementType;
	static ANY_IDENTIFIER : IElementType;
	static WHITE_SPACE : IElementType;
	static PARSER_WHITE_SPACE_TOKENS : TokenSet;
	static BAD_CHARACTER : IElementType;
	static END_OF_LINE_COMMENT : IElementType;
	static C_STYLE_COMMENT : IElementType;
	static XML_STYLE_COMMENT : IElementType;
	static XML_STYLE_COMMENT_START : IElementType;
	static XML_JS_TEXT : IElementType;
	static XML_JS_TEXT_SET : TokenSet;
	static DOC_COMMENT : IElementType;
	static DOC_COMMENT_TOKEN : IElementType;
	static BREAK_KEYWORD : IElementType;
	static CASE_KEYWORD : IElementType;
	static CATCH_KEYWORD : IElementType;
	static CONST_KEYWORD : IElementType;
	static CONTINUE_KEYWORD : IElementType;
	static DEBUGGER_KEYWORD : IElementType;
	static DELETE_KEYWORD : IElementType;
	static DEFAULT_KEYWORD : IElementType;
	static DO_KEYWORD : IElementType;
	static ELSE_KEYWORD : IElementType;
	static FINALLY_KEYWORD : IElementType;
	static FOR_KEYWORD : IElementType;
	static FUNCTION_KEYWORD : IElementType;
	static IF_KEYWORD : IElementType;
	static IN_KEYWORD : IElementType;
	static INSTANCEOF_KEYWORD : IElementType;
	static OF_KEYWORD : IElementType;
	static NEW_KEYWORD : IElementType;
	static RETURN_KEYWORD : IElementType;
	static SWITCH_KEYWORD : IElementType;
	static THIS_KEYWORD : IElementType;
	static THROW_KEYWORD : IElementType;
	static TRY_KEYWORD : IElementType;
	static TYPEOF_KEYWORD : IElementType;
	static VAR_KEYWORD : IElementType;
	static VOID_KEYWORD : IElementType;
	static WHILE_KEYWORD : IElementType;
	static WITH_KEYWORD : IElementType;
	static PACKAGE_KEYWORD : IElementType;
	static IMPORT_KEYWORD : IElementType;
	static CLASS_KEYWORD : IElementType;
	static INTERFACE_KEYWORD : IElementType;
	static PUBLIC_KEYWORD : IElementType;
	static STATIC_KEYWORD : IElementType;
	static INTERNAL_KEYWORD : IElementType;
	static FINAL_KEYWORD : IElementType;
	static DYNAMIC_KEYWORD : IElementType;
	static NATIVE_KEYWORD : IElementType;
	static VIRTUAL_KEYWORD : IElementType;
	static REQUIRES_KEYWORD : IElementType;
	static MIXIN_KEYWORD : IElementType;
	static AWAIT_KEYWORD : IElementType;
	static ENUM_KEYWORD : IElementType;
	static TYPE_KEYWORD : IElementType;
	static EXPORT_KEYWORD : IElementType;
	static MODULE_KEYWORD : IElementType;
	static DECLARE_KEYWORD : IElementType;
	static REQUIRE_KEYWORD : IElementType;
	static NUMBER_KEYWORD : IElementType;
	static STRING_KEYWORD : IElementType;
	static BOOLEAN_KEYWORD : IElementType;
	static ANY_KEYWORD : IElementType;
	static FROM_KEYWORD : IElementType;
	static NAMESPACE_KEYWORD : IElementType;
	static EXTENDS_KEYWORD : IElementType;
	static IMPLEMENTS_KEYWORD : IElementType;
	static USE_KEYWORD : IElementType;
	static PRIVATE_KEYWORD : IElementType;
	static PROTECTED_KEYWORD : IElementType;
	static OVERRIDE_KEYWORD : IElementType;
	static SUPER_KEYWORD : IElementType;
	static INCLUDE_KEYWORD : IElementType;
	static IS_KEYWORD : IElementType;
	static AS_KEYWORD : IElementType;
	static GET_KEYWORD : IElementType;
	static SET_KEYWORD : IElementType;
	static EACH_KEYWORD : IElementType;
	static INT_KEYWORD : IElementType;
	static UINT_KEYWORD : IElementType;
	static ASYNC_KEYWORD : IElementType;
	static XML_START_TAG_START : IElementType;
	static XML_START_TAG_LIST : IElementType;
	static XML_END_TAG_LIST : IElementType;
	static XML_END_TAG_START : IElementType;
	static XML_EMPTY_TAG_END : IElementType;
	static XML_NAME : IElementType;
	static XML_TAG_NAME : IElementType;
	static XML_ATTR_EQUAL : IElementType;
	static XML_TAG_END : IElementType;
	static XML_ATTR_VALUE : IElementType;
	static XML_ATTR_VALUE_START : IElementType;
	static XML_ATTR_VALUE_END : IElementType;
	static XML_JS_SCRIPT : IElementType;
	static XML_TAG_CONTENT : IElementType;
	static XML_ENTITY_REF : IElementType;
	static XML_TAG_WHITE_SPACE : IElementType;
	static XML_TOKENS : TokenSet;
	static JSP_TEXT : IElementType;
	static YIELD_KEYWORD : IElementType;
	static LET_KEYWORD : IElementType;
	static TRUE_KEYWORD : IElementType;
	static FALSE_KEYWORD : IElementType;
	static NULL_KEYWORD : IElementType;
	static UNDEFINED_KEYWORD : IElementType;
	static NUMERIC_LITERAL : IElementType;
	static STRING_LITERAL : IElementType;
	static STRING_LITERAL_PART : IElementType;
	static SINGLE_QUOTE_STRING_LITERAL : IElementType;
	static REGEXP_LITERAL : IElementType;
	static STRING_TEMPLATE_PART : IElementType;
	static LBRACE : IElementType;
	static RBRACE : IElementType;
	static LPAR : IElementType;
	static RPAR : IElementType;
	static LBRACKET : IElementType;
	static RBRACKET : IElementType;
	static DOT : IElementType;
	static SEMICOLON : IElementType;
	static COMMA : IElementType;
	static LT : IElementType;
	static GT : IElementType;
	static LE : IElementType;
	static GE : IElementType;
	static EQEQ : IElementType;
	static NE : IElementType;
	static EQEQEQ : IElementType;
	static NEQEQ : IElementType;
	static PLUS : IElementType;
	static MINUS : IElementType;
	static MULT : IElementType;
	static PERC : IElementType;
	static PLUSPLUS : IElementType;
	static MINUSMINUS : IElementType;
	static LTLT : IElementType;
	static GTGT : IElementType;
	static GTGTGT : IElementType;
	static AND : IElementType;
	static OR : IElementType;
	static XOR : IElementType;
	static EXCL : IElementType;
	static TILDE : IElementType;
	static ANDAND : IElementType;
	static AND_AND_EQ : IElementType;
	static OROR : IElementType;
	static OR_OR_EQ : IElementType;
	static QUEST : IElementType;
	static COLON : IElementType;
	static EQ : IElementType;
	static PLUSEQ : IElementType;
	static MINUSEQ : IElementType;
	static MULTEQ : IElementType;
	static PERCEQ : IElementType;
	static LTLTEQ : IElementType;
	static GTGTEQ : IElementType;
	static GTGTGTEQ : IElementType;
	static ANDEQ : IElementType;
	static OREQ : IElementType;
	static XOREQ : IElementType;
	static DIV : IElementType;
	static DIVEQ : IElementType;
	static BACKQUOTE : IElementType;
	static EXEC_STRING_BOUND : IElementType;
	static DOLLAR : IElementType;
	static EQGT : IElementType;
	static MINUSGT : IElementType;
	static COLON_COLON : IElementType;
	static GWT_FIELD_OR_METHOD : IElementType;
	static DOT_DOT : IElementType;
	static DOT_DOT_DOT : IElementType;
	static GENERIC_SIGNATURE_START : IElementType;
	static AT : IElementType;
	static CDATA_START : IElementType;
	static CDATA_END : IElementType;
	static JSDOC_TAG_DATA : IElementType;
	static JSDOC_MARKUP : IElementType;
	static HEREDOC_BOUND : IElementType;
	static HEREDOC_BODY : IElementType;
	static EXEC_BODY : IElementType;
	static OPERATIONS : TokenSet;
	static ASSOC_OPERATIONS : TokenSet;
	static EQUALITY_OPERATIONS : TokenSet;
	static RELATIONAL_OPERATIONS : TokenSet;
	static ADDITIVE_OPERATIONS : TokenSet;
	static MULTIPLICATIVE_OPERATIONS : TokenSet;
	static SHIFT_OPERATIONS : TokenSet;
	static UNARY_OPERATIONS : TokenSet;
	static COMMENTS : TokenSet;
	static COMMENTS_AND_WHITESPACES : TokenSet;
	static MODIFIERS : TokenSet;
	static ACCESS_MODIFIERS : TokenSet;
	static VAR_MODIFIERS : TokenSet;
	static STRING_LITERALS : TokenSet;
	static BOOLEAN_LITERALS : TokenSet;
	static LITERALS : TokenSet;
	static ARROWS : TokenSet;
	static IDENTIFIER_TOKENS_SET : TokenSet;
	static KEYWORDS : TokenSet;
}


declare module JSTokenTypes {
	class JSChameleonElementType {
		constructor(arg1 : string);
		doParse(arg1 : PsiBuilder) : void;
		createLexer() : Lexer;
	}


	interface JSChameleonElementType extends ILazyParseableElementType {}}

export = JSTokenTypes
