import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import List = require('nashorn/java/util/List');
import FoldingDescriptor = require('nashorn/com/intellij/lang/folding/FoldingDescriptor');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import JSObjectLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSObjectLiteralExpression');
import JSCodeFoldingSettings = require('nashorn/com/intellij/lang/javascript/folding/JSCodeFoldingSettings');
import CustomFoldingBuilder = require('nashorn/com/intellij/lang/folding/CustomFoldingBuilder');

declare class JavaScriptFoldingBuilderBase {
	constructor();
	appendDescriptors(arg1 : ASTNode, arg2 : Document, arg3 : List<FoldingDescriptor>) : ASTNode;
	isModulePattern(arg1 : PsiElement) : boolean;
	static addDescriptorForRange(arg1 : ASTNode, arg2 : List<FoldingDescriptor>, arg3 : TextRange) : void;
	static addDescriptorForNode(arg1 : ASTNode, arg2 : List<FoldingDescriptor>) : void;
	static collapseConsequentNodesOfSpecifiedType(arg1 : ASTNode, arg2 : List<FoldingDescriptor>, arg3 : IElementType) : ASTNode;
	getBlockPlaceholderText(arg1 : ASTNode) : string;
	getObjectPlaceholderText(arg1 : JSObjectLiteralExpression) : string;
	getCodeFoldingSettings() : JSCodeFoldingSettings;
}


declare interface JavaScriptFoldingBuilderBase extends CustomFoldingBuilder {}
export = JavaScriptFoldingBuilderBase
