import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import StructureViewTreeElement = require('nashorn/com/intellij/ide/structureView/StructureViewTreeElement');
import ItemPresentation = require('nashorn/com/intellij/navigation/ItemPresentation');
import List = require('nashorn/java/util/List');
import Set = require('nashorn/java/util/Set');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import THashSet = require('nashorn/gnu/trove/THashSet');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import Queue = require('nashorn/java/util/Queue');
import MultiMap = require('nashorn/com/intellij/util/containers/MultiMap');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import Collection = require('nashorn/java/util/Collection');
import JSImplicitElementImpl = require('nashorn/com/intellij/lang/javascript/psi/stubs/impl/JSImplicitElementImpl');

declare class JSStructureViewElement {
	value : PsiElement;
	children : StructureViewTreeElement[];
	presentation : ItemPresentation;
	inherited : boolean;
	upToDateElement : PsiElement;
	constructor(arg1 : PsiElement, arg2 : boolean);
	constructor(arg1 : List<PsiElement>, arg2 : boolean, arg3 : Set<string>);
	getRealElement() : PsiElement;
	getAllElements() : List<PsiElement>;
	getSuperElements(arg1 : PsiElement, arg2 : JSQualifiedName, arg3 : Set<string>) : List<StructureViewTreeElement>;
	static isEcma(arg1 : PsiElement) : boolean;
	getProvidedNamespaceByElement(arg1 : PsiElement) : JSQualifiedName;
	createStructureViewElement(arg1 : PsiElement, arg2 : Set<string>) : JSStructureViewElement;
	createStructureViewElement(arg1 : List<PsiElement>, arg2 : Set<string>) : JSStructureViewElement;
	static getPsiElement(arg1 : StructureViewTreeElement) : PsiElement;
	collectMyElements(arg1 : THashSet<string>, arg2 : JSQualifiedName, arg3 : PsiFile) : List<StructureViewTreeElement>;
	doCollectMyElements(arg1 : THashSet<string>, arg2 : JSQualifiedName, arg3 : PsiFile, arg4 : PsiElement, arg5 : List<PsiElement>, arg6 : boolean) : List<StructureViewTreeElement>;
	static shouldAddNamespaceFromDefinition(arg1 : PsiElement, arg2 : JSQualifiedName, arg3 : Set<string>) : boolean;
	static addImplicitChildren(arg1 : Queue<PsiElement>, arg2 : PsiElement) : void;
	addElement(arg1 : MultiMap<string, PsiElement>, arg2 : PsiElement, arg3 : string) : void;
	addElementsFromNamespace(arg1 : MultiMap<string, PsiElement>, arg2 : GlobalSearchScope, arg3 : string) : void;
	getName(arg1 : PsiElement, arg2 : MultiMap<string, PsiElement>) : string;
	hasStructureElements(arg1 : PsiElement) : boolean;
	static gatherChildElements(arg1 : PsiElement, arg2 : Set<PsiFile>) : Collection<PsiElement>;
	convertPsiToElements(arg1 : MultiMap<string, PsiElement>, arg2 : Set<string>) : List<StructureViewTreeElement>;
	static isVisible(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	isInherited() : boolean;
	setInherited() : JSStructureViewElement;
	getUpToDateElement() : PsiElement;
	isElementInMyNamespace(arg1 : PsiElement, arg2 : JSQualifiedName, arg3 : boolean, arg4 : boolean) : boolean;
	static getParentSkippingWindow(arg1 : JSQualifiedName) : JSQualifiedName;
	static findNsInParents(arg1 : JSQualifiedName, arg2 : JSQualifiedName) : JSQualifiedName;
	static skipVariable(arg1 : PsiElement) : boolean;
	static isScopeChangingElement(arg1 : PsiElement) : boolean;
}


declare interface JSStructureViewElement extends StructureViewTreeElement {}

declare module JSStructureViewElement {
	class JSStructureImplicitNamespace {
		constructor(arg1 : JSQualifiedName, arg2 : PsiElement);
	}


	interface JSStructureImplicitNamespace extends JSImplicitElementImpl {}}

export = JSStructureViewElement
