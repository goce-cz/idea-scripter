import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import HierarchyNodeDescriptor = require('nashorn/com/intellij/ide/hierarchy/HierarchyNodeDescriptor');
import List = require('nashorn/java/util/List');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import HierarchyTreeStructure = require('nashorn/com/intellij/ide/hierarchy/HierarchyTreeStructure');

declare class JSMethodHierarchyTreeStructure {
	baseMethod : JSFunction;
	constructor(arg1 : Project, arg2 : JSFunction);
	buildHierarchyElement(arg1 : Project, arg2 : JSFunction) : HierarchyNodeDescriptor;
	static getSuperClassesToShow(arg1 : JSFunction) : List<JSClass>;
	getBaseMethod() : JSFunction;
	shouldHideClass(arg1 : JSClass) : boolean;
	hasBaseClassMethod(arg1 : JSClass) : boolean;
	isSuperClassForBaseClass(arg1 : JSClass) : boolean;
}


declare interface JSMethodHierarchyTreeStructure extends HierarchyTreeStructure {}
export = JSMethodHierarchyTreeStructure
