import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import HierarchyNodeDescriptor = require('nashorn/com/intellij/ide/hierarchy/HierarchyNodeDescriptor');
import JSMethodHierarchyTreeStructure = require('nashorn/com/intellij/lang/javascript/hierarchy/method/JSMethodHierarchyTreeStructure');
import Icon = require('nashorn/javax/swing/Icon');

declare class JSMethodHierarchyNodeDescriptor {
	jSClass : JSClass;
	targetElement : PsiElement;
	valid : boolean;
	constructor(arg1 : Project, arg2 : HierarchyNodeDescriptor, arg3 : JSClass, arg4 : boolean, arg5 : JSMethodHierarchyTreeStructure);
	setTreeStructure(arg1 : JSMethodHierarchyTreeStructure) : void;
	getJSClass() : JSClass;
	getTargetElement() : PsiElement;
	calculateState(arg1 : JSClass) : Icon;
}


declare interface JSMethodHierarchyNodeDescriptor extends HierarchyNodeDescriptor {}
export = JSMethodHierarchyNodeDescriptor
