import Key = require('nashorn/com/intellij/openapi/util/Key');
import TailType = require('nashorn/com/intellij/codeInsight/TailType');
import InsertHandler = require('nashorn/com/intellij/codeInsight/completion/InsertHandler');
import LookupElement = require('nashorn/com/intellij/codeInsight/lookup/LookupElement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import Trinity = require('nashorn/com/intellij/openapi/util/Trinity');
import LookupItem = require('nashorn/com/intellij/codeInsight/lookup/LookupItem');
import CompletionData = require('nashorn/com/intellij/codeInsight/completion/CompletionData');
import InsertionContext = require('nashorn/com/intellij/codeInsight/completion/InsertionContext');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import TemplateInsertHandler = require('nashorn/com/intellij/codeInsight/completion/TemplateInsertHandler');
import ContextGetter = require('nashorn/com/intellij/psi/filters/ContextGetter');

declare class JavaScriptCompletionData {
	static FORCED_TAIL_TYPE : Key<TailType>;
	static TYPE_LITERAL_VALUES : string[];
	static FUNCTION_INSERT_HANDLER : InsertHandler<LookupElement>;
	constructor();
	static getTopLevelVariants(arg1 : PsiElement) : Object[];
	static appendKeywords(arg1 : List<Trinity<string, number, boolean>>, arg2 : number, arg3 : boolean, arg4 : string[]) : void;
	static createKeywordItems(arg1 : List<Trinity<string, number, boolean>>, arg2 : JavaScriptCompletionData.JSInsertHandler) : LookupItem[];
}


declare interface JavaScriptCompletionData extends CompletionData {}

declare module JavaScriptCompletionData {
	class JSInsertHandler<T extends LookupElement> {
		constructor();
		static needParensByContext(arg1 : PsiElement) : boolean;
		static weAreNearCall(arg1 : PsiElement, arg2 : string) : boolean;
		static insertBraces(arg1 : InsertionContext) : void;
		static updateContextExpr(arg1 : JSReferenceExpression) : JSReferenceExpression;
	}


	interface JSInsertHandler<T extends LookupElement> extends TemplateInsertHandler<T> {}	class JSTopLevelVariantsGetter {
	}


	interface JSTopLevelVariantsGetter extends ContextGetter {}	class JSDogVariantsGetter {
	}


	interface JSDogVariantsGetter extends ContextGetter {}}

export = JavaScriptCompletionData
