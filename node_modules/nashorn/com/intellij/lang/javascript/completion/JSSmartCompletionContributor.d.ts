import Object = require('nashorn/java/lang/Object');
import LanguageExtension = require('nashorn/com/intellij/lang/LanguageExtension');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import List = require('nashorn/java/util/List');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import ResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResolveProcessor');
import SinkResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/SinkResolveProcessor');

declare class JSSmartCompletionContributor extends Object {
	static EP_NAME : LanguageExtension<JSSmartCompletionContributor>;
	constructor();
	getSmartCompletionVariants(arg1 : PsiElement) : List<Object>;
	static addAllJSClassInheritors(arg1 : List<Object>, arg2 : string, arg3 : PsiElement) : void;
	findClassType(arg1 : PsiElement) : JSType;
	addVariantsForUnqualifiedReference(arg1 : JSReferenceExpression) : List<Object>;
	needToQualify(arg1 : number, arg2 : number) : boolean;
	static processStaticsOf(arg1 : JSClass, arg2 : ResolveProcessor, arg3 : JSClass) : void;
	processClasses(arg1 : PsiElement, arg2 : SinkResolveProcessor<any>) : void;
}

export = JSSmartCompletionContributor
