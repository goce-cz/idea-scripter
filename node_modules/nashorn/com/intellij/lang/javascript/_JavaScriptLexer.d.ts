import DialectOptionHolder = require('nashorn/com/intellij/lang/javascript/DialectOptionHolder');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import CharSequence = require('nashorn/java/lang/CharSequence');
import FlexLexer = require('nashorn/com/intellij/lexer/FlexLexer');

declare class _JavaScriptLexer {
	static MAY_BE_GENERIC_SIGNATURE : number;
	static STRING_TEMPLATE_DOLLAR : number;
	static AFTER_DOT : number;
	static TAG : number;
	static HEREDOC : number;
	static XML_JS_SCRIPT : number;
	static DIV_OR_GT : number;
	static STRING_TEMPLATE : number;
	static TAG_CONTENT : number;
	static DOUBLE_QUOTED_LITERAL : number;
	static TAG_ATTR_DQ : number;
	static TAG_END : number;
	static CDATA : number;
	static TAG_ATTR_SQ : number;
	static COMMENT : number;
	static EXEC_STRING : number;
	static SHEBANG : number;
	static GENERIC_SIGNATURE : number;
	static LAST_STATE : number;
	static GWT_FIELD_OR_METHOD : number;
	static YYINITIAL : number;
	static TAG_ATTRIBUTES : number;
	static NON_EXPRESSION_PAR : number;
	static INITIAL_INSIDE_CONDITION : number;
	nestedBlocksCount : number;
	tokenStart : number;
	tokenEnd : number;
	constructor(arg1 : boolean, arg2 : DialectOptionHolder);
	static zzUnpackAction() : number[];
	static zzUnpackAction(arg1 : string, arg2 : number, arg3 : number[]) : number;
	static zzUnpackRowMap() : number[];
	static zzUnpackRowMap(arg1 : string, arg2 : number, arg3 : number[]) : number;
	static zzUnpackTrans() : number[];
	static zzUnpackTrans(arg1 : string, arg2 : number, arg3 : number[]) : number;
	static zzUnpackAttribute() : number[];
	static zzUnpackAttribute(arg1 : string, arg2 : number, arg3 : number[]) : number;
	getNestedBlocksCount() : number;
	setNestedBlocksCount(arg1 : number) : void;
	keywordIf(arg1 : boolean, arg2 : IElementType) : IElementType;
	specialWordIf(arg1 : boolean, arg2 : IElementType) : IElementType;
	beginInitial() : void;
	splitIfHasGenerics(arg1 : IElementType, arg2 : number) : IElementType;
	beginXmlJsScript(arg1 : number) : void;
	saveHeredocIdentifier(arg1 : CharSequence) : void;
	heredocIdentifierMatches(arg1 : CharSequence) : boolean;
	lexTagComment(arg1 : IElementType, arg2 : IElementType) : IElementType;
	static zzUnpackCMap(arg1 : string) : string[];
	zzRefill() : boolean;
	yytext() : CharSequence;
	yycharat(arg1 : number) : string;
	yylength() : number;
	zzScanError(arg1 : number) : void;
	yypushback(arg1 : number) : void;
}


declare interface _JavaScriptLexer extends FlexLexer {}
export = _JavaScriptLexer
