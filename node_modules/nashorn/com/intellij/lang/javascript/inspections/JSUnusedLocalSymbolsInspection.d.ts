import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Map = require('nashorn/java/util/Map');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import ProblemsHolder = require('nashorn/com/intellij/codeInspection/ProblemsHolder');
import JSNamedElementKind = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSNamedElementKind');
import LocalInspectionToolSession = require('nashorn/com/intellij/codeInspection/LocalInspectionToolSession');
import ConcurrentMap = require('nashorn/java/util/concurrent/ConcurrentMap');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import JSInspection = require('nashorn/com/intellij/lang/javascript/inspections/JSInspection');
import Processor = require('nashorn/com/intellij/util/Processor');
import WordOccurrence = require('nashorn/com/intellij/lang/cacheBuilder/WordOccurrence');

declare class JSUnusedLocalSymbolsInspection {
	myIgnoreUnusedFunctionParameters : boolean;
	myIgnoreUnusedCatchParameters : boolean;
	static SHORT_NAME : string;
	displayName : string;
	constructor();
	static isSupportedFunction(arg1 : JSFunction) : boolean;
	processDeclarationHost(arg1 : PsiElement, arg2 : Map<JSNamedElement, boolean>, arg3 : ProblemsHolder) : void;
	static unusedMessage(arg1 : JSNamedElementKind) : string;
	handleLocalDeclaration(arg1 : JSNamedElement, arg2 : LocalInspectionToolSession, arg3 : ProblemsHolder) : void;
	static isLocallyDefined(arg1 : JSNamedElement) : boolean;
	static checkIfLocallyDefined(arg1 : JSNamedElement, arg2 : PsiElement) : boolean;
	isLocallyDefined(arg1 : JSNamedElement, arg2 : PsiElement) : boolean;
	addUnusedElementIfNotUsedBefore(arg1 : JSNamedElement, arg2 : ConcurrentMap<JSNamedElement, boolean>) : void;
	static getScopeNode(arg1 : JSNamedElement) : JSElement;
	static getUnusedDeclarationsMap(arg1 : PsiElement, arg2 : LocalInspectionToolSession, arg3 : ProblemsHolder) : ConcurrentMap<JSNamedElement, boolean>;
}


declare interface JSUnusedLocalSymbolsInspection extends JSInspection {}

declare module JSUnusedLocalSymbolsInspection {
	class LocalLiteralOccurrenceChecker {
		constructor(arg1 : PsiElement);
		isUsedInLiterals(arg1 : string) : boolean;
	}


	interface LocalLiteralOccurrenceChecker extends Processor<WordOccurrence> {}}

export = JSUnusedLocalSymbolsInspection
