import Collection = require('nashorn/java/util/Collection');
import JSInspection = require('nashorn/com/intellij/lang/javascript/inspections/JSInspection');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import ProblemsHolder = require('nashorn/com/intellij/codeInspection/ProblemsHolder');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSElementVisitor = require('nashorn/com/intellij/lang/javascript/psi/JSElementVisitor');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSRecursiveElementVisitor = require('nashorn/com/intellij/lang/javascript/psi/JSRecursiveElementVisitor');

declare class JSMismatchedCollectionQueryUpdateInspectionBase {
	queries : string;
	updates : string;
	displayName : string;
	constructor();
	static parseString(arg1 : string, arg2 : Collection<string>) : void;
	static formatString(arg1 : Collection<string>) : string;
}


declare interface JSMismatchedCollectionQueryUpdateInspectionBase extends JSInspection {}

declare module JSMismatchedCollectionQueryUpdateInspectionBase {
	class CollectionQueryCalledVisitor {
		queryCalled : boolean;
		constructor(arg1 : JSVariable);
		isQueryCalled() : boolean;
	}


	interface CollectionQueryCalledVisitor extends JSMismatchedCollectionQueryUpdateInspectionBase.Visitor {}	class CollectionUpdateCalledVisitor {
		updateCalled : boolean;
		constructor(arg1 : JSVariable);
		isUpdateCalled() : boolean;
	}


	interface CollectionUpdateCalledVisitor extends JSMismatchedCollectionQueryUpdateInspectionBase.Visitor {}	class MismatchedCollectionQueryUpdateVisitor {
		constructor(arg1 : ProblemsHolder);
		registerError(arg1 : JSVariable, arg2 : boolean) : void;
		process(arg1 : JSVariable, arg2 : JSElement) : void;
		collectionContentsAreQueried(arg1 : JSVariable, arg2 : JSElement) : boolean;
		collectionContentsAreUpdated(arg1 : JSVariable, arg2 : JSElement) : boolean;
		isEmptyInitializer(arg1 : JSExpression) : boolean;
		checkVariable(arg1 : JSVariable, arg2 : JSElement) : boolean;
		collectionQueryCalled(arg1 : JSVariable, arg2 : JSElement) : boolean;
		collectionUpdateCalled(arg1 : JSVariable, arg2 : JSElement) : boolean;
	}


	interface MismatchedCollectionQueryUpdateVisitor extends JSElementVisitor {}	class Visitor {
		constructor(arg1 : JSVariable);
		static checkMethodName(arg1 : JSReferenceExpression, arg2 : Collection<string>) : boolean;
		checkReference(arg1 : PsiElement) : boolean;
	}


	interface Visitor extends JSRecursiveElementVisitor {}}

export = JSMismatchedCollectionQueryUpdateInspectionBase
