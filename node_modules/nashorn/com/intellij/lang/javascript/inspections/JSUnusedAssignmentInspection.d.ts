import HighlightDisplayLevel = require('nashorn/com/intellij/codeHighlighting/HighlightDisplayLevel');
import JSInspection = require('nashorn/com/intellij/lang/javascript/inspections/JSInspection');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSControlFlowProcessor = require('nashorn/com/intellij/lang/javascript/psi/controlflow/JSControlFlowProcessor');
import Object = require('nashorn/java/lang/Object');

declare class JSUnusedAssignmentInspection {
	static SHORT_NAME : string;
	displayName : string;
	defaultLevel : HighlightDisplayLevel;
	shortName : string;
	constructor();
}


declare interface JSUnusedAssignmentInspection extends JSInspection {}

declare module JSUnusedAssignmentInspection {
	class SimpleControlFlowProcessor {
		static isStrictlyReadInConditional(arg1 : JSExpression) : boolean;
		static isReadInConditional(arg1 : JSExpression) : boolean;
		static isConditionOfBlock(arg1 : JSExpression, arg2 : PsiElement) : boolean;
		static isUndefinedOperand(arg1 : JSExpression) : boolean;
	}


	interface SimpleControlFlowProcessor extends JSControlFlowProcessor {}

	module SimpleControlFlowProcessor {
		class BasicBlockInfo extends Object {
		}
		class DefinedValuesInfo extends Object {
		}
	}
}

export = JSUnusedAssignmentInspection
