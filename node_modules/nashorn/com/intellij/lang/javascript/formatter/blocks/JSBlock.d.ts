import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import List = require('nashorn/java/util/List');
import Block = require('nashorn/com/intellij/formatting/Block');
import Wrap = require('nashorn/com/intellij/formatting/Wrap');
import Indent = require('nashorn/com/intellij/formatting/Indent');
import Alignment = require('nashorn/com/intellij/formatting/Alignment');
import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import XmlFormattingPolicy = require('nashorn/com/intellij/psi/formatter/xml/XmlFormattingPolicy');
import Language = require('nashorn/com/intellij/lang/Language');
import ASTNodeBasedAlignmentFactory = require('nashorn/com/intellij/lang/javascript/formatter/blocks/alignment/ASTNodeBasedAlignmentFactory');
import SubBlockVisitor = require('nashorn/com/intellij/lang/javascript/formatter/blocks/SubBlockVisitor');
import ASTBlock = require('nashorn/com/intellij/formatting/ASTBlock');

declare class JSBlock {
	node : ASTNode;
	textRange : TextRange;
	subBlocks : List<Block>;
	wrap : Wrap;
	indent : Indent;
	alignment : Alignment;
	incomplete : boolean;
	subBlocksAsIs : List<Block>;
	settings : CodeStyleSettings;
	leaf : boolean;
	childWrap : Wrap;
	policy : XmlFormattingPolicy;
	constructor(arg1 : ASTNode, arg2 : Alignment, arg3 : Indent, arg4 : Wrap, arg5 : CodeStyleSettings);
	constructor(arg1 : ASTNode, arg2 : Alignment, arg3 : Indent, arg4 : Wrap, arg5 : CodeStyleSettings, arg6 : Language);
	constructor(arg1 : ASTNode, arg2 : Alignment, arg3 : Indent, arg4 : Wrap, arg5 : CodeStyleSettings, arg6 : ASTNodeBasedAlignmentFactory, arg7 : Language);
	createSubBlockVisitor() : SubBlockVisitor;
	getSharedAlignmentFactory(arg1 : ASTNodeBasedAlignmentFactory) : ASTNodeBasedAlignmentFactory;
	static canComputeSpacing(arg1 : Block) : boolean;
	setSubBlocks(arg1 : List<Block>) : void;
	getSubBlocksAsIs() : List<Block>;
	static isIncomplete(arg1 : ASTNode) : boolean;
	getSettings() : CodeStyleSettings;
	calculateIndentInSwitch(arg1 : JSBlock) : Indent;
	getIndentWithNormal(arg1 : Indent.Type) : Indent;
	getChildWrap() : Wrap;
	setChildWrap(arg1 : Wrap) : void;
	setPolicy(arg1 : XmlFormattingPolicy) : void;
	getPolicy() : XmlFormattingPolicy;
}


declare interface JSBlock extends ASTBlock {}
export = JSBlock
