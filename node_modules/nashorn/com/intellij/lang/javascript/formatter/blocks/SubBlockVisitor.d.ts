import List = require('nashorn/java/util/List');
import Block = require('nashorn/com/intellij/formatting/Block');
import JSBlock = require('nashorn/com/intellij/lang/javascript/formatter/blocks/JSBlock');
import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import Language = require('nashorn/com/intellij/lang/Language');
import ASTNodeBasedAlignmentFactory = require('nashorn/com/intellij/lang/javascript/formatter/blocks/alignment/ASTNodeBasedAlignmentFactory');
import JSLocalAlignmentFactory = require('nashorn/com/intellij/lang/javascript/formatter/blocks/alignment/JSLocalAlignmentFactory');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import Indent = require('nashorn/com/intellij/formatting/Indent');
import Wrap = require('nashorn/com/intellij/formatting/Wrap');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import JSNodeVisitor = require('nashorn/com/intellij/lang/javascript/JSNodeVisitor');

declare class SubBlockVisitor {
	blocks : List<Block>;
	constructor(arg1 : JSBlock, arg2 : CodeStyleSettings, arg3 : Language, arg4 : ASTNodeBasedAlignmentFactory);
	constructor(arg1 : CodeStyleSettings);
	createLocalAlignmentFactory(arg1 : CodeStyleSettings) : JSLocalAlignmentFactory;
	getBlocks() : List<Block>;
	addBlock(arg1 : Block) : void;
	buildCommentBlocks(arg1 : ASTNode) : void;
	getIndent(arg1 : ASTNode, arg2 : ASTNode) : Indent;
	static shouldEnforceIndent(arg1 : ASTNode) : boolean;
	static isMultilineRefExpression(arg1 : ASTNode) : boolean;
	static isCompactForm(arg1 : ASTNode) : boolean;
	getWrap(arg1 : ASTNode, arg2 : ASTNode) : Wrap;
	createChildWrap(arg1 : ASTNode) : Wrap;
	getCurrentWrap(arg1 : number) : Wrap;
	static shouldWrapEveryItem(arg1 : IElementType, arg2 : IElementType, arg3 : number) : boolean;
	getCommaIndent(arg1 : Indent.Type) : Indent;
	getArrayInitializerWrap() : number;
}


declare interface SubBlockVisitor extends JSNodeVisitor {}
export = SubBlockVisitor
