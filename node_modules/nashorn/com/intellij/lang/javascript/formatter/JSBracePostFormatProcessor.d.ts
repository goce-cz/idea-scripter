import PostFormatProcessor = require('nashorn/com/intellij/psi/impl/source/codeStyle/PostFormatProcessor');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import JSStatement = require('nashorn/com/intellij/lang/javascript/psi/JSStatement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import JSRecursiveElementVisitor = require('nashorn/com/intellij/lang/javascript/psi/JSRecursiveElementVisitor');
import XmlRecursiveElementVisitor = require('nashorn/com/intellij/psi/XmlRecursiveElementVisitor');

declare class JSBracePostFormatProcessor {
	constructor();
}


declare interface JSBracePostFormatProcessor extends PostFormatProcessor {}

declare module JSBracePostFormatProcessor {
	class JSBraceEnforcer {
		constructor(arg1 : Project, arg2 : CodeStyleSettings);
		processStatement(arg1 : JSStatement, arg2 : JSStatement, arg3 : number) : void;
		replaceWithBlock(arg1 : JSStatement, arg2 : JSStatement) : void;
		processElementRange(arg1 : PsiElement, arg2 : TextRange) : TextRange;
		process(arg1 : PsiElement) : PsiElement;
		processText(arg1 : PsiFile, arg2 : TextRange) : TextRange;
	}


	interface JSBraceEnforcer extends JSRecursiveElementVisitor {}	class InXmlBraceEnforcer {
		constructor(arg1 : Project, arg2 : CodeStyleSettings);
		processInjected(arg1 : PsiElement) : void;
		process(arg1 : PsiElement) : PsiElement;
		processText(arg1 : PsiFile, arg2 : TextRange) : TextRange;
	}


	interface InXmlBraceEnforcer extends XmlRecursiveElementVisitor {}}

export = JSBracePostFormatProcessor
