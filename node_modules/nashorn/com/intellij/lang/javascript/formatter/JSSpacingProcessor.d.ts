import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import CodeStyleSettings = require('nashorn/com/intellij/psi/codeStyle/CodeStyleSettings');
import Language = require('nashorn/com/intellij/lang/Language');
import Spacing = require('nashorn/com/intellij/formatting/Spacing');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import JSNodeVisitor = require('nashorn/com/intellij/lang/javascript/JSNodeVisitor');

declare class JSSpacingProcessor {
	static NOT_A_PACKAGE_CONTENT : TokenSet;
	constructor(arg1 : ASTNode, arg2 : ASTNode, arg3 : ASTNode, arg4 : CodeStyleSettings, arg5 : Language);
	calcSpacing() : Spacing;
	isLineCommentSpacing() : boolean;
	putBraceAsNeeded() : void;
	processBlock(arg1 : ASTNode) : void;
	shouldPlaceExtraLinesAroundMethod() : boolean;
	getSpacingBetweenImports() : Spacing;
	static isInjectedJSHack(arg1 : IElementType, arg2 : IElementType) : boolean;
	isInlineEndOfLineCommentOnLeft() : boolean;
	attributeSpacing() : void;
	static getRangeInsideParentheses(arg1 : ASTNode) : TextRange;
	forceSingleSpace() : void;
	forceSingleSpace(arg1 : boolean) : void;
	appendSpacingForTypes() : void;
	getSpaceAroundOption(arg1 : IElementType) : boolean;
	setUnaryOperatorSpacing(arg1 : IElementType) : void;
	setDependentSpacingIfNecessary(arg1 : boolean, arg2 : boolean, arg3 : boolean, arg4 : number) : void;
	setDependentSpacingIfNecessary(arg1 : boolean, arg2 : Computable<TextRange>, arg3 : boolean, arg4 : boolean, arg5 : number) : void;
	setSingleSpace(arg1 : boolean) : void;
	setBraceSpace(arg1 : boolean, arg2 : number, arg3 : TextRange) : void;
	setLineBreakSpace(arg1 : boolean, arg2 : boolean) : void;
	processReferenceList() : void;
	createCommaSpacing(arg1 : IElementType, arg2 : IElementType, arg3 : number, arg4 : boolean) : void;
	isArrayBracketOnAnotherLine(arg1 : IElementType) : boolean;
}


declare interface JSSpacingProcessor extends JSNodeVisitor {}
export = JSSpacingProcessor
