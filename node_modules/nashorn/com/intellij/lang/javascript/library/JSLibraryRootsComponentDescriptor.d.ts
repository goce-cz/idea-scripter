import List = require('nashorn/java/util/List');
import RootDetector = require('nashorn/com/intellij/openapi/roots/libraries/ui/RootDetector');
import OrderRootType = require('nashorn/com/intellij/openapi/roots/OrderRootType');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import LibraryEditor = require('nashorn/com/intellij/openapi/roots/ui/configuration/libraryEditor/LibraryEditor');
import LibraryRootsComponentDescriptor = require('nashorn/com/intellij/openapi/roots/libraries/ui/LibraryRootsComponentDescriptor');
import AttachRootButtonDescriptor = require('nashorn/com/intellij/openapi/roots/libraries/ui/AttachRootButtonDescriptor');
import FileChooserDescriptor = require('nashorn/com/intellij/openapi/fileChooser/FileChooserDescriptor');
import ProgressIndicator = require('nashorn/com/intellij/openapi/progress/ProgressIndicator');

declare class JSLibraryRootsComponentDescriptor {
	rootDetectors : List<RootDetector>;
	rootTypes : OrderRootType[];
	constructor();
	collectFilesRecursively(arg1 : List<VirtualFile>, arg2 : VirtualFile, arg3 : OrderRootType) : void;
	getDefaultDocUrl(arg1 : LibraryEditor) : string;
}


declare interface JSLibraryRootsComponentDescriptor extends LibraryRootsComponentDescriptor {}

declare module JSLibraryRootsComponentDescriptor {
	class DownloadDocDescriptor {
	}


	interface DownloadDocDescriptor extends AttachRootButtonDescriptor {}	class AttachUrlDocDescriptor {
	}


	interface AttachUrlDocDescriptor extends AttachRootButtonDescriptor {}	class AttachFromButtonDescriptor {
	}


	interface AttachFromButtonDescriptor extends AttachRootButtonDescriptor {}	class LibFileChooserDescriptor {
		constructor(arg1 : boolean);
	}


	interface LibFileChooserDescriptor extends FileChooserDescriptor {}	class JSLibraryRootsDetector {
		collectRecursively(arg1 : VirtualFile, arg2 : List<VirtualFile>, arg3 : ProgressIndicator) : void;
	}


	interface JSLibraryRootsDetector extends RootDetector {}}

export = JSLibraryRootsComponentDescriptor
