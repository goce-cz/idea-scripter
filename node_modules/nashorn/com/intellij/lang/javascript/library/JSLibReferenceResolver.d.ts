import Object = require('nashorn/java/lang/Object');
import XmlAttributeValue = require('nashorn/com/intellij/psi/xml/XmlAttributeValue');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');

declare class JSLibReferenceResolver extends Object {
	static getLibReference(arg1 : XmlAttributeValue) : PsiReference;
	static createReference(arg1 : XmlAttributeValue) : JSLibReferenceResolver.JSLibReference;
}


declare module JSLibReferenceResolver {
	class JSLibReference {
		element : PsiElement;
		rangeInElement : TextRange;
		canonicalText : string;
		variants : Object[];
		soft : boolean;
		constructor(arg1 : XmlAttributeValue);
		static resolveToLibrary(arg1 : string, arg2 : Project) : PsiElement;
		static findNewVirtualFile(arg1 : VirtualFile) : VirtualFile;
	}


	interface JSLibReference extends PsiReference {}}

export = JSLibReferenceResolver
