import StringBuilder = require('nashorn/java/lang/StringBuilder');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import Map = require('nashorn/java/util/Map');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import StringBuffer = require('nashorn/java/lang/StringBuffer');
import JSDocumentationProcessor = require('nashorn/com/intellij/lang/javascript/documentation/JSDocumentationProcessor');
import Object = require('nashorn/java/lang/Object');

declare class JSDocumentationBuilder {
	doAppend(arg1 : string) : void;
	static tagNameThatDoNotNeedEscaping(arg1 : string) : boolean;
	setResult(arg1 : StringBuilder) : void;
	static looksLikeWebURL(arg1 : string) : boolean;
	static findSuperClassWithDocComment(arg1 : JSClass) : JSClass;
	getFieldInfo(arg1 : string) : JSDocumentationBuilder.ParameterInfo;
	static getFieldName(arg1 : string) : string;
	static buildCurrentOrDefaultValue(arg1 : string, arg2 : boolean, arg3 : boolean, arg4 : string) : string;
	getDoc() : string;
	static appendConfigOptionsInfoIfNeeded(arg1 : JSDocumentationBuilder.ParameterInfo) : void;
	static insertParameterInfoDescription(arg1 : StringBuilder, arg2 : StringBuilder) : void;
	startNamedSection(arg1 : string) : void;
	static startNamedSection(arg1 : string, arg2 : StringBuilder) : void;
	appendSingleNamedDescriptionSection(arg1 : string, arg2 : string) : void;
	getParameterDoc(arg1 : string) : string;
	static appendOptionDescription(arg1 : Map.Entry<string, JSDocumentationBuilder.ParameterInfo>, arg2 : StringBuilder) : void;
	startFunction(arg1 : JSFunction) : void;
	static appendParameterInfoInSignature(arg1 : Map.Entry<string, JSDocumentationBuilder.ParameterInfo>, arg2 : StringBuilder) : void;
	endNamedItem() : void;
	startNamedItem(arg1 : string) : number;
	startNamedItem(arg1 : string, arg2 : JSDocumentationBuilder.SymbolInfo) : number;
	static addVisibilityAndAccess(arg1 : StringBuffer, arg2 : JSDocumentationBuilder.SymbolInfo) : void;
	addEvaluatedType() : boolean;
}


declare interface JSDocumentationBuilder extends JSDocumentationProcessor {}

declare module JSDocumentationBuilder {
	class ParameterInfo {
		hasSomeInfo() : boolean;
	}


	interface ParameterInfo extends JSDocumentationBuilder.SymbolInfo {}	class MethodInfo {
	}


	interface MethodInfo extends JSDocumentationBuilder.SymbolInfo {}	class SymbolInfo extends Object {
		getTypeString(arg1 : boolean) : string;
		hasType() : boolean;
	}
}

export = JSDocumentationBuilder
