import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import PsiNamedElement = require('nashorn/com/intellij/psi/PsiNamedElement');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSNamespaceDeclaration = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSNamespaceDeclaration');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSReferenceList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSReferenceList');
import List = require('nashorn/java/util/List');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import PsiComment = require('nashorn/com/intellij/psi/PsiComment');
import JSImplicitElement = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSImplicitElement');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import Object = require('nashorn/java/lang/Object');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import CodeDocumentationProvider = require('nashorn/com/intellij/lang/documentation/CodeDocumentationProvider');
import ExternalDocumentationProvider = require('nashorn/com/intellij/lang/documentation/ExternalDocumentationProvider');

declare class JSDocumentationProvider {
	static returnTag : string;
	constructor();
	constructor(arg1 : boolean);
	static createQuickNavigateForAnnotationDerived(arg1 : PsiElement) : string;
	static createQuickNavigateForFunction(arg1 : JSFunction) : string;
	static appendParentInfo(arg1 : PsiElement, arg2 : StringBuilder, arg3 : PsiNamedElement) : void;
	static createQuickNavigateForVariable(arg1 : JSVariable) : string;
	static appendVarType(arg1 : JSVariable, arg2 : StringBuilder) : void;
	static appendType(arg1 : StringBuilder, arg2 : string) : void;
	static createQuickNavigateForClazz(arg1 : JSClass) : string;
	static createQuickNavigateForNamespace(arg1 : JSNamespaceDeclaration) : string;
	static appendAttrList(arg1 : JSAttributeListOwner, arg2 : StringBuilder) : void;
	static appendModifier(arg1 : StringBuilder, arg2 : JSAttributeList, arg3 : JSAttributeList.ModifierType) : void;
	static generateReferenceTargetList(arg1 : JSReferenceList, arg2 : string) : string;
	static collectExternalUrls(arg1 : PsiElement) : List<string>;
	static patchNodejsFQN(arg1 : string, arg2 : VirtualFile) : string;
	static getParameterSignature(arg1 : PsiElement) : string;
	findCommentForImplicitElement(arg1 : PsiElement) : PsiElement;
	doGetCommentTextFromComment(arg1 : PsiComment, arg2 : PsiElement) : string;
	getDocumentationForImplicitElement(arg1 : JSImplicitElement) : string;
	static findTargetElement(arg1 : PsiElement, arg2 : PsiElement) : PsiElement;
	static findFirstDocComment(arg1 : PsiElement) : PsiElement;
	static findPossibleCssName(arg1 : PsiElement) : string;
	static resolveDocumentLink(arg1 : PsiManager, arg2 : string, arg3 : number) : PsiElement;
	static findElementForWhichPreviousCommentWillBeSearched(arg1 : Object) : PsiElement;
	static doGenerateDoc(arg1 : JSExpression) : string;
	static doGenerateDoc(arg1 : JSFunction) : string;
	static getReturnTag() : string;
	static setReturnTag(arg1 : string) : void;
	static appendPrivate(arg1 : StringBuilder, arg2 : string) : void;
	tryGetSeeAlsoLink(arg1 : string, arg2 : PsiElement) : string;
}


declare interface JSDocumentationProvider extends CodeDocumentationProvider, ExternalDocumentationProvider {}
export = JSDocumentationProvider
