import Object = require('nashorn/java/lang/Object');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSDocumentationProcessor = require('nashorn/com/intellij/lang/javascript/documentation/JSDocumentationProcessor');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import PsiComment = require('nashorn/com/intellij/psi/PsiComment');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import List = require('nashorn/java/util/List');
import Map = require('nashorn/java/util/Map');
import Set = require('nashorn/java/util/Set');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import JSParameter = require('nashorn/com/intellij/lang/javascript/psi/JSParameter');
import JSParameterTypeDecorator = require('nashorn/com/intellij/lang/javascript/psi/JSParameterTypeDecorator');
import Couple = require('nashorn/com/intellij/openapi/util/Couple');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import JSDocComment = require('nashorn/com/intellij/lang/javascript/psi/jsdoc/JSDocComment');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import Pattern = require('nashorn/java/util/regex/Pattern');
import JSContext = require('nashorn/com/intellij/lang/javascript/psi/types/JSContext');
import JSDocTag = require('nashorn/com/intellij/lang/javascript/psi/jsdoc/JSDocTag');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');

declare class JSDocumentationUtils extends Object {
	static ourPrimitiveTypeFilter : TokenSet;
	static ourTypeFilter : TokenSet;
	constructor();
	static processDocumentationTextFromComment(arg1 : ASTNode, arg2 : JSDocumentationProcessor) : void;
	static prepareCommentLine(arg1 : string) : string;
	static trimBrackets(arg1 : string) : string;
	static getTypeStringLength(arg1 : string) : number;
	static createParameterOrParameterFieldReference(arg1 : string, arg2 : string) : string;
	static unwrapCommentDelimiters(arg1 : string) : string;
	static findTrailingCommentInFunctionBody(arg1 : JSFunction) : ASTNode;
	static findLeadingCommentInFunctionBody(arg1 : PsiElement) : ASTNode;
	static findTypeFromInlineComment(arg1 : PsiElement) : JSType;
	static findDocComment(arg1 : PsiElement) : PsiComment;
	static findDocComment(arg1 : PsiElement, arg2 : PsiElement, arg3 : Ref<PsiElement>) : PsiComment;
	static createOrUpdateTagsInDocComment(arg1 : PsiElement, arg2 : Document, arg3 : List<string>, arg4 : Map<number, string>, arg5 : Set<number>) : void;
	static createOrUpdateTagsWithInsertionIndexes(arg1 : PsiElement, arg2 : Document, arg3 : List<Pair<number, string>>, arg4 : Map<number, string>, arg5 : Set<number>) : void;
	static getPropertyNameFromExprStatement(arg1 : PsiElement) : string;
	static getPropertyName(arg1 : string) : string;
	static getTypeFromPreceedingComment(arg1 : JSVariable) : JSType;
	static getParameterTypeFromPrecedingComment(arg1 : JSParameter) : JSParameterTypeDecorator;
	static getReasonablePrevElement(arg1 : JSVariable) : PsiElement;
	static rawGetTypeForVariable(arg1 : JSVariable) : JSType;
	static findDocCommentWider(arg1 : PsiElement) : PsiElement;
	static findDocForAnchor(arg1 : PsiElement, arg2 : JSDocumentationProcessor.MetaDocType[]) : string;
	static findType(arg1 : PsiElement) : string;
	static findContextType(arg1 : PsiElement) : string;
	static findReturnType(arg1 : PsiElement) : string;
	static findEnumType(arg1 : PsiElement) : string;
	static hasJSDocTag(arg1 : PsiElement, arg2 : JSDocumentationProcessor.MetaDocType[]) : boolean;
	static findParameters(arg1 : PsiElement) : List<Pair<string, string>>;
	static isDeprecated(arg1 : PsiElement) : boolean;
	static calculateDeprecated(arg1 : PsiElement) : boolean;
	static calculateConst(arg1 : PsiElement) : boolean;
	static calculateConstAndDeprecated(arg1 : PsiElement) : Couple<boolean>;
	static appendHyperLinkToElement(arg1 : PsiElement, arg2 : string, arg3 : StringBuilder, arg4 : string, arg5 : string) : void;
	static findFunctionComment(arg1 : JSFunction) : PsiComment;
	static findFunctionAppliedTo(arg1 : JSDocComment) : JSFunction;
	static getTypeFromTrailingComment(arg1 : JSFunction) : JSType;
	static getTypeFromReturnTypeComment(arg1 : JSFunction) : JSType;
	static isTypeStringAcceptable(arg1 : string, arg2 : boolean) : boolean;
	static findTypeFromComments(arg1 : JSNamedElement) : JSType;
	static doCapitalizeCommentTypeIfNeeded(arg1 : string) : string;
	static stripTypeDecorations(arg1 : string) : string;
	static getElementFQN(arg1 : PsiElement) : string;
	static getLibDocRelativeUrl(arg1 : string, arg2 : string) : string;
	static getBaseKey(arg1 : string) : string;
	static findAssociatedElement(arg1 : PsiComment) : PsiElement;
	static findAttachedElementFromComment(arg1 : PsiComment) : PsiElement;
	static findNameOfClassAppliedTo(arg1 : PsiComment) : string;
	static findNameOfMemberAppliedTo(arg1 : PsiComment) : string;
	static getDocTag(arg1 : string) : JSDocumentationUtils.DocTag;
	static handleCommentLine(arg1 : string, arg2 : string, arg3 : JSDocumentationProcessor, arg4 : Map<Pattern, JSDocumentationProcessor.MetaDocType>) : JSDocumentationUtils.DocTag;
	static resolveDocElements(arg1 : PsiElement) : List<PsiElement>;
	static checkDocCommentMatchesFunctionSignature(arg1 : JSDocComment, arg2 : JSFunction) : Pair<List<Pair<number, string>>, Map<number, string>>;
	static findJSContext(arg1 : PsiElement) : JSContext;
	static isExtendedTypeName(arg1 : string) : boolean;
	static hasTagProvidingNamespace(arg1 : PsiElement) : boolean;
	static getParameterNameRange(arg1 : JSDocTag) : TextRange;
}


declare module JSDocumentationUtils {
	class DocTag extends Object {
		type : JSDocumentationProcessor.MetaDocType;
		matchName : string;
		matchValue : string;
		lastParameterName : string;
		breakEnd : boolean;
		continueType : boolean;
		constructor();
	}
}

export = JSDocumentationUtils
