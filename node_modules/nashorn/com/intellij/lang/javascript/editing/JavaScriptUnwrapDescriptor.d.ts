import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import List = require('nashorn/java/util/List');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import Unwrapper = require('nashorn/com/intellij/codeInsight/unwrap/Unwrapper');
import UnwrapDescriptor = require('nashorn/com/intellij/codeInsight/unwrap/UnwrapDescriptor');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');

declare class JavaScriptUnwrapDescriptor {
	constructor();
	addUnwrapper(arg1 : PsiElement, arg2 : List<Pair<PsiElement, Unwrapper>>, arg3 : JavaScriptUnwrapDescriptor.JSBasicUnwrapper) : List<Pair<PsiElement, Unwrapper>>;
}


declare interface JavaScriptUnwrapDescriptor extends UnwrapDescriptor {}

declare module JavaScriptUnwrapDescriptor {
	class JSTryUnwrapper {
	}


	interface JSTryUnwrapper extends JavaScriptUnwrapDescriptor.JSBasicUnwrapper {}	class JSLoopUnwrapper {
	}


	interface JSLoopUnwrapper extends JavaScriptUnwrapDescriptor.JSBasicLoopUnwrapper {}	class JSBasicLoopUnwrapper {
	}


	interface JSBasicLoopUnwrapper extends JavaScriptUnwrapDescriptor.JSBasicUnwrapper {}	class JSElseUnwrapper {
	}


	interface JSElseUnwrapper extends JavaScriptUnwrapDescriptor.JSBasicElseUnwrapper {}	class JSIfUnwrapper {
	}


	interface JSIfUnwrapper extends JavaScriptUnwrapDescriptor.JSBasicIfUnwrapper {}	class JSBlockUnwrapper {
	}


	interface JSBlockUnwrapper extends JavaScriptUnwrapDescriptor.JSBasicUnwrapper {}	class JSBasicUnwrapper {
		getReplacedRangeStart(arg1 : PsiElement) : TextRange;
		getReplacedRangeEnd(arg1 : PsiElement) : TextRange;
		getKind(arg1 : PsiElement) : string;
		setBlockWithinSingleOperatorParent(arg1 : boolean) : void;
	}


	interface JSBasicUnwrapper extends Unwrapper {}	class JSBasicElseUnwrapper {
	}


	interface JSBasicElseUnwrapper extends JavaScriptUnwrapDescriptor.JSBasicUnwrapper {}	class JSBasicIfUnwrapper {
	}


	interface JSBasicIfUnwrapper extends JavaScriptUnwrapDescriptor.JSBasicUnwrapper {}}

export = JavaScriptUnwrapDescriptor
