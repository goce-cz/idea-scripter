import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import StatementUpDownMover = require('nashorn/com/intellij/codeInsight/editorActions/moveUpDown/StatementUpDownMover');
import JSStatement = require('nashorn/com/intellij/lang/javascript/psi/JSStatement');
import Couple = require('nashorn/com/intellij/openapi/util/Couple');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import PsiWhiteSpace = require('nashorn/com/intellij/psi/PsiWhiteSpace');
import LineRange = require('nashorn/com/intellij/codeInsight/editorActions/moveUpDown/LineRange');
import LineMover = require('nashorn/com/intellij/codeInsight/editorActions/moveUpDown/LineMover');
import Enum = require('nashorn/java/lang/Enum');

declare class JSStatementUpDownMover {
	constructor();
	canMoveIt(arg1 : Editor, arg2 : PsiFile, arg3 : StatementUpDownMover.MoveInfo, arg4 : boolean) : boolean;
	static isFunExpr(arg1 : JSStatement) : boolean;
	checkNeedToAddComma(arg1 : Couple<PsiElement>, arg2 : Couple<PsiElement>) : void;
	isMultiline(arg1 : Editor) : boolean;
	static addComma(arg1 : Editor, arg2 : StatementUpDownMover.MoveInfo, arg3 : boolean) : void;
	surroundWithCodeBlock(arg1 : Editor, arg2 : StatementUpDownMover.MoveInfo, arg3 : boolean) : void;
	getBody(arg1 : boolean) : PsiElement;
	static isSameNode(arg1 : PsiFile, arg2 : StatementUpDownMover.MoveInfo, arg3 : Document, arg4 : boolean) : boolean;
	static advanceToRange(arg1 : Document, arg2 : number) : number;
	static blockHeaderRange(arg1 : ASTNode) : TextRange;
	static expandRangeBefore(arg1 : PsiElement) : PsiElement;
	static isTrivialWs(arg1 : PsiWhiteSpace) : boolean;
	static expandRangeAfter(arg1 : PsiElement, arg2 : boolean) : PsiElement;
	static isCommentOwner(arg1 : PsiElement) : boolean;
	static expandComment(arg1 : ASTNode, arg2 : boolean) : PsiElement;
	static isNotValidStatementRange(arg1 : Couple<PsiElement>) : boolean;
	static findElementRange(arg1 : Editor, arg2 : PsiFile, arg3 : LineRange, arg4 : JSStatementUpDownMover.StatementSelectionMode) : Couple<PsiElement>;
	static elementRange(arg1 : Editor, arg2 : PsiFile, arg3 : LineRange, arg4 : JSStatementUpDownMover.StatementSelectionMode) : Couple<PsiElement>;
	static isBlockStatementContainer(arg1 : PsiElement) : boolean;
	static getSourceElement(arg1 : PsiElement) : PsiElement;
}


declare interface JSStatementUpDownMover extends LineMover {}

declare module JSStatementUpDownMover {
	class StatementSelectionMode {
		static UP : JSStatementUpDownMover.StatementSelectionMode;
		static DOWN : JSStatementUpDownMover.StatementSelectionMode;
	}


	interface StatementSelectionMode extends Enum<JSStatementUpDownMover.StatementSelectionMode> {}}

export = JSStatementUpDownMover
