import Object = require('nashorn/java/lang/Object');
import JComponent = require('nashorn/javax/swing/JComponent');
import WizardModel = require('nashorn/com/intellij/lang/javascript/ui/newclass/WizardModel');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import List = require('nashorn/java/util/List');
import FileTemplate = require('nashorn/com/intellij/ide/fileTemplates/FileTemplate');
import ChangeListener = require('nashorn/javax/swing/event/ChangeListener');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import JLabel = require('nashorn/javax/swing/JLabel');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import AbstractWizardStepEx = require('nashorn/com/intellij/ide/wizard/AbstractWizardStepEx');

declare class MainStep {
	stepId : Object;
	nextStepId : Object;
	previousStepId : Object;
	complete : boolean;
	component : JComponent;
	preferredFocusedComponent : JComponent;
	constructor(arg1 : WizardModel, arg2 : Project, arg3 : string, arg4 : boolean, arg5 : string, arg6 : JSClass, arg7 : boolean, arg8 : string, arg9 : PsiElement, arg10 : string, arg11 : Computable<List<FileTemplate>>);
	canFinish() : boolean;
	updateOnTemplateChange() : void;
	addListener(arg1 : ChangeListener, arg2 : Disposable) : void;
	getSuperclassFqn() : string;
	isSuperclassFieldEnabled() : boolean;
	initUpDownHint() : void;
	fillTemplates(arg1 : string) : void;
	getClassName() : string;
	getPackageName() : string;
	createUIComponents() : void;
	canBeSuperClass(arg1 : JSClass) : boolean;
	setSuperclassLabelText(arg1 : string) : void;
	static setLabelTextAndMnemonic(arg1 : JLabel, arg2 : string) : void;
	getSuperclassScope() : GlobalSearchScope;
	filterByBaseClass() : boolean;
}


declare interface MainStep extends AbstractWizardStepEx {}
export = MainStep
