import Object = require('nashorn/java/lang/Object');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');

declare class JSNodeVisitor extends Object {
	constructor();
	visit(arg1 : ASTNode) : void;
	visitXmlLiteralExpression(arg1 : ASTNode) : void;
	visitImportStatement(arg1 : ASTNode) : void;
	visitAttributeList(arg1 : ASTNode) : void;
	visitPackageStatement(arg1 : ASTNode) : void;
	visitClass(arg1 : ASTNode) : void;
	visitFile(arg1 : ASTNode) : void;
	visitCallExpression(arg1 : ASTNode) : void;
	visitIndexedPropertyAccessExpression(arg1 : ASTNode) : void;
	visitNewExpression(arg1 : ASTNode) : void;
	visitFunctionExpression(arg1 : ASTNode) : void;
	visitPrefixExpression(arg1 : ASTNode) : void;
	visitPostfixExpression(arg1 : ASTNode) : void;
	visitConditionalExpression(arg1 : ASTNode) : void;
	visitArrayComprehension(arg1 : ASTNode) : void;
	visitCommaExpression(arg1 : ASTNode) : void;
	visitAssignmentExpression(arg1 : ASTNode) : void;
	visitBinaryExpression(arg1 : ASTNode) : void;
	visitProperty(arg1 : ASTNode) : void;
	visitObjectLiteralExpression(arg1 : ASTNode) : void;
	visitArrayLiteralExpression(arg1 : ASTNode) : void;
	visitParenthesizedExpression(arg1 : ASTNode) : void;
	visitReferenceExpression(arg1 : ASTNode) : void;
	visitLiteralExpression(arg1 : ASTNode) : void;
	visitThisExpression(arg1 : ASTNode) : void;
	visitForInStatement(arg1 : ASTNode) : void;
	visitForStatement(arg1 : ASTNode) : void;
	visitDoWhileStatement(arg1 : ASTNode) : void;
	visitWhileStatement(arg1 : ASTNode) : void;
	visitCaseClause(arg1 : ASTNode) : void;
	visitSwitchStatement(arg1 : ASTNode) : void;
	visitCatchBlock(arg1 : ASTNode) : void;
	visitTryStatement(arg1 : ASTNode) : void;
	visitThrowStatement(arg1 : ASTNode) : void;
	visitReturnStatement(arg1 : ASTNode) : void;
	visitWithStatement(arg1 : ASTNode) : void;
	visitBreakStatement(arg1 : ASTNode) : void;
	visitContinueStatement(arg1 : ASTNode) : void;
	visitIfStatement(arg1 : ASTNode) : void;
	visitEmptyStatement(arg1 : ASTNode) : void;
	visitVarStatement(arg1 : ASTNode) : void;
	visitExpressionStatement(arg1 : ASTNode) : void;
	visitLabeledStatement(arg1 : ASTNode) : void;
	visitBlock(arg1 : ASTNode) : void;
	visitArgumentList(arg1 : ASTNode) : void;
	visitParameter(arg1 : ASTNode) : void;
	visitVariable(arg1 : ASTNode) : void;
	visitLocalVariable(arg1 : ASTNode) : void;
	visitParameterList(arg1 : ASTNode) : void;
	visitEmbeddedContent(arg1 : ASTNode) : void;
	visitElement(arg1 : ASTNode) : void;
	visitSourceElement(arg1 : ASTNode) : void;
	visitFunctionDeclaration(arg1 : ASTNode) : void;
	visitStatement(arg1 : ASTNode) : void;
	visitExpression(arg1 : ASTNode) : void;
	visitDocComment(arg1 : ASTNode) : void;
	visitComment(arg1 : ASTNode) : void;
	visitTypeScriptModule(arg1 : ASTNode) : void;
	visitTypeScriptInterface(arg1 : ASTNode) : void;
	visitObjectType(arg1 : ASTNode) : void;
}

export = JSNodeVisitor
