import Object = require('nashorn/java/lang/Object');
import Future = require('nashorn/java/util/concurrent/Future');
import Exception = require('nashorn/java/lang/Exception');

declare class PrevRequestSkippingCache<K, V> extends Object {
	constructor(arg1 : PrevRequestSkippingCache.Fetcher<K, V>);
	fetch(arg1 : PrevRequestSkippingCache.FetchCallback<K, V>) : void;
	canBeSkipped(arg1 : PrevRequestSkippingCache.FetchCallback) : boolean;
	checkRecentCache(arg1 : PrevRequestSkippingCache.FetchCallback<K, V>) : boolean;
	startFuture(arg1 : PrevRequestSkippingCache.FetchCallback<K, V>) : void;
	processFuture(arg1 : PrevRequestSkippingCache.FetchCallback<K, V>, arg2 : Future<V>) : void;
	doFetch(arg1 : PrevRequestSkippingCache.FetchCallback<K, V>) : V;
}


declare module PrevRequestSkippingCache {
	class FetchCallback<K, V> extends Object {
		key : K;
		constructor(arg1 : K);
		constructor(arg1 : K, arg2 : boolean);
		getKey() : K;
		canBeSkipped() : boolean;
		onSuccess(arg1 : V) : void;
		onException(arg1 : Exception) : void;
	}
	class Fetcher<K, V> extends Object {
		fetch(arg1 : K) : V;
	}
}

export = PrevRequestSkippingCache
