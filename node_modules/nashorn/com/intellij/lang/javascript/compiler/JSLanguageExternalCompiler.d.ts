import Key = require('nashorn/com/intellij/openapi/util/Key');
import JSLanguageCompileInfo = require('nashorn/com/intellij/lang/javascript/compiler/JSLanguageCompileInfo');
import Future = require('nashorn/java/util/concurrent/Future');
import List = require('nashorn/java/util/List');
import JSLanguageCompilerResult = require('nashorn/com/intellij/lang/javascript/compiler/JSLanguageCompilerResult');
import JSLanguageCompilerCommand = require('nashorn/com/intellij/lang/javascript/compiler/protocol/JSLanguageCompilerCommand');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');
import Enum = require('nashorn/java/lang/Enum');

declare class JSLanguageExternalCompiler {
	static GENERATED_FILE_MARKER : Key<boolean>;
	state : JSLanguageExternalCompiler.State;
	getState() : JSLanguageExternalCompiler.State;
	compile(arg1 : JSLanguageCompileInfo) : Future<List<JSLanguageCompilerResult>>;
	sendCommandToCompiler(arg1 : JSLanguageCompilerCommand) : void;
}


declare interface JSLanguageExternalCompiler extends Disposable {}

declare module JSLanguageExternalCompiler {
	class State {
		static STARTING : JSLanguageExternalCompiler.State;
		static STARTED : JSLanguageExternalCompiler.State;
		static ERROR_OR_TIMEOUT : JSLanguageExternalCompiler.State;
		static DISPOSED : JSLanguageExternalCompiler.State;
	}


	interface State extends Enum<JSLanguageExternalCompiler.State> {}}

export = JSLanguageExternalCompiler
