import Logger = require('nashorn/com/intellij/openapi/diagnostic/Logger');
import JSLanguageExternalCompiler = require('nashorn/com/intellij/lang/javascript/compiler/JSLanguageExternalCompiler');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import JSLanguageCompilerProtocol = require('nashorn/com/intellij/lang/javascript/compiler/protocol/JSLanguageCompilerProtocol');
import JSLanguageCompilerToolWindowManager = require('nashorn/com/intellij/lang/javascript/compiler/ui/JSLanguageCompilerToolWindowManager');
import ImmutableList = require('nashorn/com/intellij/util/containers/ImmutableList');
import JSLanguageCompilerResult = require('nashorn/com/intellij/lang/javascript/compiler/JSLanguageCompilerResult');
import JSLanguageCompileInfo = require('nashorn/com/intellij/lang/javascript/compiler/JSLanguageCompileInfo');
import JSLanguageCompilerAnswer = require('nashorn/com/intellij/lang/javascript/compiler/protocol/JSLanguageCompilerAnswer');
import Object = require('nashorn/java/lang/Object');
import JSLanguageCompilerAnswerConsumer = require('nashorn/com/intellij/lang/javascript/compiler/protocol/JSLanguageCompilerAnswerConsumer');

declare class JSLanguageExternalCompilerImpl {
	static LOGGER : Logger;
	state : JSLanguageExternalCompiler.State;
	constructor(arg1 : Project, arg2 : JSLanguageCompilerProtocol, arg3 : JSLanguageCompilerToolWindowManager);
	init() : void;
	createUI() : void;
	startCompiler() : void;
	showErrors(arg1 : ImmutableList<JSLanguageCompilerResult>, arg2 : JSLanguageCompileInfo) : void;
	static processEmitFilesAfterCompiling(arg1 : JSLanguageCompilerAnswer) : void;
	awaitCommand(arg1 : string, arg2 : Object) : JSLanguageCompilerAnswer;
	sendData(arg1 : string, arg2 : string, arg3 : JSLanguageCompilerAnswerConsumer) : void;
	stopCompiler() : void;
}


declare interface JSLanguageExternalCompilerImpl extends JSLanguageExternalCompiler {}
export = JSLanguageExternalCompilerImpl
