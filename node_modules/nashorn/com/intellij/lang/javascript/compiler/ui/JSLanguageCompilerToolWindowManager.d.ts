import Logger = require('nashorn/com/intellij/openapi/diagnostic/Logger');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Icon = require('nashorn/javax/swing/Icon');
import AnAction = require('nashorn/com/intellij/openapi/actionSystem/AnAction');
import ProcessHandler = require('nashorn/com/intellij/execution/process/ProcessHandler');
import ToolWindow = require('nashorn/com/intellij/openapi/wm/ToolWindow');
import ContentImpl = require('nashorn/com/intellij/ui/content/impl/ContentImpl');
import NewErrorTreeViewPanel = require('nashorn/com/intellij/ide/errorTreeView/NewErrorTreeViewPanel');
import ImmutableList = require('nashorn/com/intellij/util/containers/ImmutableList');
import JSLanguageCompilerResult = require('nashorn/com/intellij/lang/javascript/compiler/JSLanguageCompilerResult');
import List = require('nashorn/java/util/List');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');

declare class JSLanguageCompilerToolWindowManager {
	static LOGGER : Logger;
	connectedToProcessHandler : boolean;
	constructor(arg1 : Project, arg2 : string, arg3 : string, arg4 : Icon, arg5 : AnAction[]);
	connectToProcessHandler(arg1 : ProcessHandler) : void;
	isConnectedToProcessHandler() : boolean;
	show() : void;
	init() : void;
	createCurrentErrorContent(arg1 : ToolWindow) : ContentImpl;
	createAllErrorsPanel() : NewErrorTreeViewPanel;
	disconnectFromProcessHandler() : void;
	logProjectErrors(arg1 : ImmutableList<JSLanguageCompilerResult>, arg2 : boolean) : void;
	setActivePanel(arg1 : NewErrorTreeViewPanel, arg2 : ToolWindow) : void;
	logCurrentErrors(arg1 : ImmutableList<JSLanguageCompilerResult>, arg2 : boolean) : void;
	static logErrorsImpl(arg1 : NewErrorTreeViewPanel, arg2 : List<JSLanguageCompilerResult>) : void;
	cleanPanel() : void;
}


declare interface JSLanguageCompilerToolWindowManager extends Disposable {}
export = JSLanguageCompilerToolWindowManager
