import Object = require('nashorn/java/lang/Object');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import CharSequence = require('nashorn/java/lang/CharSequence');
import List = require('nashorn/java/util/List');
import Map = require('nashorn/java/util/Map');
import Enum = require('nashorn/java/lang/Enum');

declare class FormatFixer extends Object {
	static create(arg1 : PsiFile, arg2 : TextRange, arg3 : FormatFixer.Mode) : FormatFixer;
	static create(arg1 : PsiFile, arg2 : TextRange, arg3 : Document, arg4 : FormatFixer.Mode) : FormatFixer;
	static create(arg1 : PsiElement, arg2 : PsiElement, arg3 : FormatFixer.Mode) : FormatFixer;
	static create(arg1 : PsiElement, arg2 : FormatFixer.Mode) : FormatFixer;
	fixFormat() : void;
	static isTabsAndSpaces(arg1 : CharSequence) : boolean;
	static merge(arg1 : List<FormatFixer>) : List<FormatFixer>;
	static mergeSingleFile(arg1 : List<FormatFixer>) : List<FormatFixer>;
	static addRange(arg1 : Map<TextRange, FormatFixer>, arg2 : FormatFixer) : void;
	static unionIfIntersects(arg1 : Map<TextRange, FormatFixer>, arg2 : FormatFixer) : boolean;
	static doReformat(arg1 : PsiFile, arg2 : number, arg3 : number) : void;
	static fixAll(arg1 : List<FormatFixer>) : void;
}


declare module FormatFixer {
	class Mode {
		static FirstLinebreak : FormatFixer.Mode;
		static Reformat : FormatFixer.Mode;
		static FollowingWhitespace : FormatFixer.Mode;
		static InSpecifiedRangeMakeFormatterWorkAndLeaveWsBeforeAndAfterIntact : FormatFixer.Mode;
	}


	interface Mode extends Enum<FormatFixer.Mode> {}}

export = FormatFixer
