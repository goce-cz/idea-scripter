import Object = require('nashorn/java/lang/Object');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import BaseJSSymbolProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/BaseJSSymbolProcessor');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');

declare class JSVisibilityUtil extends Object {
	static ACCESS_TYPES : JSAttributeList.AccessType[];
	static ESCALATE_VISIBILITY : string;
	static DEFAULT_OPTIONS : JSVisibilityUtil.Options;
	constructor();
	static getEscalatedVisibility(arg1 : JSAttributeListOwner, arg2 : PsiElement, arg3 : JSAttributeList.AccessType, arg4 : JSVisibilityUtil.Options) : JSAttributeList.AccessType;
	static removeAccessModifier(arg1 : JSAttributeListOwner) : void;
	static getVisibilityKeyword(arg1 : JSAttributeList.AccessType) : string;
	static getJSDocVisibilityKeyword(arg1 : JSAttributeList.AccessType) : string;
	static setVisibility(arg1 : JSAttributeListOwner, arg2 : JSAttributeList.AccessType) : void;
	static setVisibility(arg1 : JSAttributeListOwner, arg2 : string) : void;
	static isAccessible(arg1 : PsiElement, arg2 : JSAttributeList, arg3 : JSClass, arg4 : PsiElement, arg5 : JSVisibilityUtil.Options) : boolean;
	static isAccessible(arg1 : PsiElement, arg2 : JSAttributeList.AccessType, arg3 : JSClass, arg4 : PsiElement, arg5 : JSVisibilityUtil.Options) : boolean;
	static isAccessible(arg1 : PsiElement, arg2 : string, arg3 : JSClass, arg4 : PsiElement, arg5 : JSVisibilityUtil.Options) : boolean;
	static isAccessibleImpl(arg1 : PsiElement, arg2 : Object, arg3 : JSClass, arg4 : PsiElement, arg5 : JSVisibilityUtil.Options) : boolean;
	static areInTheSamePackage(arg1 : PsiElement, arg2 : PsiElement, arg3 : JSVisibilityUtil.Options) : boolean;
	static getPackageName(arg1 : PsiElement, arg2 : JSVisibilityUtil.Options) : string;
	static getForcedPackage(arg1 : PsiElement, arg2 : JSVisibilityUtil.Options) : string;
	static accessTypeToKeyword(arg1 : JSAttributeList.AccessType) : string;
	static isAccessible(arg1 : JSQualifiedName, arg2 : PsiElement, arg3 : JSAttributeList.AccessType, arg4 : string[], arg5 : BaseJSSymbolProcessor.TypeInfo, arg6 : PsiElement, arg7 : boolean) : boolean;
	static calculateContextNames(arg1 : PsiElement) : string[];
	static getEscalatedJSDocVisibility(arg1 : JSQualifiedNamedElement, arg2 : PsiElement) : JSAttributeList.AccessType;
}


declare module JSVisibilityUtil {
	class Options extends Object {
		ignoreClassInheritance : boolean;
		constructor();
		overridePackage(arg1 : PsiElement, arg2 : string) : void;
	}
}

export = JSVisibilityUtil
