import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import ColumnInfo = require('nashorn/com/intellij/util/ui/ColumnInfo');
import JSExpressionCodeFragment = require('nashorn/com/intellij/lang/javascript/psi/JSExpressionCodeFragment');
import ParameterTableModelBase = require('nashorn/com/intellij/refactoring/changeSignature/ParameterTableModelBase');
import JSParameterInfo = require('nashorn/com/intellij/lang/javascript/refactoring/changeSignature/JSParameterInfo');
import JSParameterTableModelItem = require('nashorn/com/intellij/lang/javascript/refactoring/changeSignature/JSParameterTableModelItem');
import ParameterTableModelItemBase = require('nashorn/com/intellij/refactoring/changeSignature/ParameterTableModelItemBase');
import PsiCodeFragment = require('nashorn/com/intellij/psi/PsiCodeFragment');

declare class JSParameterTableModel {
	constructor(arg1 : PsiElement, arg2 : PsiElement, arg3 : string, arg4 : boolean, arg5 : boolean, arg6 : boolean);
	static getColumns(arg1 : Project, arg2 : string, arg3 : boolean, arg4 : boolean, arg5 : boolean) : ColumnInfo[];
	static createParameterTypeCellFragment(arg1 : string, arg2 : Project) : JSExpressionCodeFragment;
	static createDefaultValueCellFragment(arg1 : string, arg2 : PsiElement) : JSExpressionCodeFragment;
	static createInitializerCellFragment(arg1 : string, arg2 : PsiElement) : JSExpressionCodeFragment;
}


declare interface JSParameterTableModel extends ParameterTableModelBase<JSParameterInfo, JSParameterTableModelItem> {}

declare module JSParameterTableModel {
	class OptionalFlagColumn {
		constructor();
	}


	interface OptionalFlagColumn extends ColumnInfo<ParameterTableModelItemBase<JSParameterInfo>, boolean> {}	class InitializerColumn {
		constructor(arg1 : Project);
	}


	interface InitializerColumn extends ParameterTableModelBase.ColumnInfoBase<JSParameterInfo, JSParameterTableModelItem, PsiCodeFragment> {}	class JSNameColumn {
		constructor(arg1 : Project);
	}


	interface JSNameColumn extends ParameterTableModelBase.NameColumn<JSParameterInfo, JSParameterTableModelItem> {}	class JSTypeColumn {
		constructor(arg1 : Project);
	}


	interface JSTypeColumn extends ParameterTableModelBase.TypeColumn<JSParameterInfo, JSParameterTableModelItem> {}}

export = JSParameterTableModel
