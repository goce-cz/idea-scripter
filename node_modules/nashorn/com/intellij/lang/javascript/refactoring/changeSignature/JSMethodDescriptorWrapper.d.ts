import List = require('nashorn/java/util/List');
import JSParameterInfo = require('nashorn/com/intellij/lang/javascript/refactoring/changeSignature/JSParameterInfo');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSMethodDescriptor = require('nashorn/com/intellij/lang/javascript/refactoring/changeSignature/JSMethodDescriptor');

declare class JSMethodDescriptorWrapper {
	name : string;
	parameters : List<JSParameterInfo>;
	returnType : string;
	parametersCount : number;
	visibility : string;
	possibleVisibility : List<JSAttributeList.AccessType>;
	method : JSFunction;
	constructor(arg1 : JSMethodDescriptor);
}


declare interface JSMethodDescriptorWrapper extends JSMethodDescriptor {}
export = JSMethodDescriptorWrapper
