import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import Set = require('nashorn/java/util/Set');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Runnable = require('nashorn/java/lang/Runnable');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');
import Collection = require('nashorn/java/util/Collection');
import MethodNodeBase = require('nashorn/com/intellij/refactoring/changeSignature/MethodNodeBase');

declare class JSMethodNode {
	elementToSearch : PsiElement;
	constructor(arg1 : JSFunction, arg2 : Set<JSFunction>, arg3 : Project, arg4 : Runnable);
	addCallExpression(arg1 : JSCallExpression, arg2 : Collection<JSFunction>) : void;
}


declare interface JSMethodNode extends MethodNodeBase<JSFunction> {}
export = JSMethodNode
