import List = require('nashorn/java/util/List');
import JSParameterInfo = require('nashorn/com/intellij/lang/javascript/refactoring/changeSignature/JSParameterInfo');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSLanguageDialect = require('nashorn/com/intellij/lang/javascript/JSLanguageDialect');
import Function = require('nashorn/com/intellij/util/Function');
import JSParameter = require('nashorn/com/intellij/lang/javascript/psi/JSParameter');
import MethodDescriptor = require('nashorn/com/intellij/refactoring/changeSignature/MethodDescriptor');

declare class JSMethodDescriptor {
	name : string;
	parameters : List<JSParameterInfo>;
	returnType : string;
	parametersCount : number;
	visibility : string;
	possibleVisibility : List<JSAttributeList.AccessType>;
	method : JSFunction;
	constructor(arg1 : JSFunction, arg2 : boolean);
	getReturnType() : string;
	static getParameters(arg1 : JSFunction) : List<JSParameterInfo>;
	getVisibilityImpl(arg1 : JSAttributeList.AccessType) : string;
	getPossibleVisibility() : List<JSAttributeList.AccessType>;
	isConstructor() : boolean;
	resolveTypes() : boolean;
	canChangeVisibilityImpl() : boolean;
	isActionScript() : boolean;
	isEcmaScript6() : boolean;
	canHaveOptional() : boolean;
	canHaveType() : boolean;
	canHaveInitializers() : boolean;
	getFunctionNameWithKeyword(arg1 : string) : string;
	getPrefixFunction() : string;
	getFileLanguage() : JSLanguageDialect;
	static getParameters(arg1 : JSFunction, arg2 : Function<JSParameter, string>) : List<JSParameterInfo>;
}


declare interface JSMethodDescriptor extends MethodDescriptor<JSParameterInfo, string> {}
export = JSMethodDescriptor
