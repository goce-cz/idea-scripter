import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import DataContext = require('nashorn/com/intellij/openapi/actionSystem/DataContext');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import BaseJSRefactoringHandler = require('nashorn/com/intellij/lang/javascript/refactoring/BaseJSRefactoringHandler');
import ChangeSignatureHandler = require('nashorn/com/intellij/refactoring/changeSignature/ChangeSignatureHandler');

declare class JSChangeSignatureHandler {
	targetNotFoundMessage : string;
	constructor();
	static canRefactor(arg1 : PsiElement, arg2 : Editor) : boolean;
	static canRefactorFunctionExpression(arg1 : PsiElement, arg2 : boolean) : boolean;
	static isEventListenerCallArgument(arg1 : PsiElement) : boolean;
	static getContextElement(arg1 : DataContext) : PsiElement;
	static invoke(arg1 : JSFunction, arg2 : Project, arg3 : PsiElement) : void;
}


declare interface JSChangeSignatureHandler extends BaseJSRefactoringHandler, ChangeSignatureHandler {}
export = JSChangeSignatureHandler
