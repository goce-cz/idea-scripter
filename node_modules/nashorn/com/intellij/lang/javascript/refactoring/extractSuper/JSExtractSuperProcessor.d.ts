import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSMemberInfo = require('nashorn/com/intellij/lang/javascript/refactoring/util/JSMemberInfo');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import Map = require('nashorn/java/util/Map');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');
import UsageInfo = require('nashorn/com/intellij/usageView/UsageInfo');
import MultiMap = require('nashorn/com/intellij/util/containers/MultiMap');
import JSVisibilityUtil = require('nashorn/com/intellij/lang/javascript/refactoring/JSVisibilityUtil');
import Collection = require('nashorn/java/util/Collection');
import List = require('nashorn/java/util/List');
import FormatFixer = require('nashorn/com/intellij/lang/javascript/refactoring/FormatFixer');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import BaseRefactoringProcessor = require('nashorn/com/intellij/refactoring/BaseRefactoringProcessor');
import UsageViewDescriptorAdapter = require('nashorn/com/intellij/refactoring/ui/UsageViewDescriptorAdapter');
import Enum = require('nashorn/java/lang/Enum');

declare class JSExtractSuperProcessor {
	constructor(arg1 : JSClass, arg2 : JSMemberInfo[], arg3 : string, arg4 : string, arg5 : number, arg6 : JSExtractSuperProcessor.Mode, arg7 : boolean, arg8 : PsiDirectory);
	canTurnReferenceToSuper(arg1 : JSReferenceExpression, arg2 : Map<PsiElement, JSExtractSuperProcessor.Status>) : boolean;
	canPullUpVariableOrFunctionType(arg1 : JSNamedElement, arg2 : Map<PsiElement, JSExtractSuperProcessor.Status>, arg3 : boolean, arg4 : boolean) : boolean;
	checkUsage(arg1 : JSNamedElement, arg2 : PsiElement, arg3 : boolean, arg4 : Map<PsiElement, JSExtractSuperProcessor.Status>) : boolean;
	checkMethodParameter(arg1 : JSFunction, arg2 : number, arg3 : boolean, arg4 : Map<PsiElement, JSExtractSuperProcessor.Status>) : boolean;
	getSubjectClass(arg1 : JSElement) : JSClass;
	isPulledTypeAssignableTo(arg1 : JSVariable, arg2 : boolean, arg3 : Map<PsiElement, JSExtractSuperProcessor.Status>) : boolean;
	isAssignableToPulledType(arg1 : JSExpression, arg2 : boolean) : boolean;
	doesFunctionBelongToPulledType(arg1 : JSFunction) : boolean;
	isSuperClassOfPulledTypes(arg1 : JSClass) : boolean;
	static isEquivalentOrSuper(arg1 : JSClass, arg2 : JSElement) : boolean;
	willBeInSuperclass(arg1 : JSAttributeListOwner) : boolean;
	detectConflicts(arg1 : UsageInfo[]) : MultiMap<PsiElement, string>;
	checkIncomingReferencesToPushedMembers(arg1 : MultiMap<PsiElement, string>, arg2 : JSVisibilityUtil.Options) : void;
	checkIncomingReferencesToMovedMember(arg1 : JSClass, arg2 : JSAttributeListOwner, arg3 : MultiMap<PsiElement, string>, arg4 : JSVisibilityUtil.Options) : void;
	checkOutgoingReferences(arg1 : MultiMap<PsiElement, string>, arg2 : JSVisibilityUtil.Options) : void;
	checkIncomingReferencesToSubclass(arg1 : UsageInfo[], arg2 : MultiMap<PsiElement, string>, arg3 : JSVisibilityUtil.Options) : void;
	createFakeClass() : JSClass;
	findUsagesAfterMove(arg1 : JSElement, arg2 : Collection<UsageInfo>, arg3 : Map<PsiElement, JSExtractSuperProcessor.Status>) : void;
	bindRefsToTarget(arg1 : UsageInfo[], arg2 : List<FormatFixer>) : void;
	createSuperClassifier(arg1 : List<FormatFixer>) : void;
	renameOriginalClass(arg1 : List<FormatFixer>) : void;
	createJSClass(arg1 : Project, arg2 : PsiFile, arg3 : string) : JSClass;
	renameOriginalFileLocalClass(arg1 : List<FormatFixer>) : void;
	static findSubjectType(arg1 : JSExpression, arg2 : boolean) : JSClass;
	static reportConflict(arg1 : JSAttributeListOwner, arg2 : PsiElement, arg3 : MultiMap<PsiElement, string>) : void;
}


declare interface JSExtractSuperProcessor extends BaseRefactoringProcessor {}

declare module JSExtractSuperProcessor {
	class JSExtractInterfaceUsageViewDescriptor {
		elements : PsiElement[];
		processedElementsHeader : string;
	}


	interface JSExtractInterfaceUsageViewDescriptor extends UsageViewDescriptorAdapter {}	class Status {
		static Yes : JSExtractSuperProcessor.Status;
		static No : JSExtractSuperProcessor.Status;
		static InProgress : JSExtractSuperProcessor.Status;
	}


	interface Status extends Enum<JSExtractSuperProcessor.Status> {}	class Mode {
		static ExtractSuper : JSExtractSuperProcessor.Mode;
		static ExtractSuperTurnRefs : JSExtractSuperProcessor.Mode;
		static RenameImplementation : JSExtractSuperProcessor.Mode;
	}


	interface Mode extends Enum<JSExtractSuperProcessor.Mode> {}}

export = JSExtractSuperProcessor
