import Object = require('nashorn/java/lang/Object');
import JSFile = require('nashorn/com/intellij/lang/javascript/psi/JSFile');
import JSPackageStatement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSPackageStatement');
import UserDataHolder = require('nashorn/com/intellij/openapi/util/UserDataHolder');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import XmlFile = require('nashorn/com/intellij/psi/xml/XmlFile');

declare class RenameMoveUtils extends Object {
	constructor();
	static updateFileWithChangedName(arg1 : JSFile) : void;
	static updatePackageStatement(arg1 : JSFile) : JSPackageStatement;
	static updateMovedFile(arg1 : JSFile) : void;
	static updateMovedFile(arg1 : JSFile, arg2 : UserDataHolder) : void;
	static prepareMovedFile(arg1 : JSFile) : void;
	static prepareMovedFile(arg1 : JSFile, arg2 : UserDataHolder) : void;
	static saveOldPackageNameCheckingRefs(arg1 : JSFile, arg2 : UserDataHolder) : void;
	static checkIfFileHasReferencesToOldPackage(arg1 : JSFile, arg2 : string, arg3 : Ref<boolean>) : void;
	static getRealFile(arg1 : PsiFile) : PsiFile;
	static prepareMovedMxmlFile(arg1 : XmlFile, arg2 : XmlFile) : void;
	static prepareMovedMxmlFile(arg1 : XmlFile, arg2 : XmlFile, arg3 : UserDataHolder) : void;
	static updateMovedMxmlFile(arg1 : XmlFile) : void;
	static updateMovedMxmlFile(arg1 : XmlFile, arg2 : UserDataHolder) : void;
}

export = RenameMoveUtils
