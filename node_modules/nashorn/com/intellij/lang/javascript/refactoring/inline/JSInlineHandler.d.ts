import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Set = require('nashorn/java/util/Set');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import Document = require('nashorn/com/intellij/openapi/editor/Document');
import InlineHandler = require('nashorn/com/intellij/lang/refactoring/InlineHandler');
import InlineOptionsDialog = require('nashorn/com/intellij/refactoring/inline/InlineOptionsDialog');
import Collection = require('nashorn/java/util/Collection');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');

declare class JSInlineHandler {
	constructor();
	static getPhysicalFileOfEditor(arg1 : Editor) : VirtualFile;
	static getVirtualFile(arg1 : PsiFile) : VirtualFile;
	static addThisReference(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement, arg4 : number, arg5 : Set<RangeMarker>, arg6 : Document) : void;
	static doAddThisReference(arg1 : PsiElement, arg2 : PsiElement, arg3 : number, arg4 : Set<RangeMarker>, arg5 : Document) : void;
}


declare interface JSInlineHandler extends InlineHandler {}

declare module JSInlineHandler {
	class JSInlineOptionsDialog {
	}


	interface JSInlineOptionsDialog extends InlineOptionsDialog {}	class JSInlineSettingsBase {
		onlyOneReferenceToInline : boolean;
		selfReference : boolean;
		constructor(arg1 : boolean, arg2 : PsiFile, arg3 : Editor, arg4 : boolean);
		addRangeHighlighterForPsiElement(arg1 : PsiElement) : void;
		setOneRefToInline(arg1 : boolean) : void;
		highlightUsages(arg1 : Editor, arg2 : Collection<PsiReference>) : void;
		isSelfReference() : boolean;
	}


	interface JSInlineSettingsBase extends InlineHandler.Settings {}}

export = JSInlineHandler
