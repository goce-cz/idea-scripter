import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import NotNullLazyValue = require('nashorn/com/intellij/openapi/util/NotNullLazyValue');
import Collection = require('nashorn/java/util/Collection');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import InlineHandler = require('nashorn/com/intellij/lang/refactoring/InlineHandler');
import JSInlineHandler = require('nashorn/com/intellij/lang/javascript/refactoring/inline/JSInlineHandler');

declare class VarOrFieldInliner {
	constructor(arg1 : PsiElement, arg2 : VarOrFieldInliner.MySettings);
	static referencesOurDefinition(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	static findDefinition(arg1 : PsiElement) : PsiElement;
	static isLocalVarOrField(arg1 : PsiElement) : boolean;
	static isLocalVariable(arg1 : JSVariable) : boolean;
	static handleVariable(arg1 : PsiElement, arg2 : Editor, arg3 : boolean, arg4 : NotNullLazyValue<Collection<PsiReference>>, arg5 : boolean) : InlineHandler.Settings;
	static removeDefinition(arg1 : PsiElement, arg2 : VarOrFieldInliner.MySettings) : void;
}


declare interface VarOrFieldInliner extends InlineHandler.Inliner {}

declare module VarOrFieldInliner {
	class MySettings {
		getReplacement(arg1 : PsiElement) : PsiElement;
	}


	interface MySettings extends JSInlineHandler.JSInlineSettingsBase {}}

export = VarOrFieldInliner
