import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSInlineHandler = require('nashorn/com/intellij/lang/javascript/refactoring/inline/JSInlineHandler');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import Map = require('nashorn/java/util/Map');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import RangeMarker = require('nashorn/com/intellij/openapi/editor/RangeMarker');
import JSParameter = require('nashorn/com/intellij/lang/javascript/psi/JSParameter');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import NotNullLazyValue = require('nashorn/com/intellij/openapi/util/NotNullLazyValue');
import Collection = require('nashorn/java/util/Collection');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import InlineHandler = require('nashorn/com/intellij/lang/refactoring/InlineHandler');
import Project = require('nashorn/com/intellij/openapi/project/Project');

declare class FunctionInliner {
	constructor(arg1 : PsiElement, arg2 : JSInlineHandler.JSInlineSettingsBase);
	calculateReplacement(arg1 : JSFunction, arg2 : JSCallExpression) : JSFunction;
	static buildReplacement(arg1 : PsiElement, arg2 : JSExpression, arg3 : Map<JSReferenceExpression, RangeMarker>, arg4 : Map<JSParameter, JSExpression>, arg5 : Map<RangeMarker, JSParameter>, arg6 : JSExpression, arg7 : boolean) : string;
	static handleFunction(arg1 : PsiElement, arg2 : Editor, arg3 : boolean, arg4 : NotNullLazyValue<Collection<PsiReference>>, arg5 : boolean) : InlineHandler.Settings;
	static inlineFunctionProblem(arg1 : string, arg2 : Editor, arg3 : Project) : void;
}


declare interface FunctionInliner extends InlineHandler.Inliner {}
export = FunctionInliner
