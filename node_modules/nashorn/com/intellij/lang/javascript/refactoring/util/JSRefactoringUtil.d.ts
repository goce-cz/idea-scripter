import Object = require('nashorn/java/lang/Object');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSReferenceList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSReferenceList');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import Collection = require('nashorn/java/util/Collection');
import FormatFixer = require('nashorn/com/intellij/lang/javascript/refactoring/FormatFixer');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import JSVarStatement = require('nashorn/com/intellij/lang/javascript/psi/JSVarStatement');
import UsageInfo = require('nashorn/com/intellij/usageView/UsageInfo');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import JSMemberUsageInfo = require('nashorn/com/intellij/lang/javascript/refactoring/util/JSMemberUsageInfo');
import JSNamespaceDeclaration = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSNamespaceDeclaration');
import List = require('nashorn/java/util/List');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import PsiDirectory = require('nashorn/com/intellij/psi/PsiDirectory');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import JSLanguageDialect = require('nashorn/com/intellij/lang/javascript/JSLanguageDialect');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import ThreeState = require('nashorn/com/intellij/util/ThreeState');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import JSCodeStyleSettings = require('nashorn/com/intellij/lang/javascript/formatter/JSCodeStyleSettings');

declare class JSRefactoringUtil extends Object {
	constructor();
	static buildAbstractMethod(arg1 : JSFunction) : JSFunction;
	static removeFromReferenceList(arg1 : JSReferenceList, arg2 : JSClass, arg3 : Collection<FormatFixer>) : string;
	static findReferenceToClass(arg1 : JSReferenceList, arg2 : JSClass) : JSReferenceExpression;
	static addToSupersList(arg1 : JSClass, arg2 : string, arg3 : boolean) : void;
	static makeQualified(arg1 : JSReferenceExpression, arg2 : JSQualifiedNamedElement, arg3 : boolean) : void;
	static isChildOfAny(arg1 : PsiElement, arg2 : Collection<PsiElement>) : boolean;
	static isOrWillBeInTargetClass(arg1 : PsiElement, arg2 : Collection<PsiElement>, arg3 : JSClass, arg4 : boolean) : boolean;
	static getVarStatementCopy(arg1 : JSVariable) : JSVarStatement;
	static qualifyIncomingReferences(arg1 : UsageInfo[]) : Collection<PsiFile>;
	static getUsage(arg1 : JSAttributeListOwner, arg2 : PsiReference, arg3 : Collection<JSAttributeListOwner>, arg4 : JSClass) : JSMemberUsageInfo;
	static getUsages(arg1 : Collection<JSAttributeListOwner>, arg2 : JSClass) : UsageInfo[];
	static getNamespace(arg1 : PsiElement) : JSNamespaceDeclaration;
	static fixOutgoingReferences(arg1 : PsiElement, arg2 : Collection<string>, arg3 : Collection<string>, arg4 : Collection<JSAttributeListOwner>, arg5 : JSClass, arg6 : boolean, arg7 : boolean) : PsiElement;
	static processChildren(arg1 : PsiElement, arg2 : Collection<string>, arg3 : Collection<string>, arg4 : Collection<JSAttributeListOwner>, arg5 : JSClass, arg6 : boolean, arg7 : boolean) : void;
	static postProcess(arg1 : PsiElement, arg2 : JSQualifiedNamedElement, arg3 : Collection<PsiFile>, arg4 : Collection<string>, arg5 : Collection<string>, arg6 : List<FormatFixer>, arg7 : boolean, arg8 : boolean) : void;
	static addUseNamespaceDirectives(arg1 : JSQualifiedNamedElement, arg2 : Collection<string>) : Collection<FormatFixer>;
	static getImportDirectiveAnchor(arg1 : JSElement) : PsiElement;
	static format(arg1 : List<FormatFixer>) : void;
	static getElementToFormat(arg1 : PsiElement) : PsiElement;
	static buildImplementationMethod(arg1 : JSFunction, arg2 : JSClass) : JSFunction;
	static addRemovalFormatters(arg1 : JSClass, arg2 : Collection<PsiElement>, arg3 : Condition<JSFunction>, arg4 : Condition<JSVariable>, arg5 : List<FormatFixer>) : void;
	static processParent(arg1 : PsiElement, arg2 : Collection<PsiElement>, arg3 : List<FormatFixer>, arg4 : Collection<PsiElement>) : void;
	static deleteWithNoPostponedFormatting(arg1 : PsiElement) : void;
	static findDocComment(arg1 : PsiElement) : PsiElement;
	static checkCanCreateFile(arg1 : PsiDirectory, arg2 : string) : string;
	static getMemberInsertionAnchor(arg1 : JSClass, arg2 : boolean) : Pair<PsiElement, boolean>;
	static skipWhitespaces(arg1 : PsiElement, arg2 : boolean) : PsiElement;
	static addMemberToTargetClass(arg1 : JSClass, arg2 : PsiElement) : PsiElement;
	static handleDocCommentAndFormat(arg1 : PsiElement, arg2 : List<FormatFixer>) : void;
	static isEllipsisType(arg1 : string) : boolean;
	static createTypeElement(arg1 : Project, arg2 : string, arg3 : JSLanguageDialect) : PsiElement;
	static setType(arg1 : JSNamedElement, arg2 : string, arg3 : boolean) : void;
	static isResolvableType(arg1 : string, arg2 : PsiElement, arg3 : boolean, arg4 : boolean) : boolean;
	static isValidIdentifier(arg1 : string, arg2 : Project) : boolean;
	static chooseOrCreateDirectoryForClass(arg1 : Project, arg2 : Module, arg3 : GlobalSearchScope, arg4 : string, arg5 : string, arg6 : PsiDirectory, arg7 : ThreeState) : PsiDirectory;
	static checkReadOnlyStatus(arg1 : PsiElement, arg2 : Editor, arg3 : string) : boolean;
	static addConstructorUsages(arg1 : JSClass, arg2 : boolean, arg3 : Collection<UsageInfo>) : void;
	static getElementSearchScope(arg1 : PsiElement) : SearchScope;
	static transformVarNameToAccessorName(arg1 : string, arg2 : Project) : string;
	static transformVarNameToAccessorName(arg1 : string, arg2 : JSCodeStyleSettings) : string;
	static transformAccessorNameToPropertyName(arg1 : string, arg2 : Project) : string;
}


declare module JSRefactoringUtil {
	class ConstructorUsageInfo {
		subject : JSClass;
		element : JSReferenceExpression;
		constructor(arg1 : JSReferenceExpression, arg2 : JSClass);
		getSubject() : JSClass;
	}


	interface ConstructorUsageInfo extends UsageInfo {}}

export = JSRefactoringUtil
