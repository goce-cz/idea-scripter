import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Collection = require('nashorn/java/util/Collection');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import UsageInfo = require('nashorn/com/intellij/usageView/UsageInfo');
import MultiMap = require('nashorn/com/intellij/util/containers/MultiMap');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSVisibilityUtil = require('nashorn/com/intellij/lang/javascript/refactoring/JSVisibilityUtil');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');
import JSMemberInfo = require('nashorn/com/intellij/lang/javascript/refactoring/util/JSMemberInfo');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');

declare class JSRefactoringConflictsUtil extends Object {
	constructor();
	static analyzeModuleConflicts(arg1 : Project, arg2 : Collection<PsiElement>, arg3 : UsageInfo[], arg4 : PsiElement, arg5 : MultiMap<PsiElement, string>) : void;
	static analyzeModuleConflicts(arg1 : Project, arg2 : Collection<PsiElement>, arg3 : UsageInfo[], arg4 : VirtualFile, arg5 : MultiMap<PsiElement, string>) : void;
	static getContainerMember(arg1 : PsiElement) : PsiElement;
	static checkIncomingReferencesAccessibility(arg1 : UsageInfo[], arg2 : JSClass, arg3 : string, arg4 : MultiMap<PsiElement, string>, arg5 : JSVisibilityUtil.Options) : void;
	static checkAccessibility(arg1 : JSAttributeListOwner, arg2 : JSClass, arg3 : string, arg4 : PsiElement, arg5 : MultiMap<PsiElement, string>, arg6 : boolean, arg7 : JSVisibilityUtil.Options) : void;
	static getUsageLocation(arg1 : PsiElement) : PsiElement;
	static checkMembersAlreadyExist(arg1 : JSMemberInfo[], arg2 : JSClass, arg3 : MultiMap<PsiElement, string>) : void;
	static checkMembersAlreadyExist(arg1 : Collection<JSAttributeListOwner>, arg2 : JSClass, arg3 : MultiMap<PsiElement, string>) : void;
	static checkMemberExist(arg1 : JSAttributeListOwner, arg2 : JSClass, arg3 : MultiMap<PsiElement, string>) : void;
	static checkOutgoingReferencesAccessibility(arg1 : PsiElement, arg2 : Collection<PsiElement>, arg3 : PsiElement, arg4 : boolean, arg5 : MultiMap<PsiElement, string>, arg6 : Condition<PsiElement>, arg7 : JSVisibilityUtil.Options) : void;
	static checkOutgoingReferencesInSignatureAccessibility(arg1 : JSFunction, arg2 : PsiElement, arg3 : boolean, arg4 : MultiMap<PsiElement, string>, arg5 : JSVisibilityUtil.Options) : void;
	static checkOutgoingReferencesAccessibility(arg1 : PsiElement, arg2 : PsiElement, arg3 : Collection<PsiElement>, arg4 : PsiElement, arg5 : boolean, arg6 : MultiMap<PsiElement, string>, arg7 : Condition<PsiElement>, arg8 : Collection<PsiElement>, arg9 : JSVisibilityUtil.Options) : void;
	static getInaccessibleElement(arg1 : PsiElement) : PsiElement;
	static reportInaccessibleElement(arg1 : PsiElement, arg2 : JSClass, arg3 : PsiElement, arg4 : boolean, arg5 : MultiMap<PsiElement, string>, arg6 : Collection<PsiElement>) : void;
	static calcAccessibilityConflicts(arg1 : PsiReference, arg2 : JSAttributeListOwner, arg3 : JSVisibilityUtil.Options) : MultiMap<PsiElement, string>;
}

export = JSRefactoringConflictsUtil
