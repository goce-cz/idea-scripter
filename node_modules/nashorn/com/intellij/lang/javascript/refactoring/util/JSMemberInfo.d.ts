import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import List = require('nashorn/java/util/List');
import MemberInfoBase = require('nashorn/com/intellij/refactoring/classMembers/MemberInfoBase');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');
import Collection = require('nashorn/java/util/Collection');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');

declare class JSMemberInfo {
	extendsNotImplements : boolean;
	static determineOverrides(arg1 : JSFunction) : boolean;
	static extractStaticMembers(arg1 : JSClass, arg2 : List<JSMemberInfo>, arg3 : MemberInfoBase.Filter<JSAttributeListOwner>) : void;
	static extractClassMembers(arg1 : JSClass, arg2 : List<JSMemberInfo>, arg3 : MemberInfoBase.Filter<JSAttributeListOwner>) : void;
	isExtendsNotImplements() : boolean;
	setChecked(arg1 : Collection<JSElement>) : void;
	static getSelected(arg1 : JSMemberInfo[], arg2 : JSClass, arg3 : Condition<JSMemberInfo>) : JSMemberInfo[];
	static getSelected(arg1 : Collection<JSMemberInfo>, arg2 : JSClass, arg3 : Condition<JSMemberInfo>) : JSMemberInfo[];
	static getStatics(arg1 : JSMemberInfo[]) : Collection<JSAttributeListOwner>;
	static sortByOffset(arg1 : JSMemberInfo[]) : void;
	static sortByOffset(arg1 : List<JSMemberInfo>) : void;
	static extractSameMembers(arg1 : JSClass, arg2 : JSClass, arg3 : JSMemberInfo[], arg4 : List<JSMemberInfo>) : void;
}


declare interface JSMemberInfo extends MemberInfoBase<JSAttributeListOwner> {}
export = JSMemberInfo
