import BaseIntroduceSettings = require('nashorn/com/intellij/lang/javascript/refactoring/introduce/BaseIntroduceSettings');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import JSBaseIntroduceHandler = require('nashorn/com/intellij/lang/javascript/refactoring/introduce/JSBaseIntroduceHandler');
import JSBaseIntroduceDialog = require('nashorn/com/intellij/lang/javascript/refactoring/introduce/JSBaseIntroduceDialog');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import AbstractInplaceIntroducer = require('nashorn/com/intellij/refactoring/introduce/inplace/AbstractInplaceIntroducer');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');

declare class JSBaseInplaceIntroducer<S extends BaseIntroduceSettings> {
	replaceAllOccurrences : boolean;
	constructor(arg1 : Project, arg2 : Editor, arg3 : JSElement, arg4 : JSElement[], arg5 : FileType, arg6 : JSBaseIntroduceHandler<JSElement, S, JSBaseIntroduceDialog>, arg7 : JSBaseIntroduceHandler.BaseIntroduceContext<S>);
	getInplaceIntroduceSettings(arg1 : string) : S;
	fixContext() : void;
	static ensureExpressionInArray(arg1 : JSExpression[], arg2 : JSExpression) : JSExpression[];
}


declare interface JSBaseInplaceIntroducer<S extends BaseIntroduceSettings> extends AbstractInplaceIntroducer<JSVariable, PsiElement> {}
export = JSBaseInplaceIntroducer
