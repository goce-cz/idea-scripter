import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import EnumSet = require('nashorn/java/util/EnumSet');
import Collection = require('nashorn/java/util/Collection');
import Set = require('nashorn/java/util/Set');
import Processor = require('nashorn/com/intellij/util/Processor');
import IntroducedEntityInfoProvider = require('nashorn/com/intellij/lang/javascript/refactoring/introduce/IntroducedEntityInfoProvider');
import Enum = require('nashorn/java/lang/Enum');

declare class BasicIntroducedEntityInfoProvider {
	myOccurrences : JSExpression[];
	myMainOccurrence : JSExpression;
	occurrenceCount : number;
	containingFile : PsiFile;
	constructor(arg1 : JSExpression, arg2 : JSExpression[], arg3 : PsiElement);
	static findExistingInScopeAndUp(arg1 : string, arg2 : PsiElement) : JSNamedElement;
	static showConflictsDialog(arg1 : JSNamedElement, arg2 : string, arg3 : Project) : boolean;
	static suggestCandidateName(arg1 : JSExpression, arg2 : PsiElement, arg3 : EnumSet<BasicIntroducedEntityInfoProvider.NameSuggestOption>) : string;
	static getNameCandidates(arg1 : JSExpression, arg2 : PsiElement, arg3 : Collection<string>, arg4 : EnumSet<BasicIntroducedEntityInfoProvider.NameSuggestOption>) : Set<string>;
	static doAddName(arg1 : string, arg2 : Set<string>, arg3 : PsiElement, arg4 : Collection<string>, arg5 : boolean) : void;
	static processCandidates(arg1 : JSExpression, arg2 : Processor<string>, arg3 : EnumSet<BasicIntroducedEntityInfoProvider.NameSuggestOption>) : void;
	static addName(arg1 : string, arg2 : Processor<string>, arg3 : Set<string>) : void;
	static isSomeArrayType(arg1 : string) : boolean;
	static isValidIdentifier(arg1 : string, arg2 : PsiElement) : boolean;
	static findExistingInScope(arg1 : string, arg2 : PsiElement, arg3 : boolean) : PsiElement;
	processStatics(arg1 : PsiElement) : boolean;
}


declare interface BasicIntroducedEntityInfoProvider extends IntroducedEntityInfoProvider {}

declare module BasicIntroducedEntityInfoProvider {
	class NameVariantsEvaluator {
		names : Collection<string>;
		constructor(arg1 : boolean, arg2 : Set<string>, arg3 : PsiElement, arg4 : Collection<string>);
		constructor(arg1 : PsiElement, arg2 : PsiElement, arg3 : Collection<string>);
		static sanitizeJavaScriptIdentifier(arg1 : string) : string;
		addName(arg1 : string) : void;
		getNames() : Collection<string>;
	}


	interface NameVariantsEvaluator extends Processor<string> {}	class NameSuggestOption {
		static IgnoreParamName : BasicIntroducedEntityInfoProvider.NameSuggestOption;
		static TypeHasHigherPriorityThanName : BasicIntroducedEntityInfoProvider.NameSuggestOption;
	}


	interface NameSuggestOption extends Enum<BasicIntroducedEntityInfoProvider.NameSuggestOption> {}}

export = BasicIntroducedEntityInfoProvider
