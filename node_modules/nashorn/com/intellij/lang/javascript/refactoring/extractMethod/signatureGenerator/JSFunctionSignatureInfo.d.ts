import Object = require('nashorn/java/lang/Object');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import List = require('nashorn/java/util/List');
import Couple = require('nashorn/com/intellij/openapi/util/Couple');
import Enum = require('nashorn/java/lang/Enum');

declare class JSFunctionSignatureInfo extends Object {
	static VAR_ARG_TYPE : string;
	accessType : JSAttributeList.AccessType;
	functionAnchor : string;
	scope : JSFunctionSignatureInfo.Scope;
	functionExpression : boolean;
	functionName : string;
	parameters : List<Couple<string>>;
	returnType : string;
	constructor(arg1 : string);
	getAccessType() : JSAttributeList.AccessType;
	setAccessType(arg1 : JSAttributeList.AccessType) : void;
	isStatic() : boolean;
	setStatic(arg1 : boolean) : void;
	getFunctionAnchor() : string;
	setFunctionAnchor(arg1 : string) : void;
	getScope() : JSFunctionSignatureInfo.Scope;
	setScope(arg1 : JSFunctionSignatureInfo.Scope) : void;
	setFunctionExpression(arg1 : boolean) : void;
	setReturnType(arg1 : string) : void;
	isFunctionExpression() : boolean;
	getFunctionName() : string;
	addParameter(arg1 : Couple<string>) : void;
	addParameterAndType(arg1 : string, arg2 : string) : void;
	getParameters() : List<Couple<string>>;
	getReturnType() : string;
}


declare module JSFunctionSignatureInfo {
	class Scope {
		static GLOBAL : JSFunctionSignatureInfo.Scope;
		static CLASS : JSFunctionSignatureInfo.Scope;
		static JS_OBJECT : JSFunctionSignatureInfo.Scope;
	}


	interface Scope extends Enum<JSFunctionSignatureInfo.Scope> {}}

export = JSFunctionSignatureInfo
