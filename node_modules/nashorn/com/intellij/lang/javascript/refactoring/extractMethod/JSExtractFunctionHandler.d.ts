import Project = require('nashorn/com/intellij/openapi/project/Project');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import JSExtractFunctionSettings = require('nashorn/com/intellij/lang/javascript/refactoring/extractMethod/JSExtractFunctionSettings');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import ExtractedFunctionSignatureGenerator = require('nashorn/com/intellij/lang/javascript/refactoring/extractMethod/ExtractedFunctionSignatureGenerator');
import List = require('nashorn/java/util/List');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Pass = require('nashorn/com/intellij/openapi/util/Pass');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import Class = require('nashorn/java/lang/Class');
import JSBlockStatement = require('nashorn/com/intellij/lang/javascript/psi/JSBlockStatement');
import RefactoringActionHandler = require('nashorn/com/intellij/refactoring/RefactoringActionHandler');
import Object = require('nashorn/java/lang/Object');

declare class JSExtractFunctionHandler {
	constructor();
	doRefactoringInWriteAction(arg1 : Project, arg2 : Editor, arg3 : JSExtractFunctionSettings) : void;
	getSettings(arg1 : PsiFile, arg2 : Editor, arg3 : Project) : JSExtractFunctionSettings;
	showDialog(arg1 : PsiFile, arg2 : JSExtractFunctionHandler.ContextInfo, arg3 : ExtractedFunctionSignatureGenerator, arg4 : JSExtractFunctionHandler.IntroductionScope) : JSExtractFunctionSettings;
	getIntroductionScope(arg1 : Editor, arg2 : ExtractedFunctionSignatureGenerator, arg3 : boolean, arg4 : List<JSExtractFunctionHandler.IntroductionScope>, arg5 : PsiElement, arg6 : Pass<JSExtractFunctionHandler.IntroductionScope>, arg7 : string) : JSExtractFunctionHandler.IntroductionScope;
	static getDefaultSuggestedScope(arg1 : List<JSExtractFunctionHandler.IntroductionScope>, arg2 : boolean) : JSExtractFunctionHandler.IntroductionScope;
	possibleToExtract(arg1 : Editor, arg2 : JSExtractFunctionHandler.ContextInfo) : boolean;
	notAllowedStatement(arg1 : PsiElement) : boolean;
	findStatement(arg1 : PsiElement, arg2 : number, arg3 : number) : PsiElement;
	static createDefaultParametersInfo(arg1 : JSExtractFunctionHandler.IntroductionScope) : JSExtractFunctionSettings.ParametersInfo;
	getExtractFragmentStartOffset(arg1 : Editor) : number;
	getExtractFragmentEndOffset(arg1 : Editor) : number;
	static isPropertyContext(arg1 : PsiElement) : boolean;
	doRefactoring(arg1 : Project, arg2 : Editor, arg3 : JSExtractFunctionSettings) : void;
	createMethodCallStringAfterExtractMethod(arg1 : JSExtractFunctionSettings, arg2 : JSExtractFunctionHandler.ContextInfo, arg3 : string, arg4 : string) : string;
	createAstNodeForIntroducedFunctionText(arg1 : Project, arg2 : JSExtractFunctionHandler.IntroductionScope, arg3 : string) : ASTNode;
	getStatementTerminator(arg1 : JSExtractFunctionHandler.ContextInfo) : string;
	getReturnStatementPrefix() : string;
	getSignatureGenerator() : ExtractedFunctionSignatureGenerator;
	getVariableDeclarationPrefix() : string;
	addBodyToSignature(arg1 : string, arg2 : string) : string;
	static findFunctionAnchor(arg1 : PsiElement, arg2 : PsiElement) : PsiElement;
	needInsertAfter(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	static isArgumentsReference(arg1 : JSVariable) : boolean;
	static getBase(arg1 : JSVariable) : PsiElement;
	static getExpressionElementPresentation(arg1 : PsiElement) : string;
	createPairWithPresentation(arg1 : PsiElement) : JSExtractFunctionHandler.IntroductionScope;
	getScopeTypes() : Class[];
	acceptBlockStatementAsScope(arg1 : JSBlockStatement) : boolean;
	findBase(arg1 : PsiElement, arg2 : boolean) : JSExtractFunctionHandler.IntroductionScope;
	findBases(arg1 : PsiElement) : List<JSExtractFunctionHandler.IntroductionScope>;
	static getNotNullParametersInfo(arg1 : JSExtractFunctionSettings) : JSExtractFunctionSettings.ParametersInfo;
	static getOrderedParameters(arg1 : JSExtractFunctionSettings.ParametersInfo) : List<JSVariable>;
}


declare interface JSExtractFunctionHandler extends RefactoringActionHandler {}

declare module JSExtractFunctionHandler {
	class IntroductionScope extends Object {
		classContext : boolean;
		global : boolean;
		parent : PsiElement;
		constructor();
		constructor(arg1 : PsiElement, arg2 : string);
		isClassContext() : boolean;
		isGlobal() : boolean;
		getParent() : PsiElement;
	}
	class ContextInfo extends Object {
		introductionScopes : List<JSExtractFunctionHandler.IntroductionScope>;
		ecmaL4 : boolean;
		anchor : PsiElement;
		problem : string;
		constructor(arg1 : Editor, arg2 : boolean);
		reachableFromExtractScope(arg1 : PsiElement, arg2 : PsiElement) : boolean;
		getProblem() : string;
	}
}

export = JSExtractFunctionHandler
