import Object = require('nashorn/java/lang/Object');
import JSExtractFunctionSettings = require('nashorn/com/intellij/lang/javascript/refactoring/extractMethod/JSExtractFunctionSettings');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSFunctionSignatureGenerator = require('nashorn/com/intellij/lang/javascript/refactoring/extractMethod/signatureGenerator/JSFunctionSignatureGenerator');
import JSFunctionSignatureInfo = require('nashorn/com/intellij/lang/javascript/refactoring/extractMethod/signatureGenerator/JSFunctionSignatureInfo');
import JSExtractFunctionHandler = require('nashorn/com/intellij/lang/javascript/refactoring/extractMethod/JSExtractFunctionHandler');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');

declare class JSExtractedFunctionSignatureInfoBuilder extends Object {
	constructor();
	getSignature(arg1 : JSExtractFunctionSettings, arg2 : PsiElement) : string;
	getGenerator() : JSFunctionSignatureGenerator;
	getSignatureInfo(arg1 : JSExtractFunctionSettings, arg2 : PsiElement) : JSFunctionSignatureInfo;
	fill(arg1 : JSFunctionSignatureInfo, arg2 : JSExtractFunctionSettings, arg3 : JSExtractFunctionHandler.IntroductionScope, arg4 : PsiElement) : void;
	getScope(arg1 : JSExtractFunctionSettings) : JSFunctionSignatureInfo.Scope;
	setParams(arg1 : JSFunctionSignatureInfo, arg2 : JSExtractFunctionSettings) : void;
	getStringType(arg1 : JSVariable, arg2 : JSExtractFunctionSettings.ParameterInfo) : string;
	static setAccessType(arg1 : JSFunctionSignatureInfo, arg2 : JSExtractFunctionSettings) : void;
	static setStatic(arg1 : JSFunctionSignatureInfo, arg2 : JSExtractFunctionSettings, arg3 : PsiElement) : void;
}

export = JSExtractedFunctionSignatureInfoBuilder
