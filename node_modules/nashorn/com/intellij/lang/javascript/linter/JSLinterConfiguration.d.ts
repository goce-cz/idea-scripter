import JSLinterState = require('nashorn/com/intellij/lang/javascript/linter/JSLinterState');
import ExtendedLinterState = require('nashorn/com/intellij/lang/javascript/linter/ExtendedLinterState');
import Element = require('nashorn/org/jdom/Element');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Class = require('nashorn/java/lang/Class');
import JSLinterInspection = require('nashorn/com/intellij/lang/javascript/linter/JSLinterInspection');
import PersistentStateComponent = require('nashorn/com/intellij/openapi/components/PersistentStateComponent');

declare class JSLinterConfiguration<T extends JSLinterState> {
	extendedState : ExtendedLinterState<T>;
	state : Element;
	constructor(arg1 : Project);
	getProject() : Project;
	setExtendedState(arg1 : ExtendedLinterState<T>) : void;
	setExtendedState(arg1 : boolean, arg2 : T) : void;
	savePrivateSettings(arg1 : T) : void;
	getExtendedState() : ExtendedLinterState<T>;
	getExtendedState(arg1 : boolean) : ExtendedLinterState<T>;
	loadPrivateSettings(arg1 : T) : T;
	isInspectionEnabled() : boolean;
	setInspectionEnabled(arg1 : boolean) : void;
	getInspectionClass() : Class<JSLinterInspection>;
	toXml(arg1 : T) : Element;
	fromXml(arg1 : Element) : T;
	getDefaultState() : T;
	static getInstance<T extends JSLinterConfiguration>(arg1 : Project, arg2 : Class<T>) : T;
}


declare interface JSLinterConfiguration<T extends JSLinterState> extends PersistentStateComponent<Element> {}
export = JSLinterConfiguration
