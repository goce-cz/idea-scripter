import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Runnable = require('nashorn/java/lang/Runnable');
import PathHolder = require('nashorn/com/intellij/lang/javascript/linter/PathHolder');
import VirtualFileAdapter = require('nashorn/com/intellij/openapi/vfs/VirtualFileAdapter');

declare class SharedConfigurationPaths extends Object {
	constructor(arg1 : Project);
	static getInstance(arg1 : Project) : SharedConfigurationPaths;
	remove(arg1 : VirtualFile) : SharedConfigurationPaths.PathHolderImpl;
	add(arg1 : VirtualFile, arg2 : SharedConfigurationPaths.PathHolderImpl) : void;
	createPathHolder(arg1 : Runnable) : PathHolder;
}


declare module SharedConfigurationPaths {
	class MyVirtualFileListener {
	}


	interface MyVirtualFileListener extends VirtualFileAdapter {}	class PathHolderImpl {
		path : string;
		constructor(arg1 : Runnable);
		rename(arg1 : string) : void;
	}


	interface PathHolderImpl extends PathHolder {}}

export = SharedConfigurationPaths
