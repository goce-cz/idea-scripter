import List = require('nashorn/java/util/List');
import JSLinterError = require('nashorn/com/intellij/lang/javascript/linter/JSLinterError');
import JscsObsoleteRulesWarning = require('nashorn/com/intellij/lang/javascript/linter/jscs/JscsObsoleteRulesWarning');
import JSLinterErrorBase = require('nashorn/com/intellij/lang/javascript/linter/JSLinterErrorBase');
import IXMLElement = require('nashorn/net/n3/nanoxml/IXMLElement');
import ProcessAdapter = require('nashorn/com/intellij/execution/process/ProcessAdapter');
import Exception = require('nashorn/java/lang/Exception');

declare class JscsCheckStyleOutputFormatParser {
	errors : List<JSLinterError>;
	warning : JscsObsoleteRulesWarning;
	globalError : JSLinterErrorBase;
	constructor(arg1 : string);
	process() : void;
	static parseGlobalError(arg1 : string) : JSLinterErrorBase;
	parseStdOut(arg1 : string) : void;
	getErrors() : List<JSLinterError>;
	getWarning() : JscsObsoleteRulesWarning;
	getGlobalError() : JSLinterErrorBase;
	parseError(arg1 : IXMLElement) : void;
	static tryParseExceptionMessage(arg1 : string) : string;
	static isExceptionLine(arg1 : string) : boolean;
	readLineOrCol(arg1 : IXMLElement, arg2 : string) : number;
	static expect(arg1 : IXMLElement, arg2 : string) : void;
}


declare interface JscsCheckStyleOutputFormatParser extends ProcessAdapter {}

declare module JscsCheckStyleOutputFormatParser {
	class MyHomeException {
		element : IXMLElement;
		constructor(arg1 : string, arg2 : IXMLElement);
		getElement() : IXMLElement;
	}


	interface MyHomeException extends Exception {}}

export = JscsCheckStyleOutputFormatParser
