import JsonFile = require('nashorn/com/intellij/json/psi/JsonFile');
import AnnotationHolder = require('nashorn/com/intellij/lang/annotation/AnnotationHolder');
import JsonObject = require('nashorn/com/intellij/json/psi/JsonObject');
import JscsOption = require('nashorn/com/intellij/lang/javascript/linter/jscs/config/JscsOption');
import JsonValue = require('nashorn/com/intellij/json/psi/JsonValue');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Annotator = require('nashorn/com/intellij/lang/annotation/Annotator');
import Object = require('nashorn/java/lang/Object');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import JsonProperty = require('nashorn/com/intellij/json/psi/JsonProperty');
import JsonArray = require('nashorn/com/intellij/json/psi/JsonArray');

declare class JscsConfigFileAnnotator {
	constructor();
	static annotateMe(arg1 : JsonFile, arg2 : AnnotationHolder) : void;
	static iterateOptions<T>(arg1 : JsonObject, arg2 : AnnotationHolder, arg3 : JscsConfigFileAnnotator.OptionChecker<T>) : void;
	static createExpectedTypesAnnotation(arg1 : JscsOption, arg2 : AnnotationHolder, arg3 : JsonValue) : void;
	static createWarningAnnotation(arg1 : AnnotationHolder, arg2 : PsiElement, arg3 : string) : void;
}


declare interface JscsConfigFileAnnotator extends Annotator {}

declare module JscsConfigFileAnnotator {
	class AnnotationTextBuilder extends Object {
		constructor(arg1 : AnnotationHolder, arg2 : PsiElement, arg3 : JscsOption);
		withOptionsReplacement(arg1 : string) : JscsConfigFileAnnotator.AnnotationTextBuilder;
		withOptions(arg1 : string[]) : JscsConfigFileAnnotator.AnnotationTextBuilder;
		withTypes(arg1 : JscsOption.ValueType) : JscsConfigFileAnnotator.AnnotationTextBuilder;
		withTypes() : JscsConfigFileAnnotator.AnnotationTextBuilder;
		build() : void;
		appendTypes(arg1 : StringBuilder, arg2 : number) : void;
		appendOptionsValues(arg1 : StringBuilder, arg2 : number) : number;
	}
	class JscsOptionsChecker {
		optionClassName : string;
		static isIntLiteral(arg1 : JscsOption, arg2 : AnnotationHolder, arg3 : JsonValue) : boolean;
		static getReplacementValuesMessage(arg1 : JscsOption) : string;
		static isArray(arg1 : JscsOption, arg2 : AnnotationHolder, arg3 : JsonValue) : boolean;
		static isStringLiteral(arg1 : JscsOption, arg2 : AnnotationHolder, arg3 : JsonValue) : boolean;
		static isObjectLiteral(arg1 : JscsOption, arg2 : AnnotationHolder, arg3 : JsonValue) : boolean;
		static isBooleanLiteral(arg1 : JscsOption, arg2 : AnnotationHolder, arg3 : JsonValue) : boolean;
		static checkMaximumLineLength(arg1 : JscsOption, arg2 : JsonObject, arg3 : AnnotationHolder) : void;
		static expectBoolean(arg1 : JsonProperty, arg2 : AnnotationHolder) : void;
		static checkForList(arg1 : JscsOption, arg2 : JsonArray, arg3 : AnnotationHolder, arg4 : string) : void;
	}


	interface JscsOptionsChecker extends JscsConfigFileAnnotator.OptionChecker<JscsOption> {}

	module JscsOptionsChecker {
		class InnerAllBooleansOptionsChecker {
			optionClassName : string;
			constructor(arg1 : JscsOption);
		}


		interface InnerAllBooleansOptionsChecker extends JscsConfigFileAnnotator.OptionChecker<string> {}	}
	class OptionChecker<T> extends Object {
		optionClassName : string;
		isValidName(arg1 : string) : T;
		processOption(arg1 : JsonProperty, arg2 : T, arg3 : AnnotationHolder) : void;
		getOptionClassName() : string;
	}
}

export = JscsConfigFileAnnotator
