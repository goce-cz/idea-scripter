import Set = require('nashorn/java/util/Set');
import Map = require('nashorn/java/util/Map');
import List = require('nashorn/java/util/List');
import Enum = require('nashorn/java/lang/Enum');
import Object = require('nashorn/java/lang/Object');

declare class JscsOption {
	static requireCurlyBraces : JscsOption;
	static requireSpaceAfterKeywords : JscsOption;
	static disallowSpaceAfterKeywords : JscsOption;
	static requireSpaceBeforeBlockStatements : JscsOption;
	static disallowSpaceBeforeBlockStatements : JscsOption;
	static requireParenthesesAroundIIFE : JscsOption;
	static requireSpacesInConditionalExpression : JscsOption;
	static disallowSpacesInConditionalExpression : JscsOption;
	static requireSpacesInFunctionExpression : JscsOption;
	static disallowSpacesInFunctionExpression : JscsOption;
	static requireSpacesInAnonymousFunctionExpression : JscsOption;
	static disallowSpacesInAnonymousFunctionExpression : JscsOption;
	static requireSpacesInNamedFunctionExpression : JscsOption;
	static disallowSpacesInNamedFunctionExpression : JscsOption;
	static requireSpacesInFunctionDeclaration : JscsOption;
	static disallowSpacesInFunctionDeclaration : JscsOption;
	static requireSpacesInFunction : JscsOption;
	static disallowSpacesInFunction : JscsOption;
	static disallowMultipleVarDecl : JscsOption;
	static requireMultipleVarDecl : JscsOption;
	static requireBlocksOnNewline : JscsOption;
	static requirePaddingNewlinesInBlocks : JscsOption;
	static disallowPaddingNewlinesInBlocks : JscsOption;
	static disallowEmptyBlocks : JscsOption;
	static disallowSpacesInsideObjectBrackets : JscsOption;
	static disallowSpacesInsideArrayBrackets : JscsOption;
	static disallowSpacesInsideParentheses : JscsOption;
	static requireSpacesInsideObjectBrackets : JscsOption;
	static requireSpacesInsideArrayBrackets : JscsOption;
	static requireSpacesInsideParentheses : JscsOption;
	static disallowQuotedKeysInObjects : JscsOption;
	static disallowDanglingUnderscores : JscsOption;
	static disallowSpaceAfterObjectKeys : JscsOption;
	static requireSpaceAfterObjectKeys : JscsOption;
	static disallowSpaceBeforeObjectValues : JscsOption;
	static requireSpaceBeforeObjectValues : JscsOption;
	static disallowCommaBeforeLineBreak : JscsOption;
	static requireCommaBeforeLineBreak : JscsOption;
	static requireAlignedObjectValues : JscsOption;
	static requireOperatorBeforeLineBreak : JscsOption;
	static disallowSpaceAfterPrefixUnaryOperators : JscsOption;
	static requireSpaceAfterPrefixUnaryOperators : JscsOption;
	static disallowSpaceBeforePostfixUnaryOperators : JscsOption;
	static requireSpaceBeforePostfixUnaryOperators : JscsOption;
	static disallowSpaceBeforeBinaryOperators : JscsOption;
	static requireSpaceBeforeBinaryOperators : JscsOption;
	static disallowSpaceAfterBinaryOperators : JscsOption;
	static requireSpaceAfterBinaryOperators : JscsOption;
	static disallowImplicitTypeConversion : JscsOption;
	static requireCamelCaseOrUpperCaseIdentifiers : JscsOption;
	static disallowKeywords : JscsOption;
	static disallowMultipleLineStrings : JscsOption;
	static disallowMultipleLineBreaks : JscsOption;
	static disallowMixedSpacesAndTabs : JscsOption;
	static disallowTrailingWhitespace : JscsOption;
	static disallowTrailingComma : JscsOption;
	static requireTrailingComma : JscsOption;
	static disallowKeywordsOnNewLine : JscsOption;
	static requireKeywordsOnNewLine : JscsOption;
	static requireLineFeedAtFileEnd : JscsOption;
	static maximumLineLength : JscsOption;
	static requireCapitalizedConstructors : JscsOption;
	static requireDotNotation : JscsOption;
	static requireYodaConditions : JscsOption;
	static disallowYodaConditions : JscsOption;
	static requireSpaceAfterLineComment : JscsOption;
	static disallowSpaceAfterLineComment : JscsOption;
	static disallowAnonymousFunctions : JscsOption;
	static requireAnonymousFunctions : JscsOption;
	static disallowNewlineBeforeBlockStatements : JscsOption;
	static requireNewlineBeforeBlockStatements : JscsOption;
	static validateLineBreaks : JscsOption;
	static validateQuoteMarks : JscsOption;
	static validateIndentation : JscsOption;
	static validateParameterSeparator : JscsOption;
	static validateJSDoc : JscsOption;
	static safeContextKeyword : JscsOption;
	static additionalRules : JscsOption;
	static preset : JscsOption;
	static excludeFiles : JscsOption;
	static fileExtensions : JscsOption;
	static maxErrors : JscsOption;
	static esnext : JscsOption;
	static esprimaOptions : JscsOption;
	static errorFilter : JscsOption;
	static REFERENCE_KEYWORDS : Set<JscsOption>;
	static REFERENCE_BINARY_OPERATORS : Set<JscsOption>;
	static BEFORE_BRACE : Set<JscsOption>;
	static CONDITIONAL : Set<JscsOption>;
	static INNER_VALUES_NOT_BOOLEAN : Map<JscsOption, string[]>;
	description : string;
	innerPropertiesSet : Set<string>;
	valueTypes : JscsOption.ValueType[];
	valuesList : string[];
	canBe(arg1 : JscsOption.ValueType) : boolean;
	getDescription() : string;
	setDescription(arg1 : string) : void;
	getInnerPropertiesSet() : Set<string>;
	isValidInnerProperty(arg1 : string) : boolean;
	otherTypes(arg1 : JscsOption.ValueType) : List<JscsOption.ValueType>;
	getValueTypes() : JscsOption.ValueType[];
	isValidValue(arg1 : string) : boolean;
	getValuesList() : string[];
	static safeValueOf(arg1 : string) : JscsOption;
}


declare interface JscsOption extends Enum<JscsOption> {}

declare module JscsOption {
	class ValueType {
		static bool : JscsOption.ValueType;
		static obj : JscsOption.ValueType;
		static str : JscsOption.ValueType;
		static array : JscsOption.ValueType;
		static num_int : JscsOption.ValueType;
		name : string;
		nameOrFixedValue : string;
		getName() : string;
		getNameOrFixedValue() : string;
	}


	interface ValueType extends Enum<JscsOption.ValueType> {}	class Constants extends Object {
		static keywords : string[];
		static binaryOperators : string[];
		static operators : string[];
		static unaryOperators : string[];
		constructor();
	}
}

export = JscsOption
