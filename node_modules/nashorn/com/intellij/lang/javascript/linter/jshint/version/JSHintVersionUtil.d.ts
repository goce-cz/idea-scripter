import Object = require('nashorn/java/lang/Object');
import ImmutableList = require('nashorn/com/google/common/collect/ImmutableList');
import JSHintVersionDescriptor = require('nashorn/com/intellij/lang/javascript/linter/jshint/version/JSHintVersionDescriptor');
import ProgressIndicator = require('nashorn/com/intellij/openapi/progress/ProgressIndicator');
import File = require('nashorn/java/io/File');
import List = require('nashorn/java/util/List');
import JsonElement = require('nashorn/com/google/gson/JsonElement');
import Predicate = require('nashorn/com/intellij/util/containers/Predicate');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import Runnable = require('nashorn/java/lang/Runnable');

declare class JSHintVersionUtil extends Object {
	static BUNDLED_VERSION : string;
	static versions : ImmutableList<JSHintVersionDescriptor>;
	static guessUrl(arg1 : string) : string;
	static downloadVersions(arg1 : ProgressIndicator) : void;
	static downloadSourceVersionOnce(arg1 : ProgressIndicator, arg2 : JSHintVersionDescriptor) : File;
	static downloadSourceVersion(arg1 : ProgressIndicator, arg2 : JSHintVersionDescriptor, arg3 : number) : File;
	static getVersions() : ImmutableList<JSHintVersionDescriptor>;
	static doGetVersions() : ImmutableList<JSHintVersionDescriptor>;
	static addGuessableVersionDescriptorFirstIfMissing(arg1 : List<JSHintVersionDescriptor>, arg2 : string) : ImmutableList<JSHintVersionDescriptor>;
	static find(arg1 : List<JSHintVersionDescriptor>, arg2 : string) : JSHintVersionDescriptor;
	static parseVersion(arg1 : string) : List<JSHintVersionDescriptor>;
	static toVersionList(arg1 : JsonElement) : List<JSHintVersionDescriptor>;
	static createUrl(arg1 : string) : string;
	static getJSHintSourceFileBaseName(arg1 : string) : string;
	static downloadFile(arg1 : ProgressIndicator, arg2 : string, arg3 : string, arg4 : number, arg5 : Predicate<string>) : File;
	static formatTakenTime(arg1 : number) : string;
	static getJSHintDir() : File;
	static getJSHintDirOrCreateIfNeeded() : File;
	static getVersionsJsonFile() : File;
	static isBundledVersion(arg1 : string) : boolean;
	static isSourceLocallyAvailable(arg1 : string) : boolean;
	static readFromClassPath(arg1 : string) : string;
	static downloadSourceContent(arg1 : string) : void;
	static downloadSourceContentUnderProgress(arg1 : Project, arg2 : string, arg3 : Runnable) : void;
	static loadSourceContentFromLocalDrive(arg1 : string) : string;
}

export = JSHintVersionUtil
