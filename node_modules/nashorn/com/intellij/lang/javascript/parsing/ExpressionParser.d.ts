import JavaScriptParser = require('nashorn/com/intellij/lang/javascript/parsing/JavaScriptParser');
import PsiBuilder = require('nashorn/com/intellij/lang/PsiBuilder');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import JavaScriptParserBase = require('nashorn/com/intellij/lang/javascript/parsing/JavaScriptParserBase');

declare class ExpressionParser<T extends JavaScriptParser> {
	parsePrimaryExpression() : boolean;
	parseYieldExpression() : boolean;
	parseStringTemplate(arg1 : PsiBuilder.Marker) : boolean;
	parseLetExpression() : boolean;
	parseTag() : void;
	parseAttribute() : void;
	parseAttributeValue() : void;
	validateLiteral() : string;
	static validateLiteralText(arg1 : string) : string;
	static lastSymbolEscaped(arg1 : string) : boolean;
	parseDestructuringProperty() : void;
	parseDestructuringElement(arg1 : IElementType) : void;
	parseDestructuringArrayElement() : void;
	parseDestructuringElement() : void;
	parseDestructuringBindingIdentifier() : void;
	parseObjectLiteralExpression(arg1 : boolean) : void;
	isPropertyStart(arg1 : IElementType) : boolean;
	parsePropertyName() : boolean;
	parseProperty() : void;
	parsePropertyInitializer() : void;
	parseArrayLiteralExpression(arg1 : boolean, arg2 : boolean) : void;
	parseArrayElement(arg1 : boolean, arg2 : Ref<IElementType>) : boolean;
	parseParenthesizedExpression() : void;
	parseMemberExpression(arg1 : boolean) : boolean;
	parseGwtReferenceExpression() : void;
	getNewExpressionElementType() : IElementType;
	parseDialectSpecificMemberExpressionPart() : boolean;
	proceedWithNamespaceReference(arg1 : PsiBuilder.Marker, arg2 : boolean) : boolean;
	parseQualifiedTypeName() : boolean;
	parseQualifiedTypeName(arg1 : boolean) : boolean;
	tryParseTypeArgumentList(arg1 : boolean, arg2 : IElementType) : boolean;
	parseQualifiedTypeNameTail(arg1 : PsiBuilder.Marker) : boolean;
	parseECMA4GenericSignature() : void;
	parseNewExpression() : boolean;
	parseArgumentList() : void;
	parseArgumentListNoMarker() : void;
	parseArgument() : boolean;
	parseExpression() : void;
	parseGeneratorExpression() : boolean;
	parseAssignmentExpression(arg1 : boolean, arg2 : boolean) : boolean;
	parseConditionalExpression(arg1 : boolean) : boolean;
	parseBinaryExpression(arg1 : boolean) : boolean;
	getCurrentBinarySignPriority(arg1 : boolean, arg2 : boolean) : number;
	parseUnaryExpression() : boolean;
	parsePostfixExpression() : boolean;
	parseExpressionOptional() : boolean;
	parseExpressionOptional(arg1 : boolean, arg2 : boolean) : boolean;
	buildTokenElement(arg1 : IElementType) : void;
	tryParseType() : boolean;
	parseType() : boolean;
	parseSimpleExpression() : void;
	parseScriptExpression() : void;
}


declare interface ExpressionParser<T extends JavaScriptParser> extends JavaScriptParserBase<T> {}
export = ExpressionParser
