import JavaScriptParser = require('nashorn/com/intellij/lang/javascript/parsing/JavaScriptParser');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import PsiBuilder = require('nashorn/com/intellij/lang/PsiBuilder');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import JSParsingResult = require('nashorn/com/intellij/lang/javascript/parsing/JSParsingResult');
import JSStubElementType = require('nashorn/com/intellij/lang/javascript/psi/JSStubElementType');
import JSParameterStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSParameterStub');
import JSParameter = require('nashorn/com/intellij/lang/javascript/psi/JSParameter');
import JavaScriptParserBase = require('nashorn/com/intellij/lang/javascript/parsing/JavaScriptParserBase');
import Enum = require('nashorn/java/lang/Enum');

declare class FunctionParser<T extends JavaScriptParser> {
	static methodsEmptinessKey : Key<string>;
	static METHODS_EMPTINESS_POSSIBLY : string;
	parseFunctionExpression() : boolean;
	parseFunctionDeclaration() : void;
	parseFunctionExpressionAttributeList() : void;
	parseFunctionNoMarker(arg1 : FunctionParser.Context, arg2 : PsiBuilder.Marker) : boolean;
	parseFunctionName(arg1 : boolean, arg2 : FunctionParser.Context) : boolean;
	parseFunctionIdentifier() : void;
	getFunctionDeclarationElementType() : IElementType;
	parseAttributeWithoutBrackets() : void;
	parseAttributesList() : boolean;
	parseAttributeBody() : void;
	parseParameterList(arg1 : boolean) : JSParsingResult;
	parseDestructuringParameter(arg1 : PsiBuilder.Marker) : void;
	getParameterType() : JSStubElementType<JSParameterStub, JSParameter>;
	parseParameterOptionalMark() : void;
	willParseDestructuringAssignment(arg1 : boolean) : boolean;
	hasParameterInitializers() : boolean;
	parseParameterAttributeList() : boolean;
	parseArrowFunction() : boolean;
	parseArrowFunctionNoMarker(arg1 : PsiBuilder.Marker) : boolean;
	getFunctionExpressionElementType() : IElementType;
	tryParseTypeParameterList() : boolean;
}


declare interface FunctionParser<T extends JavaScriptParser> extends JavaScriptParserBase<T> {}

declare module FunctionParser {
	class Context {
		static EXPRESSION : FunctionParser.Context;
		static SOURCE_ELEMENT : FunctionParser.Context;
		static PROPERTY : FunctionParser.Context;
	}


	interface Context extends Enum<FunctionParser.Context> {}}

export = FunctionParser
