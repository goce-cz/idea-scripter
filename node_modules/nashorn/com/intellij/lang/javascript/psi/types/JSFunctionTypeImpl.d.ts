import List = require('nashorn/java/util/List');
import JSParameterTypeDecorator = require('nashorn/com/intellij/lang/javascript/psi/JSParameterTypeDecorator');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSTypeSource = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeSource');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSTypeBaseImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeBaseImpl');

declare class JSFunctionTypeImpl {
	parameters : List<JSParameterTypeDecorator>;
	thisType : JSType;
	newType : JSType;
	returnType : JSType;
	constructor(arg1 : JSTypeSource, arg2 : List<JSParameterTypeDecorator>, arg3 : JSType);
	constructor(arg1 : JSTypeSource, arg2 : List<JSParameterTypeDecorator>, arg3 : JSType, arg4 : JSType, arg5 : JSType);
	getTypeText(arg1 : JSType.TypeTextFormat, arg2 : boolean) : string;
	getParameters() : List<JSParameterTypeDecorator>;
	getThisType() : JSType;
	getNewType() : JSType;
	getReturnType() : JSType;
	static buildFromJSFunction(arg1 : JSFunction, arg2 : JSTypeSource) : JSFunctionTypeImpl;
}


declare interface JSFunctionTypeImpl extends JSTypeBaseImpl, JSType {}
export = JSFunctionTypeImpl
