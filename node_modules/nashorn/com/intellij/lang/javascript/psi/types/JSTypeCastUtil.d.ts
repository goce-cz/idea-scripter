import Object = require('nashorn/java/lang/Object');
import ProcessingContext = require('nashorn/com/intellij/util/ProcessingContext');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSGenericTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSGenericTypeImpl');
import JSRecordTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSRecordTypeImpl');
import Enum = require('nashorn/java/lang/Enum');

declare class JSTypeCastUtil extends Object {
	constructor();
	static checkClassesAlreadyCompared(arg1 : string, arg2 : string, arg3 : ProcessingContext) : boolean;
	static isDirectlyAssignableTypeCommon(arg1 : JSType, arg2 : JSType, arg3 : ProcessingContext) : JSTypeCastUtil.AssignableResult;
	static buildWithAppliedGenericArguments(arg1 : JSClass, arg2 : JSGenericTypeImpl) : JSRecordTypeImpl;
	static isEquivalentCommon(arg1 : JSType, arg2 : JSType, arg3 : ProcessingContext) : boolean;
}


declare module JSTypeCastUtil {
	class AssignableResult {
		static STRICTLY_ASSIGNABLE : JSTypeCastUtil.AssignableResult;
		static STRICTLY_NOT_ASSIGNABLE : JSTypeCastUtil.AssignableResult;
		static POSSIBLY_ASSIGNABLE : JSTypeCastUtil.AssignableResult;
		static POSSIBLY_NOT_ASSIGNABLE : JSTypeCastUtil.AssignableResult;
		assignable : boolean;
		strict : boolean;
		isAssignable() : boolean;
		isStrict() : boolean;
	}


	interface AssignableResult extends Enum<JSTypeCastUtil.AssignableResult> {}}

export = JSTypeCastUtil
