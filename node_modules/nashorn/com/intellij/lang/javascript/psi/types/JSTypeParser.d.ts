import Object = require('nashorn/java/lang/Object');
import JSTypeSource = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeSource');
import JSTypeVisitor = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeVisitor');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSParameterTypeDecorator = require('nashorn/com/intellij/lang/javascript/psi/JSParameterTypeDecorator');
import JSTypeofTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeofTypeImpl');
import JSCallExpressionType = require('nashorn/com/intellij/lang/javascript/psi/types/JSCallExpressionType');
import JSRecordTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSRecordTypeImpl');
import JSStringLiteralTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSStringLiteralTypeImpl');
import JSDecoratedTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSDecoratedTypeImpl');
import JSFunctionTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSFunctionTypeImpl');

declare class JSTypeParser extends Object {
	static GENERIC_PARAMETER_DELIMITER : string;
	static TYPEOF_IDENTIFIER : string;
	static CALL_EXPRESSION_PREFIX : string;
	static SINGLE_TYPE_SPECIAL_CHAR : string;
	static SOME_INVALID_TYPE_PART : string;
	static MIXIN_DELIMITER : string;
	typeStringLength : number;
	constructor(arg1 : string, arg2 : JSTypeSource);
	constructor(arg1 : string, arg2 : JSTypeVisitor);
	parse() : JSType;
	parse(arg1 : boolean) : JSType;
	parseParameterType() : JSParameterTypeDecorator;
	parseParameterType(arg1 : boolean) : JSParameterTypeDecorator;
	handleParseResult<T>(arg1 : T, arg2 : boolean) : T;
	getTypeStringLength() : number;
	parseInnerParameterType(arg1 : boolean) : JSParameterTypeDecorator;
	parseUnion(arg1 : boolean) : JSType;
	parseType() : JSType;
	parseTypeofType() : JSTypeofTypeImpl;
	parseCallExpressionType() : JSCallExpressionType;
	parseRecordType() : JSRecordTypeImpl;
	parseLiteralType() : JSStringLiteralTypeImpl;
	addTypeDecoration(arg1 : JSType, arg2 : JSDecoratedTypeImpl.TypeDecoration) : JSType;
	addGenericArgument(arg1 : JSType, arg2 : JSType) : JSType;
	parseFunctionAfterKeyword() : JSFunctionTypeImpl;
	parseSingleType() : JSType;
	advanceSpaces() : void;
}

export = JSTypeParser
