import List = require('nashorn/java/util/List');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSTypeSource = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeSource');
import Map = require('nashorn/java/util/Map');
import JSTypeBaseImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeBaseImpl');

declare class JSCompositeTypeImpl {
	static TYPES_NUMBER_LIMIT : number;
	types : List<JSType>;
	constructor(arg1 : JSTypeSource, arg2 : JSType[]);
	constructor(arg1 : JSTypeSource, arg2 : List<JSType>);
	static optimizeTypeIfComposite(arg1 : JSType) : JSType;
	static getCommonType(arg1 : JSType, arg2 : JSType, arg3 : JSTypeSource, arg4 : boolean) : JSType;
	static getOrPutTypeOfType(arg1 : Map<JSType, JSType>, arg2 : JSType) : JSType;
	static mapTypes(arg1 : Map<JSType, JSType>, arg2 : List<JSType>) : List<JSType>;
	getTypes() : List<JSType>;
	isOptimized() : boolean;
}


declare interface JSCompositeTypeImpl extends JSTypeBaseImpl {}
export = JSCompositeTypeImpl
