import List = require('nashorn/java/util/List');
import JSTypeSource = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeSource');
import JSTypeBaseImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeBaseImpl');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSFunctionTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSFunctionTypeImpl');
import Object = require('nashorn/java/lang/Object');

declare class JSRecordTypeImpl {
	typeMembers : List<JSRecordTypeImpl.TypeMember>;
	constructor(arg1 : JSTypeSource, arg2 : List<JSRecordTypeImpl.TypeMember>);
	getTypeMembers() : List<JSRecordTypeImpl.TypeMember>;
	hasProperty(arg1 : string) : boolean;
	findPropertySignature(arg1 : string) : JSRecordTypeImpl.PropertySignature;
}


declare interface JSRecordTypeImpl extends JSTypeBaseImpl, JSType {}

declare module JSRecordTypeImpl {
	class PropertySignature {
		name : string;
		type : JSType;
		optional : boolean;
		constructor(arg1 : string, arg2 : JSType, arg3 : boolean);
		getName() : string;
		getType() : JSType;
	}


	interface PropertySignature extends JSRecordTypeImpl.TypeMember {}	class IndexSignature {
		parameterType : JSType;
		type : JSType;
		constructor(arg1 : JSType, arg2 : JSType);
		getParameterType() : JSType;
		getType() : JSType;
	}


	interface IndexSignature extends JSRecordTypeImpl.TypeMember {}	class CallSignature {
		functionType : JSFunctionTypeImpl;
		constructor(arg1 : boolean, arg2 : JSFunctionTypeImpl);
		hasNew() : boolean;
		getFunctionType() : JSFunctionTypeImpl;
	}


	interface CallSignature extends JSRecordTypeImpl.TypeMember {}	class TypeMember extends Object {
		isEquivalentTo(arg1 : JSRecordTypeImpl.TypeMember) : boolean;
	}
}

export = JSRecordTypeImpl
