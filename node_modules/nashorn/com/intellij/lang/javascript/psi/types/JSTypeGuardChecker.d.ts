import Object = require('nashorn/java/lang/Object');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSBinaryExpression = require('nashorn/com/intellij/lang/javascript/psi/JSBinaryExpression');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSCompositeTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSCompositeTypeImpl');

declare class JSTypeGuardChecker extends Object {
	static TYPE_NAMES : string[];
	narrowedType : JSType;
	constructor(arg1 : PsiElement, arg2 : JSType, arg3 : string);
	static isEnabledForJs() : boolean;
	static isAvailable(arg1 : PsiElement, arg2 : JSType) : boolean;
	getNarrowedType() : JSType;
	getDistinctTypeFromUnionType(arg1 : JSType) : JSType;
	isVariableAssignedWithin(arg1 : PsiElement) : boolean;
	narrowTypeByEquality(arg1 : JSType, arg2 : JSBinaryExpression, arg3 : boolean) : JSType;
	narrowTypeByAnd(arg1 : JSType, arg2 : JSBinaryExpression, arg3 : boolean) : JSType;
	narrowTypeByOr(arg1 : JSType, arg2 : JSBinaryExpression, arg3 : boolean) : JSType;
	narrowTypeByInstanceof(arg1 : JSType, arg2 : JSBinaryExpression, arg3 : boolean) : JSType;
	narrowType(arg1 : JSType, arg2 : JSExpression, arg3 : boolean) : JSType;
	getUnionType(arg1 : JSType, arg2 : JSType) : JSType;
	removeTypeFromUnionType(arg1 : JSType, arg2 : string, arg3 : boolean) : JSType;
	removeTypeFromUnionType(arg1 : JSType, arg2 : string[], arg3 : boolean) : JSType;
	static isPrimitiveType(arg1 : string) : boolean;
	buildPrimitiveType(arg1 : string) : JSType;
	static saveOnlySubtypes(arg1 : JSCompositeTypeImpl, arg2 : JSType) : JSType;
	isTypeSubTypeOf(arg1 : string, arg2 : JSType) : boolean;
	static isTypeSubTypeOf(arg1 : JSType, arg2 : JSType) : boolean;
}

export = JSTypeGuardChecker
