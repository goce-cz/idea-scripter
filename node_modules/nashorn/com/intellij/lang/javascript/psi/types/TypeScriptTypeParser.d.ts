import Object = require('nashorn/java/lang/Object');
import JSTypeDeclaration = require('nashorn/com/intellij/lang/javascript/psi/ecma6/JSTypeDeclaration');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import List = require('nashorn/java/util/List');
import JSRecordTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSRecordTypeImpl');
import TypeScriptObjectType = require('nashorn/com/intellij/lang/javascript/psi/ecma6/TypeScriptObjectType');
import JSTypeSource = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeSource');
import TypeScriptTypeMember = require('nashorn/com/intellij/lang/javascript/psi/ecma6/TypeScriptTypeMember');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import Collection = require('nashorn/java/util/Collection');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import JSCompositeTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSCompositeTypeImpl');

declare class TypeScriptTypeParser extends Object {
	constructor();
	static buildTypeFromTypeScript(arg1 : JSTypeDeclaration) : JSType;
	static addObjectTypeProperties(arg1 : List<JSRecordTypeImpl.TypeMember>, arg2 : TypeScriptObjectType, arg3 : JSTypeSource) : void;
	static buildTypeMember(arg1 : TypeScriptTypeMember, arg2 : JSTypeSource) : JSRecordTypeImpl.TypeMember;
	static buildTypeFromClass(arg1 : JSClass, arg2 : boolean) : JSRecordTypeImpl;
	static buildTypeFromClass(arg1 : JSClass, arg2 : boolean, arg3 : Collection<JSClass>) : JSRecordTypeImpl;
	static buildTypeMemberFromClassMember(arg1 : boolean, arg2 : JSTypeSource, arg3 : JSNamedElement) : JSRecordTypeImpl.TypeMember;
	static buildTypeFromClassMember(arg1 : PsiElement, arg2 : JSTypeSource) : JSType;
	static buildResolvedType(arg1 : Collection<JSQualifiedNamedElement>, arg2 : JSType) : JSRecordTypeImpl;
	static buildResolvedType(arg1 : JSType) : JSRecordTypeImpl;
	static resolveElementsByType(arg1 : JSType) : Collection<JSQualifiedNamedElement>;
	static addTypeMembersFromClass(arg1 : JSType, arg2 : boolean, arg3 : List<JSRecordTypeImpl.TypeMember>, arg4 : JSQualifiedNamedElement) : void;
	static resolveCompositeType(arg1 : JSCompositeTypeImpl) : JSType;
}

export = TypeScriptTypeParser
