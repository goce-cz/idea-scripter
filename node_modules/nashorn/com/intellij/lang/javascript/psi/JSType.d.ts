import Object = require('nashorn/java/lang/Object');
import JSTypeSource = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeSource');
import JSRecursiveTypeVisitor = require('nashorn/com/intellij/lang/javascript/psi/types/JSRecursiveTypeVisitor');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import ProcessingContext = require('nashorn/com/intellij/util/ProcessingContext');
import Enum = require('nashorn/java/lang/Enum');

declare class JSType extends Object {
	static COMMENT_DELIMITERS : string;
	resolvedTypeText : string;
	typeText : string;
	source : JSTypeSource;
	getResolvedTypeText() : string;
	getTypeText() : string;
	getTypeText(arg1 : JSType.TypeTextFormat) : string;
	accept(arg1 : JSRecursiveTypeVisitor) : void;
	acceptChildren(arg1 : JSRecursiveTypeVisitor) : void;
	resolveClass() : JSClass;
	getSource() : JSTypeSource;
	setSourceIfEmpty(arg1 : JSTypeSource) : void;
	isDirectlyAssignableType(arg1 : JSType, arg2 : ProcessingContext) : boolean;
	isEquivalentTo(arg1 : JSType, arg2 : ProcessingContext) : boolean;
}


declare module JSType {
	class TypeTextFormat {
		static SIMPLE : JSType.TypeTextFormat;
		static RESOLVED : JSType.TypeTextFormat;
		static SERIALIZED : JSType.TypeTextFormat;
		static PRESENTABLE : JSType.TypeTextFormat;
		static CODE : JSType.TypeTextFormat;
	}


	interface TypeTextFormat extends Enum<JSType.TypeTextFormat> {}}

export = JSType
