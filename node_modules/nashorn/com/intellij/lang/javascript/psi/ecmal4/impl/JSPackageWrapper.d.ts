import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Language = require('nashorn/com/intellij/lang/Language');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import PsiManager = require('nashorn/com/intellij/psi/PsiManager');
import JSContext = require('nashorn/com/intellij/lang/javascript/psi/types/JSContext');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import PsiElementBase = require('nashorn/com/intellij/psi/impl/PsiElementBase');
import JSPackage = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSPackage');

declare class JSPackageWrapper {
	name : string;
	qualifiedName : string;
	namespace : JSQualifiedName;
	namespaceExplicitlyDeclared : boolean;
	nameIdentifier : PsiElement;
	language : Language;
	children : PsiElement[];
	parent : PsiElement;
	containingFile : PsiFile;
	firstChild : PsiElement;
	valid : boolean;
	lastChild : PsiElement;
	nextSibling : PsiElement;
	prevSibling : PsiElement;
	textRange : TextRange;
	startOffsetInParent : number;
	project : Project;
	textLength : number;
	textOffset : number;
	text : string;
	node : ASTNode;
	resolveScope : GlobalSearchScope;
	manager : PsiManager;
	writable : boolean;
	jSContext : JSContext;
	accessType : JSAttributeList.AccessType;
	deprecated : boolean;
	constructor(arg1 : string, arg2 : Project, arg3 : GlobalSearchScope);
	static isPackageReferenceOfSomeForm(arg1 : string, arg2 : Project, arg3 : GlobalSearchScope, arg4 : PsiElement) : boolean;
}


declare interface JSPackageWrapper extends PsiElementBase, JSPackage {}
export = JSPackageWrapper
