import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSAttribute = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttribute');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSConditionalCompileVariableReference = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSConditionalCompileVariableReference');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSAttributeListStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSAttributeListStub');
import JSStubElementImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSStubElementImpl');

declare class JSAttributeListImpl {
	static ourModifiersTypeSet : TokenSet;
	namespace : string;
	namespaceElement : JSReferenceExpression;
	attributes : JSAttribute[];
	accessType : JSAttributeList.AccessType;
	explicitAccessType : JSAttributeList.AccessType;
	conditionalCompileVariableReference : JSConditionalCompileVariableReference;
	constructor(arg1 : ASTNode);
	constructor(arg1 : JSAttributeListStub);
	initAttributes() : void;
	findModifierNode(arg1 : JSAttributeList.ModifierType) : ASTNode;
	tryResolveNamespaceValueFromStub() : string;
}


declare interface JSAttributeListImpl extends JSStubElementImpl<JSAttributeListStub>, JSAttributeList {}
export = JSAttributeListImpl
