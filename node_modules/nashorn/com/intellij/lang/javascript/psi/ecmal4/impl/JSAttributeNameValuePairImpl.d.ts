import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import ItemPresentation = require('nashorn/com/intellij/navigation/ItemPresentation');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import JSAttributeNameValuePairStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSAttributeNameValuePairStub');
import JSAttributeNameValuePair = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeNameValuePair');
import JSStubElementImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSStubElementImpl');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Object = require('nashorn/java/lang/Object');
import EmptyResolveMessageProvider = require('nashorn/com/intellij/codeInsight/daemon/EmptyResolveMessageProvider');

declare class JSAttributeNameValuePairImpl {
	static IDENTIFIER_TOKENS_SET : TokenSet;
	navigationElement : PsiElement;
	presentation : ItemPresentation;
	name : string;
	valueNode : ASTNode;
	simpleValue : string;
	references : PsiReference[];
	nameIdentifier : PsiElement;
	constructor(arg1 : ASTNode);
	constructor(arg1 : JSAttributeNameValuePairStub);
	static areEquivalent(arg1 : JSAttributeNameValuePair, arg2 : JSAttributeNameValuePair) : boolean;
	findValueNode() : ASTNode;
}


declare interface JSAttributeNameValuePairImpl extends JSStubElementImpl<JSAttributeNameValuePairStub>, JSAttributeNameValuePair {}

declare module JSAttributeNameValuePairImpl {
	class NameReference {
		element : PsiElement;
		rangeInElement : TextRange;
		canonicalText : string;
		variants : Object[];
		soft : boolean;
		unresolvedMessagePattern : string;
		constructor(arg1 : ASTNode);
	}


	interface NameReference extends PsiReference, EmptyResolveMessageProvider {}}

export = JSAttributeNameValuePairImpl
