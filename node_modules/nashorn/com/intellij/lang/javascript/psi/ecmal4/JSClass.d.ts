import StubElement = require('nashorn/com/intellij/psi/stubs/StubElement');
import JSReferenceList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSReferenceList');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import JSSourceElement = require('nashorn/com/intellij/lang/javascript/psi/JSSourceElement');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');
import Navigatable = require('nashorn/com/intellij/pom/Navigatable');
import StubBasedPsiElement = require('nashorn/com/intellij/psi/StubBasedPsiElement');

declare class JSClass<StubT extends StubElement> {
	static EMPTY_ARRAY : JSClass[];
	extendsList : JSReferenceList;
	implementsList : JSReferenceList;
	interface : boolean;
	superClasses : JSClass[];
	functions : JSFunction[];
	fields : JSVariable[];
	supers : JSClass[];
	implementedInterfaces : JSClass[];
	getExtendsList() : JSReferenceList;
	getImplementsList() : JSReferenceList;
	isInterface() : boolean;
	getSuperClasses() : JSClass[];
	getFunctions() : JSFunction[];
	getFields() : JSVariable[];
	findFunctionByName(arg1 : string) : JSFunction;
	findFunctionByNameAndKind(arg1 : string, arg2 : JSFunction.FunctionKind) : JSFunction;
	findFieldByName(arg1 : string) : JSVariable;
	getSupers() : JSClass[];
	getImplementedInterfaces() : JSClass[];
	getConstructor() : JSFunction;
}


declare interface JSClass<StubT extends StubElement> extends JSQualifiedNamedElement, JSSourceElement, JSAttributeListOwner, Navigatable, StubBasedPsiElement<StubT> {}
export = JSClass
