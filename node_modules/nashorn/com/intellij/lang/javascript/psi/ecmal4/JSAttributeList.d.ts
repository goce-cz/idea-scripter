import List = require('nashorn/java/util/List');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSAttribute = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttribute');
import JSConditionalCompileVariableReference = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSConditionalCompileVariableReference');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import StubBasedPsiElement = require('nashorn/com/intellij/psi/StubBasedPsiElement');
import JSAttributeListStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSAttributeListStub');
import Enum = require('nashorn/java/lang/Enum');
import Icon = require('nashorn/javax/swing/Icon');

declare class JSAttributeList {
	static UNKNOWN_NAMESPACE : string;
	static TYPESCRIPT_ACCESS_TYPE_LIST : List<JSAttributeList.AccessType>;
	namespace : string;
	namespaceElement : JSReferenceExpression;
	attributes : JSAttribute[];
	accessType : JSAttributeList.AccessType;
	explicitAccessType : JSAttributeList.AccessType;
	conditionalCompileVariableReference : JSConditionalCompileVariableReference;
	getNamespace() : string;
	getNamespaceElement() : JSReferenceExpression;
	resolveNamespaceValue() : string;
	getAttributes() : JSAttribute[];
	getAttributesByName(arg1 : string) : JSAttribute[];
	findAttributeByName(arg1 : string) : JSAttribute;
	hasExplicitModifier(arg1 : JSAttributeList.ModifierType) : boolean;
	getAccessType() : JSAttributeList.AccessType;
	getExplicitAccessType() : JSAttributeList.AccessType;
	findAccessTypeElement() : PsiElement;
	getConditionalCompileVariableReference() : JSConditionalCompileVariableReference;
	hasModifier(arg1 : JSAttributeList.ModifierType) : boolean;
	findModifierElement(arg1 : JSAttributeList.ModifierType) : PsiElement;
}


declare interface JSAttributeList extends JSElement, StubBasedPsiElement<JSAttributeListStub> {}

declare module JSAttributeList {
	class ModifierType {
		static DYNAMIC : JSAttributeList.ModifierType;
		static NATIVE : JSAttributeList.ModifierType;
		static OVERRIDE : JSAttributeList.ModifierType;
		static STATIC : JSAttributeList.ModifierType;
		static FINAL : JSAttributeList.ModifierType;
		static VIRTUAL : JSAttributeList.ModifierType;
		static DECLARE : JSAttributeList.ModifierType;
		static ASYNC : JSAttributeList.ModifierType;
		keyword : string;
	}


	interface ModifierType extends Enum<JSAttributeList.ModifierType> {}	class AccessType {
		static PACKAGE_LOCAL : JSAttributeList.AccessType;
		static PUBLIC : JSAttributeList.AccessType;
		static PRIVATE : JSAttributeList.AccessType;
		static PROTECTED : JSAttributeList.AccessType;
		icon : Icon;
		getIcon() : Icon;
	}


	interface AccessType extends Enum<JSAttributeList.AccessType> {}}

export = JSAttributeList
