import JSQualifiedStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSQualifiedStub');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import Collection = require('nashorn/java/util/Collection');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSReferenceList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSReferenceList');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSContext = require('nashorn/com/intellij/lang/javascript/psi/types/JSContext');
import IStubElementType = require('nashorn/com/intellij/psi/stubs/IStubElementType');
import List = require('nashorn/java/util/List');
import Class = require('nashorn/java/lang/Class');
import Map = require('nashorn/java/util/Map');
import Object = require('nashorn/java/lang/Object');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import PsiScopeProcessor = require('nashorn/com/intellij/psi/scope/PsiScopeProcessor');
import ResolveState = require('nashorn/com/intellij/psi/ResolveState');
import StubElement = require('nashorn/com/intellij/psi/stubs/StubElement');
import ArrayFactory = require('nashorn/com/intellij/util/ArrayFactory');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import JSFile = require('nashorn/com/intellij/lang/javascript/psi/JSFile');
import ArrayList = require('nashorn/java/util/ArrayList');
import JSStubElementImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSStubElementImpl');
import UserDataCache = require('nashorn/com/intellij/openapi/util/UserDataCache');
import ParameterizedCachedValue = require('nashorn/com/intellij/psi/util/ParameterizedCachedValue');
import JSInheritanceUtil = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSInheritanceUtil');

declare class JSClassBase<StubT extends JSQualifiedStub> {
	static ES6_CONSTRUCTOR : string;
	functions : JSFunction[];
	fields : JSVariable[];
	implicitlyDeclaredInterfaces : Collection<JSClass>;
	supers : JSClass[];
	name : string;
	qualifiedName : string;
	namespace : JSQualifiedName;
	namespaceExplicitlyDeclared : boolean;
	attributeList : JSAttributeList;
	textOffset : number;
	extendsList : JSReferenceList;
	implementsList : JSReferenceList;
	superClasses : JSClass[];
	implementedInterfaces : JSClass[];
	nameIdentifier : PsiElement;
	accessType : JSAttributeList.AccessType;
	jSContext : JSContext;
	constructor(arg1 : StubT, arg2 : IStubElementType<StubT, any>);
	gatherDeclarations<E extends PsiElement>(arg1 : List<E>, arg2 : Class<E>) : void;
	initFields() : Map<string, JSVariable>;
	initFunctions() : Map<string, Object>;
	isImplicitlyDeclared(arg1 : JSClass) : boolean;
	getImplicitlyDeclaredInterfaces() : Collection<JSClass>;
	getClassesFromReferenceList(arg1 : JSReferenceList, arg2 : IElementType) : List<JSClass>;
	static replaceInternalName(arg1 : string) : string;
	processMembers(arg1 : PsiScopeProcessor, arg2 : ResolveState, arg3 : PsiElement, arg4 : PsiElement) : boolean;
	static isImplicitlyDeclaringEventDispatcher(arg1 : JSAttributeList) : boolean;
	static isImplicitlyDeclaringEventDispatcher(arg1 : JSClass) : boolean;
	static getStubChildrenByType<E extends PsiElement>(arg1 : StubElement<E>, arg2 : ArrayFactory<E>, arg3 : IElementType[]) : E[];
	static process<E extends PsiElement>(arg1 : TokenSet, arg2 : JSFile, arg3 : ArrayList<E>, arg4 : Collection<JSFile>) : void;
}


declare interface JSClassBase<StubT extends JSQualifiedStub> extends JSStubElementImpl<StubT>, JSClass<StubT> {}

declare module JSClassBase {
	class ClassesUserDataCache {
		resolveUnqualified(arg1 : JSReferenceList) : boolean;
		doCompute(arg1 : Object) : List<JSClass>;
		calculate(arg1 : JSClassBase, arg2 : JSReferenceList, arg3 : PsiElement) : List<JSClass>;
	}


	interface ClassesUserDataCache extends UserDataCache<ParameterizedCachedValue<JSInheritanceUtil.CacheByEnforcedResolveScope<List<JSClass>>, Object>, JSClassBase, Object> {}	class ImplementsClassesUserDataCache {
	}


	interface ImplementsClassesUserDataCache extends JSClassBase.ClassesUserDataCache {}	class ExtendsClassesUserDataCache {
	}


	interface ExtendsClassesUserDataCache extends JSClassBase.ClassesUserDataCache {}}

export = JSClassBase
