import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSFunctionExpression = require('nashorn/com/intellij/lang/javascript/psi/JSFunctionExpression');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');

declare class JSVariable {
	static EMPTY_ARRAY : JSVariable[];
	initializer : JSExpression;
	initializerOrStub : JSExpression;
	literalOrReferenceInitializerText : string;
	type : JSType;
	typeString : string;
	typeElement : PsiElement;
	local : boolean;
	declarationScope : PsiElement;
	hasInitializer() : boolean;
	getInitializer() : JSExpression;
	getInitializerOrStub() : JSExpression;
	getLiteralOrReferenceInitializerText() : string;
	tryGetFunctionExpressionInitializer() : JSFunctionExpression;
	setInitializer(arg1 : JSExpression) : void;
	getType() : JSType;
	getTypeString() : string;
	getTypeElement() : PsiElement;
	isConst() : boolean;
	isLocal() : boolean;
	hasBlockScope() : boolean;
	getDeclarationScope() : PsiElement;
}


declare interface JSVariable extends JSQualifiedNamedElement, JSAttributeListOwner {}
export = JSVariable
