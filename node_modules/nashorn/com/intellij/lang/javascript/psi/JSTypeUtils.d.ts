import Object = require('nashorn/java/lang/Object');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSTypeSource = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeSource');
import JSParameterTypeDecorator = require('nashorn/com/intellij/lang/javascript/psi/JSParameterTypeDecorator');
import JSNamedType = require('nashorn/com/intellij/lang/javascript/psi/types/JSNamedType');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');
import List = require('nashorn/java/util/List');
import ProcessingContext = require('nashorn/com/intellij/util/ProcessingContext');
import Map = require('nashorn/java/util/Map');
import Set = require('nashorn/java/util/Set');
import Function = require('nashorn/com/intellij/util/Function');
import BaseJSSymbolProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/BaseJSSymbolProcessor');
import DialectOptionHolder = require('nashorn/com/intellij/lang/javascript/DialectOptionHolder');
import JSFunctionTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSFunctionTypeImpl');
import JSRecordTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSRecordTypeImpl');
import JSSymbolNamespace = require('nashorn/com/intellij/lang/javascript/psi/JSSymbolNamespace');
import JSContext = require('nashorn/com/intellij/lang/javascript/psi/types/JSContext');

declare class JSTypeUtils extends Object {
	static typeInvalidationDependency : Object;
	static getScopeInOriginalTree(arg1 : PsiElement) : PsiElement;
	static transformActionScriptSpecificTypesIntoEcma(arg1 : string) : string;
	static isNewPropertiesDefinitionAllowed(arg1 : JSType) : boolean;
	static isStrictType(arg1 : JSType) : boolean;
	static createType(arg1 : string, arg2 : JSTypeSource) : JSType;
	static createType(arg1 : string, arg2 : JSTypeSource, arg3 : boolean) : JSType;
	static createParameterType(arg1 : string, arg2 : JSTypeSource) : JSParameterTypeDecorator;
	static createParameterType(arg1 : string, arg2 : JSTypeSource, arg3 : boolean) : JSParameterTypeDecorator;
	static isArrayType(arg1 : JSType) : boolean;
	static getComponentType(arg1 : JSType) : JSType;
	static typeCanBeAssignedWithoutCoercion(arg1 : JSType, arg2 : JSType) : boolean;
	static getTypeMatchingNamespace(arg1 : string) : string;
	static getQualifiedNameMatchingType(arg1 : JSType, arg2 : boolean) : string;
	static getNamedType(arg1 : JSType) : JSNamedType;
	static getNonValueTypeText(arg1 : JSType) : string;
	static getPresentableType(arg1 : JSType, arg2 : boolean) : string;
	static hasFunctionType(arg1 : JSType) : boolean;
	static hasConstructorType(arg1 : JSType) : boolean;
	static hasFunctionType(arg1 : JSType, arg2 : boolean, arg3 : boolean) : boolean;
	static hasAnyType(arg1 : JSType) : boolean;
	static tryGetReturnType(arg1 : JSType, arg2 : JSCallExpression) : JSType;
	static getValuableType(arg1 : JSType) : JSType;
	static getValuableType(arg1 : JSType, arg2 : boolean) : JSType;
	static unwrapDecorations(arg1 : JSType) : JSType;
	static canBeCalledWithArguments(arg1 : JSType, arg2 : List<JSType>, arg3 : boolean) : boolean;
	static resolveType(arg1 : JSType) : JSType;
	static areArgumentsAssignable(arg1 : List<JSParameterTypeDecorator>, arg2 : List<JSParameterTypeDecorator>, arg3 : ProcessingContext, arg4 : boolean, arg5 : boolean, arg6 : boolean) : boolean;
	static haveAncestorChildRelation(arg1 : string, arg2 : string) : boolean;
	static applyGenericArguments(arg1 : JSType, arg2 : Map<string, JSType>) : JSType;
	static addGenericParameters(arg1 : JSType, arg2 : Set<string>) : JSType;
	static applyCompositeMapping(arg1 : JSType, arg2 : Function<JSType, JSType>) : JSType;
	static applyCompositeMapping(arg1 : JSType, arg2 : JSTypeSource, arg3 : Function<JSType, JSType>) : JSType;
	static hasGenericParameter(arg1 : JSType) : boolean;
	static copyWithNewSource(arg1 : JSType, arg2 : JSTypeSource) : JSType;
	static copyWithExplicitlyDeclared(arg1 : JSType, arg2 : boolean) : JSType;
	static addPossibleOption(arg1 : List<JSType>, arg2 : JSType) : void;
	static processExpandedType(arg1 : BaseJSSymbolProcessor.TypeProcessor, arg2 : JSType, arg3 : BaseJSSymbolProcessor.EvaluateContext, arg4 : PsiElement) : boolean;
	static hasCompositeStructure(arg1 : JSType) : boolean;
	static areTypesCompatible(arg1 : JSType, arg2 : JSType, arg3 : ProcessingContext) : boolean;
	static getTypeOfElement(arg1 : PsiElement) : JSType;
	static isActionScriptVectorType(arg1 : JSType) : boolean;
	static defaultValueOfType(arg1 : string) : string;
	static getGenericTypeArguments(arg1 : JSType) : List<JSType>;
	static getCommonType(arg1 : JSType, arg2 : JSType, arg3 : DialectOptionHolder) : JSType;
	static isAssignableType(arg1 : JSType, arg2 : JSType, arg3 : ProcessingContext) : boolean;
	static getParameterTypeDecorators(arg1 : List<JSType>) : List<JSParameterTypeDecorator>;
	static buildRecordType(arg1 : JSFunctionTypeImpl) : JSRecordTypeImpl;
	static createTypeFromNamespace(arg1 : JSSymbolNamespace, arg2 : PsiElement) : JSType;
	static combineJSContexts(arg1 : JSContext, arg2 : JSContext) : JSContext;
	static getTypeInvalidationDependency() : Object;
}

export = JSTypeUtils
