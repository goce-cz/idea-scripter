import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSObjectLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSObjectLiteralExpression');
import JSContext = require('nashorn/com/intellij/lang/javascript/psi/types/JSContext');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSPropertyStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSPropertyStub');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import Collection = require('nashorn/java/util/Collection');
import FrameworkIndexingHandler = require('nashorn/com/intellij/lang/javascript/index/FrameworkIndexingHandler');
import JSImplicitElementProviderImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSImplicitElementProviderImpl');
import JSProperty = require('nashorn/com/intellij/lang/javascript/psi/JSProperty');
import StubBasedPsiElement = require('nashorn/com/intellij/psi/StubBasedPsiElement');
import Object = require('nashorn/java/lang/Object');
import JSSymbolNamespace = require('nashorn/com/intellij/lang/javascript/psi/JSSymbolNamespace');

declare class JSPropertyImpl {
	references : PsiReference[];
	name : string;
	qualifiedName : string;
	namespace : JSQualifiedName;
	namespaceExplicitlyDeclared : boolean;
	getProperty : boolean;
	setProperty : boolean;
	value : JSExpression;
	variable : JSVariable;
	textOffset : number;
	nameIdentifier : PsiElement;
	useScope : SearchScope;
	accessType : JSAttributeList.AccessType;
	initializerReference : string;
	objectLiteralExpressionInitializer : JSObjectLiteralExpression;
	deprecated : boolean;
	jSContext : JSContext;
	type : JSType;
	constructor(arg1 : ASTNode);
	constructor(arg1 : JSPropertyStub);
	getCachedData() : JSPropertyImpl.JSPropertyCachedData;
	calculateCachedData() : JSPropertyImpl.JSPropertyCachedData;
	static findNamespaceFromSpecialProperties(arg1 : JSObjectLiteralExpression) : JSQualifiedName;
	static findNameIdentifier(arg1 : ASTNode) : ASTNode;
	static findAccessNodeAsIdentifier(arg1 : IElementType, arg2 : ASTNode) : ASTNode;
	static isGetIdentifier(arg1 : ASTNode) : boolean;
	static isSetIdentifier(arg1 : ASTNode) : boolean;
	getVariable() : JSVariable;
	static placeToProcessProperties(arg1 : PsiElement) : boolean;
	static getFrameworkHandlersForPropertyName(arg1 : string) : Collection<FrameworkIndexingHandler>;
	evaluateType() : JSType;
}


declare interface JSPropertyImpl extends JSImplicitElementProviderImpl<JSPropertyStub>, JSProperty, StubBasedPsiElement<JSPropertyStub> {}

declare module JSPropertyImpl {
	class JSPropertyCachedData extends Object {
		mySymbolNamespace : JSSymbolNamespace;
		myAccessType : JSAttributeList.AccessType;
	}
}

export = JSPropertyImpl
