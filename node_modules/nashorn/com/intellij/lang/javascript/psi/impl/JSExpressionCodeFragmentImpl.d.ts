import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import FileViewProvider = require('nashorn/com/intellij/psi/FileViewProvider');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import IntentionFilterOwner = require('nashorn/com/intellij/psi/IntentionFilterOwner');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import CharSequence = require('nashorn/java/lang/CharSequence');
import JavaScriptParserBase = require('nashorn/com/intellij/lang/javascript/parsing/JavaScriptParserBase');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import JSFileImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSFileImpl');
import JSExpressionCodeFragment = require('nashorn/com/intellij/lang/javascript/psi/JSExpressionCodeFragment');

declare class JSExpressionCodeFragmentImpl {
	context : PsiElement;
	viewProvider : FileViewProvider;
	valid : boolean;
	physical : boolean;
	forcedResolveScope : GlobalSearchScope;
	intentionActionsFilter : IntentionFilterOwner.IntentionActionsFilter;
	typeContext : boolean;
	constructor(arg1 : Project, arg2 : string, arg3 : CharSequence, arg4 : boolean, arg5 : JavaScriptParserBase.ForceContext);
	constructor(arg1 : Project, arg2 : VirtualFile, arg3 : JavaScriptParserBase.ForceContext, arg4 : boolean);
	setContext(arg1 : PsiElement) : void;
}


declare interface JSExpressionCodeFragmentImpl extends JSFileImpl, JSExpressionCodeFragment, IntentionFilterOwner {}
export = JSExpressionCodeFragmentImpl
