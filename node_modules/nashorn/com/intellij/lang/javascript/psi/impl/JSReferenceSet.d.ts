import Object = require('nashorn/java/lang/Object');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Collection = require('nashorn/java/util/Collection');
import JSTextReference = require('nashorn/com/intellij/lang/javascript/psi/impl/JSTextReference');
import LocalQuickFixProvider = require('nashorn/com/intellij/codeInspection/LocalQuickFixProvider');

declare class JSReferenceSet extends Object {
	element : PsiElement;
	baseClassFqns : string[];
	references : PsiReference[];
	soft : boolean;
	constructor(arg1 : PsiElement, arg2 : string, arg3 : number, arg4 : boolean);
	constructor(arg1 : PsiElement, arg2 : string, arg3 : number, arg4 : boolean, arg5 : boolean, arg6 : boolean);
	constructor(arg1 : PsiElement, arg2 : boolean);
	constructor(arg1 : PsiElement);
	getElement() : PsiElement;
	setBaseClassFqns(arg1 : Collection<string>) : void;
	getBaseClassFqns() : string[];
	getReferences() : PsiReference[];
	update(arg1 : string, arg2 : number) : void;
	reparse(arg1 : string, arg2 : number) : PsiReference[];
	createTextReference(arg1 : string, arg2 : number, arg3 : boolean) : JSTextReference;
	static findSeparatorPosition(arg1 : string, arg2 : number) : number;
	isSoft() : boolean;
	setLocalQuickFixProvider(arg1 : LocalQuickFixProvider) : void;
}

export = JSReferenceSet
