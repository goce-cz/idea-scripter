import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import JSBinaryExpression = require('nashorn/com/intellij/lang/javascript/psi/JSBinaryExpression');
import PsiScopeProcessor = require('nashorn/com/intellij/psi/scope/PsiScopeProcessor');
import ResolveState = require('nashorn/com/intellij/psi/ResolveState');
import JSExpressionImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSExpressionImpl');

declare class JSBinaryExpressionImpl {
	lOperand : JSExpression;
	rOperand : JSExpression;
	operator : PsiElement;
	operationSign : IElementType;
	constructor(arg1 : ASTNode);
	static getExtendedBinaryOperations() : TokenSet;
	static getLOperandNode(arg1 : ASTNode) : ASTNode;
	static getROperandNode(arg1 : ASTNode) : ASTNode;
	getOperator() : PsiElement;
	static getOperationSignNode(arg1 : ASTNode) : ASTNode;
	static processBinaryExpressionDeclarations(arg1 : JSBinaryExpression, arg2 : PsiScopeProcessor, arg3 : ResolveState, arg4 : PsiElement, arg5 : PsiElement) : boolean;
}


declare interface JSBinaryExpressionImpl extends JSExpressionImpl, JSBinaryExpression {}
export = JSBinaryExpressionImpl
