import Object = require('nashorn/java/lang/Object');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSLanguageDialect = require('nashorn/com/intellij/lang/javascript/JSLanguageDialect');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSStatement = require('nashorn/com/intellij/lang/javascript/psi/JSStatement');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');

declare class JSChangeUtil extends Object {
	static createNameIdentifier(arg1 : Project, arg2 : string, arg3 : IElementType) : ASTNode;
	static createNameIdentifier(arg1 : Project, arg2 : string) : ASTNode;
	static createExpressionFromText(arg1 : Project, arg2 : string) : ASTNode;
	static createExpressionFromText(arg1 : Project, arg2 : string, arg3 : JSLanguageDialect) : ASTNode;
	static tryCreateExpressionFromText(arg1 : Project, arg2 : string, arg3 : JSLanguageDialect) : ASTNode;
	static createStatementFromText(arg1 : Project, arg2 : string) : ASTNode;
	static createStatementFromText(arg1 : Project, arg2 : string, arg3 : JSLanguageDialect) : ASTNode;
	static createJSTreeFromTextImpl(arg1 : Project, arg2 : string, arg3 : JSLanguageDialect) : PsiElement;
	static createJSTreeFromText(arg1 : Project, arg2 : string) : ASTNode;
	static createJSTreeFromText(arg1 : Project, arg2 : string, arg3 : JSLanguageDialect) : ASTNode;
	static replaceExpression(arg1 : JSExpression, arg2 : JSExpression) : JSExpression;
	static replaceStatement(arg1 : JSStatement, arg2 : JSStatement) : JSStatement;
	static doIdentifierReplacement(arg1 : PsiElement, arg2 : PsiElement, arg3 : string) : void;
	static doIdentifierReplacement(arg1 : ASTNode, arg2 : ASTNode, arg3 : string, arg4 : Project) : void;
	static doAddBefore(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement) : PsiElement;
	static doDoAddBefore(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement) : PsiElement;
	static insertWhitespaceIfNeeded(arg1 : ASTNode, arg2 : ASTNode, arg3 : ASTNode, arg4 : ASTNode) : ASTNode;
	static addWs(arg1 : ASTNode, arg2 : ASTNode, arg3 : string) : ASTNode;
	static isStatementContainer(arg1 : PsiElement) : boolean;
	static isStatementOrComment(arg1 : PsiElement) : boolean;
	static doAddAfter(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement) : PsiElement;
	static doDoAddAfter(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement) : PsiElement;
	static doAddRangeBefore(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement, arg4 : PsiElement) : PsiElement;
	static doAddRangeAfter(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement, arg4 : PsiElement) : PsiElement;
	static isBlockStatementContainer(arg1 : JSElement) : boolean;
	static blockDoAddRangeBefore(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement) : PsiElement;
	static blockDoAddRangeAfter(arg1 : PsiElement, arg2 : PsiElement, arg3 : PsiElement) : PsiElement;
	static blockDoAddAfter(arg1 : PsiElement, arg2 : PsiElement) : PsiElement;
	static blockDoAddBefore(arg1 : PsiElement, arg2 : PsiElement) : PsiElement;
	static removeRangeWithRemovalOfCommas(arg1 : ASTNode, arg2 : ASTNode) : void;
	static createClassMemberFromText(arg1 : Project, arg2 : string, arg3 : JSLanguageDialect) : ASTNode;
}


declare module JSChangeUtil {
	class BlockAddContext extends Object {
		doAddElement(arg1 : PsiElement[]) : PsiElement;
	}
}

export = JSChangeUtil
