import JSFunctionStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSFunctionStub');
import Icon = require('nashorn/javax/swing/Icon');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import IStubElementType = require('nashorn/com/intellij/psi/stubs/IStubElementType');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSFunctionItem = require('nashorn/com/intellij/lang/javascript/psi/JSFunctionItem');
import JSFunctionBaseImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSFunctionBaseImpl');
import JSSuppressionHolder = require('nashorn/com/intellij/lang/javascript/psi/JSSuppressionHolder');

declare class JSFunctionImpl<StubT extends JSFunctionStub> {
	static CONSTRUCTOR_ICON : Icon;
	override : boolean;
	qualifiedName : string;
	useScope : SearchScope;
	navigationElement : PsiElement;
	constructor(arg1 : ASTNode);
	constructor(arg1 : StubT, arg2 : IStubElementType);
	static getReturnTypeInContext(arg1 : JSFunction, arg2 : PsiElement) : JSType;
	static evaluateReturnTypeFromHierarchy(arg1 : JSFunction) : JSType;
	static getFunctionIcon(arg1 : JSFunctionItem, arg2 : number) : Icon;
	isDecompiledConstructor() : boolean;
}


declare interface JSFunctionImpl<StubT extends JSFunctionStub> extends JSFunctionBaseImpl<StubT>, JSSuppressionHolder {}
export = JSFunctionImpl
