import JSVariableStubBase = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSVariableStubBase');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import JSContext = require('nashorn/com/intellij/lang/javascript/psi/types/JSContext');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import Icon = require('nashorn/javax/swing/Icon');
import JSSymbolNamespace = require('nashorn/com/intellij/lang/javascript/psi/JSSymbolNamespace');
import JSStubElementImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSStubElementImpl');

declare class JSVariableBaseImpl<T extends JSVariableStubBase<T2>, T2 extends JSVariable> {
	static IDENTIFIER_TOKENS_SET : TokenSet;
	initializerOrStub : JSExpression;
	initializer : JSExpression;
	literalOrReferenceInitializerText : string;
	useScope : SearchScope;
	name : string;
	attributeList : JSAttributeList;
	type : JSType;
	typeString : string;
	typeElement : PsiElement;
	textOffset : number;
	local : boolean;
	deprecated : boolean;
	declarationScope : PsiElement;
	qualifiedName : string;
	nameIdentifier : PsiElement;
	namespace : JSQualifiedName;
	namespaceExplicitlyDeclared : boolean;
	accessType : JSAttributeList.AccessType;
	jSContext : JSContext;
	static findVariableNameIdentifier(arg1 : ASTNode) : ASTNode;
	doGetType() : JSType;
	static getIcon(arg1 : JSVariable, arg2 : number, arg3 : boolean) : Icon;
	getSymbolNamespace() : JSSymbolNamespace;
	calculateSymbolNamespace() : JSSymbolNamespace;
}


declare interface JSVariableBaseImpl<T extends JSVariableStubBase<T2>, T2 extends JSVariable> extends JSStubElementImpl<T>, JSVariable {}
export = JSVariableBaseImpl
