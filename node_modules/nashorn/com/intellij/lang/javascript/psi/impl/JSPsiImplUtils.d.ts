import Object = require('nashorn/java/lang/Object');
import TObjectHashingStrategy = require('nashorn/gnu/trove/TObjectHashingStrategy');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSFile = require('nashorn/com/intellij/lang/javascript/psi/JSFile');
import JSPackageStatement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSPackageStatement');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import OrderEntry = require('nashorn/com/intellij/openapi/roots/OrderEntry');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');
import Collection = require('nashorn/java/util/Collection');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSFunctionItem = require('nashorn/com/intellij/lang/javascript/psi/JSFunctionItem');
import Set = require('nashorn/java/util/Set');
import JSFunctionExpression = require('nashorn/com/intellij/lang/javascript/psi/JSFunctionExpression');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import JSExecutionScope = require('nashorn/com/intellij/lang/javascript/psi/JSExecutionScope');
import JSDefinitionExpression = require('nashorn/com/intellij/lang/javascript/psi/JSDefinitionExpression');

declare class JSPsiImplUtils extends Object {
	static CONSTRUCTS_PROPERTY_NAME : string;
	static QUALIFIED_NAME_HASHING_STRATEGY : TObjectHashingStrategy<JSQualifiedNamedElement>;
	constructor();
	static getTypeExpressionFromDeclaration(arg1 : JSNamedElement) : ASTNode;
	static getTypeFromTypeExpr(arg1 : ASTNode, arg2 : JSNamedElement) : JSType;
	static getTypeFromDeclaration(arg1 : JSNamedElement) : JSType;
	static getArrayElementTypeFromAnnotation(arg1 : JSAttributeList) : string;
	static updateFileName(arg1 : JSQualifiedNamedElement, arg2 : string, arg3 : string) : void;
	static findPackageStatement(arg1 : JSFile) : JSPackageStatement;
	static findClass(arg1 : JSFile) : JSClass;
	static findQualifiedElement(arg1 : JSFile) : JSQualifiedNamedElement;
	static findTopLevelNavigatableElement(arg1 : JSQualifiedNamedElement) : PsiElement;
	static findTopLevelNavigatableElementWithSource(arg1 : JSQualifiedNamedElement, arg2 : Consumer<JSQualifiedNamedElement>) : PsiElement;
	static findNavigatableElementForLibraryClass(arg1 : JSQualifiedNamedElement) : PsiElement;
	static getSourceRoots(arg1 : OrderEntry, arg2 : VirtualFile) : VirtualFile[];
	static getQName(arg1 : JSNamedElement) : string;
	static getNamespace(arg1 : JSNamedElement) : JSQualifiedName;
	static buildNamespaceFromQualifiedName(arg1 : JSQualifiedNamedElement) : JSQualifiedName;
	static findAnnotationAttributeValueNode(arg1 : ASTNode) : ASTNode;
	static getTypeFromAnnotationParameter(arg1 : JSAttributeList, arg2 : string, arg3 : string) : string;
	static isTheSameClass(arg1 : PsiElement, arg2 : JSQualifiedNamedElement) : boolean;
	static doRenameParentDirectoryIfNeeded(arg1 : VirtualFile, arg2 : string, arg3 : Object) : void;
	static getQNameForMove(arg1 : PsiElement, arg2 : PsiElement) : string;
	static differentPackageName(arg1 : string, arg2 : string) : boolean;
	static isEmpty(arg1 : string) : boolean;
	static isDeprecatedFromAttribute(arg1 : JSAttributeListOwner) : boolean;
	static containsEquivalent(arg1 : Collection<PsiElement>, arg2 : PsiElement) : boolean;
	static containsEquivalent(arg1 : PsiElement[], arg2 : PsiElement) : boolean;
	static findNameIdentifierOfFunction(arg1 : ASTNode) : ASTNode;
	static findNameIdentifierOfFunction(arg1 : ASTNode, arg2 : boolean) : ASTNode;
	static advance(arg1 : ASTNode) : ASTNode;
	static isFunctionNameReference(arg1 : JSFunction, arg2 : PsiElement) : boolean;
	static deleteFromTree(arg1 : PsiElement) : void;
	static calcNamespaceReference(arg1 : PsiElement) : string;
	static isArrowFunction(arg1 : JSFunction) : IElementType;
	static tryGetArrowFunctionReturnExpression(arg1 : JSFunction) : JSExpression;
	static getNonParenthesizeParent(arg1 : PsiElement) : PsiElement;
	static isTypeSignature(arg1 : JSFunction) : boolean;
	static getPossibleFunction(arg1 : PsiElement) : JSFunction;
	static calculatePossibleFunction(arg1 : PsiElement) : JSFunctionItem;
	static calculatePossibleFunction(arg1 : PsiElement, arg2 : PsiElement) : JSFunctionItem;
	static calculatePossibleFunction(arg1 : PsiElement, arg2 : PsiElement, arg3 : Set<PsiElement>) : JSFunctionItem;
	static findConstructsFunction(arg1 : JSQualifiedNamedElement) : JSFunctionExpression;
	static getAssignedExpression(arg1 : PsiElement) : JSExpression;
	static getInitializedElement(arg1 : JSExpression) : JSQualifiedNamedElement;
	static findFunctionQualifiedName(arg1 : JSFunction) : string;
	static findFunctionName(arg1 : JSFunction) : string;
	static findPrevCodeElement(arg1 : PsiElement) : PsiElement;
	static findNextCodeElement(arg1 : PsiElement) : PsiElement;
	static getScopeFunction(arg1 : JSElement) : JSFunction;
	static isGetProperty(arg1 : PsiElement) : boolean;
	static getExecutionScope(arg1 : JSElement) : JSExecutionScope;
	static getRightmostOperand(arg1 : JSDefinitionExpression) : JSExpression;
	static getPrevSiblingIgnoreWhitespace(arg1 : PsiElement) : PsiElement;
}

export = JSPsiImplUtils
