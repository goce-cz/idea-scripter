import JSFunctionStubBase = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSFunctionStubBase');
import JSParameterList = require('nashorn/com/intellij/lang/javascript/psi/JSParameterList');
import JSSourceElement = require('nashorn/com/intellij/lang/javascript/psi/JSSourceElement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSParameter = require('nashorn/com/intellij/lang/javascript/psi/JSParameter');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import Map = require('nashorn/java/util/Map');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSContext = require('nashorn/com/intellij/lang/javascript/psi/types/JSContext');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import IStubElementType = require('nashorn/com/intellij/psi/stubs/IStubElementType');
import List = require('nashorn/java/util/List');
import Set = require('nashorn/java/util/Set');
import JSDocumentationProcessor = require('nashorn/com/intellij/lang/javascript/documentation/JSDocumentationProcessor');
import JSTypeSource = require('nashorn/com/intellij/lang/javascript/psi/types/JSTypeSource');
import JSParameterImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSParameterImpl');
import JSStubElementImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSStubElementImpl');
import JSRecordTypeImpl = require('nashorn/com/intellij/lang/javascript/psi/types/JSRecordTypeImpl');
import JSParameterTypeDecorator = require('nashorn/com/intellij/lang/javascript/psi/JSParameterTypeDecorator');
import Object = require('nashorn/java/lang/Object');
import JSNodeVisitor = require('nashorn/com/intellij/lang/javascript/JSNodeVisitor');

declare class JSFunctionBaseImpl<T extends JSFunctionStubBase> {
	parameterList : JSParameterList;
	body : JSSourceElement[];
	returnTypeString : string;
	returnTypeElement : PsiElement;
	getProperty : boolean;
	setProperty : boolean;
	name : string;
	textOffset : number;
	kind : JSFunction.FunctionKind;
	deprecated : boolean;
	referencesArguments : boolean;
	referencesThis : boolean;
	parameters : JSParameter[];
	override : boolean;
	nameIdentifier : PsiElement;
	returnType : JSType;
	namespace : JSQualifiedName;
	namespaceExplicitlyDeclared : boolean;
	accessType : JSAttributeList.AccessType;
	extensionSymbols : Map<string, JSReferenceExpression>;
	anonymousFunctionCall : boolean;
	jSContext : JSContext;
	attributeList : JSAttributeList;
	constructor(arg1 : ASTNode);
	constructor(arg1 : T, arg2 : IStubElementType);
	createNameIdentifier(arg1 : string) : ASTNode;
	doGetName() : string;
	getArgumentsClassName() : string;
	initCachedData() : JSFunctionBaseImpl.CachedFunctionData;
	addReturnTypeFromEvaluated(arg1 : List<JSType>) : JSType;
	getCachedData() : JSFunctionBaseImpl.CachedFunctionData;
	addReferencedExternalNames(arg1 : Set<string>) : void;
	seemsToBePropertyAccessor() : boolean;
	fillInfoFromDocComment(arg1 : JSFunctionBaseImpl.CachedFunctionData) : void;
	getReturnTypeFromDeclaration() : JSType;
	findFunctionOrPropertyDocComment() : PsiElement;
	static processFunctionLevelDocTag(arg1 : JSDocumentationProcessor.MetaDocType, arg2 : string, arg3 : string, arg4 : JSFunctionBaseImpl.CachedFunctionData, arg5 : JSTypeSource) : void;
	isOptional(arg1 : JSParameter) : boolean;
	isRest(arg1 : JSParameter) : boolean;
	isTypeExplicitlyDeclared(arg1 : JSParameter) : boolean;
	getTypeFromComments(arg1 : JSParameterImpl) : JSType;
	static isInJS(arg1 : ASTNode) : boolean;
}


declare interface JSFunctionBaseImpl<T extends JSFunctionStubBase> extends JSStubElementImpl<T>, JSFunction {}

declare module JSFunctionBaseImpl {
	class MyJSDocumentationProcessor {
		constructor(arg1 : JSFunctionBaseImpl.CachedFunctionData, arg2 : JSTypeSource, arg3 : boolean);
		registerParameter(arg1 : string, arg2 : string) : void;
		makeFieldOptional(arg1 : string) : void;
		setPropertyType(arg1 : string, arg2 : JSType, arg3 : JSRecordTypeImpl, arg4 : string, arg5 : JSRecordTypeImpl.TypeMember) : void;
		static createTypeFromQualifiedName(arg1 : string, arg2 : JSParameterTypeDecorator) : JSType;
		fillParameterDecorators() : void;
	}


	interface MyJSDocumentationProcessor extends JSDocumentationProcessor {}	class CachedFunctionData extends Object {
	}
	class FunctionNodesVisitor {
	}


	interface FunctionNodesVisitor extends JSNodeVisitor {}}

export = JSFunctionBaseImpl
