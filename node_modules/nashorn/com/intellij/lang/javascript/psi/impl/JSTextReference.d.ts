import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Collection = require('nashorn/java/util/Collection');
import Object = require('nashorn/java/lang/Object');
import LocalQuickFix = require('nashorn/com/intellij/codeInspection/LocalQuickFix');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import ResultSink = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResultSink');
import List = require('nashorn/java/util/List');
import ResolveResult = require('nashorn/com/intellij/psi/ResolveResult');
import SinkResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/SinkResolveProcessor');
import JSDocComment = require('nashorn/com/intellij/lang/javascript/psi/jsdoc/JSDocComment');
import PsiPolyVariantReference = require('nashorn/com/intellij/psi/PsiPolyVariantReference');
import EmptyResolveMessageProvider = require('nashorn/com/intellij/codeInsight/daemon/EmptyResolveMessageProvider');
import LocalQuickFixProvider = require('nashorn/com/intellij/codeInspection/LocalQuickFixProvider');
import JSResolveUtil = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSResolveUtil');

declare class JSTextReference {
	element : PsiElement;
	rangeInElement : TextRange;
	canonicalText : string;
	primary : boolean;
	onlyFqns : boolean;
	baseClassFqns : Collection<string>;
	variants : Object[];
	soft : boolean;
	unresolvedMessagePattern : string;
	quickFixes : LocalQuickFix[];
	isPrimary() : boolean;
	isOnlyFqns() : boolean;
	getBaseClassFqns() : Collection<string>;
	processToSink(arg1 : PsiFile, arg2 : ResultSink) : void;
	fillContextNames() : List<string>;
	doResolve(arg1 : PsiFile) : ResolveResult[];
	useActionScriptIndex(arg1 : PsiFile) : boolean;
	doProcess(arg1 : PsiFile, arg2 : SinkResolveProcessor) : void;
	calcMyIndex() : number;
	findNearestClass() : PsiElement;
	doSymbolResolve(arg1 : PsiFile) : ResolveResult[];
	processLocalVariants(arg1 : PsiFile, arg2 : SinkResolveProcessor<any>, arg3 : PsiElement) : void;
	static processGenericParameters(arg1 : List<string>, arg2 : JSDocComment, arg3 : SinkResolveProcessor<any>) : void;
	static handleContentChange(arg1 : PsiElement, arg2 : TextRange, arg3 : string) : PsiElement;
}


declare interface JSTextReference extends PsiPolyVariantReference, EmptyResolveMessageProvider, LocalQuickFixProvider {}

declare module JSTextReference {
	class MyResolver {
	}


	interface MyResolver extends JSResolveUtil.Resolver<JSTextReference> {}	class MyResolveProcessor {
		constructor(arg1 : string, arg2 : PsiFile);
		constructor(arg1 : ResultSink);
	}


	interface MyResolveProcessor extends SinkResolveProcessor {}	class JSDeclarationModuleReference extends Object {
	}
}

export = JSTextReference
