import JSReferenceCustomResolver = require('nashorn/com/intellij/lang/javascript/psi/impl/JSReferenceCustomResolver');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Object = require('nashorn/java/lang/Object');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import PsiNamedElement = require('nashorn/com/intellij/psi/PsiNamedElement');
import ResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResolveProcessor');
import ResolveResult = require('nashorn/com/intellij/psi/ResolveResult');
import JSExpressionImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSExpressionImpl');
import BindablePsiReference = require('nashorn/com/intellij/refactoring/rename/BindablePsiReference');

declare class JSReferenceExpressionImpl {
	static customResolver : JSReferenceCustomResolver;
	qualifier : JSExpression;
	referencedName : string;
	referenceName : string;
	referenceNameElement : PsiElement;
	element : PsiElement;
	reference : PsiReference;
	rangeInElement : TextRange;
	canonicalText : string;
	variants : Object[];
	soft : boolean;
	resolveQualifier : JSExpression;
	attributeReference : boolean;
	namespaceElement : JSReferenceExpression;
	constructor(arg1 : ASTNode);
	static getCustomResolver() : JSReferenceCustomResolver;
	static setCustomResolver(arg1 : JSReferenceCustomResolver) : void;
	static getQualifierNode(arg1 : ASTNode) : ASTNode;
	static getNameElement(arg1 : ASTNode) : ASTNode;
	handleElementRenameInternal(arg1 : string) : PsiElement;
	isIdentifier(arg1 : string) : boolean;
	static bindToElement(arg1 : JSReferenceExpression, arg2 : string, arg3 : PsiNamedElement, arg4 : boolean) : JSReferenceExpression;
	static doProcessLocalDeclarations(arg1 : PsiElement, arg2 : JSExpression, arg3 : ResolveProcessor, arg4 : boolean, arg5 : boolean, arg6 : boolean) : void;
	static isStaticContext(arg1 : PsiElement) : boolean;
	static getNamespaceReference(arg1 : JSReferenceExpressionImpl) : JSReferenceExpression;
	getResolveQualifier() : JSExpression;
	static isLocalResolveQualifier(arg1 : JSExpression) : boolean;
	static resolveUnqualified(arg1 : string, arg2 : PsiElement, arg3 : boolean) : ResolveResult[];
}


declare interface JSReferenceExpressionImpl extends JSExpressionImpl, JSReferenceExpression, BindablePsiReference {}
export = JSReferenceExpressionImpl
