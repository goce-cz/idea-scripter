import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Object = require('nashorn/java/lang/Object');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSLiteralExpressionStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSLiteralExpressionStub');
import JSImplicitElementProviderImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSImplicitElementProviderImpl');
import JSLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSLiteralExpression');
import StubBasedPsiElement = require('nashorn/com/intellij/psi/StubBasedPsiElement');
import PsiLanguageInjectionHost = require('nashorn/com/intellij/psi/PsiLanguageInjectionHost');

declare class JSLiteralExpressionImpl {
	references : PsiReference[];
	validHost : boolean;
	quotedLiteral : boolean;
	regExpLiteral : boolean;
	binaryLiteral : boolean;
	octalLiteral : boolean;
	hexLiteral : boolean;
	numericLiteralTextWithoutPrefix : string;
	numericLiteral : boolean;
	booleanLiteral : boolean;
	valueAsPropertyName : string;
	value : Object;
	constructor(arg1 : ASTNode);
	constructor(arg1 : JSLiteralExpressionStub);
	createRefs() : PsiReference[];
	static textIsIntegerValue(arg1 : string) : boolean;
	static textHasHexPrefix(arg1 : string) : boolean;
	static textHasBinaryPrefix(arg1 : string) : boolean;
	static textHasOctalPrefix(arg1 : string) : boolean;
	static textHasOctalES6Prefix(arg1 : string) : boolean;
	static textHasOctalJSPrefix(arg1 : string) : boolean;
	getNumericLiteralTextWithoutPrefix() : string;
	static isNullExpression(arg1 : ASTNode) : boolean;
}


declare interface JSLiteralExpressionImpl extends JSImplicitElementProviderImpl<JSLiteralExpressionStub>, JSLiteralExpression, StubBasedPsiElement<JSLiteralExpressionStub>, PsiLanguageInjectionHost {}
export = JSLiteralExpressionImpl
