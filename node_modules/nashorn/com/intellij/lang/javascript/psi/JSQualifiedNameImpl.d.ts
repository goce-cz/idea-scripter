import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import QualifiedName = require('nashorn/com/intellij/psi/util/QualifiedName');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import StubOutputStream = require('nashorn/com/intellij/psi/stubs/StubOutputStream');
import StubInputStream = require('nashorn/com/intellij/psi/stubs/StubInputStream');

declare class JSQualifiedNameImpl {
	name : string;
	qualifiedName : string;
	parent : JSQualifiedName;
	static create(arg1 : string, arg2 : JSQualifiedName) : JSQualifiedNameImpl;
	static fromQualifiedName(arg1 : QualifiedName) : JSQualifiedNameImpl;
	static fromComponents(arg1 : string[]) : JSQualifiedNameImpl;
	static fromQualifiedName(arg1 : string) : JSQualifiedNameImpl;
	getQualifiedName(arg1 : StringBuilder) : void;
	static buildFromNamespaceAndName(arg1 : JSQualifiedNamedElement) : string;
	static fromQualifiedNamedElement(arg1 : JSQualifiedNamedElement) : JSQualifiedNameImpl;
	static buildProvidedNamespace(arg1 : JSQualifiedNamedElement) : JSQualifiedName;
	static serialize(arg1 : JSQualifiedName, arg2 : StubOutputStream) : void;
	static deserialize(arg1 : StubInputStream) : JSQualifiedNameImpl;
	withQualifier(arg1 : JSQualifiedName) : JSQualifiedName;
	withoutInnermostComponent(arg1 : string) : JSQualifiedName;
	toComponents() : string[];
}


declare interface JSQualifiedNameImpl extends JSQualifiedName {}
export = JSQualifiedNameImpl
