import Object = require('nashorn/java/lang/Object');
import LanguageExtension = require('nashorn/com/intellij/lang/LanguageExtension');
import Language = require('nashorn/com/intellij/lang/Language');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSStatement = require('nashorn/com/intellij/lang/javascript/psi/JSStatement');
import JSObjectLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSObjectLiteralExpression');

declare class JSInheritedLanguagesConfigurableProvider extends Object {
	static INSTANCE : LanguageExtension<JSInheritedLanguagesConfigurableProvider>;
	language : Language;
	blockPlaceholderText : string;
	constructor();
	getLanguage() : Language;
	isBadExpressionStatement(arg1 : PsiElement) : boolean;
	isNeedToBeTerminated(arg1 : PsiElement) : boolean;
	isLHSExpression(arg1 : PsiElement) : boolean;
	isCaseStatementInterrupted(arg1 : JSStatement) : boolean;
	forConditionShouldUseVariables() : boolean;
	constructorCallWithoutNewActual() : boolean;
	unnecessaryBlockStatement(arg1 : PsiElement) : boolean;
	hasNonBlockBranch(arg1 : PsiElement) : boolean;
	isRemoveUnnecessaryParenthesesEnabled(arg1 : PsiElement) : boolean;
	isSimplifyBooleanFixEnabled(arg1 : PsiElement) : boolean;
	shouldRenameFileWithClass(arg1 : PsiElement) : boolean;
	getBlockPlaceholderText() : string;
	getObjectPlaceholderText(arg1 : JSObjectLiteralExpression) : string;
	createExpressionFromText(arg1 : string, arg2 : PsiElement, arg3 : boolean) : PsiElement;
	createStatementFromText(arg1 : string, arg2 : PsiElement) : PsiElement;
	isMultilineLiteral(arg1 : PsiElement) : boolean;
	getMultilineLiteralContent(arg1 : string) : string;
}

export = JSInheritedLanguagesConfigurableProvider
