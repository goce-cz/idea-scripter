import Object = require('nashorn/java/lang/Object');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSInheritedLanguagesConfigurableProvider = require('nashorn/com/intellij/lang/javascript/psi/JSInheritedLanguagesConfigurableProvider');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSStatement = require('nashorn/com/intellij/lang/javascript/psi/JSStatement');
import Language = require('nashorn/com/intellij/lang/Language');
import JSObjectLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSObjectLiteralExpression');

declare class JSInheritedLanguagesHelper extends Object {
	constructor();
	static getConfigurableProvider(arg1 : ASTNode) : JSInheritedLanguagesConfigurableProvider;
	static getConfigurableProvider(arg1 : PsiElement) : JSInheritedLanguagesConfigurableProvider;
	static isBadExpressionStatement(arg1 : PsiElement) : boolean;
	static isNeedToBeTerminated(arg1 : PsiElement) : boolean;
	static isLHSExpression(arg1 : PsiElement) : boolean;
	static isCaseStatementInterrupted(arg1 : JSStatement) : boolean;
	static forConditionShouldUseVariables(arg1 : PsiElement) : boolean;
	static constructorCallWithoutNewActual(arg1 : PsiElement) : boolean;
	static unnecessaryBlockStatement(arg1 : PsiElement) : boolean;
	static getLanguage(arg1 : PsiElement) : Language;
	static skipNonBlockBranch(arg1 : PsiElement) : boolean;
	static isRemoveUnnecessaryParenthesesEnabled(arg1 : PsiElement) : boolean;
	static isSimplifyBooleanFixEnabled(arg1 : PsiElement) : boolean;
	static shouldRenameFileWithClass(arg1 : PsiElement) : boolean;
	static getBlockPlaceholderText(arg1 : ASTNode) : string;
	static getObjectPlaceholderText(arg1 : JSObjectLiteralExpression) : string;
	static createExpressionFromText(arg1 : string, arg2 : PsiElement, arg3 : boolean) : PsiElement;
	static createStatementFromText(arg1 : string, arg2 : PsiElement) : PsiElement;
	static isMultilineLiteral(arg1 : PsiElement) : boolean;
	static getMultilineLiteralContent(arg1 : PsiElement, arg2 : string) : string;
}

export = JSInheritedLanguagesHelper
