import Object = require('nashorn/java/lang/Object');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import IStubElementType = require('nashorn/com/intellij/psi/stubs/IStubElementType');
import Collection = require('nashorn/java/util/Collection');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import JSDocComment = require('nashorn/com/intellij/lang/javascript/psi/jsdoc/JSDocComment');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSObjectLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSObjectLiteralExpression');
import StubBasedPsiElementBase = require('nashorn/com/intellij/extapi/psi/StubBasedPsiElementBase');

declare class JSStubBasedPsiTreeUtil extends Object {
	constructor();
	static resolveLocally(arg1 : string, arg2 : PsiElement) : PsiElement;
	static findDescendants<T extends PsiElement>(arg1 : PsiElement, arg2 : IStubElementType<any, T>) : Collection<T>;
	static findDescendants<T extends PsiElement>(arg1 : PsiElement, arg2 : TokenSet) : Collection<T>;
	static addDescendantsRecursively<T extends PsiElement>(arg1 : PsiElement, arg2 : TokenSet, arg3 : TokenSet, arg4 : PsiElement, arg5 : Ref<number>, arg6 : Collection<T>) : void;
	static findDocComment(arg1 : PsiElement) : JSDocComment;
	static getPrevSibling(arg1 : PsiElement) : PsiElement;
	static findReturnedObjectLiterals(arg1 : JSFunction) : Collection<JSObjectLiteralExpression>;
	static getStubOrPsiChild(arg1 : StubBasedPsiElementBase<any>, arg2 : TokenSet) : PsiElement;
}

export = JSStubBasedPsiTreeUtil
