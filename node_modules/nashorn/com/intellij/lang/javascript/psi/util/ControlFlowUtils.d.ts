import Object = require('nashorn/java/lang/Object');
import JSStatement = require('nashorn/com/intellij/lang/javascript/psi/JSStatement');
import JSWithStatement = require('nashorn/com/intellij/lang/javascript/psi/JSWithStatement');
import JSDoWhileStatement = require('nashorn/com/intellij/lang/javascript/psi/JSDoWhileStatement');
import JSWhileStatement = require('nashorn/com/intellij/lang/javascript/psi/JSWhileStatement');
import JSForStatement = require('nashorn/com/intellij/lang/javascript/psi/JSForStatement');
import JSForInStatement = require('nashorn/com/intellij/lang/javascript/psi/JSForInStatement');
import JSSwitchStatement = require('nashorn/com/intellij/lang/javascript/psi/JSSwitchStatement');
import JSTryStatement = require('nashorn/com/intellij/lang/javascript/psi/JSTryStatement');
import JSIfStatement = require('nashorn/com/intellij/lang/javascript/psi/JSIfStatement');
import JSLabeledStatement = require('nashorn/com/intellij/lang/javascript/psi/JSLabeledStatement');
import JSBlockStatement = require('nashorn/com/intellij/lang/javascript/psi/JSBlockStatement');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import Set = require('nashorn/java/util/Set');
import JSVarStatement = require('nashorn/com/intellij/lang/javascript/psi/JSVarStatement');
import JSRecursiveElementVisitor = require('nashorn/com/intellij/lang/javascript/psi/JSRecursiveElementVisitor');

declare class ControlFlowUtils extends Object {
	static statementMayCompleteNormally(arg1 : JSStatement) : boolean;
	static withStatementMayReturnNormally(arg1 : JSWithStatement) : boolean;
	static doWhileStatementMayReturnNormally(arg1 : JSDoWhileStatement) : boolean;
	static whileStatementMayReturnNormally(arg1 : JSWhileStatement) : boolean;
	static forStatementMayReturnNormally(arg1 : JSForStatement) : boolean;
	static foreachStatementMayReturnNormally(arg1 : JSForInStatement) : boolean;
	static switchStatementMayReturnNormally(arg1 : JSSwitchStatement) : boolean;
	static tryStatementMayReturnNormally(arg1 : JSTryStatement) : boolean;
	static ifStatementMayReturnNormally(arg1 : JSIfStatement) : boolean;
	static labeledStatementMayCompleteNormally(arg1 : JSLabeledStatement) : boolean;
	static blockMayCompleteNormally(arg1 : JSBlockStatement) : boolean;
	static statementIsBreakTarget(arg1 : JSStatement) : boolean;
	static elementContainsReturn(arg1 : JSElement) : boolean;
	static statementIsContinueTarget(arg1 : JSStatement) : boolean;
	static isInLoop(arg1 : JSElement) : boolean;
	static isInFinallyBlock(arg1 : JSElement) : boolean;
	static isInCatchBlock(arg1 : JSElement) : boolean;
	static isInWhileStatementBody(arg1 : JSElement) : boolean;
	static isInDoWhileStatementBody(arg1 : JSElement) : boolean;
	static isInForStatementBody(arg1 : JSElement) : boolean;
	static isInForeachStatementBody(arg1 : JSElement) : boolean;
	static stripBraces(arg1 : JSStatement) : JSStatement;
	static statementCompletesWithStatement(arg1 : JSStatement, arg2 : JSStatement) : boolean;
	static blockCompletesWithStatement(arg1 : JSBlockStatement, arg2 : JSStatement) : boolean;
	static isLoop(arg1 : JSElement) : boolean;
	static getContainingStatement(arg1 : JSElement) : JSElement;
	static statementIsLastInBlock(arg1 : JSBlockStatement, arg2 : JSStatement) : boolean;
	static statementIsLastInSwitch(arg1 : JSSwitchStatement, arg2 : JSStatement) : boolean;
	static statementIsLastInStatements(arg1 : JSStatement, arg2 : JSStatement[]) : boolean;
	static isFalse(arg1 : JSExpression) : boolean;
	static isTrue(arg1 : JSExpression) : boolean;
	static isInExitStatement(arg1 : JSExpression) : boolean;
	static isInReturnStatementArgument(arg1 : JSExpression) : boolean;
	static isInThrowStatementArgument(arg1 : JSExpression) : boolean;
	static resolveMethod(arg1 : JSCallExpression) : JSFunction;
	static resolveVariable(arg1 : JSExpression) : JSVariable;
	static appendStatementsInSequence(arg1 : StringBuilder, arg2 : JSStatement, arg3 : JSStatement) : void;
	static appendStatementStripped(arg1 : StringBuilder, arg2 : JSStatement) : void;
	static canBeMerged(arg1 : JSStatement, arg2 : JSStatement) : boolean;
	static containsConflictingDeclarations(arg1 : JSBlockStatement, arg2 : JSBlockStatement) : boolean;
	static conflictingDeclarationExists(arg1 : string, arg2 : JSBlockStatement, arg3 : JSBlockStatement) : boolean;
	static calculateTopLevelDeclarations(arg1 : JSStatement) : Set<string>;
	static addDeclarations(arg1 : JSVarStatement, arg2 : Set<string>) : void;
	static containsConflictingDeclarations(arg1 : Set<string>, arg2 : JSStatement) : boolean;
	static statementContainsExitingBreak(arg1 : JSStatement) : boolean;
}


declare module ControlFlowUtils {
	class ExitingBreakFinder {
		breakFound() : boolean;
	}


	interface ExitingBreakFinder extends JSRecursiveElementVisitor {}	class ConflictingDeclarationVisitor {
		hasConflictingDeclaration() : boolean;
	}


	interface ConflictingDeclarationVisitor extends JSRecursiveElementVisitor {}	class ContinueFinder {
		continueFound() : boolean;
	}


	interface ContinueFinder extends JSRecursiveElementVisitor {}	class BreakFinder {
		breakFound() : boolean;
	}


	interface BreakFinder extends JSRecursiveElementVisitor {}	class ReturnFinder {
		returnFound() : boolean;
	}


	interface ReturnFinder extends JSRecursiveElementVisitor {}}

export = ControlFlowUtils
