import Object = require('nashorn/java/lang/Object');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import Set = require('nashorn/java/util/Set');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSRecursiveElementVisitor = require('nashorn/com/intellij/lang/javascript/psi/JSRecursiveElementVisitor');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');

declare class VariableAccessUtil extends Object {
	static variableIsAssignedFrom(arg1 : JSVariable, arg2 : JSElement) : boolean;
	static variableIsPassedAsMethodArgument(arg1 : JSVariable, arg2 : JSElement) : boolean;
	static variableIsUsedAsObjectProperty(arg1 : JSVariable, arg2 : JSElement) : boolean;
	static variableIsUsedInArrayLiteral(arg1 : JSVariable, arg2 : JSElement) : boolean;
	static variableIsAssigned(arg1 : JSVariable, arg2 : JSElement) : boolean;
	static variableIsAssigned(arg1 : JSVariable, arg2 : JSElement, arg3 : Set<JSVariable>) : boolean;
	static variableIsAssigned(arg1 : JSVariable, arg2 : JSElement, arg3 : Set<JSVariable>, arg4 : Set<JSVariable>) : boolean;
	static variableIsReturned(arg1 : JSVariable, arg2 : JSElement) : boolean;
	static arrayContentsAreAccessed(arg1 : JSVariable, arg2 : JSElement) : boolean;
	static arrayContentsAreAssigned(arg1 : JSVariable, arg2 : JSElement) : boolean;
	static mayEvaluateToVariable(arg1 : JSExpression, arg2 : JSVariable) : boolean;
	static getUsedVariables(arg1 : PsiElement) : Set<JSVariable>;
}


declare module VariableAccessUtil {
	class UsedVariableVisitor {
		variables : Set<JSVariable>;
		constructor();
		getVariables() : Set<JSVariable>;
	}


	interface UsedVariableVisitor extends JSRecursiveElementVisitor {}	class ArrayContentsAssignedVisitor {
		assigned : boolean;
		constructor(arg1 : JSVariable);
		checkExpression(arg1 : IElementType, arg2 : JSExpression) : void;
		isAssigned() : boolean;
	}


	interface ArrayContentsAssignedVisitor extends JSRecursiveElementVisitor {}	class ArrayContentsAccessedVisitor {
		accessed : boolean;
		constructor(arg1 : JSVariable);
		checkQualifier(arg1 : JSExpression) : void;
		isAccessed() : boolean;
	}


	interface ArrayContentsAccessedVisitor extends JSRecursiveElementVisitor {}	class VariableUsedInArrayLiteralVisitor {
		used : boolean;
		constructor(arg1 : JSVariable);
		isUsed() : boolean;
	}


	interface VariableUsedInArrayLiteralVisitor extends JSRecursiveElementVisitor {}	class VariableUsedAsObjectPropertyVisitor {
		usedAsObjectProperty : boolean;
		constructor(arg1 : JSVariable);
		isUsedAsObjectProperty() : boolean;
	}


	interface VariableUsedAsObjectPropertyVisitor extends JSRecursiveElementVisitor {}	class VariablePassedAsArgumentVisitor {
		passed : boolean;
		constructor(arg1 : JSVariable);
		isPassed() : boolean;
	}


	interface VariablePassedAsArgumentVisitor extends JSRecursiveElementVisitor {}	class VariableReturnedVisitor {
		returned : boolean;
		constructor(arg1 : JSVariable);
		isReturned() : boolean;
	}


	interface VariableReturnedVisitor extends JSRecursiveElementVisitor {}	class VariableAssignedFromVisitor {
		assignedFrom : boolean;
		constructor(arg1 : JSVariable);
		isAssignedFrom() : boolean;
	}


	interface VariableAssignedFromVisitor extends JSRecursiveElementVisitor {}	class VariableAssignedVisitor {
		assigned : boolean;
		constructor(arg1 : JSVariable, arg2 : JSElement, arg3 : Set<JSVariable>);
		isAssigned() : boolean;
	}


	interface VariableAssignedVisitor extends JSRecursiveElementVisitor {}}

export = VariableAccessUtil
