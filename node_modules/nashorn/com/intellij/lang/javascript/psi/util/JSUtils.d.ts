import Object = require('nashorn/java/lang/Object');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import JSLanguageDialect = require('nashorn/com/intellij/lang/javascript/JSLanguageDialect');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSParameter = require('nashorn/com/intellij/lang/javascript/psi/JSParameter');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import List = require('nashorn/java/util/List');

declare class JSUtils extends Object {
	constructor();
	static getDialect(arg1 : PsiFile) : JSLanguageDialect;
	static isJavaScriptFile(arg1 : PsiFile) : boolean;
	static isNeedParenthesis(arg1 : JSExpression, arg2 : JSExpression) : boolean;
	static getExpressionPrecedence(arg1 : JSExpression) : number;
	static findStatementAnchor(arg1 : PsiElement, arg2 : PsiFile) : PsiElement;
	static getImplicitAccessType(arg1 : PsiElement) : JSAttributeList.AccessType;
	static packageExists(arg1 : string, arg2 : GlobalSearchScope) : boolean;
	static isValidClassName(arg1 : string, arg2 : boolean) : boolean;
	static isMember(arg1 : PsiElement) : boolean;
	static getMemberContainingClass(arg1 : PsiElement) : JSClass;
	static getMethodNameIfInsideCall(arg1 : PsiElement) : JSReferenceExpression;
	static findParameterIndex(arg1 : JSFunction, arg2 : JSParameter) : number;
	static findRefExprThatStartCallChaining(arg1 : JSReferenceExpression) : JSReferenceExpression;
	static findInitializedElement(arg1 : JSExpression) : JSNamedElement;
	static unparenthesize(arg1 : JSExpression) : JSExpression;
	static findExpressionOccurrences(arg1 : JSElement, arg2 : Pair<JSExpression, TextRange>, arg3 : boolean) : JSExpression[];
	static addExpressionOccurrences(arg1 : JSExpression, arg2 : List<JSExpression>, arg3 : PsiElement, arg4 : boolean) : void;
	static replaceUnicodeEscapeSequences(arg1 : string) : string;
}

export = JSUtils
