import Object = require('nashorn/java/lang/Object');
import JSStatement = require('nashorn/com/intellij/lang/javascript/psi/JSStatement');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSDoWhileStatement = require('nashorn/com/intellij/lang/javascript/psi/JSDoWhileStatement');
import JSWhileStatement = require('nashorn/com/intellij/lang/javascript/psi/JSWhileStatement');
import JSForStatement = require('nashorn/com/intellij/lang/javascript/psi/JSForStatement');
import JSForInStatement = require('nashorn/com/intellij/lang/javascript/psi/JSForInStatement');
import JSSwitchStatement = require('nashorn/com/intellij/lang/javascript/psi/JSSwitchStatement');
import JSTryStatement = require('nashorn/com/intellij/lang/javascript/psi/JSTryStatement');
import JSIfStatement = require('nashorn/com/intellij/lang/javascript/psi/JSIfStatement');
import JSLabeledStatement = require('nashorn/com/intellij/lang/javascript/psi/JSLabeledStatement');
import JSBlockStatement = require('nashorn/com/intellij/lang/javascript/psi/JSBlockStatement');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSConditionalExpression = require('nashorn/com/intellij/lang/javascript/psi/JSConditionalExpression');
import JSBinaryExpression = require('nashorn/com/intellij/lang/javascript/psi/JSBinaryExpression');
import JSArrayLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSArrayLiteralExpression');
import JSPrefixExpression = require('nashorn/com/intellij/lang/javascript/psi/JSPrefixExpression');
import JSPostfixExpression = require('nashorn/com/intellij/lang/javascript/psi/JSPostfixExpression');
import JSParenthesizedExpression = require('nashorn/com/intellij/lang/javascript/psi/JSParenthesizedExpression');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSAssignmentExpression = require('nashorn/com/intellij/lang/javascript/psi/JSAssignmentExpression');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');

declare class RecursionUtils extends Object {
	static statementMayReturnBeforeRecursing(arg1 : JSStatement, arg2 : JSFunction) : boolean;
	static doWhileStatementMayReturnBeforeRecursing(arg1 : JSDoWhileStatement, arg2 : JSFunction) : boolean;
	static whileStatementMayReturnBeforeRecursing(arg1 : JSWhileStatement, arg2 : JSFunction) : boolean;
	static forStatementMayReturnBeforeRecursing(arg1 : JSForStatement, arg2 : JSFunction) : boolean;
	static foreachStatementMayReturnBeforeRecursing(arg1 : JSForInStatement, arg2 : JSFunction) : boolean;
	static switchStatementMayReturnBeforeRecursing(arg1 : JSSwitchStatement, arg2 : JSFunction) : boolean;
	static tryStatementMayReturnBeforeRecursing(arg1 : JSTryStatement, arg2 : JSFunction) : boolean;
	static ifStatementMayReturnBeforeRecursing(arg1 : JSIfStatement, arg2 : JSFunction) : boolean;
	static labeledStatementMayReturnBeforeRecursing(arg1 : JSLabeledStatement, arg2 : JSFunction) : boolean;
	static codeBlockMayReturnBeforeRecursing(arg1 : JSBlockStatement, arg2 : JSFunction, arg3 : boolean) : boolean;
	static functionMayRecurse(arg1 : JSFunction) : boolean;
	static expressionDefinitelyRecurses(arg1 : JSExpression, arg2 : JSFunction) : boolean;
	static conditionalExpressionDefinitelyRecurses(arg1 : JSConditionalExpression, arg2 : JSFunction) : boolean;
	static binaryExpressionDefinitelyRecurses(arg1 : JSBinaryExpression, arg2 : JSFunction) : boolean;
	static arrayInitializerExpressionDefinitelyRecurses(arg1 : JSArrayLiteralExpression, arg2 : JSFunction) : boolean;
	static prefixExpressionDefinitelyRecurses(arg1 : JSPrefixExpression, arg2 : JSFunction) : boolean;
	static postfixExpressionDefinitelyRecurses(arg1 : JSPostfixExpression, arg2 : JSFunction) : boolean;
	static parenthesizedExpressionDefinitelyRecurses(arg1 : JSParenthesizedExpression, arg2 : JSFunction) : boolean;
	static referenceExpressionDefinitelyRecurses(arg1 : JSReferenceExpression, arg2 : JSFunction) : boolean;
	static assignmentExpressionDefinitelyRecurses(arg1 : JSAssignmentExpression, arg2 : JSFunction) : boolean;
	static functionCallExpressionDefinitelyRecurses(arg1 : JSCallExpression, arg2 : JSFunction) : boolean;
	static processRefExpr(arg1 : JSReferenceExpression, arg2 : JSFunction) : boolean;
	static statementDefinitelyRecurses(arg1 : JSStatement, arg2 : JSFunction) : boolean;
	static switchStatementDefinitelyRecurses(arg1 : JSSwitchStatement, arg2 : JSFunction) : boolean;
	static tryStatementDefinitelyRecurses(arg1 : JSTryStatement, arg2 : JSFunction) : boolean;
	static codeBlockDefinitelyRecurses(arg1 : JSBlockStatement, arg2 : JSFunction) : boolean;
	static ifStatementDefinitelyRecurses(arg1 : JSIfStatement, arg2 : JSFunction) : boolean;
	static forStatementDefinitelyRecurses(arg1 : JSForStatement, arg2 : JSFunction) : boolean;
	static foreachStatementDefinitelyRecurses(arg1 : JSForInStatement, arg2 : JSFunction) : boolean;
	static whileStatementDefinitelyRecurses(arg1 : JSWhileStatement, arg2 : JSFunction) : boolean;
	static doWhileStatementDefinitelyRecurses(arg1 : JSDoWhileStatement, arg2 : JSFunction) : boolean;
	static labeledStatementDefinitelyRecurses(arg1 : JSLabeledStatement, arg2 : JSFunction) : boolean;
	static functionDefinitelyRecurses(arg1 : JSFunction) : boolean;
}

export = RecursionUtils
