import Object = require('nashorn/java/lang/Object');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import CompositeElement = require('nashorn/com/intellij/psi/impl/source/tree/CompositeElement');
import TreeElement = require('nashorn/com/intellij/psi/impl/source/tree/TreeElement');
import Language = require('nashorn/com/intellij/lang/Language');
import Set = require('nashorn/java/util/Set');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import ModificationTracker = require('nashorn/com/intellij/openapi/util/ModificationTracker');

declare class JSTreeUtil extends Object {
	constructor();
	static definedInScopeAndUp(arg1 : string, arg2 : ASTNode) : boolean;
	static definedOrAssignedInScopeAndUp(arg1 : string, arg2 : boolean, arg3 : ASTNode) : boolean;
	static definedOrAssignedInScope(arg1 : string, arg2 : boolean, arg3 : CompositeElement) : boolean;
	static definedOrAssignedInCodeBlock(arg1 : string, arg2 : boolean, arg3 : CompositeElement) : boolean;
	static defineOrAssignedInCodeBlockDirect(arg1 : string, arg2 : boolean, arg3 : CompositeElement) : boolean;
	static getDefinedName(arg1 : TreeElement) : string;
	static getAssignedName(arg1 : TreeElement) : string;
	static getLanguage(arg1 : TreeElement) : Language;
	static findReturnedReferences(arg1 : CompositeElement) : Set<string>;
	static calculateReturnedReferences(arg1 : TreeElement) : Set<string>;
	static getName(arg1 : ASTNode) : string;
	static withinWithStatement(arg1 : ASTNode) : boolean;
	static getProject(arg1 : ASTNode) : Project;
}


declare module JSTreeUtil {
	class CompositeElementModificationTracker {
		modificationCount : number;
		constructor(arg1 : CompositeElement);
	}


	interface CompositeElementModificationTracker extends ModificationTracker {}}

export = JSTreeUtil
