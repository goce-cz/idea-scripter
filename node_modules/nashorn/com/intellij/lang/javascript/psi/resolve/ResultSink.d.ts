import Object = require('nashorn/java/lang/Object');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import List = require('nashorn/java/util/List');
import ResolveState = require('nashorn/com/intellij/psi/ResolveState');
import SinkResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/SinkResolveProcessor');
import ResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResolveProcessor');

declare class ResultSink extends Object {
	name : string;
	result : PsiElement;
	results : List<PsiElement>;
	resultCount : number;
	nestingLevel : number;
	constructor(arg1 : PsiElement);
	getName() : string;
	getResult() : PsiElement;
	getResults() : List<PsiElement>;
	getResultCount() : number;
	addResult(arg1 : PsiElement, arg2 : ResolveState, arg3 : SinkResolveProcessor) : boolean;
	accepts(arg1 : PsiElement) : boolean;
	startingParent(arg1 : PsiElement, arg2 : ResolveProcessor) : void;
	addPossibleCandidateResult(arg1 : PsiElement, arg2 : string) : void;
	skipTopLevelItems() : boolean;
	needTopLevelClassName(arg1 : string) : boolean;
	setNestingLevel(arg1 : number) : void;
	getNestingLevel() : number;
	startGlobalDeclarations() : void;
}

export = ResultSink
