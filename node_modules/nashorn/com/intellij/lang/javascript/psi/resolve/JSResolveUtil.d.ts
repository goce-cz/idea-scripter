import Object = require('nashorn/java/lang/Object');
import UserDataCache = require('nashorn/com/intellij/openapi/util/UserDataCache');
import CachedValue = require('nashorn/com/intellij/psi/util/CachedValue');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import Module = require('nashorn/com/intellij/openapi/module/Module');
import Void = require('nashorn/java/lang/Void');
import Key = require('nashorn/com/intellij/openapi/util/Key');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import XmlTag = require('nashorn/com/intellij/psi/xml/XmlTag');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSFile = require('nashorn/com/intellij/lang/javascript/psi/JSFile');
import XmlBackedJSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/XmlBackedJSClass');
import JSNamedElement = require('nashorn/com/intellij/lang/javascript/psi/JSNamedElement');
import SearchScope = require('nashorn/com/intellij/psi/search/SearchScope');
import JSStubElementImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSStubElementImpl');
import Collection = require('nashorn/java/util/Collection');
import JSPsiElementBase = require('nashorn/com/intellij/lang/javascript/psi/JSPsiElementBase');
import Query = require('nashorn/com/intellij/util/Query');
import Processor = require('nashorn/com/intellij/util/Processor');
import ResolveResult = require('nashorn/com/intellij/psi/ResolveResult');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import JSFunctionItem = require('nashorn/com/intellij/lang/javascript/psi/JSFunctionItem');
import JSParameterItem = require('nashorn/com/intellij/lang/javascript/psi/JSParameterItem');
import ResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResolveProcessor');
import ResolveState = require('nashorn/com/intellij/psi/ResolveState');
import PsiScopeProcessor = require('nashorn/com/intellij/psi/scope/PsiScopeProcessor');
import JSAttributeListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeListOwner');
import PsiNamedElement = require('nashorn/com/intellij/psi/PsiNamedElement');
import Map = require('nashorn/java/util/Map');
import JSArgumentList = require('nashorn/com/intellij/lang/javascript/psi/JSArgumentList');
import List = require('nashorn/java/util/List');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');
import XmlFile = require('nashorn/com/intellij/psi/xml/XmlFile');
import WalkUpResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/WalkUpResolveProcessor');
import PsiPolyVariantReference = require('nashorn/com/intellij/psi/PsiPolyVariantReference');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSImportedElementResolveResult = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSImportedElementResolveResult');
import JSSymbolNamespace = require('nashorn/com/intellij/lang/javascript/psi/JSSymbolNamespace');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSIncludeDirective = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSIncludeDirective');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import JSSourceElement = require('nashorn/com/intellij/lang/javascript/psi/JSSourceElement');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import Set = require('nashorn/java/util/Set');
import JSTypeEvaluateManager = require('nashorn/com/intellij/lang/javascript/index/JSTypeEvaluateManager');
import ProjectAndLibrariesScope = require('nashorn/com/intellij/psi/search/ProjectAndLibrariesScope');
import SinkResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/SinkResolveProcessor');
import ResultSink = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResultSink');
import JSAttribute = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttribute');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import TIntObjectHashMap = require('nashorn/gnu/trove/TIntObjectHashMap');
import JSRecursiveWalkingElementVisitor = require('nashorn/com/intellij/lang/javascript/psi/JSRecursiveWalkingElementVisitor');
import PsiLanguageInjectionHost = require('nashorn/com/intellij/psi/PsiLanguageInjectionHost');
import Enum = require('nashorn/java/lang/Enum');

declare class JSResolveUtil extends Object {
	static PROTOTYPE_FIELD_NAME : string;
	static USE_STRICT : string;
	static QUOTED_USE_STRICT : string;
	static SINGLE_QUOTED_USE_STRICT : string;
	static OPTIONS_NAME : string;
	static VECTOR$OBJECT_TYPE_NAME : string;
	static EXCLUDE_CLASS_METADATA : string;
	static FLASH_UTILS_PROXY : string;
	static BINDABLE_ATTR_NAME : string;
	static ourScopeCache : UserDataCache<CachedValue<GlobalSearchScope>, Module, Void>;
	static contextKey : Key<PsiElement>;
	static processInjectedFileForTag(arg1 : XmlTag, arg2 : JSResolveUtil.JSInjectedFilesVisitor) : void;
	static findPackageForMxml(arg1 : PsiElement) : string;
	static getExpectedPackageNameFromFile(arg1 : VirtualFile, arg2 : Project) : string;
	static processInterfaceMethods(arg1 : JSClass, arg2 : JSResolveUtil.CollectMethodsToImplementProcessor) : void;
	static getExpressionType(arg1 : JSExpression, arg2 : PsiFile) : string;
	static getShortenedType(arg1 : string, arg2 : PsiElement) : string;
	static getQualifiedExpressionType(arg1 : JSExpression, arg2 : PsiFile) : string;
	static getExpressionJSType(arg1 : JSExpression) : JSType;
	static getShortTypeName(arg1 : string, arg2 : boolean) : string;
	static getClassReferenceForXmlFromContext(arg1 : PsiElement) : PsiElement;
	static getXmlBackedClass(arg1 : JSFile) : XmlBackedJSClass;
	static findUseScope<T extends JSNamedElement>(arg1 : T) : SearchScope;
	static getDefaultScope(arg1 : JSStubElementImpl, arg2 : PsiFile) : SearchScope;
	static getNonJSonScope(arg1 : Project) : SearchScope;
	static isFileLocalSymbol(arg1 : PsiElement) : boolean;
	static findType(arg1 : string, arg2 : PsiElement, arg3 : boolean) : PsiElement;
	static isAssignableType(arg1 : string, arg2 : string, arg3 : PsiElement) : boolean;
	static isAssignableJSType(arg1 : JSType, arg2 : JSType) : boolean;
	static isEcmaScript5(arg1 : PsiElement) : boolean;
	static sortFiles(arg1 : Collection<VirtualFile>) : Collection<VirtualFile>;
	static calculateStaticFromContext(arg1 : PsiElement) : boolean;
	static shortReferenceIsAmbiguousOrUnequal(arg1 : string, arg2 : PsiElement, arg3 : string, arg4 : boolean) : boolean;
	static doFindOverridenFunctionStatic(arg1 : JSPsiElementBase) : Query<JSPsiElementBase>;
	static isFromPredefinedFile(arg1 : PsiFile) : boolean;
	static isFromPredefinedFile(arg1 : VirtualFile) : boolean;
	static isAssignableTypeStatus(arg1 : string, arg2 : string, arg3 : PsiElement) : JSResolveUtil.AssignableTypeStatus;
	static checkTypedef(arg1 : PsiElement, arg2 : string, arg3 : string) : JSResolveUtil.AssignableTypeStatus;
	static hasMultipleOccurenceDelimiters(arg1 : string) : boolean;
	static getResolveScope(arg1 : PsiElement) : GlobalSearchScope;
	static getContext(arg1 : PsiElement) : PsiElement;
	static isObjectClass(arg1 : JSClass) : boolean;
	static processHierarchy(arg1 : string, arg2 : PsiFile, arg3 : Processor<JSClass>, arg4 : boolean) : boolean;
	static processHierarchy(arg1 : JSClass, arg2 : Processor<JSClass>, arg3 : boolean) : boolean;
	static stableResolveOrder(arg1 : ResolveResult[]) : void;
	static filterResolveResultsByLibraryScope(arg1 : PsiElement, arg2 : ResolveResult[]) : ResolveResult[];
	static findFileLocalElement(arg1 : string, arg2 : PsiElement) : JSNamedElement;
	static getQualifiedTypeName(arg1 : string) : string;
	static weShouldSkipResolveBecauseOfImplicitClass(arg1 : PsiElement) : boolean;
	static isAccessibleFromPackage(arg1 : PsiElement, arg2 : string) : boolean;
	static isSelfReference(arg1 : PsiElement) : boolean;
	static extractGenericSignature(arg1 : string) : JSResolveUtil.GenericSignature;
	static getTopReferenceParent(arg1 : PsiElement) : PsiElement;
	static getTopReferenceExpression(arg1 : PsiElement) : PsiElement;
	static isSelfReference(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	static isSameReference(arg1 : JSReferenceExpression, arg2 : PsiElement) : boolean;
	static findScopeElement(arg1 : PsiElement) : PsiElement;
	static findParent(arg1 : PsiElement) : PsiElement;
	static findParentClass(arg1 : JSFile) : PsiElement;
	static getClassOfContext(arg1 : PsiElement) : JSClass;
	static getClassOfContext(arg1 : PsiElement, arg2 : boolean) : JSClass;
	static findClassOfQualifier(arg1 : JSExpression, arg2 : PsiFile) : JSClass;
	static getElementThatShouldBeQualified(arg1 : PsiElement, arg2 : string) : Pair<PsiElement, string>;
	static isArtificialClassUsedForReferenceList(arg1 : JSClass) : boolean;
	static findElementsByName(arg1 : string, arg2 : Project, arg3 : GlobalSearchScope) : Collection<JSQualifiedNamedElement>;
	static findElementsByName(arg1 : string, arg2 : Project, arg3 : GlobalSearchScope, arg4 : boolean) : Collection<JSQualifiedNamedElement>;
	static isActionScript(arg1 : PsiFile) : boolean;
	static getTypeFromSetAccessor(arg1 : JSFunctionItem) : JSType;
	static getParameterFromSetAccessor(arg1 : JSFunctionItem) : JSParameterItem;
	static processTopPackages(arg1 : ResolveProcessor, arg2 : ResolveState, arg3 : Project, arg4 : GlobalSearchScope) : boolean;
	static shouldProcessTopLevelGlobalContext(arg1 : PsiElement, arg2 : PsiScopeProcessor) : boolean;
	static shouldProcessImports(arg1 : PsiElement, arg2 : PsiScopeProcessor) : boolean;
	static processTopLevelClasses(arg1 : ResolveProcessor, arg2 : ResolveState, arg3 : Project, arg4 : GlobalSearchScope, arg5 : JSResolveUtil.GlobalSymbolsAcceptanceState, arg6 : boolean) : boolean;
	static hasExcludeClassMetadata(arg1 : JSAttributeListOwner) : boolean;
	static acceptableSymbol(arg1 : JSQualifiedNamedElement, arg2 : JSResolveUtil.GlobalSymbolsAcceptanceState, arg3 : boolean, arg4 : PsiElement) : boolean;
	static walkOverStructure(arg1 : PsiElement, arg2 : Processor<PsiNamedElement>) : boolean;
	static calculateOpenNses(arg1 : PsiElement) : Map<string, string>;
	static processGlobalThings(arg1 : ResolveProcessor, arg2 : ResolveState, arg3 : PsiElement, arg4 : PsiElement) : boolean;
	static isInsideArtificialAttrList(arg1 : JSReferenceExpression) : boolean;
	static processParametersForUsedArgument(arg1 : JSExpression, arg2 : JSArgumentList, arg3 : Processor<JSParameterItem>) : void;
	static findParameterForUsedArgument(arg1 : JSExpression, arg2 : JSArgumentList) : JSParameterItem;
	static isAccessibleSymbol(arg1 : JSQualifiedNamedElement, arg2 : PsiElement) : boolean;
	static isFileLocalSymbolAccessible(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	static isAccessibleFromCurrentPackage(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	static isAccessibleFromCurrentPackage(arg1 : PsiElement, arg2 : string, arg3 : PsiElement) : boolean;
	static isQualifiedAS2Symbol(arg1 : PsiElement) : boolean;
	static getPackageNameFromPlace(arg1 : PsiElement) : string;
	static getPackageName(arg1 : PsiElement) : string;
	static treeWalkUp(arg1 : PsiScopeProcessor, arg2 : PsiElement, arg3 : PsiElement, arg4 : PsiElement) : void;
	static treeWalkUp(arg1 : PsiScopeProcessor, arg2 : PsiElement, arg3 : PsiElement, arg4 : PsiElement, arg5 : PsiElement) : void;
	static processImplicitVars(arg1 : PsiScopeProcessor, arg2 : PsiFile, arg3 : JSResolveUtil.ImplicitVariableProvider, arg4 : Key<CachedValue<List<JSVariable>>>) : boolean;
	static processAllGlobalsInXmlFile(arg1 : PsiScopeProcessor, arg2 : XmlFile, arg3 : PsiElement) : boolean;
	static tryProcessXmlFileImplicitElements(arg1 : PsiElement, arg2 : WalkUpResolveProcessor) : void;
	static tryProcessAllElementsInInjectedContext(arg1 : PsiFile, arg2 : Processor<JSPsiElementBase>) : void;
	static getChildren(arg1 : PsiElement) : PsiElement[];
	static processFunctionDeclarations(arg1 : PsiScopeProcessor, arg2 : PsiElement) : PsiElement;
	static isReferenceTo(arg1 : PsiPolyVariantReference, arg2 : string, arg3 : PsiElement) : boolean;
	static fieldIsImplicitAccessorMethod(arg1 : JSFunction, arg2 : JSVariable) : boolean;
	static isPublicEntityReferenceToJSFile(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	static getRealRefExprQualifier(arg1 : JSReferenceExpression) : JSExpression;
	static getRealRefExprQualifierFromResult(arg1 : JSReferenceExpression, arg2 : JSImportedElementResolveResult) : JSExpression;
	static findPackageStatementQualifier(arg1 : PsiElement) : string;
	static isExprInStrictTypeContext(arg1 : JSReferenceExpression) : boolean;
	static isExprInTypeContext(arg1 : JSReferenceExpression) : boolean;
	static isExprInJSTypeContext(arg1 : JSReferenceExpression) : boolean;
	static findPredefinedFile(arg1 : string) : VirtualFile;
	static findPredefinedOrLibraryFile(arg1 : Project, arg2 : string) : VirtualFile;
	static getJavaScriptSymbolsResolveScope(arg1 : Project) : GlobalSearchScope;
	static getJavaScriptSymbolsResolveScope(arg1 : Project, arg2 : VirtualFile) : GlobalSearchScope;
	static buildNamespaceForQualifier(arg1 : JSExpression) : JSSymbolNamespace;
	static iterateType(arg1 : JSPsiElementBase, arg2 : PsiElement, arg3 : string, arg4 : JSResolveUtil.OverrideHandler) : boolean;
	static getNamespaceValue(arg1 : JSAttributeList) : string;
	static processOverrides(arg1 : JSClass, arg2 : JSResolveUtil.OverrideHandler, arg3 : string, arg4 : string, arg5 : PsiElement) : boolean;
	static isRealOverride(arg1 : JSFunction, arg2 : string, arg3 : PsiElement) : boolean;
	static getQNameToStartHierarchySearch(arg1 : JSPsiElementBase) : string;
	static isInPlaceWhereTypeCanBeDuringCompletion(arg1 : PsiElement) : boolean;
	static isPlaceWhereNsCanBe(arg1 : PsiElement) : boolean;
	static getTypeFromTagNameInMxml(arg1 : PsiElement) : string;
	static getClassFromTagNameInMxml(arg1 : PsiElement) : JSClass;
	static processMetaAttributesForClass(arg1 : PsiElement, arg2 : JSResolveUtil.MetaDataProcessor) : boolean;
	static processMetaAttributesForClass(arg1 : PsiElement, arg2 : JSResolveUtil.MetaDataProcessor, arg3 : boolean) : boolean;
	static doProcessMetaAttributesForClass(arg1 : PsiElement, arg2 : JSResolveUtil.MetaDataProcessor, arg3 : PsiElement, arg4 : boolean, arg5 : boolean) : boolean;
	static processAttributeList(arg1 : JSResolveUtil.MetaDataProcessor, arg2 : PsiElement, arg3 : JSAttributeList, arg4 : boolean, arg5 : boolean) : boolean;
	static processIncludeDirective(arg1 : JSResolveUtil.MetaDataProcessor, arg2 : PsiElement, arg3 : JSIncludeDirective, arg4 : boolean) : boolean;
	static unwrapProxy(arg1 : PsiElement) : PsiElement;
	static resolve<T extends PsiPolyVariantReference>(arg1 : PsiFile, arg2 : T, arg3 : JSResolveUtil.Resolver<T>) : ResolveResult[];
	static clearResolveCaches(arg1 : PsiFile) : void;
	static processDeclarationsInScope(arg1 : JSElement, arg2 : PsiScopeProcessor, arg3 : ResolveState, arg4 : PsiElement, arg5 : PsiElement) : boolean;
	static dispatchResolve(arg1 : PsiScopeProcessor, arg2 : ResolveState, arg3 : PsiElement, arg4 : boolean, arg5 : Object) : boolean;
	static findNamedElementsInScope(arg1 : string, arg2 : JSElement) : Collection<JSElement>;
	static getLocalVariableRef(arg1 : JSFunction, arg2 : JSReferenceExpression) : PsiElement;
	static getLocalVariableRef(arg1 : JSFunction, arg2 : string) : PsiElement;
	static getSourceElements(arg1 : PsiElement) : JSSourceElement[];
	static getStubbedChildren(arg1 : PsiElement) : PsiElement[];
	static getStubbedChildren(arg1 : PsiElement, arg2 : TokenSet) : PsiElement[];
	static getChildrenFromTokenSet(arg1 : ASTNode, arg2 : TokenSet) : PsiElement[];
	static findReferencedModuleIfRequireCall(arg1 : JSCallExpression) : PsiElement;
	static getModuleRefIfRequireCall(arg1 : string, arg2 : JSReferenceExpression, arg3 : JSCallExpression) : PsiReference;
	static getExportedElement(arg1 : JSFile) : PsiElement;
	static isEventListenerCall(arg1 : JSCallExpression) : boolean;
}


declare module JSResolveUtil {
	class MyNamespaceProcessor {
		constructor(arg1 : Set<JSPsiElementBase>, arg2 : boolean);
		doProcess(arg1 : PsiElement) : boolean;
		processDescendantsOf(arg1 : string, arg2 : PsiElement) : void;
	}


	interface MyNamespaceProcessor extends JSTypeEvaluateManager.NamespaceProcessor {}	class NonJsonScope {
		searchOutsideRootModel : boolean;
		constructor(arg1 : Project);
	}


	interface NonJsonScope extends ProjectAndLibrariesScope {}	class VisitAllTypesProcessor {
		constructor(arg1 : Processor<JSClass>, arg2 : boolean);
	}


	interface VisitAllTypesProcessor extends ResolveProcessor {}	class CollectMethodsToImplementProcessor {
		constructor(arg1 : string, arg2 : PsiElement, arg3 : boolean);
		process(arg1 : SinkResolveProcessor<any>) : boolean;
		createResultSink() : ResultSink;
	}


	interface CollectMethodsToImplementProcessor extends ResolveProcessor {}	class MetaDataProcessor extends Object {
		process(arg1 : JSAttribute) : boolean;
		handleOtherElement(arg1 : PsiElement, arg2 : PsiElement, arg3 : Ref<PsiElement>) : boolean;
	}
	class OverrideHandler extends Object {
		process(arg1 : SinkResolveProcessor<any>, arg2 : PsiElement, arg3 : string) : boolean;
	}
	class RelevantDefsUserDataCache {
		constructor();
	}


	interface RelevantDefsUserDataCache extends UserDataCache<CachedValue<TIntObjectHashMap<Object>>, JSElement, Object> {}

	module RelevantDefsUserDataCache {
		class MyJSElementVisitor {
			constructor(arg1 : JSElement, arg2 : TIntObjectHashMap<Object>);
			startVisiting(arg1 : JSElement) : void;
			processUseDirectiveInAttrList(arg1 : JSAttributeListOwner) : void;
			addRelevantDef(arg1 : JSElement) : void;
			addNamedElement(arg1 : JSElement, arg2 : number) : void;
		}


		interface MyJSElementVisitor extends JSRecursiveWalkingElementVisitor {}	}
	class Resolver<T extends PsiPolyVariantReference> extends Object {
		doResolve() : ResolveResult[];
	}
	class AllowFileLocalSymbols extends Object {
	}
	class ImplicitVariableProvider {
		constructor();
		doComputeVars(arg1 : List<JSVariable>, arg2 : XmlFile) : void;
	}


	interface ImplicitVariableProvider extends UserDataCache<CachedValue<List<JSVariable>>, XmlFile, Object> {}	class JSInjectedFilesVisitor {
		constructor();
		process(arg1 : JSFile) : void;
	}


	interface JSInjectedFilesVisitor extends PsiLanguageInjectionHost.InjectedPsiVisitor, XmlBackedJSClass.InjectedFileVisitor {}	class StructureResolveProcessor {
		constructor(arg1 : string);
	}


	interface StructureResolveProcessor extends ResolveProcessor, Processor<PsiNamedElement> {}

	module StructureResolveProcessor {
		class StructureProcessingOptions {
			constructor();
		}


		interface StructureProcessingOptions extends ResolveProcessor.ProcessingOptions {}	}
	class GlobalSymbolsAcceptanceState {
		static ACCEPT_ONLY_CLASSES : JSResolveUtil.GlobalSymbolsAcceptanceState;
		static ACCEPT_NO_CLASSES : JSResolveUtil.GlobalSymbolsAcceptanceState;
		static ACCEPT_NAMESPACE_DECLARATIONS : JSResolveUtil.GlobalSymbolsAcceptanceState;
		static WHATEVER : JSResolveUtil.GlobalSymbolsAcceptanceState;
	}


	interface GlobalSymbolsAcceptanceState extends Enum<JSResolveUtil.GlobalSymbolsAcceptanceState> {}	class GenericSignature extends Object {
		genericType : string;
		elementType : string;
		static EMPTY : JSResolveUtil.GenericSignature;
		constructor(arg1 : string, arg2 : string);
		static build(arg1 : string, arg2 : JSResolveUtil.GenericSignature) : string;
	}
	class AssignableTypeStatus {
		static OK : JSResolveUtil.AssignableTypeStatus;
		static LANG_IMPLICIT_COERCION : JSResolveUtil.AssignableTypeStatus;
		static COMPILE_TIME_FAIL : JSResolveUtil.AssignableTypeStatus;
	}


	interface AssignableTypeStatus extends Enum<JSResolveUtil.AssignableTypeStatus> {}}

export = JSResolveUtil
