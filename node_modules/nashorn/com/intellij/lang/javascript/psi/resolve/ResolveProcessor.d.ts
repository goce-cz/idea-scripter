import Key = require('nashorn/com/intellij/openapi/util/Key');
import JSImportStatement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSImportStatement');
import PsiScopeProcessor = require('nashorn/com/intellij/psi/scope/PsiScopeProcessor');
import AccessibilityProcessingHandler = require('nashorn/com/intellij/lang/javascript/psi/resolve/AccessibilityProcessingHandler');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import UserDataHolderBase = require('nashorn/com/intellij/openapi/util/UserDataHolderBase');
import Object = require('nashorn/java/lang/Object');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import JSPackageStatementImpl = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/impl/JSPackageStatementImpl');

declare class ResolveProcessor {
	static PROCESSING_OPTIONS : Key<ResolveProcessor.ProcessingOptions>;
	static IMPORT_KEY : Key<JSImportStatement>;
	static AS3_NAMESPACE : string;
	static SCOPE_CHANGE : PsiScopeProcessor.Event;
	static DEFAULT_RESOLVE : ResolveProcessor.ProcessingOptions;
	name : string;
	toProcessHierarchy : boolean;
	toSkipClassDeclarationOnce : boolean;
	typeContext : boolean;
	toProcessMembers : boolean;
	localResolve : boolean;
	processingFromIndices : boolean;
	qualifiedNameToImport : string;
	encounteredDynamicClasses : boolean;
	forceImportsForPlace : boolean;
	encounteredXmlLiteral : boolean;
	processingOptions : ResolveProcessor.ProcessingOptions;
	accessibilityProcessingHandler : AccessibilityProcessingHandler;
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : PsiElement);
	static isSpecialCallResolveCaseEcmaScript(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	static completeConstructorName(arg1 : PsiElement) : boolean;
	prefixResolved() : void;
	static getName(arg1 : PsiElement) : string;
	startingParent(arg1 : PsiElement) : void;
	getName() : string;
	isToProcessHierarchy() : boolean;
	setToProcessHierarchy(arg1 : boolean) : void;
	isToSkipClassDeclarationOnce() : boolean;
	setToSkipClassDeclarationsOnce(arg1 : boolean) : void;
	setTypeContext(arg1 : boolean) : void;
	isTypeContext() : boolean;
	processingEncounteredAnyTypeAccess() : boolean;
	isToProcessMembers() : boolean;
	setToProcessMembers(arg1 : boolean) : void;
	checkVisited(arg1 : JSClass) : boolean;
	isLocalResolve() : boolean;
	isProcessingFromIndices() : boolean;
	setSkipImplicitDeclarations(arg1 : boolean) : void;
	setLocalResolve(arg1 : boolean) : void;
	specificallyAskingToResolveQualifiedNames() : boolean;
	getQualifiedNameToImport() : string;
	lookingForUseNamespaces() : boolean;
	isEncounteredDynamicClasses() : boolean;
	static setSkipPackageLocalCheck(arg1 : PsiElement, arg2 : boolean) : void;
	static toSkipPackageLocalCheck(arg1 : PsiElement) : boolean;
	setNeedsAllVariants() : void;
	needsAllVariants() : boolean;
	isForceImportsForPlace() : boolean;
	setForceImportsForPlace(arg1 : boolean) : void;
	setEncounteredXmlLiteral(arg1 : boolean) : void;
	isEncounteredXmlLiteral() : boolean;
	needPackages() : boolean;
	getProcessingOptions() : ResolveProcessor.ProcessingOptions;
	setProcessingOptions(arg1 : ResolveProcessor.ProcessingOptions) : void;
	getAccessibilityProcessingHandler() : AccessibilityProcessingHandler;
	setProcessStatics(arg1 : boolean) : void;
	configureClassScope(arg1 : JSClass) : void;
	setAllowUnqualifiedStaticsFromInstance(arg1 : boolean) : void;
	setTypeName(arg1 : string) : void;
	skipTopLevelItems() : boolean;
	needTopLevelClassName(arg1 : string) : boolean;
}


declare interface ResolveProcessor extends UserDataHolderBase, PsiScopeProcessor {}

declare module ResolveProcessor {
	class ProcessingOptions extends Object {
		filter : Condition<PsiElement>;
		constructor();
		toProcessFunctionBodyDeclarations(arg1 : PsiElement, arg2 : JSFunction) : boolean;
		toProcessFunctionArguments() : boolean;
		toProcessPackageImports(arg1 : PsiElement, arg2 : JSPackageStatementImpl) : boolean;
		toProcessPackageContent(arg1 : PsiElement, arg2 : JSPackageStatementImpl) : boolean;
		needPackages() : boolean;
		getFilter() : Condition<PsiElement>;
	}
}

export = ResolveProcessor
