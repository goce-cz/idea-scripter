import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSImportStatement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSImportStatement');
import ResolveResult = require('nashorn/com/intellij/psi/ResolveResult');

declare class JSResolveResult {
	static UNDEFINED_RESOLVE_PROBLEM : string;
	static QUALIFIED_NAME_IS_NOT_IMPORTED : string;
	static ELEMENT_IS_NOT_ACCESSIBLE : string;
	static PROTECTED_MEMBER_IS_NOT_ACCESSIBLE : string;
	static MEMBER_FROM_UNOPENED_NAMESPACE : string;
	static PROPERTY_IS_READ_ONLY : string;
	static PROPERTY_IS_WRITE_ONLY : string;
	static PRIVATE_MEMBER_IS_NOT_ACCESSIBLE : string;
	static JS_PRIVATE_MEMBER_IS_NOT_ACCESSIBLE : string;
	static JS_PROTECTED_MEMBER_IS_NOT_ACCESSIBLE : string;
	static JS_NEED_TO_BE_EXPORTED : string;
	static INSUFFICIENT_VISIBILITY_PROBLEM_KEYS : string[];
	static STATIC_MEMBER_INACCESSIBLE : string;
	static INSTANCE_MEMBER_INACCESSIBLE : string;
	static ARGUMENT_TYPES_MISMATCH : string;
	element : PsiElement;
	validResult : boolean;
	importUsed : JSImportStatement;
	resolveProblemKey : string;
	constructor(arg1 : PsiElement);
	constructor(arg1 : PsiElement, arg2 : boolean);
	constructor(arg1 : PsiElement, arg2 : JSImportStatement, arg3 : boolean);
	constructor(arg1 : PsiElement, arg2 : JSImportStatement, arg3 : string);
	setValid(arg1 : boolean) : void;
	getImportUsed() : JSImportStatement;
	getResolveProblemKey() : string;
}


declare interface JSResolveResult extends ResolveResult {}
export = JSResolveResult
