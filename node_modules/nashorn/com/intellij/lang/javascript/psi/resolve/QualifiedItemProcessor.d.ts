import ResultSink = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResultSink');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import BaseJSSymbolProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/BaseJSSymbolProcessor');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import SinkResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/SinkResolveProcessor');
import Enum = require('nashorn/java/lang/Enum');

declare class QualifiedItemProcessor<T extends ResultSink> {
	resolved : QualifiedItemProcessor.TypeResolveState;
	target : PsiElement;
	constructor(arg1 : T, arg2 : PsiFile);
	addTypeFromClass(arg1 : JSType, arg2 : BaseJSSymbolProcessor.EvaluateContext, arg3 : string, arg4 : PsiElement, arg5 : boolean, arg6 : JSQualifiedNamedElement) : void;
	needProcessTypeMembers(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	static isDummyResolve(arg1 : PsiElement, arg2 : PsiElement) : boolean;
}


declare interface QualifiedItemProcessor<T extends ResultSink> extends SinkResolveProcessor<T>, BaseJSSymbolProcessor.TypeProcessor {}

declare module QualifiedItemProcessor {
	class TypeResolveState {
		static Unknown : QualifiedItemProcessor.TypeResolveState;
		static Resolved : QualifiedItemProcessor.TypeResolveState;
		static Undefined : QualifiedItemProcessor.TypeResolveState;
		static PrefixUnknown : QualifiedItemProcessor.TypeResolveState;
	}


	interface TypeResolveState extends Enum<QualifiedItemProcessor.TypeResolveState> {}}

export = QualifiedItemProcessor
