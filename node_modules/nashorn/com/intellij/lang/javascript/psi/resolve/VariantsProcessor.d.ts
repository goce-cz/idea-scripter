import List = require('nashorn/java/util/List');
import LookupElement = require('nashorn/com/intellij/codeInsight/lookup/LookupElement');
import Collection = require('nashorn/java/util/Collection');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import BaseJSSymbolProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/BaseJSSymbolProcessor');
import Object = require('nashorn/java/lang/Object');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSContext = require('nashorn/com/intellij/lang/javascript/psi/types/JSContext');
import JSPsiElementBase = require('nashorn/com/intellij/lang/javascript/psi/JSPsiElementBase');
import Ref = require('nashorn/com/intellij/openapi/util/Ref');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import JSCompletionProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSCompletionProcessor');
import JSAssignmentExpression = require('nashorn/com/intellij/lang/javascript/psi/JSAssignmentExpression');

declare class VariantsProcessor {
	resultsAsElements : List<LookupElement>;
	currentResultsAsIs : Collection<LookupElement>;
	requiredName : string;
	constructor(arg1 : string[], arg2 : PsiFile, arg3 : PsiElement, arg4 : BaseJSSymbolProcessor.MatchMode);
	constructor(arg1 : string[], arg2 : PsiFile, arg3 : PsiElement, arg4 : BaseJSSymbolProcessor.MatchMode, arg5 : boolean);
	addNameIds(arg1 : string[]) : void;
	updateCanUseOnlyCompleteMatchesFromNs(arg1 : string) : void;
	updateCanUseOnlyCompleteMatchesFromString(arg1 : string, arg2 : Object, arg3 : PsiElement) : void;
	static isObjectSourceThatDoesNotGiveExactKnowledgeAboutFunctionType(arg1 : Object) : boolean;
	updateCanUseOnlyCompleteMatches(arg1 : JSClass) : void;
	populateCompletionList(arg1 : Collection<LookupElement>, arg2 : boolean) : void;
	addReferencesUsedInCurrentScope(arg1 : PsiElement) : void;
	addSupers(arg1 : string, arg2 : BaseJSSymbolProcessor.EvaluateContext, arg3 : JSContext) : void;
	addNeighbourReferences() : void;
	buildSeveralDefinitionsElements() : void;
	addResult(arg1 : string, arg2 : LookupElement) : void;
	static wasCompleteMatch(arg1 : number) : boolean;
	getResults(arg1 : string) : List<LookupElement>;
	static addVariant(arg1 : string, arg2 : List<LookupElement>, arg3 : LookupElement) : void;
	getResultsAsElements() : List<LookupElement>;
	createElementsFromRecordTypes() : List<LookupElement>;
	getCurrentResultsAsIs() : Collection<LookupElement>;
	addLookupValue(arg1 : PsiElement, arg2 : string, arg3 : BaseJSSymbolProcessor.MatchType, arg4 : boolean, arg5 : boolean) : LookupElement;
	addLookupValue(arg1 : PsiElement, arg2 : string, arg3 : boolean, arg4 : boolean) : LookupElement;
	addLookupValue(arg1 : PsiElement, arg2 : string, arg3 : number) : LookupElement;
	addCompleteMatch(arg1 : Object, arg2 : string, arg3 : BaseJSSymbolProcessor.MatchType) : void;
	addCompleteMatch(arg1 : Object, arg2 : string, arg3 : BaseJSSymbolProcessor.MatchType, arg4 : number) : void;
	addCompleteMatch(arg1 : Object, arg2 : string, arg3 : number) : void;
	updateElement(arg1 : Object) : PsiElement;
	addPartialMatch(arg1 : PsiElement, arg2 : string) : void;
	isAcceptableQualifiedItem(arg1 : JSPsiElementBase, arg2 : Ref<number>) : BaseJSSymbolProcessor.MatchType;
	isAcceptableNS(arg1 : JSQualifiedName) : boolean;
}


declare interface VariantsProcessor extends BaseJSSymbolProcessor, JSCompletionProcessor {}

declare module VariantsProcessor {
	class LookupPriority extends Object {
		static LOCAL_SCOPE_MAX_PRIORITY : number;
		static SMART_PROPRITY : number;
		static RELEVANT_NO_SMARTNESS_PRIORITY : number;
		static NO_RELEVANT_NO_SMARTNESS_PRIORITY : number;
		static RELEVANT_SMARTNESS_PRIORITY : number;
		static NO_RELEVANT_SMARTNESS_PRIORITY : number;
		static topLevelSymbolsFromOtherFilesValue : number;
		constructor();
		static getSameFileValue(arg1 : boolean, arg2 : number) : number;
		static getValue(arg1 : BaseJSSymbolProcessor.MatchType, arg2 : boolean, arg3 : boolean) : number;
		static getSameTypeValue(arg1 : boolean, arg2 : BaseJSSymbolProcessor.MatchType, arg3 : number) : number;
		static getSmartVariantPriority(arg1 : boolean) : number;
		static getTopLevelSymbolsFromOtherFilesValue() : number;
	}
	class CompletionTypeProcessor {
		target : PsiElement;
		allTypesResolved : boolean;
		isAssignmentChainOfNewExpression(arg1 : JSAssignmentExpression) : boolean;
		getAllTypesResolved() : boolean;
	}


	interface CompletionTypeProcessor extends BaseJSSymbolProcessor.TypeProcessor {}}

export = VariantsProcessor
