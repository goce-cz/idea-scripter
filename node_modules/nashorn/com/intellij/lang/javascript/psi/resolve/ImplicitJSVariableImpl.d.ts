import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import IStubElementType = require('nashorn/com/intellij/psi/stubs/IStubElementType');
import JSVariableStubBase = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSVariableStubBase');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSContext = require('nashorn/com/intellij/lang/javascript/psi/types/JSContext');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import LightElement = require('nashorn/com/intellij/psi/impl/light/LightElement');
import JSVariable = require('nashorn/com/intellij/lang/javascript/psi/JSVariable');

declare class ImplicitJSVariableImpl {
	attributeList : JSAttributeList;
	valid : boolean;
	parent : PsiElement;
	containingFile : PsiFile;
	physical : boolean;
	elementType : IStubElementType;
	stub : JSVariableStubBase;
	initializer : JSExpression;
	initializerOrStub : JSExpression;
	literalOrReferenceInitializerText : string;
	type : JSType;
	typeString : string;
	typeElement : PsiElement;
	local : boolean;
	deprecated : boolean;
	declarationScope : PsiElement;
	qualifiedName : string;
	name : string;
	nameIdentifier : PsiElement;
	jSContext : JSContext;
	namespace : JSQualifiedName;
	namespaceExplicitlyDeclared : boolean;
	accessType : JSAttributeList.AccessType;
	constructor(arg1 : string, arg2 : string, arg3 : PsiElement);
	constructor(arg1 : string, arg2 : string, arg3 : JSAttributeList.AccessType, arg4 : PsiElement);
	constructor(arg1 : string, arg2 : JSType, arg3 : PsiElement);
	getElementType() : IStubElementType;
	getStub() : JSVariableStubBase;
}


declare interface ImplicitJSVariableImpl extends LightElement, JSVariable {}
export = ImplicitJSVariableImpl
