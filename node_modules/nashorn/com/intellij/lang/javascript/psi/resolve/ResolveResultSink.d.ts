import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import List = require('nashorn/java/util/List');
import ResolveResult = require('nashorn/com/intellij/psi/ResolveResult');
import JSResolveResult = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSResolveResult');
import JSImportStatement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSImportStatement');
import SinkResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/SinkResolveProcessor');
import ResultSink = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResultSink');

declare class ResolveResultSink {
	name : string;
	result : PsiElement;
	completeResult : PsiElement;
	results : List<PsiElement>;
	resultCount : number;
	resultsAsResolveResults : ResolveResult[];
	completeResults : List<ResolveResult>;
	candidateResult : JSResolveResult;
	constructor(arg1 : PsiElement, arg2 : string);
	getCompleteResult() : PsiElement;
	checkQualifiedNameHasNecessaryImport(arg1 : PsiElement, arg2 : JSImportStatement, arg3 : number, arg4 : SinkResolveProcessor) : JSImportStatement;
	getResultsAsResolveResults() : ResolveResult[];
	getCompleteResults() : List<ResolveResult>;
	getCandidateResult() : JSResolveResult;
}


declare interface ResolveResultSink extends ResultSink {}
export = ResolveResultSink
