import JSReferenceExpressionImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSReferenceExpressionImpl');
import PsiFile = require('nashorn/com/intellij/psi/PsiFile');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import SinkResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/SinkResolveProcessor');
import ResolveResultSink = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResolveResultSink');
import ResolveResult = require('nashorn/com/intellij/psi/ResolveResult');
import WalkUpResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/WalkUpResolveProcessor');
import Map = require('nashorn/java/util/Map');
import JSResolveUtil = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSResolveUtil');

declare class JSReferenceExpressionResolver {
	constructor(arg1 : JSReferenceExpressionImpl, arg2 : PsiFile);
	static resolveIsStrict(arg1 : JSReferenceExpression) : boolean;
	resolveFromIndices(arg1 : SinkResolveProcessor<ResolveResultSink>) : ResolveResult[];
	static processAllSymbols(arg1 : WalkUpResolveProcessor) : void;
	getResultsFromProcessor(arg1 : WalkUpResolveProcessor) : ResolveResult[];
	adjustReferencedName(arg1 : string, arg2 : JSReferenceExpressionImpl) : string;
	prepareProcessor(arg1 : WalkUpResolveProcessor, arg2 : SinkResolveProcessor<ResolveResultSink>) : void;
	getResultsForDefinition() : ResolveResult[];
	dummyResult(arg1 : JSReferenceExpression) : ResolveResult[];
	static getCachedTopLevelResultsMap(arg1 : PsiFile) : Map<string, ResolveResult[]>;
}


declare interface JSReferenceExpressionResolver extends JSResolveUtil.Resolver<JSReferenceExpressionImpl> {}
export = JSReferenceExpressionResolver
