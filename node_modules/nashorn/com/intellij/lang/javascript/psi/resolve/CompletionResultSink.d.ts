import ProcessingContext = require('nashorn/com/intellij/util/ProcessingContext');
import List = require('nashorn/java/util/List');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Condition = require('nashorn/com/intellij/openapi/util/Condition');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import Function = require('nashorn/com/intellij/util/Function');
import LookupElement = require('nashorn/com/intellij/codeInsight/lookup/LookupElement');
import ResultSink = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResultSink');

declare class CompletionResultSink {
	name : string;
	smartCompletionInheritanceProcessingContext : ProcessingContext;
	resultsAsObjects : List;
	nestingLevel : number;
	constructor(arg1 : PsiElement);
	setSmartCompletionInheritanceProcessingContext(arg1 : ProcessingContext) : void;
	getSmartCompletionInheritanceProcessingContext() : ProcessingContext;
	static createFilter(arg1 : Condition<JSClass>) : Condition<PsiElement>;
	setPlaceFilter(arg1 : Condition<PsiElement>) : void;
	static typeCanBePresentInNew(arg1 : JSType) : boolean;
	flushMyThisClassVariantsEnd() : void;
	static buildSimpleCompletionFilter(arg1 : PsiElement) : Function<PsiElement, boolean>;
	getResultsAsObjects() : List;
	resultsToLookupElements(arg1 : List<PsiElement>) : List<LookupElement>;
	createLookupItem(arg1 : PsiElement, arg2 : string, arg3 : boolean, arg4 : number) : LookupElement;
}


declare interface CompletionResultSink extends ResultSink {}
export = CompletionResultSink
