import Object = require('nashorn/java/lang/Object');
import PsiScopedImportSet = require('nashorn/com/intellij/lang/javascript/flex/PsiScopedImportSet');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import JSImportedElementResolveResult = require('nashorn/com/intellij/lang/javascript/psi/resolve/JSImportedElementResolveResult');
import PsiScopeProcessor = require('nashorn/com/intellij/psi/scope/PsiScopeProcessor');
import PsiNamedElement = require('nashorn/com/intellij/psi/PsiNamedElement');
import Processor = require('nashorn/com/intellij/util/Processor');
import ScopedImportSet = require('nashorn/com/intellij/lang/javascript/flex/ScopedImportSet');
import Enum = require('nashorn/java/lang/Enum');

declare class JSImportHandlingUtil extends Object {
	static ourPsiScopedImportSet : PsiScopedImportSet;
	constructor();
	static resolveTypeName(arg1 : string, arg2 : PsiElement) : string;
	static resolveTypeNameUsingImports(arg1 : JSReferenceExpression) : JSImportedElementResolveResult;
	static tryResolveImports(arg1 : PsiScopeProcessor, arg2 : PsiNamedElement, arg3 : PsiElement) : boolean;
	static isAdequatePlaceForImport(arg1 : PsiNamedElement, arg2 : PsiElement, arg3 : PsiScopeProcessor) : boolean;
	static isAdequatePlaceForImportViaHelper(arg1 : PsiElement) : boolean;
	static evaluateImportStatus(arg1 : string, arg2 : PsiElement) : JSImportHandlingUtil.ImportStatus;
}


declare module JSImportHandlingUtil {
	class EvaluateImportStatusProcessor {
		constructor(arg1 : string);
	}


	interface EvaluateImportStatusProcessor extends Processor<PsiNamedElement>, ScopedImportSet.ImportProcessor<Object> {}	class ImportStatus {
		static ABSENT : JSImportHandlingUtil.ImportStatus;
		static UNIQUE : JSImportHandlingUtil.ImportStatus;
		static MULTIPLE : JSImportHandlingUtil.ImportStatus;
	}


	interface ImportStatus extends Enum<JSImportHandlingUtil.ImportStatus> {}}

export = JSImportHandlingUtil
