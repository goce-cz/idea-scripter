import Object = require('nashorn/java/lang/Object');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import JSPsiElementBase = require('nashorn/com/intellij/lang/javascript/psi/JSPsiElementBase');
import PairFunction = require('nashorn/com/intellij/util/PairFunction');
import List = require('nashorn/java/util/List');
import Set = require('nashorn/java/util/Set');
import JSFunction = require('nashorn/com/intellij/lang/javascript/psi/JSFunction');
import Processor = require('nashorn/com/intellij/util/Processor');
import Collection = require('nashorn/java/util/Collection');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSCallExpression = require('nashorn/com/intellij/lang/javascript/psi/JSCallExpression');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import Computable = require('nashorn/com/intellij/openapi/util/Computable');
import JSParameter = require('nashorn/com/intellij/lang/javascript/psi/JSParameter');
import JSRecursiveElementVisitor = require('nashorn/com/intellij/lang/javascript/psi/JSRecursiveElementVisitor');
import Enum = require('nashorn/java/lang/Enum');

declare class JSInheritanceUtil extends Object {
	static enforcedScope : GlobalSearchScope;
	constructor();
	static iterateOverriddenMembersUp<T extends JSPsiElementBase>(arg1 : JSPsiElementBase, arg2 : boolean, arg3 : PairFunction<List<T>, string, boolean>, arg4 : boolean) : boolean;
	static iterateOverriddenMembersUp<T extends JSPsiElementBase>(arg1 : JSPsiElementBase, arg2 : boolean, arg3 : PairFunction<List<T>, string, boolean>, arg4 : Set<string>, arg5 : boolean) : boolean;
	static iterateOverriddenMethodsUp(arg1 : JSFunction, arg2 : Processor<JSFunction>) : boolean;
	static findImplementedMethods(arg1 : JSFunction) : Collection<JSFunction>;
	static findNearestOverriddenMembers(arg1 : JSPsiElementBase, arg2 : boolean) : Collection<JSPsiElementBase>;
	static processNearestOverriddenMethods(arg1 : JSFunction, arg2 : Processor<JSFunction>) : boolean;
	static findSomeDeclaringClass(arg1 : JSFunction) : JSClass;
	static findDeclaringClasses(arg1 : JSFunction) : Collection<JSClass>;
	static findTopMethods(arg1 : JSFunction) : Collection<JSFunction>;
	static findTopOverriddenMethod(arg1 : JSFunction) : JSFunction;
	static findAllParentsForClass(arg1 : JSClass, arg2 : boolean) : Collection<JSClass>;
	static findAllParentsForClass(arg1 : JSClass, arg2 : Collection<JSClass>, arg3 : boolean) : void;
	static canBeSuperMethod(arg1 : JSFunction) : boolean;
	static canBeSuperMethod(arg1 : JSAttributeList) : boolean;
	static canHaveSuperMethod(arg1 : JSFunction) : boolean;
	static canHaveSuperMethod(arg1 : JSAttributeList) : boolean;
	static findNearestBaseClass(arg1 : JSClass, arg2 : boolean) : JSClass;
	static isMemberOfSubclass(arg1 : JSClass, arg2 : JSElement, arg3 : boolean) : boolean;
	static findDirectSubClasses(arg1 : JSClass, arg2 : boolean) : Collection<JSClass>;
	static isParentClass(arg1 : JSClass, arg2 : JSClass, arg3 : boolean) : boolean;
	static isParentClass(arg1 : JSClass, arg2 : JSClass, arg3 : boolean, arg4 : PsiElement) : boolean;
	static isParentClass(arg1 : JSClass, arg2 : JSClass, arg3 : boolean, arg4 : GlobalSearchScope) : boolean;
	static isParentClass(arg1 : JSClass, arg2 : JSClass) : boolean;
	static findMethodInClass(arg1 : JSFunction, arg2 : JSClass, arg3 : boolean) : JSFunction;
	static participatesInHierarchy(arg1 : JSFunction) : boolean;
	static processHierarchy(arg1 : JSFunction, arg2 : Processor<JSFunction>) : boolean;
	static iterateMethodsDown(arg1 : JSFunction, arg2 : Processor<JSFunction>) : boolean;
	static iterateMethodsDown(arg1 : JSFunction, arg2 : Processor<JSFunction>, arg3 : boolean) : boolean;
	static hasSuperMethods(arg1 : JSFunction) : boolean;
	static collectFunctionsToOverride(arg1 : JSClass) : Collection<JSFunction>;
	static findSuperConstructorCalls(arg1 : JSFunction) : Collection<JSCallExpression>;
	static findSuperConstructorCalls(arg1 : JSClass) : Collection<JSCallExpression>;
	static processSuperCallsIn(arg1 : JSClass, arg2 : Processor<JSCallExpression>) : boolean;
	static findMember(arg1 : string, arg2 : JSClass, arg3 : JSInheritanceUtil.SearchedMemberType, arg4 : JSFunction.FunctionKind, arg5 : boolean) : JSQualifiedNamedElement;
	static findMember(arg1 : string, arg2 : JSClass, arg3 : JSInheritanceUtil.SearchedMemberType, arg4 : JSFunction.FunctionKind, arg5 : boolean, arg6 : Set<JSClass>) : JSQualifiedNamedElement;
	static checkClassHasParentOfAnotherOne(arg1 : JSClass, arg2 : JSClass, arg3 : Set<JSClass>) : boolean;
	static withEnforcedScope<T>(arg1 : Computable<T>, arg2 : GlobalSearchScope) : T;
	static getEnforcedScope() : GlobalSearchScope;
	static findMatchedSuperParameter(arg1 : JSParameter, arg2 : JSFunction) : JSParameter;
	static iterateAllMethodsInHierarchy(arg1 : JSFunction, arg2 : Processor<JSFunction>) : boolean;
}


declare module JSInheritanceUtil {
	class CacheByEnforcedResolveScope<T> extends Object {
		constructor();
		compute() : T;
		computeForScope(arg1 : GlobalSearchScope) : T;
	}


	module CacheByEnforcedResolveScope {
		class NoEnforcedScopeMarker {
			searchInLibraries : boolean;
		}


		interface NoEnforcedScopeMarker extends GlobalSearchScope {}	}
	class SuperCallSearcher {
	}


	interface SuperCallSearcher extends JSRecursiveElementVisitor {}	class SearchedMemberType {
		static Fields : JSInheritanceUtil.SearchedMemberType;
		static Methods : JSInheritanceUtil.SearchedMemberType;
		static FieldsAndMethods : JSInheritanceUtil.SearchedMemberType;
	}


	interface SearchedMemberType extends Enum<JSInheritanceUtil.SearchedMemberType> {}}

export = JSInheritanceUtil
