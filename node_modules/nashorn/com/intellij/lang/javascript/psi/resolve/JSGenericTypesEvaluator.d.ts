import Object = require('nashorn/java/lang/Object');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import List = require('nashorn/java/util/List');
import Map = require('nashorn/java/util/Map');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');

declare class JSGenericTypesEvaluator extends Object {
	static instance : JSGenericTypesEvaluator;
	static getInstance() : JSGenericTypesEvaluator;
	evaluateGenerics(arg1 : JSType, arg2 : JSExpression, arg3 : PsiElement) : JSType;
	static inferGenericArgumentsFromCall(arg1 : List<JSType>, arg2 : JSExpression[]) : Map<string, JSType>;
	evaluateGenericsFromQualifier(arg1 : JSType, arg2 : JSExpression) : JSType;
	static findTypeArgumentsForClassInHierarchy(arg1 : JSType, arg2 : JSQualifiedName, arg3 : PsiElement) : Map<string, JSType>;
	static getTypeArgumentsMap(arg1 : JSType, arg2 : GlobalSearchScope) : Map<string, JSType>;
}

export = JSGenericTypesEvaluator
