import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSParameterItem = require('nashorn/com/intellij/lang/javascript/psi/JSParameterItem');
import DataInput = require('nashorn/java/io/DataInput');
import JSImplicitElementImpl = require('nashorn/com/intellij/lang/javascript/psi/stubs/impl/JSImplicitElementImpl');
import JSFunctionItem = require('nashorn/com/intellij/lang/javascript/psi/JSFunctionItem');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import List = require('nashorn/java/util/List');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import JSParameterTypeDecorator = require('nashorn/com/intellij/lang/javascript/psi/JSParameterTypeDecorator');
import DataOutput = require('nashorn/java/io/DataOutput');

declare class JSImplicitFunctionImpl {
	returnType : JSType;
	parameters : JSParameterItem[];
	getProperty : boolean;
	setProperty : boolean;
	referencesArguments : boolean;
	typeString : string;
	constructor(arg1 : JSImplicitFunctionImpl.Builder);
	static deserializeParameters(arg1 : DataInput, arg2 : JSImplicitFunctionImpl.Builder) : void;
}


declare interface JSImplicitFunctionImpl extends JSImplicitElementImpl, JSFunctionItem {}

declare module JSImplicitFunctionImpl {
	class Builder {
		constructor(arg1 : string, arg2 : PsiElement);
		setReturnType(arg1 : string) : JSImplicitFunctionImpl.Builder;
		setParameters(arg1 : List<Pair<string, JSParameterTypeDecorator>>) : JSImplicitFunctionImpl.Builder;
	}


	interface Builder extends JSImplicitElementImpl.Builder {}	class JSImplicitParameterImpl {
		type : JSType;
		typeIncludingOverridden : JSType;
		optional : boolean;
		rest : boolean;
		typeDecorator : JSParameterTypeDecorator;
		name : string;
		constructor(arg1 : string, arg2 : JSParameterTypeDecorator);
		serialize(arg1 : DataOutput) : void;
		static deserialize(arg1 : DataInput) : JSImplicitFunctionImpl.JSImplicitParameterImpl;
	}


	interface JSImplicitParameterImpl extends JSParameterItem {}}

export = JSImplicitFunctionImpl
