import DataOutput = require('nashorn/java/io/DataOutput');
import JSPsiElementBase = require('nashorn/com/intellij/lang/javascript/psi/JSPsiElementBase');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import ItemPresentation = require('nashorn/com/intellij/navigation/ItemPresentation');
import Enum = require('nashorn/java/lang/Enum');

declare class JSImplicitElement {
	name : string;
	qualifiedName : string;
	type : JSImplicitElement.Type;
	typeString : string;
	getType() : JSImplicitElement.Type;
	getTypeString() : string;
	hasMinorImportance() : boolean;
	serialize(arg1 : DataOutput) : void;
	isConst() : boolean;
}


declare interface JSImplicitElement extends JSPsiElementBase, JSElement, ItemPresentation {}

declare module JSImplicitElement {
	class Property {
		static GetFunction : JSImplicitElement.Property;
		static SetFunction : JSImplicitElement.Property;
		static Constant : JSImplicitElement.Property;
		static MinorImportance : JSImplicitElement.Property;
	}


	interface Property extends Enum<JSImplicitElement.Property> {}	class Type {
		static Variable : JSImplicitElement.Type;
		static Function : JSImplicitElement.Type;
		static Property : JSImplicitElement.Type;
		static Namespace : JSImplicitElement.Type;
		static Class : JSImplicitElement.Type;
		static Interface : JSImplicitElement.Type;
		static Tag : JSImplicitElement.Type;
		providesNamespace() : boolean;
	}


	interface Type extends Enum<JSImplicitElement.Type> {}}

export = JSImplicitElement
