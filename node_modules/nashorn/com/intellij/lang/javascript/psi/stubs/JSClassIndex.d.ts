import StubIndexKey = require('nashorn/com/intellij/psi/stubs/StubIndexKey');
import JSElement = require('nashorn/com/intellij/lang/javascript/psi/JSElement');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import Processor = require('nashorn/com/intellij/util/Processor');
import JSPsiElementBase = require('nashorn/com/intellij/lang/javascript/psi/JSPsiElementBase');
import Collection = require('nashorn/java/util/Collection');
import StringStubIndexExtension = require('nashorn/com/intellij/psi/stubs/StringStubIndexExtension');

declare class JSClassIndex {
	static KEY : StubIndexKey<string, JSElement>;
	static INTERFACE_MARK : string;
	key : StubIndexKey<string, JSElement>;
	version : number;
	constructor();
	static isInterface(arg1 : string, arg2 : PsiElement) : boolean;
	static processElements(arg1 : string, arg2 : Project, arg3 : GlobalSearchScope, arg4 : Processor<JSPsiElementBase>) : boolean;
	static processElements(arg1 : string, arg2 : Project, arg3 : GlobalSearchScope, arg4 : Processor<JSPsiElementBase>, arg5 : boolean) : boolean;
	static getElements(arg1 : string, arg2 : Project, arg3 : GlobalSearchScope) : Collection<JSPsiElementBase>;
	static getNameToIndex(arg1 : string, arg2 : boolean) : string;
}


declare interface JSClassIndex extends StringStubIndexExtension<JSElement> {}
export = JSClassIndex
