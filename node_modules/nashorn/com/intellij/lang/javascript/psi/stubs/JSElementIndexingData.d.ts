import Object = require('nashorn/java/lang/Object');
import Collection = require('nashorn/java/util/Collection');
import JSImplicitElement = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSImplicitElement');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import JSObjectLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSObjectLiteralExpression');

declare class JSElementIndexingData extends Object {
	implicitElements : Collection<JSImplicitElement>;
	typedefs : Collection<Pair<string, string>>;
	baseTypes : Collection<Pair<string, string>>;
	classExplicitly : boolean;
	interfaceExplicitly : boolean;
	empty : boolean;
	getImplicitElements() : Collection<JSImplicitElement>;
	addImplicitElement(arg1 : JSImplicitElement) : void;
	addImplicitElements(arg1 : Collection<JSImplicitElement>) : void;
	addAccessorsFromObjectLiteral(arg1 : JSObjectLiteralExpression) : void;
	getTypedefs() : Collection<Pair<string, string>>;
	addTypedef(arg1 : string, arg2 : string) : void;
	getBaseTypes() : Collection<Pair<string, string>>;
	addBaseType(arg1 : string, arg2 : string) : void;
	isClassExplicitly() : boolean;
	setIsClassExplicitly() : void;
	isInterfaceExplicitly() : boolean;
	setIsInterfaceExplicitly() : void;
	isEmpty() : boolean;
}

export = JSElementIndexingData
