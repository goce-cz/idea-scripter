import Collection = require('nashorn/java/util/Collection');
import JSImplicitElement = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSImplicitElement');
import Pair = require('nashorn/com/intellij/openapi/util/Pair');
import StubInputStream = require('nashorn/com/intellij/psi/stubs/StubInputStream');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSElementIndexingData = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSElementIndexingData');
import StubOutputStream = require('nashorn/com/intellij/psi/stubs/StubOutputStream');
import JSNamedObjectStubBase = require('nashorn/com/intellij/lang/javascript/psi/stubs/impl/JSNamedObjectStubBase');
import IndexSink = require('nashorn/com/intellij/psi/stubs/IndexSink');

declare class JSElementIndexingDataImpl {
	implicitElements : Collection<JSImplicitElement>;
	typedefs : Collection<Pair<string, string>>;
	baseTypes : Collection<Pair<string, string>>;
	classExplicitly : boolean;
	interfaceExplicitly : boolean;
	empty : boolean;
	constructor();
	constructor(arg1 : Collection<JSImplicitElement>);
	static deserialize(arg1 : StubInputStream, arg2 : PsiElement) : JSElementIndexingData;
	static serialize(arg1 : JSElementIndexingData, arg2 : StubOutputStream) : void;
	static index(arg1 : JSElementIndexingData, arg2 : JSNamedObjectStubBase<any>, arg3 : IndexSink) : void;
	setImplicitElements(arg1 : Collection<JSImplicitElement>) : void;
}


declare interface JSElementIndexingDataImpl extends JSElementIndexingData {}
export = JSElementIndexingDataImpl
