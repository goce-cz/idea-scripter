import JSQualifiedStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/JSQualifiedStub');
import JSClass = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSClass');
import TypeScriptTypeParameterList = require('nashorn/com/intellij/lang/javascript/psi/ecma6/TypeScriptTypeParameterList');
import IStubElementType = require('nashorn/com/intellij/psi/stubs/IStubElementType');
import GlobalSearchScope = require('nashorn/com/intellij/psi/search/GlobalSearchScope');
import ResolveProcessor = require('nashorn/com/intellij/lang/javascript/psi/resolve/ResolveProcessor');
import ResolveState = require('nashorn/com/intellij/psi/ResolveState');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSClassBase = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/impl/JSClassBase');
import TypeScriptTypeParameterListOwner = require('nashorn/com/intellij/lang/javascript/psi/ecma6/TypeScriptTypeParameterListOwner');

declare class TypeScriptClassBase<StubT extends JSQualifiedStub> {
	superClasses : JSClass[];
	typeParameterList : TypeScriptTypeParameterList;
	constructor(arg1 : StubT, arg2 : IStubElementType<StubT, any>);
	hasCallSignature() : boolean;
	static processClassByQName(arg1 : string, arg2 : GlobalSearchScope, arg3 : ResolveProcessor, arg4 : ResolveState, arg5 : PsiElement, arg6 : PsiElement) : boolean;
	getMembers() : PsiElement[];
}


declare interface TypeScriptClassBase<StubT extends JSQualifiedStub> extends JSClassBase<StubT>, TypeScriptTypeParameterListOwner {}
export = TypeScriptClassBase
