import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import JSAttributeList = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSAttributeList');
import JSQualifiedName = require('nashorn/com/intellij/lang/javascript/psi/JSQualifiedName');
import JSContext = require('nashorn/com/intellij/lang/javascript/psi/types/JSContext');
import TypeScriptEntityName = require('nashorn/com/intellij/lang/typescript/psi/TypeScriptEntityName');
import TypeScriptExternalModuleReference = require('nashorn/com/intellij/lang/typescript/psi/TypeScriptExternalModuleReference');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import TypeScriptImportStatementStub = require('nashorn/com/intellij/lang/javascript/psi/stubs/TypeScriptImportStatementStub');
import JSStubbedStatementImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSStubbedStatementImpl');
import TypeScriptImportStatement = require('nashorn/com/intellij/lang/javascript/psi/ecma6/TypeScriptImportStatement');

declare class TypeScriptImportStatementImpl {
	nameIdentifier : PsiElement;
	name : string;
	navigationElement : PsiElement;
	textOffset : number;
	attributeList : JSAttributeList;
	qualifiedName : string;
	namespace : JSQualifiedName;
	namespaceExplicitlyDeclared : boolean;
	jSContext : JSContext;
	accessType : JSAttributeList.AccessType;
	deprecated : boolean;
	internalModuleReference : TypeScriptEntityName;
	externalModuleReference : TypeScriptExternalModuleReference;
	constructor(arg1 : ASTNode);
	constructor(arg1 : TypeScriptImportStatementStub);
}


declare interface TypeScriptImportStatementImpl extends JSStubbedStatementImpl<TypeScriptImportStatementStub>, TypeScriptImportStatement {}
export = TypeScriptImportStatementImpl
