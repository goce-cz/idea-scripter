import ArrayFactory = require('nashorn/com/intellij/util/ArrayFactory');
import JSExpression = require('nashorn/com/intellij/lang/javascript/psi/JSExpression');
import JSObjectLiteralExpression = require('nashorn/com/intellij/lang/javascript/psi/JSObjectLiteralExpression');
import JSType = require('nashorn/com/intellij/lang/javascript/psi/JSType');
import JSFunctionExpression = require('nashorn/com/intellij/lang/javascript/psi/JSFunctionExpression');
import JSQualifiedNamedElement = require('nashorn/com/intellij/lang/javascript/psi/ecmal4/JSQualifiedNamedElement');
import JSImplicitElementProvider = require('nashorn/com/intellij/lang/javascript/psi/JSImplicitElementProvider');

declare class JSProperty {
	static EMPTY_ARRAY : JSProperty[];
	static ARRAY_FACTORY : ArrayFactory<JSProperty>;
	value : JSExpression;
	initializerReference : string;
	objectLiteralExpressionInitializer : JSObjectLiteralExpression;
	type : JSType;
	getProperty : boolean;
	setProperty : boolean;
	getValue() : JSExpression;
	getInitializerReference() : string;
	tryGetFunctionExpressionInitializer() : JSFunctionExpression;
	getObjectLiteralExpressionInitializer() : JSObjectLiteralExpression;
	getType() : JSType;
	isGetProperty() : boolean;
	isSetProperty() : boolean;
}


declare interface JSProperty extends JSQualifiedNamedElement, JSImplicitElementProvider {}
export = JSProperty
