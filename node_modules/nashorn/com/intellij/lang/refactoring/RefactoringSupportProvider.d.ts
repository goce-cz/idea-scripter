import Object = require('nashorn/java/lang/Object');
import RefactoringActionHandler = require('nashorn/com/intellij/refactoring/RefactoringActionHandler');
import ChangeSignatureHandler = require('nashorn/com/intellij/refactoring/changeSignature/ChangeSignatureHandler');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');

declare class RefactoringSupportProvider extends Object {
	introduceVariableHandler : RefactoringActionHandler;
	extractMethodHandler : RefactoringActionHandler;
	introduceConstantHandler : RefactoringActionHandler;
	introduceFieldHandler : RefactoringActionHandler;
	introduceParameterHandler : RefactoringActionHandler;
	pullUpHandler : RefactoringActionHandler;
	pushDownHandler : RefactoringActionHandler;
	extractInterfaceHandler : RefactoringActionHandler;
	extractModuleHandler : RefactoringActionHandler;
	extractSuperClassHandler : RefactoringActionHandler;
	changeSignatureHandler : ChangeSignatureHandler;
	extractClassHandler : RefactoringActionHandler;
	constructor();
	isAvailable(arg1 : PsiElement) : boolean;
	isSafeDeleteAvailable(arg1 : PsiElement) : boolean;
	getIntroduceVariableHandler() : RefactoringActionHandler;
	getIntroduceVariableHandler(arg1 : PsiElement) : RefactoringActionHandler;
	getExtractMethodHandler() : RefactoringActionHandler;
	getIntroduceConstantHandler() : RefactoringActionHandler;
	getIntroduceFieldHandler() : RefactoringActionHandler;
	getIntroduceParameterHandler() : RefactoringActionHandler;
	getPullUpHandler() : RefactoringActionHandler;
	getPushDownHandler() : RefactoringActionHandler;
	getExtractInterfaceHandler() : RefactoringActionHandler;
	getExtractModuleHandler() : RefactoringActionHandler;
	getExtractSuperClassHandler() : RefactoringActionHandler;
	getChangeSignatureHandler() : ChangeSignatureHandler;
	isInplaceRenameAvailable(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	isInplaceIntroduceAvailable(arg1 : PsiElement, arg2 : PsiElement) : boolean;
	getExtractClassHandler() : RefactoringActionHandler;
	isMemberInplaceRenameAvailable(arg1 : PsiElement, arg2 : PsiElement) : boolean;
}

export = RefactoringSupportProvider
