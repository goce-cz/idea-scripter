import Object = require('nashorn/java/lang/Object');
import ExtensionPointName = require('nashorn/com/intellij/openapi/extensions/ExtensionPointName');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import Editor = require('nashorn/com/intellij/openapi/editor/Editor');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import MultiMap = require('nashorn/com/intellij/util/containers/MultiMap');
import UsageInfo = require('nashorn/com/intellij/usageView/UsageInfo');

declare class InlineHandler extends Object {
	static EP_NAME : ExtensionPointName<InlineHandler>;
	prepareInlineElement(arg1 : PsiElement, arg2 : Editor, arg3 : boolean) : InlineHandler.Settings;
	removeDefinition(arg1 : PsiElement, arg2 : InlineHandler.Settings) : void;
	createInliner(arg1 : PsiElement, arg2 : InlineHandler.Settings) : InlineHandler.Inliner;
}


declare module InlineHandler {
	class Inliner extends Object {
		getConflicts(arg1 : PsiReference, arg2 : PsiElement) : MultiMap<PsiElement, string>;
		inlineUsage(arg1 : UsageInfo, arg2 : PsiElement) : void;
	}
	class Settings extends Object {
		static CANNOT_INLINE_SETTINGS : InlineHandler.Settings;
		onlyOneReferenceToInline : boolean;
		isOnlyOneReferenceToInline() : boolean;
	}
}

export = InlineHandler
