import Project = require('nashorn/com/intellij/openapi/project/Project');
import CharSequence = require('nashorn/java/lang/CharSequence');
import IElementType = require('nashorn/com/intellij/psi/tree/IElementType');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import FlyweightCapableTreeStructure = require('nashorn/com/intellij/util/diff/FlyweightCapableTreeStructure');
import LighterASTNode = require('nashorn/com/intellij/lang/LighterASTNode');
import ITokenTypeRemapper = require('nashorn/com/intellij/lang/ITokenTypeRemapper');
import WhitespaceSkippedCallback = require('nashorn/com/intellij/lang/WhitespaceSkippedCallback');
import TokenSet = require('nashorn/com/intellij/psi/tree/TokenSet');
import UserDataHolder = require('nashorn/com/intellij/openapi/util/UserDataHolder');
import UserDataHolderUnprotected = require('nashorn/com/intellij/openapi/util/UserDataHolderUnprotected');
import Object = require('nashorn/java/lang/Object');
import WhitespacesAndCommentsBinder = require('nashorn/com/intellij/lang/WhitespacesAndCommentsBinder');

declare class PsiBuilder {
	project : Project;
	originalText : CharSequence;
	tokenType : IElementType;
	tokenText : string;
	currentOffset : number;
	treeBuilt : ASTNode;
	lightTree : FlyweightCapableTreeStructure<LighterASTNode>;
	latestDoneMarker : LighterASTNode;
	getProject() : Project;
	getOriginalText() : CharSequence;
	advanceLexer() : void;
	getTokenType() : IElementType;
	setTokenTypeRemapper(arg1 : ITokenTypeRemapper) : void;
	remapCurrentToken(arg1 : IElementType) : void;
	setWhitespaceSkippedCallback(arg1 : WhitespaceSkippedCallback) : void;
	lookAhead(arg1 : number) : IElementType;
	rawLookup(arg1 : number) : IElementType;
	rawTokenTypeStart(arg1 : number) : number;
	rawTokenIndex() : number;
	getTokenText() : string;
	getCurrentOffset() : number;
	mark() : PsiBuilder.Marker;
	error(arg1 : string) : void;
	eof() : boolean;
	getTreeBuilt() : ASTNode;
	getLightTree() : FlyweightCapableTreeStructure<LighterASTNode>;
	setDebugMode(arg1 : boolean) : void;
	enforceCommentTokens(arg1 : TokenSet) : void;
	getLatestDoneMarker() : LighterASTNode;
}


declare interface PsiBuilder extends UserDataHolder, UserDataHolderUnprotected {}

declare module PsiBuilder {
	class Marker extends Object {
		precede() : PsiBuilder.Marker;
		drop() : void;
		rollbackTo() : void;
		done(arg1 : IElementType) : void;
		collapse(arg1 : IElementType) : void;
		doneBefore(arg1 : IElementType, arg2 : PsiBuilder.Marker) : void;
		doneBefore(arg1 : IElementType, arg2 : PsiBuilder.Marker, arg3 : string) : void;
		error(arg1 : string) : void;
		errorBefore(arg1 : string, arg2 : PsiBuilder.Marker) : void;
		setCustomEdgeTokenBinders(arg1 : WhitespacesAndCommentsBinder, arg2 : WhitespacesAndCommentsBinder) : void;
	}
}

export = PsiBuilder
