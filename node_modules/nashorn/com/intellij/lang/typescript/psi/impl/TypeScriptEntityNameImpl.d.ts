import TypeScriptEntityName = require('nashorn/com/intellij/lang/typescript/psi/TypeScriptEntityName');
import PsiReference = require('nashorn/com/intellij/psi/PsiReference');
import PsiElement = require('nashorn/com/intellij/psi/PsiElement');
import TextRange = require('nashorn/com/intellij/openapi/util/TextRange');
import Object = require('nashorn/java/lang/Object');
import JSReferenceExpression = require('nashorn/com/intellij/lang/javascript/psi/JSReferenceExpression');
import ASTNode = require('nashorn/com/intellij/lang/ASTNode');
import JSElementImpl = require('nashorn/com/intellij/lang/javascript/psi/impl/JSElementImpl');
import BindablePsiReference = require('nashorn/com/intellij/refactoring/rename/BindablePsiReference');

declare class TypeScriptEntityNameImpl {
	qualifier : TypeScriptEntityName;
	reference : PsiReference;
	referenceName : string;
	referenceNameElement : PsiElement;
	element : PsiElement;
	rangeInElement : TextRange;
	canonicalText : string;
	variants : Object[];
	soft : boolean;
	referencedName : string;
	attributeReference : boolean;
	namespaceElement : JSReferenceExpression;
	constructor(arg1 : ASTNode);
}


declare interface TypeScriptEntityNameImpl extends JSElementImpl, TypeScriptEntityName, BindablePsiReference {}
export = TypeScriptEntityNameImpl
