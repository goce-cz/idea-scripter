import File = require('nashorn/java/io/File');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import FileType = require('nashorn/com/intellij/openapi/fileTypes/FileType');
import PersistentStateComponent = require('nashorn/com/intellij/openapi/components/PersistentStateComponent');
import Object = require('nashorn/java/lang/Object');
import Enum = require('nashorn/java/lang/Enum');

declare class TypeScriptCompilerSettings {
	static SERVICE_FILE_NAME : string;
	static DEFAULT_SCOPE : string;
	static TYPESCRIPT_COMPILER_EXCLUDE_GENERATED_FROM_INDEX : string;
	static COMPILER_DIRECTORY_NAME : string;
	state : TypeScriptCompilerSettings.CompilerSettings;
	compilerEnabled : boolean;
	typeScriptCompilerParams : string;
	typeScriptServiceDirectory : string;
	versionType : TypeScriptCompilerSettings.TypeScriptCompilerVersionType;
	nodeInterpreter : string;
	scopeName : string;
	generateSourceMap : boolean;
	typeScriptServiceDirectoryOrDefault : string;
	static typeScriptCompilerFolderFile : File;
	trackFileSystemChanges : boolean;
	doCompilerAnnotation : boolean;
	constructor();
	static getSettings(arg1 : Project) : TypeScriptCompilerSettings;
	isCompilerEnabled() : boolean;
	getTypeScriptCompilerParams() : string;
	setTypeScriptCompilerParams(arg1 : string) : void;
	setImmediateCompileEnabled(arg1 : boolean) : void;
	setTypeScriptServiceDirectory(arg1 : string) : void;
	getTypeScriptServiceDirectory() : string;
	getVersionType() : TypeScriptCompilerSettings.TypeScriptCompilerVersionType;
	setVersionType(arg1 : TypeScriptCompilerSettings.TypeScriptCompilerVersionType) : void;
	getNodeInterpreter() : string;
	setNodeInterpreter(arg1 : string) : void;
	getScopeName() : string;
	setScopeName(arg1 : string) : void;
	isGenerateSourceMap() : boolean;
	setGenerateSourceMap(arg1 : boolean) : void;
	getTypeScriptServiceDirectoryOrDefault() : string;
	static getTypeScriptCompilerFolderFile() : File;
	static excludeGeneratedFilesFromJSIndex() : boolean;
	isTrackFileSystemChanges() : boolean;
	isDoCompilerAnnotation() : boolean;
	setTrackFileSystemChanges(arg1 : boolean) : void;
	static getOSDependTypeScriptServicesFilePathByDirectory(arg1 : string) : string;
	static fileTypeForCompiler() : FileType;
}


declare interface TypeScriptCompilerSettings extends PersistentStateComponent<TypeScriptCompilerSettings.CompilerSettings> {}

declare module TypeScriptCompilerSettings {
	class CompilerSettings extends Object {
		isCompilerEnabled : boolean;
		typeScriptServiceDirectory : string;
		typeScriptCompilerParams : string;
		nodeInterpreterTextField : string;
		scopeName : string;
		generateSourceMap : boolean;
		trackFileSystemChanges : boolean;
		versionType : TypeScriptCompilerSettings.TypeScriptCompilerVersionType;
	}
	class TypeScriptCompilerVersionType {
		static EMBEDDED : TypeScriptCompilerSettings.TypeScriptCompilerVersionType;
		static SERVICE_DIRECTORY : TypeScriptCompilerSettings.TypeScriptCompilerVersionType;
		static GITHUB : TypeScriptCompilerSettings.TypeScriptCompilerVersionType;
		getTitle(arg1 : TypeScriptCompilerSettings) : string;
	}


	interface TypeScriptCompilerVersionType extends Enum<TypeScriptCompilerSettings.TypeScriptCompilerVersionType> {}}

export = TypeScriptCompilerSettings
