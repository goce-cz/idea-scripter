import Logger = require('nashorn/com/intellij/openapi/diagnostic/Logger');
import JSLanguageCompilerToolWindowManager = require('nashorn/com/intellij/lang/javascript/compiler/ui/JSLanguageCompilerToolWindowManager');
import JSLanguageExternalCompiler = require('nashorn/com/intellij/lang/javascript/compiler/JSLanguageExternalCompiler');
import Project = require('nashorn/com/intellij/openapi/project/Project');
import List = require('nashorn/java/util/List');
import VirtualFile = require('nashorn/com/intellij/openapi/vfs/VirtualFile');
import Disposable = require('nashorn/com/intellij/openapi/Disposable');

declare class TypeScriptCompilerService {
	static LOGGER : Logger;
	toolWindowManager : JSLanguageCompilerToolWindowManager;
	compiler : JSLanguageExternalCompiler;
	constructor(arg1 : Project);
	getToolWindowManager() : JSLanguageCompilerToolWindowManager;
	static getService(arg1 : Project) : TypeScriptCompilerService;
	getCompiler() : JSLanguageExternalCompiler;
	addFileToCompileQueue(arg1 : List<VirtualFile>) : void;
	static normalizeNameAndPath(arg1 : VirtualFile) : string;
	static normalizeNameAndPath(arg1 : string) : string;
	setCompiler(arg1 : JSLanguageExternalCompiler) : void;
	restartCompiler() : void;
	restartCompilerImpl(arg1 : boolean) : void;
	isCompilerEnabled() : boolean;
	initToolWindow() : void;
}


declare interface TypeScriptCompilerService extends Disposable {}
export = TypeScriptCompilerService
