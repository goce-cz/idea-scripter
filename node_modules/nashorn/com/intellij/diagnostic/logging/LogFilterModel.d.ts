import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import LogFilter = require('nashorn/com/intellij/diagnostic/logging/LogFilter');
import Pattern = require('nashorn/java/util/regex/Pattern');
import LogFilterListener = require('nashorn/com/intellij/diagnostic/logging/LogFilterListener');
import Key = require('nashorn/com/intellij/openapi/util/Key');

declare class LogFilterModel extends Object {
	customFilter : string;
	logFilters : List<LogFilter>;
	constructor();
	updateCustomFilter(arg1 : string) : void;
	getCustomFilter() : string;
	getCustomPattern() : Pattern;
	addFilterListener(arg1 : LogFilterListener) : void;
	removeFilterListener(arg1 : LogFilterListener) : void;
	isApplicable(arg1 : string) : boolean;
	getLogFilters() : List<LogFilter>;
	isFilterSelected(arg1 : LogFilter) : boolean;
	selectFilter(arg1 : LogFilter) : void;
	processLine(arg1 : string) : LogFilterModel.MyProcessingResult;
	processingStarted() : void;
}


declare module LogFilterModel {
	class MyProcessingResult extends Object {
		key : Key;
		applicable : boolean;
		messagePrefix : string;
		constructor(arg1 : Key, arg2 : boolean, arg3 : string);
		getKey() : Key;
		isApplicable() : boolean;
		getMessagePrefix() : string;
	}
}

export = LogFilterModel
