import Reader = require('nashorn/java/io/Reader');
import JsonToken = require('nashorn/com/google/gson/stream/JsonToken');
import IOException = require('nashorn/java/io/IOException');
import Closeable = require('nashorn/java/io/Closeable');

declare class JsonReader {
	lenient : boolean;
	path : string;
	constructor(arg1 : Reader);
	setLenient(arg1 : boolean) : void;
	isLenient() : boolean;
	beginArray() : void;
	endArray() : void;
	beginObject() : void;
	endObject() : void;
	hasNext() : boolean;
	peek() : JsonToken;
	doPeek() : number;
	peekKeyword() : number;
	peekNumber() : number;
	isLiteral(arg1 : string) : boolean;
	nextName() : string;
	nextString() : string;
	nextBoolean() : boolean;
	nextNull() : void;
	nextDouble() : number;
	nextLong() : number;
	nextQuotedValue(arg1 : string) : string;
	nextUnquotedValue() : string;
	skipQuotedValue(arg1 : string) : void;
	skipUnquotedValue() : void;
	nextInt() : number;
	skipValue() : void;
	push(arg1 : number) : void;
	fillBuffer(arg1 : number) : boolean;
	getLineNumber() : number;
	getColumnNumber() : number;
	nextNonWhitespace(arg1 : boolean) : number;
	checkLenient() : void;
	skipToEndOfLine() : void;
	skipTo(arg1 : string) : boolean;
	getPath() : string;
	readEscapeCharacter() : string;
	syntaxError(arg1 : string) : IOException;
	consumeNonExecutePrefix() : void;
}


declare interface JsonReader extends Closeable {}
export = JsonReader
