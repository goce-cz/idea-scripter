import Object = require('nashorn/java/lang/Object');
import Iterable = require('nashorn/java/lang/Iterable');
import Iterator = require('nashorn/java/util/Iterator');
import Collection = require('nashorn/java/util/Collection');
import Enum = require('nashorn/java/lang/Enum');
import EnumSet = require('nashorn/java/util/EnumSet');
import ImmutableCollection = require('nashorn/com/google/common/collect/ImmutableCollection');
import Set = require('nashorn/java/util/Set');
import Serializable = require('nashorn/java/io/Serializable');

declare class ImmutableSet<E> {
	static of<E>() : ImmutableSet<E>;
	static of<E>(arg1 : E) : ImmutableSet<E>;
	static of<E>(arg1 : E, arg2 : E) : ImmutableSet<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E) : ImmutableSet<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E) : ImmutableSet<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E) : ImmutableSet<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E, arg6 : E, arg7 : E[]) : ImmutableSet<E>;
	static construct<E>(arg1 : number, arg2 : Object[]) : ImmutableSet<E>;
	static chooseTableSize(arg1 : number) : number;
	static copyOf<E>(arg1 : E[]) : ImmutableSet<E>;
	static copyOf<E>(arg1 : Iterable<E>) : ImmutableSet<E>;
	static copyOf<E>(arg1 : Iterator<E>) : ImmutableSet<E>;
	static copyOf<E>(arg1 : Collection<E>) : ImmutableSet<E>;
	static copyOfEnumSet<E extends Enum<E>>(arg1 : EnumSet<E>) : ImmutableSet<E>;
	isHashCodeFast() : boolean;
	static builder<E>() : ImmutableSet.Builder<E>;
}


declare interface ImmutableSet<E> extends ImmutableCollection<E>, Set<E> {}

declare module ImmutableSet {
	class Builder<E> {
		constructor();
	}


	interface Builder<E> extends ImmutableCollection.ArrayBasedBuilder<E> {}	class SerializedForm {
		readResolve() : Object;
	}


	interface SerializedForm extends Serializable {}}

export = ImmutableSet
