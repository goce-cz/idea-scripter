import ImmutableList = require('nashorn/com/google/common/collect/ImmutableList');
import Object = require('nashorn/java/lang/Object');
import AbstractCollection = require('nashorn/java/util/AbstractCollection');
import Serializable = require('nashorn/java/io/Serializable');
import Iterable = require('nashorn/java/lang/Iterable');
import Iterator = require('nashorn/java/util/Iterator');

declare class ImmutableCollection<E> {
	asList() : ImmutableList<E>;
	createAsList() : ImmutableList<E>;
	isPartialView() : boolean;
	copyIntoArray(arg1 : Object[], arg2 : number) : number;
	writeReplace() : Object;
}


declare interface ImmutableCollection<E> extends AbstractCollection<E>, Serializable {}

declare module ImmutableCollection {
	class ArrayBasedBuilder<E> {
		ensureCapacity(arg1 : number) : void;
	}


	interface ArrayBasedBuilder<E> extends ImmutableCollection.Builder<E> {}	class Builder<E> extends Object {
		static expandedCapacity(arg1 : number, arg2 : number) : number;
		add(arg1 : E) : ImmutableCollection.Builder<E>;
		add(arg1 : E[]) : ImmutableCollection.Builder<E>;
		addAll(arg1 : Iterable<E>) : ImmutableCollection.Builder<E>;
		addAll(arg1 : Iterator<E>) : ImmutableCollection.Builder<E>;
		build() : ImmutableCollection<E>;
	}
}

export = ImmutableCollection
