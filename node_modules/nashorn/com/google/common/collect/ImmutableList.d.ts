import Iterable = require('nashorn/java/lang/Iterable');
import Collection = require('nashorn/java/util/Collection');
import Iterator = require('nashorn/java/util/Iterator');
import Object = require('nashorn/java/lang/Object');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import ImmutableCollection = require('nashorn/com/google/common/collect/ImmutableCollection');
import List = require('nashorn/java/util/List');
import RandomAccess = require('nashorn/java/util/RandomAccess');
import Serializable = require('nashorn/java/io/Serializable');

declare class ImmutableList<E> {
	static of<E>() : ImmutableList<E>;
	static of<E>(arg1 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E, arg6 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E, arg6 : E, arg7 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E, arg6 : E, arg7 : E, arg8 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E, arg6 : E, arg7 : E, arg8 : E, arg9 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E, arg6 : E, arg7 : E, arg8 : E, arg9 : E, arg10 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E, arg6 : E, arg7 : E, arg8 : E, arg9 : E, arg10 : E, arg11 : E) : ImmutableList<E>;
	static of<E>(arg1 : E, arg2 : E, arg3 : E, arg4 : E, arg5 : E, arg6 : E, arg7 : E, arg8 : E, arg9 : E, arg10 : E, arg11 : E, arg12 : E, arg13 : E[]) : ImmutableList<E>;
	static copyOf<E>(arg1 : Iterable<E>) : ImmutableList<E>;
	static copyOf<E>(arg1 : Collection<E>) : ImmutableList<E>;
	static copyOf<E>(arg1 : Iterator<E>) : ImmutableList<E>;
	static copyOf<E>(arg1 : E[]) : ImmutableList<E>;
	static construct<E>(arg1 : Object[]) : ImmutableList<E>;
	static asImmutableList<E>(arg1 : Object[]) : ImmutableList<E>;
	static asImmutableList<E>(arg1 : Object[], arg2 : number) : ImmutableList<E>;
	subListUnchecked(arg1 : number, arg2 : number) : ImmutableList<E>;
	reverse() : ImmutableList<E>;
	readObject(arg1 : ObjectInputStream) : void;
	static builder<E>() : ImmutableList.Builder<E>;
}


declare interface ImmutableList<E> extends ImmutableCollection<E>, List<E>, RandomAccess {}

declare module ImmutableList {
	class Builder<E> {
		constructor();
	}


	interface Builder<E> extends ImmutableCollection.ArrayBasedBuilder<E> {}	class SerializedForm {
		readResolve() : Object;
	}


	interface SerializedForm extends Serializable {}	class ReverseImmutableList<E> {
		reverseIndex(arg1 : number) : number;
		reversePosition(arg1 : number) : number;
	}


	interface ReverseImmutableList<E> extends ImmutableList<E> {}	class SubList {
	}


	interface SubList extends ImmutableList<E> {}}

export = ImmutableList
