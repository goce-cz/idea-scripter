import TestResult = require('nashorn/junit/framework/TestResult');
import Object = require('nashorn/java/lang/Object');
import Assert = require('nashorn/junit/framework/Assert');
import Test = require('nashorn/junit/framework/Test');

declare class TestCase {
	name : string;
	constructor();
	constructor(arg1 : string);
	createResult() : TestResult;
	run() : TestResult;
	runBare() : void;
	runTest() : void;
	static assertTrue(arg1 : string, arg2 : boolean) : void;
	static assertTrue(arg1 : boolean) : void;
	static assertFalse(arg1 : string, arg2 : boolean) : void;
	static assertFalse(arg1 : boolean) : void;
	static fail(arg1 : string) : void;
	static fail() : void;
	static assertEquals(arg1 : string, arg2 : Object, arg3 : Object) : void;
	static assertEquals(arg1 : Object, arg2 : Object) : void;
	static assertEquals(arg1 : string, arg2 : string, arg3 : string) : void;
	static assertEquals(arg1 : string, arg2 : string) : void;
	static assertEquals(arg1 : string, arg2 : number, arg3 : number, arg4 : number) : void;
	static assertEquals(arg1 : number, arg2 : number, arg3 : number) : void;
	static assertEquals(arg1 : string, arg2 : number, arg3 : number, arg4 : number) : void;
	static assertEquals(arg1 : number, arg2 : number, arg3 : number) : void;
	static assertEquals(arg1 : string, arg2 : number, arg3 : number) : void;
	static assertEquals(arg1 : number, arg2 : number) : void;
	static assertEquals(arg1 : string, arg2 : boolean, arg3 : boolean) : void;
	static assertEquals(arg1 : boolean, arg2 : boolean) : void;
	static assertEquals(arg1 : string, arg2 : number, arg3 : number) : void;
	static assertEquals(arg1 : number, arg2 : number) : void;
	static assertEquals(arg1 : string, arg2 : string, arg3 : string) : void;
	static assertEquals(arg1 : string, arg2 : string) : void;
	static assertEquals(arg1 : string, arg2 : number, arg3 : number) : void;
	static assertEquals(arg1 : number, arg2 : number) : void;
	static assertEquals(arg1 : string, arg2 : number, arg3 : number) : void;
	static assertEquals(arg1 : number, arg2 : number) : void;
	static assertNotNull(arg1 : Object) : void;
	static assertNotNull(arg1 : string, arg2 : Object) : void;
	static assertNull(arg1 : Object) : void;
	static assertNull(arg1 : string, arg2 : Object) : void;
	static assertSame(arg1 : string, arg2 : Object, arg3 : Object) : void;
	static assertSame(arg1 : Object, arg2 : Object) : void;
	static assertNotSame(arg1 : string, arg2 : Object, arg3 : Object) : void;
	static assertNotSame(arg1 : Object, arg2 : Object) : void;
	static failSame(arg1 : string) : void;
	static failNotSame(arg1 : string, arg2 : Object, arg3 : Object) : void;
	static failNotEquals(arg1 : string, arg2 : Object, arg3 : Object) : void;
	static format(arg1 : string, arg2 : Object, arg3 : Object) : string;
	setUp() : void;
	tearDown() : void;
	getName() : string;
	setName(arg1 : string) : void;
}


declare interface TestCase extends Assert, Test {}
export = TestCase
