import RuntimeException = require('nashorn/java/lang/RuntimeException');
import Promise = require('nashorn/org/jetbrains/concurrency/Promise');
import Consumer = require('nashorn/com/intellij/util/Consumer');
import Throwable = require('nashorn/java/lang/Throwable');
import Getter = require('nashorn/com/intellij/openapi/util/Getter');

declare class AsyncPromise<T> {
	static OBSOLETE_ERROR : RuntimeException;
	state : Promise.State;
	constructor();
	addHandlers(arg1 : Consumer<T>, arg2 : Consumer<Throwable>) : void;
	static setHandler<T>(arg1 : Consumer<T>, arg2 : Consumer<T>) : Consumer<T>;
	setResult(arg1 : T) : void;
	static isObsolete(arg1 : Consumer<any>) : boolean;
	setError(arg1 : Throwable) : boolean;
	clearHandlers() : void;
}


declare interface AsyncPromise<T> extends Promise<T>, Getter<T> {}

declare module AsyncPromise {
	class CompoundConsumer<T> {
		constructor(arg1 : Consumer<T>, arg2 : Consumer<T>);
		add(arg1 : Consumer<T>) : void;
	}


	interface CompoundConsumer<T> extends Consumer<T> {}}

export = AsyncPromise
