import Element = require('nashorn/org/jdom/Element');
import DocType = require('nashorn/org/jdom/DocType');
import List = require('nashorn/java/util/List');
import Content = require('nashorn/org/jdom/Content');
import Iterator = require('nashorn/java/util/Iterator');
import Parent = require('nashorn/org/jdom/Parent');
import Collection = require('nashorn/java/util/Collection');
import Object = require('nashorn/java/lang/Object');

declare class Document {
	contentSize : number;
	rootElement : Element;
	docType : DocType;
	content : List<Content>;
	baseURI : string;
	descendants : Iterator<Content>;
	parent : Parent;
	document : Document;
	constructor();
	constructor(arg1 : Element, arg2 : DocType, arg3 : string);
	constructor(arg1 : Element, arg2 : DocType);
	constructor(arg1 : Element);
	constructor(arg1 : Collection<Content>);
	hasRootElement() : boolean;
	getRootElement() : Element;
	setRootElement(arg1 : Element) : Document;
	detachRootElement() : Element;
	getDocType() : DocType;
	setDocType(arg1 : DocType) : Document;
	addContent(arg1 : Content) : Document;
	addContent(arg1 : Collection<Content>) : Document;
	addContent(arg1 : number, arg2 : Content) : Document;
	addContent(arg1 : number, arg2 : Collection<Content>) : Document;
	setContent(arg1 : Collection<Content>) : Document;
	setBaseURI(arg1 : string) : void;
	getBaseURI() : string;
	setContent(arg1 : number, arg2 : Content) : Document;
	setContent(arg1 : number, arg2 : Collection<Content>) : Document;
	setContent(arg1 : Content) : Document;
	setProperty(arg1 : string, arg2 : Object) : void;
	getProperty(arg1 : string) : Object;
}


declare interface Document extends Parent {}
export = Document
