import Namespace = require('nashorn/org/jdom/Namespace');
import List = require('nashorn/java/util/List');
import Content = require('nashorn/org/jdom/Content');
import Attribute = require('nashorn/org/jdom/Attribute');
import Iterator = require('nashorn/java/util/Iterator');
import Collection = require('nashorn/java/util/Collection');
import Parent = require('nashorn/org/jdom/Parent');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');

declare class Element {
	name : string;
	namespace : Namespace;
	namespacePrefix : string;
	namespaceURI : string;
	qualifiedName : string;
	additionalNamespaces : List<Namespace>;
	value : string;
	rootElement : boolean;
	contentSize : number;
	text : string;
	textTrim : string;
	textNormalize : string;
	content : List<Content>;
	attributes : List<Attribute>;
	descendants : Iterator<Content>;
	children : List<Element>;
	constructor(arg1 : string, arg2 : Namespace);
	constructor(arg1 : string);
	constructor(arg1 : string, arg2 : string);
	constructor(arg1 : string, arg2 : string, arg3 : string);
	getName() : string;
	setName(arg1 : string) : Element;
	getNamespace() : Namespace;
	setNamespace(arg1 : Namespace) : Element;
	getNamespacePrefix() : string;
	getNamespaceURI() : string;
	getNamespace(arg1 : string) : Namespace;
	getQualifiedName() : string;
	addNamespaceDeclaration(arg1 : Namespace) : void;
	removeNamespaceDeclaration(arg1 : Namespace) : void;
	getAdditionalNamespaces() : List<Namespace>;
	isRootElement() : boolean;
	getText() : string;
	getTextTrim() : string;
	getTextNormalize() : string;
	getChildText(arg1 : string) : string;
	getChildTextTrim(arg1 : string) : string;
	getChildTextNormalize(arg1 : string) : string;
	getChildText(arg1 : string, arg2 : Namespace) : string;
	getChildTextTrim(arg1 : string, arg2 : Namespace) : string;
	getChildTextNormalize(arg1 : string, arg2 : Namespace) : string;
	setText(arg1 : string) : Element;
	setContent(arg1 : Collection<Content>) : Element;
	setContent(arg1 : number, arg2 : Content) : Element;
	setContent(arg1 : number, arg2 : Collection<Content>) : Parent;
	addContent(arg1 : string) : Element;
	addContent(arg1 : Content) : Element;
	addContent(arg1 : Element) : Element;
	addContent(arg1 : Collection<Content>) : Element;
	addContent(arg1 : number, arg2 : Content) : Element;
	addContent(arg1 : number, arg2 : Collection<Content>) : Element;
	setContent(arg1 : Content) : Element;
	isAncestor(arg1 : Element) : boolean;
	getAttributes() : List<Attribute>;
	getAttribute(arg1 : string) : Attribute;
	getAttribute(arg1 : string, arg2 : Namespace) : Attribute;
	getAttributeValue(arg1 : string) : string;
	getAttributeValue(arg1 : string, arg2 : string) : string;
	getAttributeValue(arg1 : string, arg2 : Namespace) : string;
	getAttributeValue(arg1 : string, arg2 : Namespace, arg3 : string) : string;
	setAttributes(arg1 : Collection) : Element;
	setAttributes(arg1 : List) : Element;
	setAttribute(arg1 : string, arg2 : string) : Element;
	setAttribute(arg1 : string, arg2 : string, arg3 : Namespace) : Element;
	setAttribute(arg1 : Attribute) : Element;
	removeAttribute(arg1 : string) : boolean;
	removeAttribute(arg1 : string, arg2 : Namespace) : boolean;
	removeAttribute(arg1 : Attribute) : boolean;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	getChildren() : List<Element>;
	getChildren(arg1 : string) : List<Element>;
	getChildren(arg1 : string, arg2 : Namespace) : List<Element>;
	getChild(arg1 : string, arg2 : Namespace) : Element;
	getChild(arg1 : string) : Element;
	removeChild(arg1 : string) : boolean;
	removeChild(arg1 : string, arg2 : Namespace) : boolean;
	removeChildren(arg1 : string) : boolean;
	removeChildren(arg1 : string, arg2 : Namespace) : boolean;
}


declare interface Element extends Content, Parent {}
export = Element
