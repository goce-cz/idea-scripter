import Object = require('nashorn/java/lang/Object');
import ClassLoader = require('nashorn/java/lang/ClassLoader');
import Context = require('nashorn/org/mozilla/javascript/Context');
import XMLLib = require('nashorn/org/mozilla/javascript/xml/XMLLib');
import GeneratedClassLoader = require('nashorn/org/mozilla/javascript/GeneratedClassLoader');
import Callable = require('nashorn/org/mozilla/javascript/Callable');
import Scriptable = require('nashorn/org/mozilla/javascript/Scriptable');
import ContextAction = require('nashorn/org/mozilla/javascript/ContextAction');

declare class ContextFactory extends Object {
	static global : ContextFactory;
	static globalSetter : ContextFactory.GlobalSetter;
	applicationClassLoader : ClassLoader;
	sealed : boolean;
	constructor();
	static getGlobal() : ContextFactory;
	static hasExplicitGlobal() : boolean;
	static initGlobal(arg1 : ContextFactory) : void;
	static getGlobalSetter() : ContextFactory.GlobalSetter;
	makeContext() : Context;
	hasFeature(arg1 : Context, arg2 : number) : boolean;
	isDom3Present() : boolean;
	getE4xImplementationFactory() : XMLLib.Factory;
	createClassLoader(arg1 : ClassLoader) : GeneratedClassLoader;
	getApplicationClassLoader() : ClassLoader;
	initApplicationClassLoader(arg1 : ClassLoader) : void;
	doTopCall(arg1 : Callable, arg2 : Context, arg3 : Scriptable, arg4 : Scriptable, arg5 : Object[]) : Object;
	observeInstructionCount(arg1 : Context, arg2 : number) : void;
	onContextCreated(arg1 : Context) : void;
	onContextReleased(arg1 : Context) : void;
	addListener(arg1 : ContextFactory.Listener) : void;
	removeListener(arg1 : ContextFactory.Listener) : void;
	disableContextListening() : void;
	isSealed() : boolean;
	seal() : void;
	checkNotSealed() : void;
	call(arg1 : ContextAction) : Object;
	enterContext() : Context;
	enter() : Context;
	exit() : void;
	enterContext(arg1 : Context) : Context;
}


declare module ContextFactory {
	class GlobalSetter extends Object {
		contextFactoryGlobal : ContextFactory;
		setContextFactoryGlobal(arg1 : ContextFactory) : void;
		getContextFactoryGlobal() : ContextFactory;
	}
	class Listener extends Object {
		contextCreated(arg1 : Context) : void;
		contextReleased(arg1 : Context) : void;
	}
}

export = ContextFactory
