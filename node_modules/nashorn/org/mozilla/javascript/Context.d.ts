import Object = require('nashorn/java/lang/Object');
import ContextFactory = require('nashorn/org/mozilla/javascript/ContextFactory');
import ErrorReporter = require('nashorn/org/mozilla/javascript/ErrorReporter');
import Locale = require('nashorn/java/util/Locale');
import WrapFactory = require('nashorn/org/mozilla/javascript/WrapFactory');
import Debugger = require('nashorn/org/mozilla/javascript/debug/Debugger');
import XMLLib = require('nashorn/org/mozilla/javascript/xml/XMLLib');
import ClassLoader = require('nashorn/java/lang/ClassLoader');
import ContextAction = require('nashorn/org/mozilla/javascript/ContextAction');
import Callable = require('nashorn/org/mozilla/javascript/Callable');
import Scriptable = require('nashorn/org/mozilla/javascript/Scriptable');
import ContextListener = require('nashorn/org/mozilla/javascript/ContextListener');
import PropertyChangeListener = require('nashorn/java/beans/PropertyChangeListener');
import Throwable = require('nashorn/java/lang/Throwable');
import EvaluatorException = require('nashorn/org/mozilla/javascript/EvaluatorException');
import ScriptableObject = require('nashorn/org/mozilla/javascript/ScriptableObject');
import Reader = require('nashorn/java/io/Reader');
import Script = require('nashorn/org/mozilla/javascript/Script');
import ContinuationPending = require('nashorn/org/mozilla/javascript/ContinuationPending');
import Evaluator = require('nashorn/org/mozilla/javascript/Evaluator');
import Function = require('nashorn/org/mozilla/javascript/Function');
import Class = require('nashorn/java/lang/Class');
import RuntimeException = require('nashorn/java/lang/RuntimeException');
import SecurityController = require('nashorn/org/mozilla/javascript/SecurityController');
import ClassShutter = require('nashorn/org/mozilla/javascript/ClassShutter');
import DebuggableScript = require('nashorn/org/mozilla/javascript/debug/DebuggableScript');
import GeneratedClassLoader = require('nashorn/org/mozilla/javascript/GeneratedClassLoader');
import RegExpProxy = require('nashorn/org/mozilla/javascript/RegExpProxy');

declare class Context extends Object {
	static VERSION_UNKNOWN : number;
	static VERSION_DEFAULT : number;
	static VERSION_1_0 : number;
	static VERSION_1_1 : number;
	static VERSION_1_2 : number;
	static VERSION_1_3 : number;
	static VERSION_1_4 : number;
	static VERSION_1_5 : number;
	static VERSION_1_6 : number;
	static VERSION_1_7 : number;
	static VERSION_1_8 : number;
	static FEATURE_NON_ECMA_GET_YEAR : number;
	static FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME : number;
	static FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER : number;
	static FEATURE_TO_STRING_AS_SOURCE : number;
	static FEATURE_PARENT_PROTO_PROPERTIES : number;
	static FEATURE_PARENT_PROTO_PROPRTIES : number;
	static FEATURE_E4X : number;
	static FEATURE_DYNAMIC_SCOPE : number;
	static FEATURE_STRICT_VARS : number;
	static FEATURE_STRICT_EVAL : number;
	static FEATURE_LOCATION_INFORMATION_IN_ERROR : number;
	static FEATURE_STRICT_MODE : number;
	static FEATURE_WARNING_AS_ERROR : number;
	static FEATURE_ENHANCED_JAVA_ACCESS : number;
	static languageVersionProperty : string;
	static errorReporterProperty : string;
	static emptyArgs : Object[];
	generateObserverCount : boolean;
	static currentContext : Context;
	factory : ContextFactory;
	sealed : boolean;
	languageVersion : number;
	implementationVersion : string;
	errorReporter : ErrorReporter;
	locale : Locale;
	static undefinedValue : Object;
	generatingDebug : boolean;
	generatingSource : boolean;
	optimizationLevel : number;
	maximumInterpreterStackDepth : number;
	classShutterSetter : Context.ClassShutterSetter;
	wrapFactory : WrapFactory;
	debugger : Debugger;
	debuggerContextData : Object;
	e4xImplementationFactory : XMLLib.Factory;
	instructionObserverThreshold : number;
	applicationClassLoader : ClassLoader;
	generatingDebugChanged : boolean;
	constructor();
	static getCurrentContext() : Context;
	static enter() : Context;
	static enter(arg1 : Context) : Context;
	static enter(arg1 : Context, arg2 : ContextFactory) : Context;
	static exit() : void;
	static call(arg1 : ContextAction) : Object;
	static call(arg1 : ContextFactory, arg2 : Callable, arg3 : Scriptable, arg4 : Scriptable, arg5 : Object[]) : Object;
	static call(arg1 : ContextFactory, arg2 : ContextAction) : Object;
	static addContextListener(arg1 : ContextListener) : void;
	static removeContextListener(arg1 : ContextListener) : void;
	getFactory() : ContextFactory;
	isSealed() : boolean;
	seal(arg1 : Object) : void;
	unseal(arg1 : Object) : void;
	static onSealedMutation() : void;
	getLanguageVersion() : number;
	setLanguageVersion(arg1 : number) : void;
	static isValidLanguageVersion(arg1 : number) : boolean;
	static checkLanguageVersion(arg1 : number) : void;
	getImplementationVersion() : string;
	getErrorReporter() : ErrorReporter;
	setErrorReporter(arg1 : ErrorReporter) : ErrorReporter;
	getLocale() : Locale;
	setLocale(arg1 : Locale) : Locale;
	addPropertyChangeListener(arg1 : PropertyChangeListener) : void;
	removePropertyChangeListener(arg1 : PropertyChangeListener) : void;
	firePropertyChange(arg1 : string, arg2 : Object, arg3 : Object) : void;
	firePropertyChangeImpl(arg1 : Object, arg2 : string, arg3 : Object, arg4 : Object) : void;
	static reportWarning(arg1 : string, arg2 : string, arg3 : number, arg4 : string, arg5 : number) : void;
	static reportWarning(arg1 : string) : void;
	static reportWarning(arg1 : string, arg2 : Throwable) : void;
	static reportError(arg1 : string, arg2 : string, arg3 : number, arg4 : string, arg5 : number) : void;
	static reportError(arg1 : string) : void;
	static reportRuntimeError(arg1 : string, arg2 : string, arg3 : number, arg4 : string, arg5 : number) : EvaluatorException;
	static reportRuntimeError0(arg1 : string) : EvaluatorException;
	static reportRuntimeError1(arg1 : string, arg2 : Object) : EvaluatorException;
	static reportRuntimeError2(arg1 : string, arg2 : Object, arg3 : Object) : EvaluatorException;
	static reportRuntimeError3(arg1 : string, arg2 : Object, arg3 : Object, arg4 : Object) : EvaluatorException;
	static reportRuntimeError4(arg1 : string, arg2 : Object, arg3 : Object, arg4 : Object, arg5 : Object) : EvaluatorException;
	static reportRuntimeError(arg1 : string) : EvaluatorException;
	initStandardObjects() : ScriptableObject;
	initStandardObjects(arg1 : ScriptableObject) : Scriptable;
	initStandardObjects(arg1 : ScriptableObject, arg2 : boolean) : ScriptableObject;
	static getUndefinedValue() : Object;
	evaluateString(arg1 : Scriptable, arg2 : string, arg3 : string, arg4 : number, arg5 : Object) : Object;
	evaluateReader(arg1 : Scriptable, arg2 : Reader, arg3 : string, arg4 : number, arg5 : Object) : Object;
	executeScriptWithContinuations(arg1 : Script, arg2 : Scriptable) : Object;
	callFunctionWithContinuations(arg1 : Callable, arg2 : Scriptable, arg3 : Object[]) : Object;
	captureContinuation() : ContinuationPending;
	resumeContinuation(arg1 : Object, arg2 : Scriptable, arg3 : Object) : Object;
	stringIsCompilableUnit(arg1 : string) : boolean;
	compileReader(arg1 : Scriptable, arg2 : Reader, arg3 : string, arg4 : number, arg5 : Object) : Script;
	compileReader(arg1 : Reader, arg2 : string, arg3 : number, arg4 : Object) : Script;
	compileString(arg1 : string, arg2 : string, arg3 : number, arg4 : Object) : Script;
	compileString(arg1 : string, arg2 : Evaluator, arg3 : ErrorReporter, arg4 : string, arg5 : number, arg6 : Object) : Script;
	compileFunction(arg1 : Scriptable, arg2 : string, arg3 : string, arg4 : number, arg5 : Object) : Function;
	compileFunction(arg1 : Scriptable, arg2 : string, arg3 : Evaluator, arg4 : ErrorReporter, arg5 : string, arg6 : number, arg7 : Object) : Function;
	decompileScript(arg1 : Script, arg2 : number) : string;
	decompileFunction(arg1 : Function, arg2 : number) : string;
	decompileFunctionBody(arg1 : Function, arg2 : number) : string;
	newObject(arg1 : Scriptable) : Scriptable;
	newObject(arg1 : Scriptable, arg2 : string) : Scriptable;
	newObject(arg1 : Scriptable, arg2 : string, arg3 : Object[]) : Scriptable;
	newArray(arg1 : Scriptable, arg2 : number) : Scriptable;
	newArray(arg1 : Scriptable, arg2 : Object[]) : Scriptable;
	getElements(arg1 : Scriptable) : Object[];
	static toBoolean(arg1 : Object) : boolean;
	static toNumber(arg1 : Object) : number;
	static toString(arg1 : Object) : string;
	static toObject(arg1 : Object, arg2 : Scriptable) : Scriptable;
	static toObject(arg1 : Object, arg2 : Scriptable, arg3 : Class<any>) : Scriptable;
	static javaToJS(arg1 : Object, arg2 : Scriptable) : Object;
	static jsToJava(arg1 : Object, arg2 : Class<any>) : Object;
	static toType(arg1 : Object, arg2 : Class<any>) : Object;
	static throwAsScriptRuntimeEx(arg1 : Throwable) : RuntimeException;
	isGeneratingDebug() : boolean;
	setGeneratingDebug(arg1 : boolean) : void;
	isGeneratingSource() : boolean;
	setGeneratingSource(arg1 : boolean) : void;
	getOptimizationLevel() : number;
	setOptimizationLevel(arg1 : number) : void;
	static isValidOptimizationLevel(arg1 : number) : boolean;
	static checkOptimizationLevel(arg1 : number) : void;
	getMaximumInterpreterStackDepth() : number;
	setMaximumInterpreterStackDepth(arg1 : number) : void;
	setSecurityController(arg1 : SecurityController) : void;
	setClassShutter(arg1 : ClassShutter) : void;
	getClassShutter() : ClassShutter;
	getClassShutterSetter() : Context.ClassShutterSetter;
	getThreadLocal(arg1 : Object) : Object;
	putThreadLocal(arg1 : Object, arg2 : Object) : void;
	removeThreadLocal(arg1 : Object) : void;
	static setCachingEnabled(arg1 : boolean) : void;
	setWrapFactory(arg1 : WrapFactory) : void;
	getWrapFactory() : WrapFactory;
	getDebugger() : Debugger;
	getDebuggerContextData() : Object;
	setDebugger(arg1 : Debugger, arg2 : Object) : void;
	static getDebuggableView(arg1 : Script) : DebuggableScript;
	hasFeature(arg1 : number) : boolean;
	getE4xImplementationFactory() : XMLLib.Factory;
	getInstructionObserverThreshold() : number;
	setInstructionObserverThreshold(arg1 : number) : void;
	setGenerateObserverCount(arg1 : boolean) : void;
	observeInstructionCount(arg1 : number) : void;
	createClassLoader(arg1 : ClassLoader) : GeneratedClassLoader;
	getApplicationClassLoader() : ClassLoader;
	setApplicationClassLoader(arg1 : ClassLoader) : void;
	static getContext() : Context;
	compileImpl(arg1 : Scriptable, arg2 : Reader, arg3 : string, arg4 : string, arg5 : number, arg6 : Object, arg7 : boolean, arg8 : Evaluator, arg9 : ErrorReporter) : Object;
	static notifyDebugger_r(arg1 : Context, arg2 : DebuggableScript, arg3 : string) : void;
	createCompiler() : Evaluator;
	static createInterpreter() : Evaluator;
	static getSourcePositionFromStack(arg1 : number[]) : string;
	getRegExpProxy() : RegExpProxy;
	isVersionECMA1() : boolean;
	getSecurityController() : SecurityController;
	isGeneratingDebugChanged() : boolean;
	addActivationName(arg1 : string) : void;
	isActivationNeeded(arg1 : string) : boolean;
	removeActivationName(arg1 : string) : void;
}


declare module Context {
	class ClassShutterSetter extends Object {
		classShutter : ClassShutter;
		setClassShutter(arg1 : ClassShutter) : void;
		getClassShutter() : ClassShutter;
	}
}

export = Context
