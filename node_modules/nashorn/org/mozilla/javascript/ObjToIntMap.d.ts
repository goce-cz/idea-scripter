import Object = require('nashorn/java/lang/Object');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Serializable = require('nashorn/java/io/Serializable');

declare class ObjToIntMap {
	empty : boolean;
	keys : Object[];
	constructor();
	constructor(arg1 : number);
	isEmpty() : boolean;
	size() : number;
	has(arg1 : Object) : boolean;
	get(arg1 : Object, arg2 : number) : number;
	getExisting(arg1 : Object) : number;
	put(arg1 : Object, arg2 : number) : void;
	intern(arg1 : Object) : Object;
	remove(arg1 : Object) : void;
	clear() : void;
	newIterator() : ObjToIntMap.Iterator;
	initIterator(arg1 : ObjToIntMap.Iterator) : void;
	getKeys() : Object[];
	getKeys(arg1 : Object[], arg2 : number) : void;
	static tableLookupStep(arg1 : number, arg2 : number, arg3 : number) : number;
	findIndex(arg1 : Object) : number;
	insertNewKey(arg1 : Object, arg2 : number) : number;
	rehashTable() : void;
	ensureIndex(arg1 : Object) : number;
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
}


declare interface ObjToIntMap extends Serializable {}

declare module ObjToIntMap {
	class Iterator extends Object {
		key : Object;
		value : number;
		init(arg1 : Object[], arg2 : number[], arg3 : number) : void;
		start() : void;
		done() : boolean;
		next() : void;
		getKey() : Object;
		getValue() : number;
		setValue(arg1 : number) : void;
	}
}

export = ObjToIntMap
