import Scriptable = require('nashorn/org/mozilla/javascript/Scriptable');
import Object = require('nashorn/java/lang/Object');
import IdFunctionObject = require('nashorn/org/mozilla/javascript/IdFunctionObject');
import EcmaError = require('nashorn/org/mozilla/javascript/EcmaError');
import ScriptableObject = require('nashorn/org/mozilla/javascript/ScriptableObject');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import IdFunctionCall = require('nashorn/org/mozilla/javascript/IdFunctionCall');
import Serializable = require('nashorn/java/io/Serializable');

declare class IdScriptableObject {
	constructor();
	constructor(arg1 : Scriptable, arg2 : Scriptable);
	defaultGet(arg1 : string) : Object;
	defaultPut(arg1 : string, arg2 : Object) : void;
	getMaxInstanceId() : number;
	static instanceIdInfo(arg1 : number, arg2 : number) : number;
	findInstanceIdInfo(arg1 : string) : number;
	getInstanceIdName(arg1 : number) : string;
	getInstanceIdValue(arg1 : number) : Object;
	setInstanceIdValue(arg1 : number, arg2 : Object) : void;
	setInstanceIdAttributes(arg1 : number, arg2 : number) : void;
	exportAsJSClass(arg1 : number, arg2 : Scriptable, arg3 : boolean) : IdFunctionObject;
	hasPrototypeMap() : boolean;
	activatePrototypeMap(arg1 : number) : void;
	initPrototypeMethod(arg1 : Object, arg2 : number, arg3 : string, arg4 : number) : void;
	initPrototypeConstructor(arg1 : IdFunctionObject) : void;
	initPrototypeValue(arg1 : number, arg2 : string, arg3 : Object, arg4 : number) : void;
	initPrototypeId(arg1 : number) : void;
	findPrototypeId(arg1 : string) : number;
	fillConstructorProperties(arg1 : IdFunctionObject) : void;
	addIdFunctionProperty(arg1 : Scriptable, arg2 : Object, arg3 : number, arg4 : string, arg5 : number) : void;
	static incompatibleCallError(arg1 : IdFunctionObject) : EcmaError;
	newIdFunction(arg1 : Object, arg2 : number, arg3 : string, arg4 : number, arg5 : Scriptable) : IdFunctionObject;
	getBuiltInDescriptor(arg1 : string) : ScriptableObject;
	readObject(arg1 : ObjectInputStream) : void;
	writeObject(arg1 : ObjectOutputStream) : void;
}


declare interface IdScriptableObject extends ScriptableObject, IdFunctionCall {}

declare module IdScriptableObject {
	class PrototypeValues {
		getMaxId() : number;
		initValue(arg1 : number, arg2 : string, arg3 : Object, arg4 : number) : void;
		initSlot(arg1 : number, arg2 : string, arg3 : Object, arg4 : number) : void;
		createPrecachedConstructor() : IdFunctionObject;
		findId(arg1 : string) : number;
		has(arg1 : number) : boolean;
		get(arg1 : number) : Object;
		set(arg1 : number, arg2 : Scriptable, arg3 : Object) : void;
		delete(arg1 : number) : void;
		getAttributes(arg1 : number) : number;
		setAttributes(arg1 : number, arg2 : number) : void;
		getNames(arg1 : boolean, arg2 : Object[]) : Object[];
		ensureId(arg1 : number) : Object;
	}


	interface PrototypeValues extends Serializable {}}

export = IdScriptableObject
