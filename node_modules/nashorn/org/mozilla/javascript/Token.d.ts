import Object = require('nashorn/java/lang/Object');
import Enum = require('nashorn/java/lang/Enum');

declare class Token extends Object {
	static printTrees : boolean;
	static ERROR : number;
	static EOF : number;
	static EOL : number;
	static FIRST_BYTECODE_TOKEN : number;
	static ENTERWITH : number;
	static LEAVEWITH : number;
	static RETURN : number;
	static GOTO : number;
	static IFEQ : number;
	static IFNE : number;
	static SETNAME : number;
	static BITOR : number;
	static BITXOR : number;
	static BITAND : number;
	static EQ : number;
	static NE : number;
	static LT : number;
	static LE : number;
	static GT : number;
	static GE : number;
	static LSH : number;
	static RSH : number;
	static URSH : number;
	static ADD : number;
	static SUB : number;
	static MUL : number;
	static DIV : number;
	static MOD : number;
	static NOT : number;
	static BITNOT : number;
	static POS : number;
	static NEG : number;
	static NEW : number;
	static DELPROP : number;
	static TYPEOF : number;
	static GETPROP : number;
	static GETPROPNOWARN : number;
	static SETPROP : number;
	static GETELEM : number;
	static SETELEM : number;
	static CALL : number;
	static NAME : number;
	static NUMBER : number;
	static STRING : number;
	static NULL : number;
	static THIS : number;
	static FALSE : number;
	static TRUE : number;
	static SHEQ : number;
	static SHNE : number;
	static REGEXP : number;
	static BINDNAME : number;
	static THROW : number;
	static RETHROW : number;
	static IN : number;
	static INSTANCEOF : number;
	static LOCAL_LOAD : number;
	static GETVAR : number;
	static SETVAR : number;
	static CATCH_SCOPE : number;
	static ENUM_INIT_KEYS : number;
	static ENUM_INIT_VALUES : number;
	static ENUM_INIT_ARRAY : number;
	static ENUM_NEXT : number;
	static ENUM_ID : number;
	static THISFN : number;
	static RETURN_RESULT : number;
	static ARRAYLIT : number;
	static OBJECTLIT : number;
	static GET_REF : number;
	static SET_REF : number;
	static DEL_REF : number;
	static REF_CALL : number;
	static REF_SPECIAL : number;
	static YIELD : number;
	static STRICT_SETNAME : number;
	static DEFAULTNAMESPACE : number;
	static ESCXMLATTR : number;
	static ESCXMLTEXT : number;
	static REF_MEMBER : number;
	static REF_NS_MEMBER : number;
	static REF_NAME : number;
	static REF_NS_NAME : number;
	static LAST_BYTECODE_TOKEN : number;
	static TRY : number;
	static SEMI : number;
	static LB : number;
	static RB : number;
	static LC : number;
	static RC : number;
	static LP : number;
	static RP : number;
	static COMMA : number;
	static ASSIGN : number;
	static ASSIGN_BITOR : number;
	static ASSIGN_BITXOR : number;
	static ASSIGN_BITAND : number;
	static ASSIGN_LSH : number;
	static ASSIGN_RSH : number;
	static ASSIGN_URSH : number;
	static ASSIGN_ADD : number;
	static ASSIGN_SUB : number;
	static ASSIGN_MUL : number;
	static ASSIGN_DIV : number;
	static ASSIGN_MOD : number;
	static FIRST_ASSIGN : number;
	static LAST_ASSIGN : number;
	static HOOK : number;
	static COLON : number;
	static OR : number;
	static AND : number;
	static INC : number;
	static DEC : number;
	static DOT : number;
	static FUNCTION : number;
	static EXPORT : number;
	static IMPORT : number;
	static IF : number;
	static ELSE : number;
	static SWITCH : number;
	static CASE : number;
	static DEFAULT : number;
	static WHILE : number;
	static DO : number;
	static FOR : number;
	static BREAK : number;
	static CONTINUE : number;
	static VAR : number;
	static WITH : number;
	static CATCH : number;
	static FINALLY : number;
	static VOID : number;
	static RESERVED : number;
	static EMPTY : number;
	static BLOCK : number;
	static LABEL : number;
	static TARGET : number;
	static LOOP : number;
	static EXPR_VOID : number;
	static EXPR_RESULT : number;
	static JSR : number;
	static SCRIPT : number;
	static TYPEOFNAME : number;
	static USE_STACK : number;
	static SETPROP_OP : number;
	static SETELEM_OP : number;
	static LOCAL_BLOCK : number;
	static SET_REF_OP : number;
	static DOTDOT : number;
	static COLONCOLON : number;
	static XML : number;
	static DOTQUERY : number;
	static XMLATTR : number;
	static XMLEND : number;
	static TO_OBJECT : number;
	static TO_DOUBLE : number;
	static GET : number;
	static SET : number;
	static LET : number;
	static CONST : number;
	static SETCONST : number;
	static SETCONSTVAR : number;
	static ARRAYCOMP : number;
	static LETEXPR : number;
	static WITHEXPR : number;
	static DEBUGGER : number;
	static COMMENT : number;
	static GENEXPR : number;
	static LAST_TOKEN : number;
	constructor();
	static name(arg1 : number) : string;
	static typeToName(arg1 : number) : string;
	static keywordToName(arg1 : number) : string;
	static isValidToken(arg1 : number) : boolean;
}


declare module Token {
	class CommentType {
		static LINE : Token.CommentType;
		static BLOCK_COMMENT : Token.CommentType;
		static JSDOC : Token.CommentType;
		static HTML : Token.CommentType;
	}


	interface CommentType extends Enum<Token.CommentType> {}}

export = Token
