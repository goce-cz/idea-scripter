import Scriptable = require('nashorn/org/mozilla/javascript/Scriptable');
import Object = require('nashorn/java/lang/Object');
import Callable = require('nashorn/org/mozilla/javascript/Callable');
import LazilyLoadedCtor = require('nashorn/org/mozilla/javascript/LazilyLoadedCtor');
import Class = require('nashorn/java/lang/Class');
import BaseFunction = require('nashorn/org/mozilla/javascript/BaseFunction');
import AccessibleObject = require('nashorn/java/lang/reflect/AccessibleObject');
import Annotation = require('nashorn/java/lang/annotation/Annotation');
import Member = require('nashorn/java/lang/reflect/Member');
import Method = require('nashorn/java/lang/reflect/Method');
import Context = require('nashorn/org/mozilla/javascript/Context');
import ObjectOutputStream = require('nashorn/java/io/ObjectOutputStream');
import ObjectInputStream = require('nashorn/java/io/ObjectInputStream');
import Serializable = require('nashorn/java/io/Serializable');
import DebuggableObject = require('nashorn/org/mozilla/javascript/debug/DebuggableObject');
import ConstProperties = require('nashorn/org/mozilla/javascript/ConstProperties');

declare class ScriptableObject {
	static EMPTY : number;
	static READONLY : number;
	static DONTENUM : number;
	static PERMANENT : number;
	static UNINITIALIZED_CONST : number;
	static CONST : number;
	typeOf : string;
	className : string;
	prototype : Scriptable;
	parentScope : Scriptable;
	ids : Object[];
	allIds : Object[];
	extensible : boolean;
	sealed : boolean;
	empty : boolean;
	constructor();
	constructor(arg1 : Scriptable, arg2 : Scriptable);
	static buildDataDescriptor(arg1 : Scriptable, arg2 : Object, arg3 : number) : ScriptableObject;
	static checkValidAttributes(arg1 : number) : void;
	getTypeOf() : string;
	getAttributes(arg1 : string, arg2 : Scriptable) : number;
	getAttributes(arg1 : number, arg2 : Scriptable) : number;
	setAttributes(arg1 : string, arg2 : Scriptable, arg3 : number) : void;
	setAttributes(arg1 : number, arg2 : Scriptable, arg3 : number) : void;
	getAttributes(arg1 : string) : number;
	getAttributes(arg1 : number) : number;
	setAttributes(arg1 : string, arg2 : number) : void;
	setAttributes(arg1 : number, arg2 : number) : void;
	setGetterOrSetter(arg1 : string, arg2 : number, arg3 : Callable, arg4 : boolean) : void;
	setGetterOrSetter(arg1 : string, arg2 : number, arg3 : Callable, arg4 : boolean, arg5 : boolean) : void;
	getGetterOrSetter(arg1 : string, arg2 : number, arg3 : boolean) : Object;
	isGetterOrSetter(arg1 : string, arg2 : number, arg3 : boolean) : boolean;
	addLazilyInitializedValue(arg1 : string, arg2 : number, arg3 : LazilyLoadedCtor, arg4 : number) : void;
	static getDefaultValue(arg1 : Scriptable, arg2 : Class<any>) : Object;
	avoidObjectDetection() : boolean;
	equivalentValues(arg1 : Object) : Object;
	static defineClass<T extends Scriptable>(arg1 : Scriptable, arg2 : Class<T>) : void;
	static defineClass<T extends Scriptable>(arg1 : Scriptable, arg2 : Class<T>, arg3 : boolean) : void;
	static defineClass<T extends Scriptable>(arg1 : Scriptable, arg2 : Class<T>, arg3 : boolean, arg4 : boolean) : string;
	static buildClassCtor<T extends Scriptable>(arg1 : Scriptable, arg2 : Class<T>, arg3 : boolean, arg4 : boolean) : BaseFunction;
	static findAnnotatedMember(arg1 : AccessibleObject[], arg2 : Class<Annotation>) : Member;
	static findSetterMethod(arg1 : Method[], arg2 : string, arg3 : string) : Method;
	static getPropertyName(arg1 : string, arg2 : string, arg3 : Annotation) : string;
	static extendsScriptable<T extends Scriptable>(arg1 : Class<any>) : Class<T>;
	defineProperty(arg1 : string, arg2 : Object, arg3 : number) : void;
	static defineProperty(arg1 : Scriptable, arg2 : string, arg3 : Object, arg4 : number) : void;
	static defineConstProperty(arg1 : Scriptable, arg2 : string) : void;
	defineProperty(arg1 : string, arg2 : Class<any>, arg3 : number) : void;
	defineProperty(arg1 : string, arg2 : Object, arg3 : Method, arg4 : Method, arg5 : number) : void;
	defineOwnProperties(arg1 : Context, arg2 : ScriptableObject) : void;
	defineOwnProperty(arg1 : Context, arg2 : Object, arg3 : ScriptableObject) : void;
	defineOwnProperty(arg1 : Context, arg2 : Object, arg3 : ScriptableObject, arg4 : boolean) : void;
	checkPropertyDefinition(arg1 : ScriptableObject) : void;
	checkPropertyChange(arg1 : string, arg2 : ScriptableObject, arg3 : ScriptableObject) : void;
	static isTrue(arg1 : Object) : boolean;
	static isFalse(arg1 : Object) : boolean;
	sameValue(arg1 : Object, arg2 : Object) : boolean;
	applyDescriptorToAttributeBitset(arg1 : number, arg2 : ScriptableObject) : number;
	isDataDescriptor(arg1 : ScriptableObject) : boolean;
	isAccessorDescriptor(arg1 : ScriptableObject) : boolean;
	isGenericDescriptor(arg1 : ScriptableObject) : boolean;
	static ensureScriptable(arg1 : Object) : Scriptable;
	static ensureScriptableObject(arg1 : Object) : ScriptableObject;
	defineFunctionProperties(arg1 : string[], arg2 : Class<any>, arg3 : number) : void;
	static getObjectPrototype(arg1 : Scriptable) : Scriptable;
	static getFunctionPrototype(arg1 : Scriptable) : Scriptable;
	static getArrayPrototype(arg1 : Scriptable) : Scriptable;
	static getClassPrototype(arg1 : Scriptable, arg2 : string) : Scriptable;
	static getTopLevelScope(arg1 : Scriptable) : Scriptable;
	isExtensible() : boolean;
	preventExtensions() : void;
	sealObject() : void;
	isSealed() : boolean;
	checkNotSealed(arg1 : string, arg2 : number) : void;
	static getProperty(arg1 : Scriptable, arg2 : string) : Object;
	static getTypedProperty<T>(arg1 : Scriptable, arg2 : number, arg3 : Class<T>) : T;
	static getProperty(arg1 : Scriptable, arg2 : number) : Object;
	static getTypedProperty<T>(arg1 : Scriptable, arg2 : string, arg3 : Class<T>) : T;
	static hasProperty(arg1 : Scriptable, arg2 : string) : boolean;
	static redefineProperty(arg1 : Scriptable, arg2 : string, arg3 : boolean) : void;
	static hasProperty(arg1 : Scriptable, arg2 : number) : boolean;
	static putProperty(arg1 : Scriptable, arg2 : string, arg3 : Object) : void;
	static putConstProperty(arg1 : Scriptable, arg2 : string, arg3 : Object) : void;
	static putProperty(arg1 : Scriptable, arg2 : number, arg3 : Object) : void;
	static deleteProperty(arg1 : Scriptable, arg2 : string) : boolean;
	static deleteProperty(arg1 : Scriptable, arg2 : number) : boolean;
	static getPropertyIds(arg1 : Scriptable) : Object[];
	static callMethod(arg1 : Scriptable, arg2 : string, arg3 : Object[]) : Object;
	static callMethod(arg1 : Context, arg2 : Scriptable, arg3 : string, arg4 : Object[]) : Object;
	static getBase(arg1 : Scriptable, arg2 : string) : Scriptable;
	static getBase(arg1 : Scriptable, arg2 : number) : Scriptable;
	getAssociatedValue(arg1 : Object) : Object;
	static getTopScopeValue(arg1 : Scriptable, arg2 : Object) : Object;
	associateValue(arg1 : Object, arg2 : Object) : Object;
	putImpl(arg1 : string, arg2 : number, arg3 : Scriptable, arg4 : Object) : boolean;
	putConstImpl(arg1 : string, arg2 : number, arg3 : Scriptable, arg4 : Object, arg5 : number) : boolean;
	findAttributeSlot(arg1 : string, arg2 : number, arg3 : number) : ScriptableObject.Slot;
	static unwrapSlot(arg1 : ScriptableObject.Slot) : ScriptableObject.Slot;
	getSlot(arg1 : string, arg2 : number, arg3 : number) : ScriptableObject.Slot;
	createSlot(arg1 : string, arg2 : number, arg3 : number) : ScriptableObject.Slot;
	removeSlot(arg1 : string, arg2 : number) : void;
	static getSlotIndex(arg1 : number, arg2 : number) : number;
	static copyTable(arg1 : ScriptableObject.Slot[], arg2 : ScriptableObject.Slot[], arg3 : number) : void;
	static addKnownAbsentSlot(arg1 : ScriptableObject.Slot[], arg2 : ScriptableObject.Slot, arg3 : number) : void;
	getIds(arg1 : boolean) : Object[];
	writeObject(arg1 : ObjectOutputStream) : void;
	readObject(arg1 : ObjectInputStream) : void;
	getOwnPropertyDescriptor(arg1 : Context, arg2 : Object) : ScriptableObject;
	getSlot(arg1 : Context, arg2 : Object, arg3 : number) : ScriptableObject.Slot;
	size() : number;
	isEmpty() : boolean;
	get(arg1 : Object) : Object;
}


declare interface ScriptableObject extends Scriptable, Serializable, DebuggableObject, ConstProperties {}

declare module ScriptableObject {
	class RelinkedSlot {
		writeObject(arg1 : ObjectOutputStream) : void;
	}


	interface RelinkedSlot extends ScriptableObject.Slot {}	class GetterSlot {
	}


	interface GetterSlot extends ScriptableObject.Slot {}	class Slot {
		readObject(arg1 : ObjectInputStream) : void;
		setValue(arg1 : Object, arg2 : Scriptable, arg3 : Scriptable) : boolean;
		getValue(arg1 : Scriptable) : Object;
		getAttributes() : number;
		setAttributes(arg1 : number) : void;
		markDeleted() : void;
		getPropertyDescriptor(arg1 : Context, arg2 : Scriptable) : ScriptableObject;
	}


	interface Slot extends Serializable {}}

export = ScriptableObject
