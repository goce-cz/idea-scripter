import Comment = require('nashorn/org/mozilla/javascript/ast/Comment');
import Scope = require('nashorn/org/mozilla/javascript/ast/Scope');
import Object = require('nashorn/java/lang/Object');
import ObjToIntMap = require('nashorn/org/mozilla/javascript/ObjToIntMap');
import StringBuffer = require('nashorn/java/lang/StringBuffer');
import ScriptNode = require('nashorn/org/mozilla/javascript/ast/ScriptNode');
import Iterable = require('nashorn/java/lang/Iterable');
import Iterator = require('nashorn/java/util/Iterator');

declare class Node {
	static FUNCTION_PROP : number;
	static LOCAL_PROP : number;
	static LOCAL_BLOCK_PROP : number;
	static REGEXP_PROP : number;
	static CASEARRAY_PROP : number;
	static TARGETBLOCK_PROP : number;
	static VARIABLE_PROP : number;
	static ISNUMBER_PROP : number;
	static DIRECTCALL_PROP : number;
	static SPECIALCALL_PROP : number;
	static SKIP_INDEXES_PROP : number;
	static OBJECT_IDS_PROP : number;
	static INCRDECR_PROP : number;
	static CATCH_SCOPE_PROP : number;
	static LABEL_ID_PROP : number;
	static MEMBER_TYPE_PROP : number;
	static NAME_PROP : number;
	static CONTROL_BLOCK_PROP : number;
	static PARENTHESIZED_PROP : number;
	static GENERATOR_END_PROP : number;
	static DESTRUCTURING_ARRAY_LENGTH : number;
	static DESTRUCTURING_NAMES : number;
	static DESTRUCTURING_PARAMS : number;
	static JSDOC_PROP : number;
	static EXPRESSION_CLOSURE_PROP : number;
	static DESTRUCTURING_SHORTHAND : number;
	static LAST_PROP : number;
	static BOTH : number;
	static LEFT : number;
	static RIGHT : number;
	static NON_SPECIALCALL : number;
	static SPECIALCALL_EVAL : number;
	static SPECIALCALL_WITH : number;
	static DECR_FLAG : number;
	static POST_FLAG : number;
	static PROPERTY_FLAG : number;
	static ATTRIBUTE_FLAG : number;
	static DESCENDANTS_FLAG : number;
	static END_UNREACHED : number;
	static END_DROPS_OFF : number;
	static END_RETURNS : number;
	static END_RETURNS_VALUE : number;
	static END_YIELDS : number;
	type : number;
	jsDoc : string;
	jsDocNode : Comment;
	firstChild : Node;
	lastChild : Node;
	next : Node;
	lastSibling : Node;
	lineno : number;
	double : number;
	scope : Scope;
	constructor(arg1 : number);
	constructor(arg1 : number, arg2 : Node);
	constructor(arg1 : number, arg2 : Node, arg3 : Node);
	constructor(arg1 : number, arg2 : Node, arg3 : Node, arg4 : Node);
	constructor(arg1 : number, arg2 : number);
	constructor(arg1 : number, arg2 : Node, arg3 : number);
	constructor(arg1 : number, arg2 : Node, arg3 : Node, arg4 : number);
	constructor(arg1 : number, arg2 : Node, arg3 : Node, arg4 : Node, arg5 : number);
	static newNumber(arg1 : number) : Node;
	static newString(arg1 : string) : Node;
	static newString(arg1 : number, arg2 : string) : Node;
	getType() : number;
	setType(arg1 : number) : Node;
	getJsDoc() : string;
	getJsDocNode() : Comment;
	setJsDocNode(arg1 : Comment) : void;
	hasChildren() : boolean;
	getFirstChild() : Node;
	getLastChild() : Node;
	getNext() : Node;
	getChildBefore(arg1 : Node) : Node;
	getLastSibling() : Node;
	addChildToFront(arg1 : Node) : void;
	addChildToBack(arg1 : Node) : void;
	addChildrenToFront(arg1 : Node) : void;
	addChildrenToBack(arg1 : Node) : void;
	addChildBefore(arg1 : Node, arg2 : Node) : void;
	addChildAfter(arg1 : Node, arg2 : Node) : void;
	removeChild(arg1 : Node) : void;
	replaceChild(arg1 : Node, arg2 : Node) : void;
	replaceChildAfter(arg1 : Node, arg2 : Node) : void;
	removeChildren() : void;
	static propToString(arg1 : number) : string;
	lookupProperty(arg1 : number) : Node.PropListItem;
	ensureProperty(arg1 : number) : Node.PropListItem;
	removeProp(arg1 : number) : void;
	getProp(arg1 : number) : Object;
	getIntProp(arg1 : number, arg2 : number) : number;
	getExistingIntProp(arg1 : number) : number;
	putProp(arg1 : number, arg2 : Object) : void;
	putIntProp(arg1 : number, arg2 : number) : void;
	getLineno() : number;
	setLineno(arg1 : number) : void;
	getDouble() : number;
	setDouble(arg1 : number) : void;
	getString() : string;
	setString(arg1 : string) : void;
	getScope() : Scope;
	setScope(arg1 : Scope) : void;
	static newTarget() : Node;
	labelId() : number;
	labelId(arg1 : number) : void;
	hasConsistentReturnUsage() : boolean;
	endCheckIf() : number;
	endCheckSwitch() : number;
	endCheckTry() : number;
	endCheckLoop() : number;
	endCheckBlock() : number;
	endCheckLabel() : number;
	endCheckBreak() : number;
	endCheck() : number;
	hasSideEffects() : boolean;
	resetTargets() : void;
	resetTargets_r() : void;
	toString(arg1 : ObjToIntMap, arg2 : StringBuffer) : void;
	toStringTree(arg1 : ScriptNode) : string;
	static toStringTreeHelper(arg1 : ScriptNode, arg2 : Node, arg3 : ObjToIntMap, arg4 : number, arg5 : StringBuffer) : void;
	static generatePrintIds(arg1 : Node, arg2 : ObjToIntMap) : void;
	static appendPrintId(arg1 : Node, arg2 : ObjToIntMap, arg3 : StringBuffer) : void;
}


declare interface Node extends Iterable<Node> {}

declare module Node {
	class NodeIterator {
		constructor();
	}


	interface NodeIterator extends Iterator<Node> {}	class PropListItem extends Object {
	}
}

export = Node
