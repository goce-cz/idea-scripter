import AstRoot = require('nashorn/org/mozilla/javascript/ast/AstRoot');
import FunctionNode = require('nashorn/org/mozilla/javascript/ast/FunctionNode');
import Scope = require('nashorn/org/mozilla/javascript/ast/Scope');
import NodeVisitor = require('nashorn/org/mozilla/javascript/ast/NodeVisitor');
import Object = require('nashorn/java/lang/Object');
import List = require('nashorn/java/util/List');
import StringBuilder = require('nashorn/java/lang/StringBuilder');
import RuntimeException = require('nashorn/java/lang/RuntimeException');
import Node = require('nashorn/org/mozilla/javascript/Node');
import Comparable = require('nashorn/java/lang/Comparable');
import Comparator = require('nashorn/java/util/Comparator');
import Serializable = require('nashorn/java/io/Serializable');

declare class AstNode {
	position : number;
	absolutePosition : number;
	length : number;
	parent : AstNode;
	astRoot : AstRoot;
	enclosingFunction : FunctionNode;
	enclosingScope : Scope;
	lineno : number;
	constructor();
	constructor(arg1 : number);
	constructor(arg1 : number, arg2 : number);
	getPosition() : number;
	setPosition(arg1 : number) : void;
	getAbsolutePosition() : number;
	getLength() : number;
	setLength(arg1 : number) : void;
	setBounds(arg1 : number, arg2 : number) : void;
	setRelative(arg1 : number) : void;
	getParent() : AstNode;
	setParent(arg1 : AstNode) : void;
	addChild(arg1 : AstNode) : void;
	getAstRoot() : AstRoot;
	toSource(arg1 : number) : string;
	toSource() : string;
	makeIndent(arg1 : number) : string;
	shortName() : string;
	static operatorToString(arg1 : number) : string;
	visit(arg1 : NodeVisitor) : void;
	assertNotNull(arg1 : Object) : void;
	printList<T extends AstNode>(arg1 : List<T>, arg2 : StringBuilder) : void;
	static codeBug() : RuntimeException;
	getEnclosingFunction() : FunctionNode;
	getEnclosingScope() : Scope;
	depth() : number;
	debugPrint() : string;
}


declare interface AstNode extends Node, Comparable<AstNode> {}

declare module AstNode {
	class DebugPrintVisitor {
		constructor(arg1 : StringBuilder);
		makeIndent(arg1 : number) : string;
	}


	interface DebugPrintVisitor extends NodeVisitor {}	class PositionComparator {
		constructor();
	}


	interface PositionComparator extends Comparator<AstNode>, Serializable {}}

export = AstNode
