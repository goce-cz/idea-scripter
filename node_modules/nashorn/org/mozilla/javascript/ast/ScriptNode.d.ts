import List = require('nashorn/java/util/List');
import FunctionNode = require('nashorn/org/mozilla/javascript/ast/FunctionNode');
import Symbol = require('nashorn/org/mozilla/javascript/ast/Symbol');
import Object = require('nashorn/java/lang/Object');
import RegExpLiteral = require('nashorn/org/mozilla/javascript/ast/RegExpLiteral');
import Node = require('nashorn/org/mozilla/javascript/Node');
import Scope = require('nashorn/org/mozilla/javascript/ast/Scope');

declare class ScriptNode {
	sourceName : string;
	encodedSourceStart : number;
	encodedSourceEnd : number;
	encodedSource : string;
	baseLineno : number;
	endLineno : number;
	functionCount : number;
	functions : List<FunctionNode>;
	regexpCount : number;
	paramCount : number;
	paramAndVarCount : number;
	paramAndVarNames : string[];
	paramAndVarConst : boolean[];
	symbols : List<Symbol>;
	compilerData : Object;
	nextTempName : string;
	constructor();
	constructor(arg1 : number);
	getSourceName() : string;
	setSourceName(arg1 : string) : void;
	getEncodedSourceStart() : number;
	setEncodedSourceStart(arg1 : number) : void;
	getEncodedSourceEnd() : number;
	setEncodedSourceEnd(arg1 : number) : void;
	setEncodedSourceBounds(arg1 : number, arg2 : number) : void;
	setEncodedSource(arg1 : string) : void;
	getEncodedSource() : string;
	getBaseLineno() : number;
	setBaseLineno(arg1 : number) : void;
	getEndLineno() : number;
	setEndLineno(arg1 : number) : void;
	getFunctionCount() : number;
	getFunctionNode(arg1 : number) : FunctionNode;
	getFunctions() : List<FunctionNode>;
	addFunction(arg1 : FunctionNode) : number;
	getRegexpCount() : number;
	getRegexpString(arg1 : number) : string;
	getRegexpFlags(arg1 : number) : string;
	addRegExp(arg1 : RegExpLiteral) : void;
	getIndexForNameNode(arg1 : Node) : number;
	getParamOrVarName(arg1 : number) : string;
	getParamCount() : number;
	getParamAndVarCount() : number;
	getParamAndVarNames() : string[];
	getParamAndVarConst() : boolean[];
	addSymbol(arg1 : Symbol) : void;
	getSymbols() : List<Symbol>;
	setSymbols(arg1 : List<Symbol>) : void;
	flattenSymbolTable(arg1 : boolean) : void;
	getCompilerData() : Object;
	setCompilerData(arg1 : Object) : void;
	getNextTempName() : string;
}


declare interface ScriptNode extends Scope {}
export = ScriptNode
