import Name = require('nashorn/org/mozilla/javascript/ast/Name');
import List = require('nashorn/java/util/List');
import AstNode = require('nashorn/org/mozilla/javascript/ast/AstNode');
import Node = require('nashorn/org/mozilla/javascript/Node');
import Map = require('nashorn/java/util/Map');
import ScriptNode = require('nashorn/org/mozilla/javascript/ast/ScriptNode');
import Enum = require('nashorn/java/lang/Enum');

declare class FunctionNode {
	static FUNCTION_STATEMENT : number;
	static FUNCTION_EXPRESSION : number;
	static FUNCTION_EXPRESSION_STATEMENT : number;
	functionName : Name;
	name : string;
	params : List<AstNode>;
	body : AstNode;
	lp : number;
	rp : number;
	expressionClosure : boolean;
	generator : boolean;
	resumptionPoints : List<Node>;
	liveLocals : Map<Node, number[]>;
	functionType : number;
	getterOrSetter : boolean;
	getter : boolean;
	setter : boolean;
	memberExprNode : AstNode;
	constructor();
	constructor(arg1 : number);
	constructor(arg1 : number, arg2 : Name);
	getFunctionName() : Name;
	setFunctionName(arg1 : Name) : void;
	getName() : string;
	getParams() : List<AstNode>;
	setParams(arg1 : List<AstNode>) : void;
	addParam(arg1 : AstNode) : void;
	isParam(arg1 : AstNode) : boolean;
	getBody() : AstNode;
	setBody(arg1 : AstNode) : void;
	getLp() : number;
	setLp(arg1 : number) : void;
	getRp() : number;
	setRp(arg1 : number) : void;
	setParens(arg1 : number, arg2 : number) : void;
	isExpressionClosure() : boolean;
	setIsExpressionClosure(arg1 : boolean) : void;
	requiresActivation() : boolean;
	setRequiresActivation() : void;
	isGenerator() : boolean;
	setIsGenerator() : void;
	addResumptionPoint(arg1 : Node) : void;
	getResumptionPoints() : List<Node>;
	getLiveLocals() : Map<Node, number[]>;
	addLiveLocals(arg1 : Node, arg2 : number[]) : void;
	getFunctionType() : number;
	setFunctionType(arg1 : number) : void;
	isGetterOrSetter() : boolean;
	isGetter() : boolean;
	isSetter() : boolean;
	setFunctionIsGetter() : void;
	setFunctionIsSetter() : void;
	setMemberExprNode(arg1 : AstNode) : void;
	getMemberExprNode() : AstNode;
}


declare interface FunctionNode extends ScriptNode {}

declare module FunctionNode {
	class Form {
		static FUNCTION : FunctionNode.Form;
		static GETTER : FunctionNode.Form;
		static SETTER : FunctionNode.Form;
	}


	interface Form extends Enum<FunctionNode.Form> {}}

export = FunctionNode
