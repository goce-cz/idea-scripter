import List = require('nashorn/java/util/List');
import ScriptNode = require('nashorn/org/mozilla/javascript/ast/ScriptNode');
import Map = require('nashorn/java/util/Map');
import Symbol = require('nashorn/org/mozilla/javascript/ast/Symbol');
import AstNode = require('nashorn/org/mozilla/javascript/ast/AstNode');
import Jump = require('nashorn/org/mozilla/javascript/ast/Jump');

declare class Scope {
	parentScope : Scope;
	childScopes : List<Scope>;
	top : ScriptNode;
	symbolTable : Map<string, Symbol>;
	statements : List<AstNode>;
	constructor();
	constructor(arg1 : number);
	constructor(arg1 : number, arg2 : number);
	getParentScope() : Scope;
	setParentScope(arg1 : Scope) : void;
	clearParentScope() : void;
	getChildScopes() : List<Scope>;
	addChildScope(arg1 : Scope) : void;
	replaceWith(arg1 : Scope) : void;
	getTop() : ScriptNode;
	setTop(arg1 : ScriptNode) : void;
	static splitScope(arg1 : Scope) : Scope;
	static joinScopes(arg1 : Scope, arg2 : Scope) : void;
	getDefiningScope(arg1 : string) : Scope;
	getSymbol(arg1 : string) : Symbol;
	putSymbol(arg1 : Symbol) : void;
	getSymbolTable() : Map<string, Symbol>;
	setSymbolTable(arg1 : Map<string, Symbol>) : void;
	ensureSymbolTable() : Map<string, Symbol>;
	getStatements() : List<AstNode>;
}


declare interface Scope extends Jump {}
export = Scope
